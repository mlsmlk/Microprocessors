
lab4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f78  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000844  08003100  08003100  00013100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003944  08003944  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003944  08003944  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003944  08003944  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003944  08003944  00013944  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003948  08003948  00013948  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800394c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  2000000c  08003958  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000010c  08003958  0002010c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010c54  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002018  00000000  00000000  00030c90  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d38  00000000  00000000  00032ca8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c28  00000000  00000000  000339e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000265b2  00000000  00000000  00034608  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ae55  00000000  00000000  0005abba  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000efa0c  00000000  00000000  00065a0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000f0  00000000  00000000  0015541b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003608  00000000  00000000  0015550c  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    000000fa  00000000  00000000  00158b14  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080030e8 	.word	0x080030e8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080030e8 	.word	0x080030e8

080001c8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80001ce:	2300      	movs	r3, #0
 80001d0:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001d2:	2003      	movs	r0, #3
 80001d4:	f000 f95e 	bl	8000494 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80001d8:	2000      	movs	r0, #0
 80001da:	f000 f80d 	bl	80001f8 <HAL_InitTick>
 80001de:	4603      	mov	r3, r0
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d002      	beq.n	80001ea <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80001e4:	2301      	movs	r3, #1
 80001e6:	71fb      	strb	r3, [r7, #7]
 80001e8:	e001      	b.n	80001ee <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80001ea:	f002 fdad 	bl	8002d48 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80001ee:	79fb      	ldrb	r3, [r7, #7]
}
 80001f0:	4618      	mov	r0, r3
 80001f2:	3708      	adds	r7, #8
 80001f4:	46bd      	mov	sp, r7
 80001f6:	bd80      	pop	{r7, pc}

080001f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b084      	sub	sp, #16
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000200:	2300      	movs	r3, #0
 8000202:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000204:	4b17      	ldr	r3, [pc, #92]	; (8000264 <HAL_InitTick+0x6c>)
 8000206:	781b      	ldrb	r3, [r3, #0]
 8000208:	2b00      	cmp	r3, #0
 800020a:	d023      	beq.n	8000254 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800020c:	4b16      	ldr	r3, [pc, #88]	; (8000268 <HAL_InitTick+0x70>)
 800020e:	681a      	ldr	r2, [r3, #0]
 8000210:	4b14      	ldr	r3, [pc, #80]	; (8000264 <HAL_InitTick+0x6c>)
 8000212:	781b      	ldrb	r3, [r3, #0]
 8000214:	4619      	mov	r1, r3
 8000216:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800021a:	fbb3 f3f1 	udiv	r3, r3, r1
 800021e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000222:	4618      	mov	r0, r3
 8000224:	f000 f96b 	bl	80004fe <HAL_SYSTICK_Config>
 8000228:	4603      	mov	r3, r0
 800022a:	2b00      	cmp	r3, #0
 800022c:	d10f      	bne.n	800024e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	2b0f      	cmp	r3, #15
 8000232:	d809      	bhi.n	8000248 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000234:	2200      	movs	r2, #0
 8000236:	6879      	ldr	r1, [r7, #4]
 8000238:	f04f 30ff 	mov.w	r0, #4294967295
 800023c:	f000 f935 	bl	80004aa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000240:	4a0a      	ldr	r2, [pc, #40]	; (800026c <HAL_InitTick+0x74>)
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	6013      	str	r3, [r2, #0]
 8000246:	e007      	b.n	8000258 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000248:	2301      	movs	r3, #1
 800024a:	73fb      	strb	r3, [r7, #15]
 800024c:	e004      	b.n	8000258 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800024e:	2301      	movs	r3, #1
 8000250:	73fb      	strb	r3, [r7, #15]
 8000252:	e001      	b.n	8000258 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000254:	2301      	movs	r3, #1
 8000256:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000258:	7bfb      	ldrb	r3, [r7, #15]
}
 800025a:	4618      	mov	r0, r3
 800025c:	3710      	adds	r7, #16
 800025e:	46bd      	mov	sp, r7
 8000260:	bd80      	pop	{r7, pc}
 8000262:	bf00      	nop
 8000264:	20000004 	.word	0x20000004
 8000268:	20000008 	.word	0x20000008
 800026c:	20000000 	.word	0x20000000

08000270 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000270:	b480      	push	{r7}
 8000272:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000274:	4b06      	ldr	r3, [pc, #24]	; (8000290 <HAL_IncTick+0x20>)
 8000276:	781b      	ldrb	r3, [r3, #0]
 8000278:	461a      	mov	r2, r3
 800027a:	4b06      	ldr	r3, [pc, #24]	; (8000294 <HAL_IncTick+0x24>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	4413      	add	r3, r2
 8000280:	4a04      	ldr	r2, [pc, #16]	; (8000294 <HAL_IncTick+0x24>)
 8000282:	6013      	str	r3, [r2, #0]
}
 8000284:	bf00      	nop
 8000286:	46bd      	mov	sp, r7
 8000288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop
 8000290:	20000004 	.word	0x20000004
 8000294:	20000028 	.word	0x20000028

08000298 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000298:	b480      	push	{r7}
 800029a:	af00      	add	r7, sp, #0
  return uwTick;
 800029c:	4b03      	ldr	r3, [pc, #12]	; (80002ac <HAL_GetTick+0x14>)
 800029e:	681b      	ldr	r3, [r3, #0]
}
 80002a0:	4618      	mov	r0, r3
 80002a2:	46bd      	mov	sp, r7
 80002a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a8:	4770      	bx	lr
 80002aa:	bf00      	nop
 80002ac:	20000028 	.word	0x20000028

080002b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b084      	sub	sp, #16
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80002b8:	f7ff ffee 	bl	8000298 <HAL_GetTick>
 80002bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80002c2:	68fb      	ldr	r3, [r7, #12]
 80002c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80002c8:	d005      	beq.n	80002d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80002ca:	4b09      	ldr	r3, [pc, #36]	; (80002f0 <HAL_Delay+0x40>)
 80002cc:	781b      	ldrb	r3, [r3, #0]
 80002ce:	461a      	mov	r2, r3
 80002d0:	68fb      	ldr	r3, [r7, #12]
 80002d2:	4413      	add	r3, r2
 80002d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80002d6:	bf00      	nop
 80002d8:	f7ff ffde 	bl	8000298 <HAL_GetTick>
 80002dc:	4602      	mov	r2, r0
 80002de:	68bb      	ldr	r3, [r7, #8]
 80002e0:	1ad3      	subs	r3, r2, r3
 80002e2:	68fa      	ldr	r2, [r7, #12]
 80002e4:	429a      	cmp	r2, r3
 80002e6:	d8f7      	bhi.n	80002d8 <HAL_Delay+0x28>
  {
  }
}
 80002e8:	bf00      	nop
 80002ea:	3710      	adds	r7, #16
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	20000004 	.word	0x20000004

080002f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80002f4:	b480      	push	{r7}
 80002f6:	b085      	sub	sp, #20
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	f003 0307 	and.w	r3, r3, #7
 8000302:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000304:	4b0c      	ldr	r3, [pc, #48]	; (8000338 <__NVIC_SetPriorityGrouping+0x44>)
 8000306:	68db      	ldr	r3, [r3, #12]
 8000308:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800030a:	68ba      	ldr	r2, [r7, #8]
 800030c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000310:	4013      	ands	r3, r2
 8000312:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000314:	68fb      	ldr	r3, [r7, #12]
 8000316:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000318:	68bb      	ldr	r3, [r7, #8]
 800031a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800031c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000320:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000324:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000326:	4a04      	ldr	r2, [pc, #16]	; (8000338 <__NVIC_SetPriorityGrouping+0x44>)
 8000328:	68bb      	ldr	r3, [r7, #8]
 800032a:	60d3      	str	r3, [r2, #12]
}
 800032c:	bf00      	nop
 800032e:	3714      	adds	r7, #20
 8000330:	46bd      	mov	sp, r7
 8000332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000336:	4770      	bx	lr
 8000338:	e000ed00 	.word	0xe000ed00

0800033c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800033c:	b480      	push	{r7}
 800033e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000340:	4b04      	ldr	r3, [pc, #16]	; (8000354 <__NVIC_GetPriorityGrouping+0x18>)
 8000342:	68db      	ldr	r3, [r3, #12]
 8000344:	0a1b      	lsrs	r3, r3, #8
 8000346:	f003 0307 	and.w	r3, r3, #7
}
 800034a:	4618      	mov	r0, r3
 800034c:	46bd      	mov	sp, r7
 800034e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000352:	4770      	bx	lr
 8000354:	e000ed00 	.word	0xe000ed00

08000358 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000358:	b480      	push	{r7}
 800035a:	b083      	sub	sp, #12
 800035c:	af00      	add	r7, sp, #0
 800035e:	4603      	mov	r3, r0
 8000360:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000366:	2b00      	cmp	r3, #0
 8000368:	db0b      	blt.n	8000382 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800036a:	79fb      	ldrb	r3, [r7, #7]
 800036c:	f003 021f 	and.w	r2, r3, #31
 8000370:	4907      	ldr	r1, [pc, #28]	; (8000390 <__NVIC_EnableIRQ+0x38>)
 8000372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000376:	095b      	lsrs	r3, r3, #5
 8000378:	2001      	movs	r0, #1
 800037a:	fa00 f202 	lsl.w	r2, r0, r2
 800037e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000382:	bf00      	nop
 8000384:	370c      	adds	r7, #12
 8000386:	46bd      	mov	sp, r7
 8000388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop
 8000390:	e000e100 	.word	0xe000e100

08000394 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000394:	b480      	push	{r7}
 8000396:	b083      	sub	sp, #12
 8000398:	af00      	add	r7, sp, #0
 800039a:	4603      	mov	r3, r0
 800039c:	6039      	str	r1, [r7, #0]
 800039e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80003a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	db0a      	blt.n	80003be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003a8:	683b      	ldr	r3, [r7, #0]
 80003aa:	b2da      	uxtb	r2, r3
 80003ac:	490c      	ldr	r1, [pc, #48]	; (80003e0 <__NVIC_SetPriority+0x4c>)
 80003ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003b2:	0112      	lsls	r2, r2, #4
 80003b4:	b2d2      	uxtb	r2, r2
 80003b6:	440b      	add	r3, r1
 80003b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80003bc:	e00a      	b.n	80003d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003be:	683b      	ldr	r3, [r7, #0]
 80003c0:	b2da      	uxtb	r2, r3
 80003c2:	4908      	ldr	r1, [pc, #32]	; (80003e4 <__NVIC_SetPriority+0x50>)
 80003c4:	79fb      	ldrb	r3, [r7, #7]
 80003c6:	f003 030f 	and.w	r3, r3, #15
 80003ca:	3b04      	subs	r3, #4
 80003cc:	0112      	lsls	r2, r2, #4
 80003ce:	b2d2      	uxtb	r2, r2
 80003d0:	440b      	add	r3, r1
 80003d2:	761a      	strb	r2, [r3, #24]
}
 80003d4:	bf00      	nop
 80003d6:	370c      	adds	r7, #12
 80003d8:	46bd      	mov	sp, r7
 80003da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003de:	4770      	bx	lr
 80003e0:	e000e100 	.word	0xe000e100
 80003e4:	e000ed00 	.word	0xe000ed00

080003e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80003e8:	b480      	push	{r7}
 80003ea:	b089      	sub	sp, #36	; 0x24
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	60f8      	str	r0, [r7, #12]
 80003f0:	60b9      	str	r1, [r7, #8]
 80003f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80003f4:	68fb      	ldr	r3, [r7, #12]
 80003f6:	f003 0307 	and.w	r3, r3, #7
 80003fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80003fc:	69fb      	ldr	r3, [r7, #28]
 80003fe:	f1c3 0307 	rsb	r3, r3, #7
 8000402:	2b04      	cmp	r3, #4
 8000404:	bf28      	it	cs
 8000406:	2304      	movcs	r3, #4
 8000408:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800040a:	69fb      	ldr	r3, [r7, #28]
 800040c:	3304      	adds	r3, #4
 800040e:	2b06      	cmp	r3, #6
 8000410:	d902      	bls.n	8000418 <NVIC_EncodePriority+0x30>
 8000412:	69fb      	ldr	r3, [r7, #28]
 8000414:	3b03      	subs	r3, #3
 8000416:	e000      	b.n	800041a <NVIC_EncodePriority+0x32>
 8000418:	2300      	movs	r3, #0
 800041a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800041c:	f04f 32ff 	mov.w	r2, #4294967295
 8000420:	69bb      	ldr	r3, [r7, #24]
 8000422:	fa02 f303 	lsl.w	r3, r2, r3
 8000426:	43da      	mvns	r2, r3
 8000428:	68bb      	ldr	r3, [r7, #8]
 800042a:	401a      	ands	r2, r3
 800042c:	697b      	ldr	r3, [r7, #20]
 800042e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000430:	f04f 31ff 	mov.w	r1, #4294967295
 8000434:	697b      	ldr	r3, [r7, #20]
 8000436:	fa01 f303 	lsl.w	r3, r1, r3
 800043a:	43d9      	mvns	r1, r3
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000440:	4313      	orrs	r3, r2
         );
}
 8000442:	4618      	mov	r0, r3
 8000444:	3724      	adds	r7, #36	; 0x24
 8000446:	46bd      	mov	sp, r7
 8000448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044c:	4770      	bx	lr
	...

08000450 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b082      	sub	sp, #8
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	3b01      	subs	r3, #1
 800045c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000460:	d301      	bcc.n	8000466 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000462:	2301      	movs	r3, #1
 8000464:	e00f      	b.n	8000486 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000466:	4a0a      	ldr	r2, [pc, #40]	; (8000490 <SysTick_Config+0x40>)
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	3b01      	subs	r3, #1
 800046c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800046e:	210f      	movs	r1, #15
 8000470:	f04f 30ff 	mov.w	r0, #4294967295
 8000474:	f7ff ff8e 	bl	8000394 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000478:	4b05      	ldr	r3, [pc, #20]	; (8000490 <SysTick_Config+0x40>)
 800047a:	2200      	movs	r2, #0
 800047c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800047e:	4b04      	ldr	r3, [pc, #16]	; (8000490 <SysTick_Config+0x40>)
 8000480:	2207      	movs	r2, #7
 8000482:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000484:	2300      	movs	r3, #0
}
 8000486:	4618      	mov	r0, r3
 8000488:	3708      	adds	r7, #8
 800048a:	46bd      	mov	sp, r7
 800048c:	bd80      	pop	{r7, pc}
 800048e:	bf00      	nop
 8000490:	e000e010 	.word	0xe000e010

08000494 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b082      	sub	sp, #8
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800049c:	6878      	ldr	r0, [r7, #4]
 800049e:	f7ff ff29 	bl	80002f4 <__NVIC_SetPriorityGrouping>
}
 80004a2:	bf00      	nop
 80004a4:	3708      	adds	r7, #8
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}

080004aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80004aa:	b580      	push	{r7, lr}
 80004ac:	b086      	sub	sp, #24
 80004ae:	af00      	add	r7, sp, #0
 80004b0:	4603      	mov	r3, r0
 80004b2:	60b9      	str	r1, [r7, #8]
 80004b4:	607a      	str	r2, [r7, #4]
 80004b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80004b8:	2300      	movs	r3, #0
 80004ba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80004bc:	f7ff ff3e 	bl	800033c <__NVIC_GetPriorityGrouping>
 80004c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80004c2:	687a      	ldr	r2, [r7, #4]
 80004c4:	68b9      	ldr	r1, [r7, #8]
 80004c6:	6978      	ldr	r0, [r7, #20]
 80004c8:	f7ff ff8e 	bl	80003e8 <NVIC_EncodePriority>
 80004cc:	4602      	mov	r2, r0
 80004ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80004d2:	4611      	mov	r1, r2
 80004d4:	4618      	mov	r0, r3
 80004d6:	f7ff ff5d 	bl	8000394 <__NVIC_SetPriority>
}
 80004da:	bf00      	nop
 80004dc:	3718      	adds	r7, #24
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}

080004e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80004e2:	b580      	push	{r7, lr}
 80004e4:	b082      	sub	sp, #8
 80004e6:	af00      	add	r7, sp, #0
 80004e8:	4603      	mov	r3, r0
 80004ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80004ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004f0:	4618      	mov	r0, r3
 80004f2:	f7ff ff31 	bl	8000358 <__NVIC_EnableIRQ>
}
 80004f6:	bf00      	nop
 80004f8:	3708      	adds	r7, #8
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}

080004fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80004fe:	b580      	push	{r7, lr}
 8000500:	b082      	sub	sp, #8
 8000502:	af00      	add	r7, sp, #0
 8000504:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000506:	6878      	ldr	r0, [r7, #4]
 8000508:	f7ff ffa2 	bl	8000450 <SysTick_Config>
 800050c:	4603      	mov	r3, r0
}
 800050e:	4618      	mov	r0, r3
 8000510:	3708      	adds	r7, #8
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}

08000516 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8000516:	b580      	push	{r7, lr}
 8000518:	b082      	sub	sp, #8
 800051a:	af00      	add	r7, sp, #0
 800051c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	2b00      	cmp	r3, #0
 8000522:	d101      	bne.n	8000528 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8000524:	2301      	movs	r3, #1
 8000526:	e014      	b.n	8000552 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	791b      	ldrb	r3, [r3, #4]
 800052c:	b2db      	uxtb	r3, r3
 800052e:	2b00      	cmp	r3, #0
 8000530:	d105      	bne.n	800053e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	2200      	movs	r2, #0
 8000536:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000538:	6878      	ldr	r0, [r7, #4]
 800053a:	f002 fc29 	bl	8002d90 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	2202      	movs	r2, #2
 8000542:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	2200      	movs	r2, #0
 8000548:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	2201      	movs	r2, #1
 800054e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8000550:	2300      	movs	r3, #0
}
 8000552:	4618      	mov	r0, r3
 8000554:	3708      	adds	r7, #8
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
	...

0800055c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b086      	sub	sp, #24
 8000560:	af00      	add	r7, sp, #0
 8000562:	60f8      	str	r0, [r7, #12]
 8000564:	60b9      	str	r1, [r7, #8]
 8000566:	607a      	str	r2, [r7, #4]
 8000568:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 800056a:	2300      	movs	r3, #0
 800056c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800056e:	68fb      	ldr	r3, [r7, #12]
 8000570:	795b      	ldrb	r3, [r3, #5]
 8000572:	2b01      	cmp	r3, #1
 8000574:	d101      	bne.n	800057a <HAL_DAC_Start_DMA+0x1e>
 8000576:	2302      	movs	r3, #2
 8000578:	e09e      	b.n	80006b8 <HAL_DAC_Start_DMA+0x15c>
 800057a:	68fb      	ldr	r3, [r7, #12]
 800057c:	2201      	movs	r2, #1
 800057e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	2202      	movs	r2, #2
 8000584:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8000586:	68bb      	ldr	r3, [r7, #8]
 8000588:	2b00      	cmp	r3, #0
 800058a:	d12a      	bne.n	80005e2 <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	689b      	ldr	r3, [r3, #8]
 8000590:	4a4b      	ldr	r2, [pc, #300]	; (80006c0 <HAL_DAC_Start_DMA+0x164>)
 8000592:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	689b      	ldr	r3, [r3, #8]
 8000598:	4a4a      	ldr	r2, [pc, #296]	; (80006c4 <HAL_DAC_Start_DMA+0x168>)
 800059a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	689b      	ldr	r3, [r3, #8]
 80005a0:	4a49      	ldr	r2, [pc, #292]	; (80006c8 <HAL_DAC_Start_DMA+0x16c>)
 80005a2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	681a      	ldr	r2, [r3, #0]
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80005b2:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80005b4:	6a3b      	ldr	r3, [r7, #32]
 80005b6:	2b04      	cmp	r3, #4
 80005b8:	d009      	beq.n	80005ce <HAL_DAC_Start_DMA+0x72>
 80005ba:	2b08      	cmp	r3, #8
 80005bc:	d00c      	beq.n	80005d8 <HAL_DAC_Start_DMA+0x7c>
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d000      	beq.n	80005c4 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 80005c2:	e039      	b.n	8000638 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	3308      	adds	r3, #8
 80005ca:	613b      	str	r3, [r7, #16]
        break;
 80005cc:	e034      	b.n	8000638 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	330c      	adds	r3, #12
 80005d4:	613b      	str	r3, [r7, #16]
        break;
 80005d6:	e02f      	b.n	8000638 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	3310      	adds	r3, #16
 80005de:	613b      	str	r3, [r7, #16]
        break;
 80005e0:	e02a      	b.n	8000638 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	68db      	ldr	r3, [r3, #12]
 80005e6:	4a39      	ldr	r2, [pc, #228]	; (80006cc <HAL_DAC_Start_DMA+0x170>)
 80005e8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	68db      	ldr	r3, [r3, #12]
 80005ee:	4a38      	ldr	r2, [pc, #224]	; (80006d0 <HAL_DAC_Start_DMA+0x174>)
 80005f0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	68db      	ldr	r3, [r3, #12]
 80005f6:	4a37      	ldr	r2, [pc, #220]	; (80006d4 <HAL_DAC_Start_DMA+0x178>)
 80005f8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	681a      	ldr	r2, [r3, #0]
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000608:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 800060a:	6a3b      	ldr	r3, [r7, #32]
 800060c:	2b04      	cmp	r3, #4
 800060e:	d009      	beq.n	8000624 <HAL_DAC_Start_DMA+0xc8>
 8000610:	2b08      	cmp	r3, #8
 8000612:	d00c      	beq.n	800062e <HAL_DAC_Start_DMA+0xd2>
 8000614:	2b00      	cmp	r3, #0
 8000616:	d000      	beq.n	800061a <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8000618:	e00e      	b.n	8000638 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	3314      	adds	r3, #20
 8000620:	613b      	str	r3, [r7, #16]
        break;
 8000622:	e009      	b.n	8000638 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	3318      	adds	r3, #24
 800062a:	613b      	str	r3, [r7, #16]
        break;
 800062c:	e004      	b.n	8000638 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	331c      	adds	r3, #28
 8000634:	613b      	str	r3, [r7, #16]
        break;
 8000636:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8000638:	68bb      	ldr	r3, [r7, #8]
 800063a:	2b00      	cmp	r3, #0
 800063c:	d111      	bne.n	8000662 <HAL_DAC_Start_DMA+0x106>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	681a      	ldr	r2, [r3, #0]
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800064c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	6898      	ldr	r0, [r3, #8]
 8000652:	6879      	ldr	r1, [r7, #4]
 8000654:	683b      	ldr	r3, [r7, #0]
 8000656:	693a      	ldr	r2, [r7, #16]
 8000658:	f000 fafe 	bl	8000c58 <HAL_DMA_Start_IT>
 800065c:	4603      	mov	r3, r0
 800065e:	75fb      	strb	r3, [r7, #23]
 8000660:	e010      	b.n	8000684 <HAL_DAC_Start_DMA+0x128>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8000662:	68fb      	ldr	r3, [r7, #12]
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	681a      	ldr	r2, [r3, #0]
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8000670:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	68d8      	ldr	r0, [r3, #12]
 8000676:	6879      	ldr	r1, [r7, #4]
 8000678:	683b      	ldr	r3, [r7, #0]
 800067a:	693a      	ldr	r2, [r7, #16]
 800067c:	f000 faec 	bl	8000c58 <HAL_DMA_Start_IT>
 8000680:	4603      	mov	r3, r0
 8000682:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	2200      	movs	r2, #0
 8000688:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 800068a:	7dfb      	ldrb	r3, [r7, #23]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d10c      	bne.n	80006aa <HAL_DAC_Start_DMA+0x14e>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	6819      	ldr	r1, [r3, #0]
 8000696:	68bb      	ldr	r3, [r7, #8]
 8000698:	f003 0310 	and.w	r3, r3, #16
 800069c:	2201      	movs	r2, #1
 800069e:	409a      	lsls	r2, r3
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	430a      	orrs	r2, r1
 80006a6:	601a      	str	r2, [r3, #0]
 80006a8:	e005      	b.n	80006b6 <HAL_DAC_Start_DMA+0x15a>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	691b      	ldr	r3, [r3, #16]
 80006ae:	f043 0204 	orr.w	r2, r3, #4
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80006b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80006b8:	4618      	mov	r0, r3
 80006ba:	3718      	adds	r7, #24
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	080009d3 	.word	0x080009d3
 80006c4:	080009f5 	.word	0x080009f5
 80006c8:	08000a11 	.word	0x08000a11
 80006cc:	08000a7b 	.word	0x08000a7b
 80006d0:	08000a9d 	.word	0x08000a9d
 80006d4:	08000ab9 	.word	0x08000ab9

080006d8 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
 80006e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	6819      	ldr	r1, [r3, #0]
 80006e8:	683b      	ldr	r3, [r7, #0]
 80006ea:	f003 0310 	and.w	r3, r3, #16
 80006ee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80006f2:	fa02 f303 	lsl.w	r3, r2, r3
 80006f6:	43da      	mvns	r2, r3
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	400a      	ands	r2, r1
 80006fe:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	6819      	ldr	r1, [r3, #0]
 8000706:	683b      	ldr	r3, [r7, #0]
 8000708:	f003 0310 	and.w	r3, r3, #16
 800070c:	2201      	movs	r2, #1
 800070e:	fa02 f303 	lsl.w	r3, r2, r3
 8000712:	43da      	mvns	r2, r3
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	400a      	ands	r2, r1
 800071a:	601a      	str	r2, [r3, #0]
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	2b00      	cmp	r3, #0
 8000720:	d10d      	bne.n	800073e <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	689b      	ldr	r3, [r3, #8]
 8000726:	4618      	mov	r0, r3
 8000728:	f000 faf6 	bl	8000d18 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	681a      	ldr	r2, [r3, #0]
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	e00c      	b.n	8000758 <HAL_DAC_Stop_DMA+0x80>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	68db      	ldr	r3, [r3, #12]
 8000742:	4618      	mov	r0, r3
 8000744:	f000 fae8 	bl	8000d18 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	681a      	ldr	r2, [r3, #0]
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8000756:	601a      	str	r2, [r3, #0]
  /* Disable the DAC DMA underrun interrupt */
  __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
#endif /* STM32L451xx STM32L452xx STM32L462xx */

  /* Return function status */
  return HAL_OK;
 8000758:	2300      	movs	r3, #0
}
 800075a:	4618      	mov	r0, r3
 800075c:	3708      	adds	r7, #8
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}

08000762 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8000762:	b480      	push	{r7}
 8000764:	b083      	sub	sp, #12
 8000766:	af00      	add	r7, sp, #0
 8000768:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 800076a:	bf00      	nop
 800076c:	370c      	adds	r7, #12
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr

08000776 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8000776:	b480      	push	{r7}
 8000778:	b083      	sub	sp, #12
 800077a:	af00      	add	r7, sp, #0
 800077c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800077e:	bf00      	nop
 8000780:	370c      	adds	r7, #12
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr

0800078a <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800078a:	b480      	push	{r7}
 800078c:	b083      	sub	sp, #12
 800078e:	af00      	add	r7, sp, #0
 8000790:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8000792:	bf00      	nop
 8000794:	370c      	adds	r7, #12
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr

0800079e <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800079e:	b580      	push	{r7, lr}
 80007a0:	b088      	sub	sp, #32
 80007a2:	af00      	add	r7, sp, #0
 80007a4:	60f8      	str	r0, [r7, #12]
 80007a6:	60b9      	str	r1, [r7, #8]
 80007a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 80007aa:	2300      	movs	r3, #0
 80007ac:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	795b      	ldrb	r3, [r3, #5]
 80007b2:	2b01      	cmp	r3, #1
 80007b4:	d101      	bne.n	80007ba <HAL_DAC_ConfigChannel+0x1c>
 80007b6:	2302      	movs	r3, #2
 80007b8:	e107      	b.n	80009ca <HAL_DAC_ConfigChannel+0x22c>
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	2201      	movs	r2, #1
 80007be:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	2202      	movs	r2, #2
 80007c4:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80007c6:	68bb      	ldr	r3, [r7, #8]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	2b04      	cmp	r3, #4
 80007cc:	d174      	bne.n	80008b8 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80007ce:	f7ff fd63 	bl	8000298 <HAL_GetTick>
 80007d2:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d134      	bne.n	8000844 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80007da:	e011      	b.n	8000800 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80007dc:	f7ff fd5c 	bl	8000298 <HAL_GetTick>
 80007e0:	4602      	mov	r2, r0
 80007e2:	69fb      	ldr	r3, [r7, #28]
 80007e4:	1ad3      	subs	r3, r2, r3
 80007e6:	2b01      	cmp	r3, #1
 80007e8:	d90a      	bls.n	8000800 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	691b      	ldr	r3, [r3, #16]
 80007ee:	f043 0208 	orr.w	r2, r3, #8
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	2203      	movs	r2, #3
 80007fa:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80007fc:	2303      	movs	r3, #3
 80007fe:	e0e4      	b.n	80009ca <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000806:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800080a:	2b00      	cmp	r3, #0
 800080c:	d1e6      	bne.n	80007dc <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 800080e:	2001      	movs	r0, #1
 8000810:	f7ff fd4e 	bl	80002b0 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	68ba      	ldr	r2, [r7, #8]
 800081a:	6992      	ldr	r2, [r2, #24]
 800081c:	641a      	str	r2, [r3, #64]	; 0x40
 800081e:	e01e      	b.n	800085e <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8000820:	f7ff fd3a 	bl	8000298 <HAL_GetTick>
 8000824:	4602      	mov	r2, r0
 8000826:	69fb      	ldr	r3, [r7, #28]
 8000828:	1ad3      	subs	r3, r2, r3
 800082a:	2b01      	cmp	r3, #1
 800082c:	d90a      	bls.n	8000844 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	691b      	ldr	r3, [r3, #16]
 8000832:	f043 0208 	orr.w	r2, r3, #8
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	2203      	movs	r2, #3
 800083e:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8000840:	2303      	movs	r3, #3
 8000842:	e0c2      	b.n	80009ca <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800084a:	2b00      	cmp	r3, #0
 800084c:	dbe8      	blt.n	8000820 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 800084e:	2001      	movs	r0, #1
 8000850:	f7ff fd2e 	bl	80002b0 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	68ba      	ldr	r2, [r7, #8]
 800085a:	6992      	ldr	r2, [r2, #24]
 800085c:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	f003 0310 	and.w	r3, r3, #16
 800086a:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800086e:	fa01 f303 	lsl.w	r3, r1, r3
 8000872:	43db      	mvns	r3, r3
 8000874:	ea02 0103 	and.w	r1, r2, r3
 8000878:	68bb      	ldr	r3, [r7, #8]
 800087a:	69da      	ldr	r2, [r3, #28]
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	f003 0310 	and.w	r3, r3, #16
 8000882:	409a      	lsls	r2, r3
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	430a      	orrs	r2, r1
 800088a:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	f003 0310 	and.w	r3, r3, #16
 8000898:	21ff      	movs	r1, #255	; 0xff
 800089a:	fa01 f303 	lsl.w	r3, r1, r3
 800089e:	43db      	mvns	r3, r3
 80008a0:	ea02 0103 	and.w	r1, r2, r3
 80008a4:	68bb      	ldr	r3, [r7, #8]
 80008a6:	6a1a      	ldr	r2, [r3, #32]
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	f003 0310 	and.w	r3, r3, #16
 80008ae:	409a      	lsls	r2, r3
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	430a      	orrs	r2, r1
 80008b6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80008b8:	68bb      	ldr	r3, [r7, #8]
 80008ba:	691b      	ldr	r3, [r3, #16]
 80008bc:	2b01      	cmp	r3, #1
 80008be:	d11d      	bne.n	80008fc <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80008c6:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	f003 0310 	and.w	r3, r3, #16
 80008ce:	221f      	movs	r2, #31
 80008d0:	fa02 f303 	lsl.w	r3, r2, r3
 80008d4:	43db      	mvns	r3, r3
 80008d6:	69ba      	ldr	r2, [r7, #24]
 80008d8:	4013      	ands	r3, r2
 80008da:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80008dc:	68bb      	ldr	r3, [r7, #8]
 80008de:	695b      	ldr	r3, [r3, #20]
 80008e0:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	f003 0310 	and.w	r3, r3, #16
 80008e8:	697a      	ldr	r2, [r7, #20]
 80008ea:	fa02 f303 	lsl.w	r3, r2, r3
 80008ee:	69ba      	ldr	r2, [r7, #24]
 80008f0:	4313      	orrs	r3, r2
 80008f2:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	69ba      	ldr	r2, [r7, #24]
 80008fa:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000902:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	f003 0310 	and.w	r3, r3, #16
 800090a:	2207      	movs	r2, #7
 800090c:	fa02 f303 	lsl.w	r3, r2, r3
 8000910:	43db      	mvns	r3, r3
 8000912:	69ba      	ldr	r2, [r7, #24]
 8000914:	4013      	ands	r3, r2
 8000916:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8000918:	68bb      	ldr	r3, [r7, #8]
 800091a:	681a      	ldr	r2, [r3, #0]
 800091c:	68bb      	ldr	r3, [r7, #8]
 800091e:	689b      	ldr	r3, [r3, #8]
 8000920:	431a      	orrs	r2, r3
 8000922:	68bb      	ldr	r3, [r7, #8]
 8000924:	68db      	ldr	r3, [r3, #12]
 8000926:	4313      	orrs	r3, r2
 8000928:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	f003 0310 	and.w	r3, r3, #16
 8000930:	697a      	ldr	r2, [r7, #20]
 8000932:	fa02 f303 	lsl.w	r3, r2, r3
 8000936:	69ba      	ldr	r2, [r7, #24]
 8000938:	4313      	orrs	r3, r2
 800093a:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	69ba      	ldr	r2, [r7, #24]
 8000942:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	6819      	ldr	r1, [r3, #0]
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	f003 0310 	and.w	r3, r3, #16
 8000950:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000954:	fa02 f303 	lsl.w	r3, r2, r3
 8000958:	43da      	mvns	r2, r3
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	400a      	ands	r2, r1
 8000960:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	f003 0310 	and.w	r3, r3, #16
 8000970:	f640 72fc 	movw	r2, #4092	; 0xffc
 8000974:	fa02 f303 	lsl.w	r3, r2, r3
 8000978:	43db      	mvns	r3, r3
 800097a:	69ba      	ldr	r2, [r7, #24]
 800097c:	4013      	ands	r3, r2
 800097e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8000980:	68bb      	ldr	r3, [r7, #8]
 8000982:	685b      	ldr	r3, [r3, #4]
 8000984:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	f003 0310 	and.w	r3, r3, #16
 800098c:	697a      	ldr	r2, [r7, #20]
 800098e:	fa02 f303 	lsl.w	r3, r2, r3
 8000992:	69ba      	ldr	r2, [r7, #24]
 8000994:	4313      	orrs	r3, r2
 8000996:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	69ba      	ldr	r2, [r7, #24]
 800099e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	6819      	ldr	r1, [r3, #0]
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	f003 0310 	and.w	r3, r3, #16
 80009ac:	22c0      	movs	r2, #192	; 0xc0
 80009ae:	fa02 f303 	lsl.w	r3, r2, r3
 80009b2:	43da      	mvns	r2, r3
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	400a      	ands	r2, r1
 80009ba:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	2201      	movs	r2, #1
 80009c0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	2200      	movs	r2, #0
 80009c6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80009c8:	2300      	movs	r3, #0
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	3720      	adds	r7, #32
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}

080009d2 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80009d2:	b580      	push	{r7, lr}
 80009d4:	b084      	sub	sp, #16
 80009d6:	af00      	add	r7, sp, #0
 80009d8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009de:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80009e0:	68f8      	ldr	r0, [r7, #12]
 80009e2:	f7ff febe 	bl	8000762 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	2201      	movs	r2, #1
 80009ea:	711a      	strb	r2, [r3, #4]
}
 80009ec:	bf00      	nop
 80009ee:	3710      	adds	r7, #16
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}

080009f4 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b084      	sub	sp, #16
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a00:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8000a02:	68f8      	ldr	r0, [r7, #12]
 8000a04:	f7ff feb7 	bl	8000776 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8000a08:	bf00      	nop
 8000a0a:	3710      	adds	r7, #16
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}

08000a10 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b084      	sub	sp, #16
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a1c:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	691b      	ldr	r3, [r3, #16]
 8000a22:	f043 0204 	orr.w	r2, r3, #4
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8000a2a:	68f8      	ldr	r0, [r7, #12]
 8000a2c:	f7ff fead 	bl	800078a <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	2201      	movs	r2, #1
 8000a34:	711a      	strb	r2, [r3, #4]
}
 8000a36:	bf00      	nop
 8000a38:	3710      	adds	r7, #16
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}

08000a3e <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8000a3e:	b480      	push	{r7}
 8000a40:	b083      	sub	sp, #12
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8000a46:	bf00      	nop
 8000a48:	370c      	adds	r7, #12
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr

08000a52 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8000a52:	b480      	push	{r7}
 8000a54:	b083      	sub	sp, #12
 8000a56:	af00      	add	r7, sp, #0
 8000a58:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8000a5a:	bf00      	nop
 8000a5c:	370c      	adds	r7, #12
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr

08000a66 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8000a66:	b480      	push	{r7}
 8000a68:	b083      	sub	sp, #12
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8000a6e:	bf00      	nop
 8000a70:	370c      	adds	r7, #12
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr

08000a7a <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8000a7a:	b580      	push	{r7, lr}
 8000a7c:	b084      	sub	sp, #16
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a86:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8000a88:	68f8      	ldr	r0, [r7, #12]
 8000a8a:	f7ff ffd8 	bl	8000a3e <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	2201      	movs	r2, #1
 8000a92:	711a      	strb	r2, [r3, #4]
}
 8000a94:	bf00      	nop
 8000a96:	3710      	adds	r7, #16
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}

08000a9c <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b084      	sub	sp, #16
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000aa8:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8000aaa:	68f8      	ldr	r0, [r7, #12]
 8000aac:	f7ff ffd1 	bl	8000a52 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8000ab0:	bf00      	nop
 8000ab2:	3710      	adds	r7, #16
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}

08000ab8 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ac4:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	691b      	ldr	r3, [r3, #16]
 8000aca:	f043 0204 	orr.w	r2, r3, #4
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8000ad2:	68f8      	ldr	r0, [r7, #12]
 8000ad4:	f7ff ffc7 	bl	8000a66 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	2201      	movs	r2, #1
 8000adc:	711a      	strb	r2, [r3, #4]
}
 8000ade:	bf00      	nop
 8000ae0:	3710      	adds	r7, #16
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
	...

08000ae8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b085      	sub	sp, #20
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d101      	bne.n	8000afa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000af6:	2301      	movs	r3, #1
 8000af8:	e098      	b.n	8000c2c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	461a      	mov	r2, r3
 8000b00:	4b4d      	ldr	r3, [pc, #308]	; (8000c38 <HAL_DMA_Init+0x150>)
 8000b02:	429a      	cmp	r2, r3
 8000b04:	d80f      	bhi.n	8000b26 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	461a      	mov	r2, r3
 8000b0c:	4b4b      	ldr	r3, [pc, #300]	; (8000c3c <HAL_DMA_Init+0x154>)
 8000b0e:	4413      	add	r3, r2
 8000b10:	4a4b      	ldr	r2, [pc, #300]	; (8000c40 <HAL_DMA_Init+0x158>)
 8000b12:	fba2 2303 	umull	r2, r3, r2, r3
 8000b16:	091b      	lsrs	r3, r3, #4
 8000b18:	009a      	lsls	r2, r3, #2
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	4a48      	ldr	r2, [pc, #288]	; (8000c44 <HAL_DMA_Init+0x15c>)
 8000b22:	641a      	str	r2, [r3, #64]	; 0x40
 8000b24:	e00e      	b.n	8000b44 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	461a      	mov	r2, r3
 8000b2c:	4b46      	ldr	r3, [pc, #280]	; (8000c48 <HAL_DMA_Init+0x160>)
 8000b2e:	4413      	add	r3, r2
 8000b30:	4a43      	ldr	r2, [pc, #268]	; (8000c40 <HAL_DMA_Init+0x158>)
 8000b32:	fba2 2303 	umull	r2, r3, r2, r3
 8000b36:	091b      	lsrs	r3, r3, #4
 8000b38:	009a      	lsls	r2, r3, #2
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	4a42      	ldr	r2, [pc, #264]	; (8000c4c <HAL_DMA_Init+0x164>)
 8000b42:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	2202      	movs	r2, #2
 8000b48:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000b5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000b5e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000b68:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	691b      	ldr	r3, [r3, #16]
 8000b6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b74:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	699b      	ldr	r3, [r3, #24]
 8000b7a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b80:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	6a1b      	ldr	r3, [r3, #32]
 8000b86:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000b88:	68fa      	ldr	r2, [r7, #12]
 8000b8a:	4313      	orrs	r3, r2
 8000b8c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	68fa      	ldr	r2, [r7, #12]
 8000b94:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	689b      	ldr	r3, [r3, #8]
 8000b9a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000b9e:	d039      	beq.n	8000c14 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba4:	4a27      	ldr	r2, [pc, #156]	; (8000c44 <HAL_DMA_Init+0x15c>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d11a      	bne.n	8000be0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000baa:	4b29      	ldr	r3, [pc, #164]	; (8000c50 <HAL_DMA_Init+0x168>)
 8000bac:	681a      	ldr	r2, [r3, #0]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bb2:	f003 031c 	and.w	r3, r3, #28
 8000bb6:	210f      	movs	r1, #15
 8000bb8:	fa01 f303 	lsl.w	r3, r1, r3
 8000bbc:	43db      	mvns	r3, r3
 8000bbe:	4924      	ldr	r1, [pc, #144]	; (8000c50 <HAL_DMA_Init+0x168>)
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000bc4:	4b22      	ldr	r3, [pc, #136]	; (8000c50 <HAL_DMA_Init+0x168>)
 8000bc6:	681a      	ldr	r2, [r3, #0]
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	6859      	ldr	r1, [r3, #4]
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bd0:	f003 031c 	and.w	r3, r3, #28
 8000bd4:	fa01 f303 	lsl.w	r3, r1, r3
 8000bd8:	491d      	ldr	r1, [pc, #116]	; (8000c50 <HAL_DMA_Init+0x168>)
 8000bda:	4313      	orrs	r3, r2
 8000bdc:	600b      	str	r3, [r1, #0]
 8000bde:	e019      	b.n	8000c14 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000be0:	4b1c      	ldr	r3, [pc, #112]	; (8000c54 <HAL_DMA_Init+0x16c>)
 8000be2:	681a      	ldr	r2, [r3, #0]
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000be8:	f003 031c 	and.w	r3, r3, #28
 8000bec:	210f      	movs	r1, #15
 8000bee:	fa01 f303 	lsl.w	r3, r1, r3
 8000bf2:	43db      	mvns	r3, r3
 8000bf4:	4917      	ldr	r1, [pc, #92]	; (8000c54 <HAL_DMA_Init+0x16c>)
 8000bf6:	4013      	ands	r3, r2
 8000bf8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000bfa:	4b16      	ldr	r3, [pc, #88]	; (8000c54 <HAL_DMA_Init+0x16c>)
 8000bfc:	681a      	ldr	r2, [r3, #0]
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	6859      	ldr	r1, [r3, #4]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c06:	f003 031c 	and.w	r3, r3, #28
 8000c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c0e:	4911      	ldr	r1, [pc, #68]	; (8000c54 <HAL_DMA_Init+0x16c>)
 8000c10:	4313      	orrs	r3, r2
 8000c12:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	2200      	movs	r2, #0
 8000c18:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	2200      	movs	r2, #0
 8000c26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8000c2a:	2300      	movs	r3, #0
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	3714      	adds	r7, #20
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr
 8000c38:	40020407 	.word	0x40020407
 8000c3c:	bffdfff8 	.word	0xbffdfff8
 8000c40:	cccccccd 	.word	0xcccccccd
 8000c44:	40020000 	.word	0x40020000
 8000c48:	bffdfbf8 	.word	0xbffdfbf8
 8000c4c:	40020400 	.word	0x40020400
 8000c50:	400200a8 	.word	0x400200a8
 8000c54:	400204a8 	.word	0x400204a8

08000c58 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b086      	sub	sp, #24
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	60f8      	str	r0, [r7, #12]
 8000c60:	60b9      	str	r1, [r7, #8]
 8000c62:	607a      	str	r2, [r7, #4]
 8000c64:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000c66:	2300      	movs	r3, #0
 8000c68:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000c70:	2b01      	cmp	r3, #1
 8000c72:	d101      	bne.n	8000c78 <HAL_DMA_Start_IT+0x20>
 8000c74:	2302      	movs	r3, #2
 8000c76:	e04b      	b.n	8000d10 <HAL_DMA_Start_IT+0xb8>
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000c86:	b2db      	uxtb	r3, r3
 8000c88:	2b01      	cmp	r3, #1
 8000c8a:	d13a      	bne.n	8000d02 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	2202      	movs	r2, #2
 8000c90:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	2200      	movs	r2, #0
 8000c98:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	681a      	ldr	r2, [r3, #0]
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f022 0201 	bic.w	r2, r2, #1
 8000ca8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	687a      	ldr	r2, [r7, #4]
 8000cae:	68b9      	ldr	r1, [r7, #8]
 8000cb0:	68f8      	ldr	r0, [r7, #12]
 8000cb2:	f000 f91e 	bl	8000ef2 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d008      	beq.n	8000cd0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	f042 020e 	orr.w	r2, r2, #14
 8000ccc:	601a      	str	r2, [r3, #0]
 8000cce:	e00f      	b.n	8000cf0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	681a      	ldr	r2, [r3, #0]
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f022 0204 	bic.w	r2, r2, #4
 8000cde:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	681a      	ldr	r2, [r3, #0]
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f042 020a 	orr.w	r2, r2, #10
 8000cee:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	681a      	ldr	r2, [r3, #0]
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f042 0201 	orr.w	r2, r2, #1
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	e005      	b.n	8000d0e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	2200      	movs	r2, #0
 8000d06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8000d0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	3718      	adds	r7, #24
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}

08000d18 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b085      	sub	sp, #20
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d20:	2300      	movs	r3, #0
 8000d22:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000d2a:	b2db      	uxtb	r3, r3
 8000d2c:	2b02      	cmp	r3, #2
 8000d2e:	d008      	beq.n	8000d42 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	2204      	movs	r2, #4
 8000d34:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	2200      	movs	r2, #0
 8000d3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	e022      	b.n	8000d88 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f022 020e 	bic.w	r2, r2, #14
 8000d50:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	681a      	ldr	r2, [r3, #0]
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f022 0201 	bic.w	r2, r2, #1
 8000d60:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d66:	f003 021c 	and.w	r2, r3, #28
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6e:	2101      	movs	r1, #1
 8000d70:	fa01 f202 	lsl.w	r2, r1, r2
 8000d74:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	2201      	movs	r2, #1
 8000d7a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2200      	movs	r2, #0
 8000d82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8000d86:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3714      	adds	r7, #20
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr

08000d94 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db0:	f003 031c 	and.w	r3, r3, #28
 8000db4:	2204      	movs	r2, #4
 8000db6:	409a      	lsls	r2, r3
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	4013      	ands	r3, r2
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d026      	beq.n	8000e0e <HAL_DMA_IRQHandler+0x7a>
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	f003 0304 	and.w	r3, r3, #4
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d021      	beq.n	8000e0e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f003 0320 	and.w	r3, r3, #32
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d107      	bne.n	8000de8 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f022 0204 	bic.w	r2, r2, #4
 8000de6:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dec:	f003 021c 	and.w	r2, r3, #28
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df4:	2104      	movs	r1, #4
 8000df6:	fa01 f202 	lsl.w	r2, r1, r2
 8000dfa:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d071      	beq.n	8000ee8 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e08:	6878      	ldr	r0, [r7, #4]
 8000e0a:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8000e0c:	e06c      	b.n	8000ee8 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e12:	f003 031c 	and.w	r3, r3, #28
 8000e16:	2202      	movs	r2, #2
 8000e18:	409a      	lsls	r2, r3
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d02e      	beq.n	8000e80 <HAL_DMA_IRQHandler+0xec>
 8000e22:	68bb      	ldr	r3, [r7, #8]
 8000e24:	f003 0302 	and.w	r3, r3, #2
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d029      	beq.n	8000e80 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f003 0320 	and.w	r3, r3, #32
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d10b      	bne.n	8000e52 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	681a      	ldr	r2, [r3, #0]
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f022 020a 	bic.w	r2, r2, #10
 8000e48:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e56:	f003 021c 	and.w	r2, r3, #28
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5e:	2102      	movs	r1, #2
 8000e60:	fa01 f202 	lsl.w	r2, r1, r2
 8000e64:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	2200      	movs	r2, #0
 8000e6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d038      	beq.n	8000ee8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e7a:	6878      	ldr	r0, [r7, #4]
 8000e7c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000e7e:	e033      	b.n	8000ee8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e84:	f003 031c 	and.w	r3, r3, #28
 8000e88:	2208      	movs	r2, #8
 8000e8a:	409a      	lsls	r2, r3
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	4013      	ands	r3, r2
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d02a      	beq.n	8000eea <HAL_DMA_IRQHandler+0x156>
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	f003 0308 	and.w	r3, r3, #8
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d025      	beq.n	8000eea <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f022 020e 	bic.w	r2, r2, #14
 8000eac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eb2:	f003 021c 	and.w	r2, r3, #28
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eba:	2101      	movs	r1, #1
 8000ebc:	fa01 f202 	lsl.w	r2, r1, r2
 8000ec0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2201      	movs	r2, #1
 8000ecc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d004      	beq.n	8000eea <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8000ee8:	bf00      	nop
 8000eea:	bf00      	nop
}
 8000eec:	3710      	adds	r7, #16
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	b085      	sub	sp, #20
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	60f8      	str	r0, [r7, #12]
 8000efa:	60b9      	str	r1, [r7, #8]
 8000efc:	607a      	str	r2, [r7, #4]
 8000efe:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f04:	f003 021c 	and.w	r2, r3, #28
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0c:	2101      	movs	r1, #1
 8000f0e:	fa01 f202 	lsl.w	r2, r1, r2
 8000f12:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	683a      	ldr	r2, [r7, #0]
 8000f1a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	689b      	ldr	r3, [r3, #8]
 8000f20:	2b10      	cmp	r3, #16
 8000f22:	d108      	bne.n	8000f36 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	687a      	ldr	r2, [r7, #4]
 8000f2a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	68ba      	ldr	r2, [r7, #8]
 8000f32:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000f34:	e007      	b.n	8000f46 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	68ba      	ldr	r2, [r7, #8]
 8000f3c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	687a      	ldr	r2, [r7, #4]
 8000f44:	60da      	str	r2, [r3, #12]
}
 8000f46:	bf00      	nop
 8000f48:	3714      	adds	r7, #20
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
	...

08000f54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b087      	sub	sp, #28
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f62:	e17f      	b.n	8001264 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	2101      	movs	r1, #1
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f70:	4013      	ands	r3, r2
 8000f72:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	f000 8171 	beq.w	800125e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	2b01      	cmp	r3, #1
 8000f82:	d00b      	beq.n	8000f9c <HAL_GPIO_Init+0x48>
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	2b02      	cmp	r3, #2
 8000f8a:	d007      	beq.n	8000f9c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f90:	2b11      	cmp	r3, #17
 8000f92:	d003      	beq.n	8000f9c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	2b12      	cmp	r3, #18
 8000f9a:	d130      	bne.n	8000ffe <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	689b      	ldr	r3, [r3, #8]
 8000fa0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	2203      	movs	r2, #3
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	43db      	mvns	r3, r3
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	68da      	ldr	r2, [r3, #12]
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	005b      	lsls	r3, r3, #1
 8000fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc0:	693a      	ldr	r2, [r7, #16]
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	693a      	ldr	r2, [r7, #16]
 8000fca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fda:	43db      	mvns	r3, r3
 8000fdc:	693a      	ldr	r2, [r7, #16]
 8000fde:	4013      	ands	r3, r2
 8000fe0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	091b      	lsrs	r3, r3, #4
 8000fe8:	f003 0201 	and.w	r2, r3, #1
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff2:	693a      	ldr	r2, [r7, #16]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	693a      	ldr	r2, [r7, #16]
 8000ffc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	f003 0303 	and.w	r3, r3, #3
 8001006:	2b03      	cmp	r3, #3
 8001008:	d118      	bne.n	800103c <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800100e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001010:	2201      	movs	r2, #1
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	43db      	mvns	r3, r3
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	4013      	ands	r3, r2
 800101e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	08db      	lsrs	r3, r3, #3
 8001026:	f003 0201 	and.w	r2, r3, #1
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	693a      	ldr	r2, [r7, #16]
 8001032:	4313      	orrs	r3, r2
 8001034:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	693a      	ldr	r2, [r7, #16]
 800103a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	2203      	movs	r2, #3
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	43db      	mvns	r3, r3
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	4013      	ands	r3, r2
 8001052:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	689a      	ldr	r2, [r3, #8]
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	005b      	lsls	r3, r3, #1
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	693a      	ldr	r2, [r7, #16]
 8001062:	4313      	orrs	r3, r2
 8001064:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	693a      	ldr	r2, [r7, #16]
 800106a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	2b02      	cmp	r3, #2
 8001072:	d003      	beq.n	800107c <HAL_GPIO_Init+0x128>
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	2b12      	cmp	r3, #18
 800107a:	d123      	bne.n	80010c4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	08da      	lsrs	r2, r3, #3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	3208      	adds	r2, #8
 8001084:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001088:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	f003 0307 	and.w	r3, r3, #7
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	220f      	movs	r2, #15
 8001094:	fa02 f303 	lsl.w	r3, r2, r3
 8001098:	43db      	mvns	r3, r3
 800109a:	693a      	ldr	r2, [r7, #16]
 800109c:	4013      	ands	r3, r2
 800109e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	691a      	ldr	r2, [r3, #16]
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	f003 0307 	and.w	r3, r3, #7
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	693a      	ldr	r2, [r7, #16]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	08da      	lsrs	r2, r3, #3
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	3208      	adds	r2, #8
 80010be:	6939      	ldr	r1, [r7, #16]
 80010c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	005b      	lsls	r3, r3, #1
 80010ce:	2203      	movs	r2, #3
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	43db      	mvns	r3, r3
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	4013      	ands	r3, r2
 80010da:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f003 0203 	and.w	r2, r3, #3
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	005b      	lsls	r3, r3, #1
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	693a      	ldr	r2, [r7, #16]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	693a      	ldr	r2, [r7, #16]
 80010f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001100:	2b00      	cmp	r3, #0
 8001102:	f000 80ac 	beq.w	800125e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001106:	4b5e      	ldr	r3, [pc, #376]	; (8001280 <HAL_GPIO_Init+0x32c>)
 8001108:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800110a:	4a5d      	ldr	r2, [pc, #372]	; (8001280 <HAL_GPIO_Init+0x32c>)
 800110c:	f043 0301 	orr.w	r3, r3, #1
 8001110:	6613      	str	r3, [r2, #96]	; 0x60
 8001112:	4b5b      	ldr	r3, [pc, #364]	; (8001280 <HAL_GPIO_Init+0x32c>)
 8001114:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001116:	f003 0301 	and.w	r3, r3, #1
 800111a:	60bb      	str	r3, [r7, #8]
 800111c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800111e:	4a59      	ldr	r2, [pc, #356]	; (8001284 <HAL_GPIO_Init+0x330>)
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	089b      	lsrs	r3, r3, #2
 8001124:	3302      	adds	r3, #2
 8001126:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800112a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	f003 0303 	and.w	r3, r3, #3
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	220f      	movs	r2, #15
 8001136:	fa02 f303 	lsl.w	r3, r2, r3
 800113a:	43db      	mvns	r3, r3
 800113c:	693a      	ldr	r2, [r7, #16]
 800113e:	4013      	ands	r3, r2
 8001140:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001148:	d025      	beq.n	8001196 <HAL_GPIO_Init+0x242>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4a4e      	ldr	r2, [pc, #312]	; (8001288 <HAL_GPIO_Init+0x334>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d01f      	beq.n	8001192 <HAL_GPIO_Init+0x23e>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4a4d      	ldr	r2, [pc, #308]	; (800128c <HAL_GPIO_Init+0x338>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d019      	beq.n	800118e <HAL_GPIO_Init+0x23a>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4a4c      	ldr	r2, [pc, #304]	; (8001290 <HAL_GPIO_Init+0x33c>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d013      	beq.n	800118a <HAL_GPIO_Init+0x236>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4a4b      	ldr	r2, [pc, #300]	; (8001294 <HAL_GPIO_Init+0x340>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d00d      	beq.n	8001186 <HAL_GPIO_Init+0x232>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4a4a      	ldr	r2, [pc, #296]	; (8001298 <HAL_GPIO_Init+0x344>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d007      	beq.n	8001182 <HAL_GPIO_Init+0x22e>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4a49      	ldr	r2, [pc, #292]	; (800129c <HAL_GPIO_Init+0x348>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d101      	bne.n	800117e <HAL_GPIO_Init+0x22a>
 800117a:	2306      	movs	r3, #6
 800117c:	e00c      	b.n	8001198 <HAL_GPIO_Init+0x244>
 800117e:	2307      	movs	r3, #7
 8001180:	e00a      	b.n	8001198 <HAL_GPIO_Init+0x244>
 8001182:	2305      	movs	r3, #5
 8001184:	e008      	b.n	8001198 <HAL_GPIO_Init+0x244>
 8001186:	2304      	movs	r3, #4
 8001188:	e006      	b.n	8001198 <HAL_GPIO_Init+0x244>
 800118a:	2303      	movs	r3, #3
 800118c:	e004      	b.n	8001198 <HAL_GPIO_Init+0x244>
 800118e:	2302      	movs	r3, #2
 8001190:	e002      	b.n	8001198 <HAL_GPIO_Init+0x244>
 8001192:	2301      	movs	r3, #1
 8001194:	e000      	b.n	8001198 <HAL_GPIO_Init+0x244>
 8001196:	2300      	movs	r3, #0
 8001198:	697a      	ldr	r2, [r7, #20]
 800119a:	f002 0203 	and.w	r2, r2, #3
 800119e:	0092      	lsls	r2, r2, #2
 80011a0:	4093      	lsls	r3, r2
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011a8:	4936      	ldr	r1, [pc, #216]	; (8001284 <HAL_GPIO_Init+0x330>)
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	089b      	lsrs	r3, r3, #2
 80011ae:	3302      	adds	r3, #2
 80011b0:	693a      	ldr	r2, [r7, #16]
 80011b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80011b6:	4b3a      	ldr	r3, [pc, #232]	; (80012a0 <HAL_GPIO_Init+0x34c>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	43db      	mvns	r3, r3
 80011c0:	693a      	ldr	r2, [r7, #16]
 80011c2:	4013      	ands	r3, r2
 80011c4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d003      	beq.n	80011da <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80011d2:	693a      	ldr	r2, [r7, #16]
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	4313      	orrs	r3, r2
 80011d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011da:	4a31      	ldr	r2, [pc, #196]	; (80012a0 <HAL_GPIO_Init+0x34c>)
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80011e0:	4b2f      	ldr	r3, [pc, #188]	; (80012a0 <HAL_GPIO_Init+0x34c>)
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	43db      	mvns	r3, r3
 80011ea:	693a      	ldr	r2, [r7, #16]
 80011ec:	4013      	ands	r3, r2
 80011ee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d003      	beq.n	8001204 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80011fc:	693a      	ldr	r2, [r7, #16]
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	4313      	orrs	r3, r2
 8001202:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001204:	4a26      	ldr	r2, [pc, #152]	; (80012a0 <HAL_GPIO_Init+0x34c>)
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800120a:	4b25      	ldr	r3, [pc, #148]	; (80012a0 <HAL_GPIO_Init+0x34c>)
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	43db      	mvns	r3, r3
 8001214:	693a      	ldr	r2, [r7, #16]
 8001216:	4013      	ands	r3, r2
 8001218:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001222:	2b00      	cmp	r3, #0
 8001224:	d003      	beq.n	800122e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001226:	693a      	ldr	r2, [r7, #16]
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	4313      	orrs	r3, r2
 800122c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800122e:	4a1c      	ldr	r2, [pc, #112]	; (80012a0 <HAL_GPIO_Init+0x34c>)
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001234:	4b1a      	ldr	r3, [pc, #104]	; (80012a0 <HAL_GPIO_Init+0x34c>)
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	43db      	mvns	r3, r3
 800123e:	693a      	ldr	r2, [r7, #16]
 8001240:	4013      	ands	r3, r2
 8001242:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800124c:	2b00      	cmp	r3, #0
 800124e:	d003      	beq.n	8001258 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001250:	693a      	ldr	r2, [r7, #16]
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	4313      	orrs	r3, r2
 8001256:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001258:	4a11      	ldr	r2, [pc, #68]	; (80012a0 <HAL_GPIO_Init+0x34c>)
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	3301      	adds	r3, #1
 8001262:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	fa22 f303 	lsr.w	r3, r2, r3
 800126e:	2b00      	cmp	r3, #0
 8001270:	f47f ae78 	bne.w	8000f64 <HAL_GPIO_Init+0x10>
  }
}
 8001274:	bf00      	nop
 8001276:	371c      	adds	r7, #28
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr
 8001280:	40021000 	.word	0x40021000
 8001284:	40010000 	.word	0x40010000
 8001288:	48000400 	.word	0x48000400
 800128c:	48000800 	.word	0x48000800
 8001290:	48000c00 	.word	0x48000c00
 8001294:	48001000 	.word	0x48001000
 8001298:	48001400 	.word	0x48001400
 800129c:	48001800 	.word	0x48001800
 80012a0:	40010400 	.word	0x40010400

080012a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	460b      	mov	r3, r1
 80012ae:	807b      	strh	r3, [r7, #2]
 80012b0:	4613      	mov	r3, r2
 80012b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012b4:	787b      	ldrb	r3, [r7, #1]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d003      	beq.n	80012c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012ba:	887a      	ldrh	r2, [r7, #2]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012c0:	e002      	b.n	80012c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012c2:	887a      	ldrh	r2, [r7, #2]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012c8:	bf00      	nop
 80012ca:	370c      	adds	r7, #12
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr

080012d4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b085      	sub	sp, #20
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	460b      	mov	r3, r1
 80012de:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	695b      	ldr	r3, [r3, #20]
 80012e4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012e6:	887a      	ldrh	r2, [r7, #2]
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	4013      	ands	r3, r2
 80012ec:	041a      	lsls	r2, r3, #16
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	43d9      	mvns	r1, r3
 80012f2:	887b      	ldrh	r3, [r7, #2]
 80012f4:	400b      	ands	r3, r1
 80012f6:	431a      	orrs	r2, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	619a      	str	r2, [r3, #24]
}
 80012fc:	bf00      	nop
 80012fe:	3714      	adds	r7, #20
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr

08001308 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001312:	4b08      	ldr	r3, [pc, #32]	; (8001334 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001314:	695a      	ldr	r2, [r3, #20]
 8001316:	88fb      	ldrh	r3, [r7, #6]
 8001318:	4013      	ands	r3, r2
 800131a:	2b00      	cmp	r3, #0
 800131c:	d006      	beq.n	800132c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800131e:	4a05      	ldr	r2, [pc, #20]	; (8001334 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001320:	88fb      	ldrh	r3, [r7, #6]
 8001322:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001324:	88fb      	ldrh	r3, [r7, #6]
 8001326:	4618      	mov	r0, r3
 8001328:	f001 fcb0 	bl	8002c8c <HAL_GPIO_EXTI_Callback>
  }
}
 800132c:	bf00      	nop
 800132e:	3708      	adds	r7, #8
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	40010400 	.word	0x40010400

08001338 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800133c:	4b04      	ldr	r3, [pc, #16]	; (8001350 <HAL_PWREx_GetVoltageRange+0x18>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001344:	4618      	mov	r0, r3
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	40007000 	.word	0x40007000

08001354 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001354:	b480      	push	{r7}
 8001356:	b085      	sub	sp, #20
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001362:	d130      	bne.n	80013c6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001364:	4b23      	ldr	r3, [pc, #140]	; (80013f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800136c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001370:	d038      	beq.n	80013e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001372:	4b20      	ldr	r3, [pc, #128]	; (80013f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800137a:	4a1e      	ldr	r2, [pc, #120]	; (80013f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800137c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001380:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001382:	4b1d      	ldr	r3, [pc, #116]	; (80013f8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	2232      	movs	r2, #50	; 0x32
 8001388:	fb02 f303 	mul.w	r3, r2, r3
 800138c:	4a1b      	ldr	r2, [pc, #108]	; (80013fc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800138e:	fba2 2303 	umull	r2, r3, r2, r3
 8001392:	0c9b      	lsrs	r3, r3, #18
 8001394:	3301      	adds	r3, #1
 8001396:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001398:	e002      	b.n	80013a0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	3b01      	subs	r3, #1
 800139e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013a0:	4b14      	ldr	r3, [pc, #80]	; (80013f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013a2:	695b      	ldr	r3, [r3, #20]
 80013a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013ac:	d102      	bne.n	80013b4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d1f2      	bne.n	800139a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013b4:	4b0f      	ldr	r3, [pc, #60]	; (80013f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013b6:	695b      	ldr	r3, [r3, #20]
 80013b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013c0:	d110      	bne.n	80013e4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80013c2:	2303      	movs	r3, #3
 80013c4:	e00f      	b.n	80013e6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80013c6:	4b0b      	ldr	r3, [pc, #44]	; (80013f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80013ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013d2:	d007      	beq.n	80013e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80013d4:	4b07      	ldr	r3, [pc, #28]	; (80013f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80013dc:	4a05      	ldr	r2, [pc, #20]	; (80013f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013e2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80013e4:	2300      	movs	r3, #0
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3714      	adds	r7, #20
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	40007000 	.word	0x40007000
 80013f8:	20000008 	.word	0x20000008
 80013fc:	431bde83 	.word	0x431bde83

08001400 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b088      	sub	sp, #32
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d101      	bne.n	8001412 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e3d4      	b.n	8001bbc <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001412:	4ba1      	ldr	r3, [pc, #644]	; (8001698 <HAL_RCC_OscConfig+0x298>)
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	f003 030c 	and.w	r3, r3, #12
 800141a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800141c:	4b9e      	ldr	r3, [pc, #632]	; (8001698 <HAL_RCC_OscConfig+0x298>)
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	f003 0303 	and.w	r3, r3, #3
 8001424:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f003 0310 	and.w	r3, r3, #16
 800142e:	2b00      	cmp	r3, #0
 8001430:	f000 80e4 	beq.w	80015fc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d007      	beq.n	800144a <HAL_RCC_OscConfig+0x4a>
 800143a:	69bb      	ldr	r3, [r7, #24]
 800143c:	2b0c      	cmp	r3, #12
 800143e:	f040 808b 	bne.w	8001558 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	2b01      	cmp	r3, #1
 8001446:	f040 8087 	bne.w	8001558 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800144a:	4b93      	ldr	r3, [pc, #588]	; (8001698 <HAL_RCC_OscConfig+0x298>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f003 0302 	and.w	r3, r3, #2
 8001452:	2b00      	cmp	r3, #0
 8001454:	d005      	beq.n	8001462 <HAL_RCC_OscConfig+0x62>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	699b      	ldr	r3, [r3, #24]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d101      	bne.n	8001462 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e3ac      	b.n	8001bbc <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6a1a      	ldr	r2, [r3, #32]
 8001466:	4b8c      	ldr	r3, [pc, #560]	; (8001698 <HAL_RCC_OscConfig+0x298>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f003 0308 	and.w	r3, r3, #8
 800146e:	2b00      	cmp	r3, #0
 8001470:	d004      	beq.n	800147c <HAL_RCC_OscConfig+0x7c>
 8001472:	4b89      	ldr	r3, [pc, #548]	; (8001698 <HAL_RCC_OscConfig+0x298>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800147a:	e005      	b.n	8001488 <HAL_RCC_OscConfig+0x88>
 800147c:	4b86      	ldr	r3, [pc, #536]	; (8001698 <HAL_RCC_OscConfig+0x298>)
 800147e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001482:	091b      	lsrs	r3, r3, #4
 8001484:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001488:	4293      	cmp	r3, r2
 800148a:	d223      	bcs.n	80014d4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6a1b      	ldr	r3, [r3, #32]
 8001490:	4618      	mov	r0, r3
 8001492:	f000 fd07 	bl	8001ea4 <RCC_SetFlashLatencyFromMSIRange>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	e38d      	b.n	8001bbc <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014a0:	4b7d      	ldr	r3, [pc, #500]	; (8001698 <HAL_RCC_OscConfig+0x298>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a7c      	ldr	r2, [pc, #496]	; (8001698 <HAL_RCC_OscConfig+0x298>)
 80014a6:	f043 0308 	orr.w	r3, r3, #8
 80014aa:	6013      	str	r3, [r2, #0]
 80014ac:	4b7a      	ldr	r3, [pc, #488]	; (8001698 <HAL_RCC_OscConfig+0x298>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6a1b      	ldr	r3, [r3, #32]
 80014b8:	4977      	ldr	r1, [pc, #476]	; (8001698 <HAL_RCC_OscConfig+0x298>)
 80014ba:	4313      	orrs	r3, r2
 80014bc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014be:	4b76      	ldr	r3, [pc, #472]	; (8001698 <HAL_RCC_OscConfig+0x298>)
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	69db      	ldr	r3, [r3, #28]
 80014ca:	021b      	lsls	r3, r3, #8
 80014cc:	4972      	ldr	r1, [pc, #456]	; (8001698 <HAL_RCC_OscConfig+0x298>)
 80014ce:	4313      	orrs	r3, r2
 80014d0:	604b      	str	r3, [r1, #4]
 80014d2:	e025      	b.n	8001520 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014d4:	4b70      	ldr	r3, [pc, #448]	; (8001698 <HAL_RCC_OscConfig+0x298>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a6f      	ldr	r2, [pc, #444]	; (8001698 <HAL_RCC_OscConfig+0x298>)
 80014da:	f043 0308 	orr.w	r3, r3, #8
 80014de:	6013      	str	r3, [r2, #0]
 80014e0:	4b6d      	ldr	r3, [pc, #436]	; (8001698 <HAL_RCC_OscConfig+0x298>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6a1b      	ldr	r3, [r3, #32]
 80014ec:	496a      	ldr	r1, [pc, #424]	; (8001698 <HAL_RCC_OscConfig+0x298>)
 80014ee:	4313      	orrs	r3, r2
 80014f0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014f2:	4b69      	ldr	r3, [pc, #420]	; (8001698 <HAL_RCC_OscConfig+0x298>)
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	69db      	ldr	r3, [r3, #28]
 80014fe:	021b      	lsls	r3, r3, #8
 8001500:	4965      	ldr	r1, [pc, #404]	; (8001698 <HAL_RCC_OscConfig+0x298>)
 8001502:	4313      	orrs	r3, r2
 8001504:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001506:	69bb      	ldr	r3, [r7, #24]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d109      	bne.n	8001520 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6a1b      	ldr	r3, [r3, #32]
 8001510:	4618      	mov	r0, r3
 8001512:	f000 fcc7 	bl	8001ea4 <RCC_SetFlashLatencyFromMSIRange>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	e34d      	b.n	8001bbc <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001520:	f000 fc36 	bl	8001d90 <HAL_RCC_GetSysClockFreq>
 8001524:	4601      	mov	r1, r0
 8001526:	4b5c      	ldr	r3, [pc, #368]	; (8001698 <HAL_RCC_OscConfig+0x298>)
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	091b      	lsrs	r3, r3, #4
 800152c:	f003 030f 	and.w	r3, r3, #15
 8001530:	4a5a      	ldr	r2, [pc, #360]	; (800169c <HAL_RCC_OscConfig+0x29c>)
 8001532:	5cd3      	ldrb	r3, [r2, r3]
 8001534:	f003 031f 	and.w	r3, r3, #31
 8001538:	fa21 f303 	lsr.w	r3, r1, r3
 800153c:	4a58      	ldr	r2, [pc, #352]	; (80016a0 <HAL_RCC_OscConfig+0x2a0>)
 800153e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001540:	4b58      	ldr	r3, [pc, #352]	; (80016a4 <HAL_RCC_OscConfig+0x2a4>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4618      	mov	r0, r3
 8001546:	f7fe fe57 	bl	80001f8 <HAL_InitTick>
 800154a:	4603      	mov	r3, r0
 800154c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800154e:	7bfb      	ldrb	r3, [r7, #15]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d052      	beq.n	80015fa <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001554:	7bfb      	ldrb	r3, [r7, #15]
 8001556:	e331      	b.n	8001bbc <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	699b      	ldr	r3, [r3, #24]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d032      	beq.n	80015c6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001560:	4b4d      	ldr	r3, [pc, #308]	; (8001698 <HAL_RCC_OscConfig+0x298>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a4c      	ldr	r2, [pc, #304]	; (8001698 <HAL_RCC_OscConfig+0x298>)
 8001566:	f043 0301 	orr.w	r3, r3, #1
 800156a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800156c:	f7fe fe94 	bl	8000298 <HAL_GetTick>
 8001570:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001572:	e008      	b.n	8001586 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001574:	f7fe fe90 	bl	8000298 <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	2b02      	cmp	r3, #2
 8001580:	d901      	bls.n	8001586 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	e31a      	b.n	8001bbc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001586:	4b44      	ldr	r3, [pc, #272]	; (8001698 <HAL_RCC_OscConfig+0x298>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 0302 	and.w	r3, r3, #2
 800158e:	2b00      	cmp	r3, #0
 8001590:	d0f0      	beq.n	8001574 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001592:	4b41      	ldr	r3, [pc, #260]	; (8001698 <HAL_RCC_OscConfig+0x298>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a40      	ldr	r2, [pc, #256]	; (8001698 <HAL_RCC_OscConfig+0x298>)
 8001598:	f043 0308 	orr.w	r3, r3, #8
 800159c:	6013      	str	r3, [r2, #0]
 800159e:	4b3e      	ldr	r3, [pc, #248]	; (8001698 <HAL_RCC_OscConfig+0x298>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6a1b      	ldr	r3, [r3, #32]
 80015aa:	493b      	ldr	r1, [pc, #236]	; (8001698 <HAL_RCC_OscConfig+0x298>)
 80015ac:	4313      	orrs	r3, r2
 80015ae:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015b0:	4b39      	ldr	r3, [pc, #228]	; (8001698 <HAL_RCC_OscConfig+0x298>)
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	69db      	ldr	r3, [r3, #28]
 80015bc:	021b      	lsls	r3, r3, #8
 80015be:	4936      	ldr	r1, [pc, #216]	; (8001698 <HAL_RCC_OscConfig+0x298>)
 80015c0:	4313      	orrs	r3, r2
 80015c2:	604b      	str	r3, [r1, #4]
 80015c4:	e01a      	b.n	80015fc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80015c6:	4b34      	ldr	r3, [pc, #208]	; (8001698 <HAL_RCC_OscConfig+0x298>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a33      	ldr	r2, [pc, #204]	; (8001698 <HAL_RCC_OscConfig+0x298>)
 80015cc:	f023 0301 	bic.w	r3, r3, #1
 80015d0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80015d2:	f7fe fe61 	bl	8000298 <HAL_GetTick>
 80015d6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80015d8:	e008      	b.n	80015ec <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015da:	f7fe fe5d 	bl	8000298 <HAL_GetTick>
 80015de:	4602      	mov	r2, r0
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	2b02      	cmp	r3, #2
 80015e6:	d901      	bls.n	80015ec <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80015e8:	2303      	movs	r3, #3
 80015ea:	e2e7      	b.n	8001bbc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80015ec:	4b2a      	ldr	r3, [pc, #168]	; (8001698 <HAL_RCC_OscConfig+0x298>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 0302 	and.w	r3, r3, #2
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d1f0      	bne.n	80015da <HAL_RCC_OscConfig+0x1da>
 80015f8:	e000      	b.n	80015fc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015fa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f003 0301 	and.w	r3, r3, #1
 8001604:	2b00      	cmp	r3, #0
 8001606:	d074      	beq.n	80016f2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001608:	69bb      	ldr	r3, [r7, #24]
 800160a:	2b08      	cmp	r3, #8
 800160c:	d005      	beq.n	800161a <HAL_RCC_OscConfig+0x21a>
 800160e:	69bb      	ldr	r3, [r7, #24]
 8001610:	2b0c      	cmp	r3, #12
 8001612:	d10e      	bne.n	8001632 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	2b03      	cmp	r3, #3
 8001618:	d10b      	bne.n	8001632 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800161a:	4b1f      	ldr	r3, [pc, #124]	; (8001698 <HAL_RCC_OscConfig+0x298>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d064      	beq.n	80016f0 <HAL_RCC_OscConfig+0x2f0>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d160      	bne.n	80016f0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	e2c4      	b.n	8001bbc <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800163a:	d106      	bne.n	800164a <HAL_RCC_OscConfig+0x24a>
 800163c:	4b16      	ldr	r3, [pc, #88]	; (8001698 <HAL_RCC_OscConfig+0x298>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a15      	ldr	r2, [pc, #84]	; (8001698 <HAL_RCC_OscConfig+0x298>)
 8001642:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001646:	6013      	str	r3, [r2, #0]
 8001648:	e01d      	b.n	8001686 <HAL_RCC_OscConfig+0x286>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001652:	d10c      	bne.n	800166e <HAL_RCC_OscConfig+0x26e>
 8001654:	4b10      	ldr	r3, [pc, #64]	; (8001698 <HAL_RCC_OscConfig+0x298>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a0f      	ldr	r2, [pc, #60]	; (8001698 <HAL_RCC_OscConfig+0x298>)
 800165a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800165e:	6013      	str	r3, [r2, #0]
 8001660:	4b0d      	ldr	r3, [pc, #52]	; (8001698 <HAL_RCC_OscConfig+0x298>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a0c      	ldr	r2, [pc, #48]	; (8001698 <HAL_RCC_OscConfig+0x298>)
 8001666:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800166a:	6013      	str	r3, [r2, #0]
 800166c:	e00b      	b.n	8001686 <HAL_RCC_OscConfig+0x286>
 800166e:	4b0a      	ldr	r3, [pc, #40]	; (8001698 <HAL_RCC_OscConfig+0x298>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a09      	ldr	r2, [pc, #36]	; (8001698 <HAL_RCC_OscConfig+0x298>)
 8001674:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001678:	6013      	str	r3, [r2, #0]
 800167a:	4b07      	ldr	r3, [pc, #28]	; (8001698 <HAL_RCC_OscConfig+0x298>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a06      	ldr	r2, [pc, #24]	; (8001698 <HAL_RCC_OscConfig+0x298>)
 8001680:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001684:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d01c      	beq.n	80016c8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800168e:	f7fe fe03 	bl	8000298 <HAL_GetTick>
 8001692:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001694:	e011      	b.n	80016ba <HAL_RCC_OscConfig+0x2ba>
 8001696:	bf00      	nop
 8001698:	40021000 	.word	0x40021000
 800169c:	08003100 	.word	0x08003100
 80016a0:	20000008 	.word	0x20000008
 80016a4:	20000000 	.word	0x20000000
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016a8:	f7fe fdf6 	bl	8000298 <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	2b64      	cmp	r3, #100	; 0x64
 80016b4:	d901      	bls.n	80016ba <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	e280      	b.n	8001bbc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016ba:	4baf      	ldr	r3, [pc, #700]	; (8001978 <HAL_RCC_OscConfig+0x578>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d0f0      	beq.n	80016a8 <HAL_RCC_OscConfig+0x2a8>
 80016c6:	e014      	b.n	80016f2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016c8:	f7fe fde6 	bl	8000298 <HAL_GetTick>
 80016cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016ce:	e008      	b.n	80016e2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016d0:	f7fe fde2 	bl	8000298 <HAL_GetTick>
 80016d4:	4602      	mov	r2, r0
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	2b64      	cmp	r3, #100	; 0x64
 80016dc:	d901      	bls.n	80016e2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80016de:	2303      	movs	r3, #3
 80016e0:	e26c      	b.n	8001bbc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016e2:	4ba5      	ldr	r3, [pc, #660]	; (8001978 <HAL_RCC_OscConfig+0x578>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d1f0      	bne.n	80016d0 <HAL_RCC_OscConfig+0x2d0>
 80016ee:	e000      	b.n	80016f2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 0302 	and.w	r3, r3, #2
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d060      	beq.n	80017c0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80016fe:	69bb      	ldr	r3, [r7, #24]
 8001700:	2b04      	cmp	r3, #4
 8001702:	d005      	beq.n	8001710 <HAL_RCC_OscConfig+0x310>
 8001704:	69bb      	ldr	r3, [r7, #24]
 8001706:	2b0c      	cmp	r3, #12
 8001708:	d119      	bne.n	800173e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	2b02      	cmp	r3, #2
 800170e:	d116      	bne.n	800173e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001710:	4b99      	ldr	r3, [pc, #612]	; (8001978 <HAL_RCC_OscConfig+0x578>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001718:	2b00      	cmp	r3, #0
 800171a:	d005      	beq.n	8001728 <HAL_RCC_OscConfig+0x328>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d101      	bne.n	8001728 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	e249      	b.n	8001bbc <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001728:	4b93      	ldr	r3, [pc, #588]	; (8001978 <HAL_RCC_OscConfig+0x578>)
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	691b      	ldr	r3, [r3, #16]
 8001734:	061b      	lsls	r3, r3, #24
 8001736:	4990      	ldr	r1, [pc, #576]	; (8001978 <HAL_RCC_OscConfig+0x578>)
 8001738:	4313      	orrs	r3, r2
 800173a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800173c:	e040      	b.n	80017c0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	68db      	ldr	r3, [r3, #12]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d023      	beq.n	800178e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001746:	4b8c      	ldr	r3, [pc, #560]	; (8001978 <HAL_RCC_OscConfig+0x578>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a8b      	ldr	r2, [pc, #556]	; (8001978 <HAL_RCC_OscConfig+0x578>)
 800174c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001750:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001752:	f7fe fda1 	bl	8000298 <HAL_GetTick>
 8001756:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001758:	e008      	b.n	800176c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800175a:	f7fe fd9d 	bl	8000298 <HAL_GetTick>
 800175e:	4602      	mov	r2, r0
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	2b02      	cmp	r3, #2
 8001766:	d901      	bls.n	800176c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001768:	2303      	movs	r3, #3
 800176a:	e227      	b.n	8001bbc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800176c:	4b82      	ldr	r3, [pc, #520]	; (8001978 <HAL_RCC_OscConfig+0x578>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001774:	2b00      	cmp	r3, #0
 8001776:	d0f0      	beq.n	800175a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001778:	4b7f      	ldr	r3, [pc, #508]	; (8001978 <HAL_RCC_OscConfig+0x578>)
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	691b      	ldr	r3, [r3, #16]
 8001784:	061b      	lsls	r3, r3, #24
 8001786:	497c      	ldr	r1, [pc, #496]	; (8001978 <HAL_RCC_OscConfig+0x578>)
 8001788:	4313      	orrs	r3, r2
 800178a:	604b      	str	r3, [r1, #4]
 800178c:	e018      	b.n	80017c0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800178e:	4b7a      	ldr	r3, [pc, #488]	; (8001978 <HAL_RCC_OscConfig+0x578>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a79      	ldr	r2, [pc, #484]	; (8001978 <HAL_RCC_OscConfig+0x578>)
 8001794:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001798:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800179a:	f7fe fd7d 	bl	8000298 <HAL_GetTick>
 800179e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017a0:	e008      	b.n	80017b4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017a2:	f7fe fd79 	bl	8000298 <HAL_GetTick>
 80017a6:	4602      	mov	r2, r0
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	2b02      	cmp	r3, #2
 80017ae:	d901      	bls.n	80017b4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80017b0:	2303      	movs	r3, #3
 80017b2:	e203      	b.n	8001bbc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017b4:	4b70      	ldr	r3, [pc, #448]	; (8001978 <HAL_RCC_OscConfig+0x578>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d1f0      	bne.n	80017a2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 0308 	and.w	r3, r3, #8
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d03c      	beq.n	8001846 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	695b      	ldr	r3, [r3, #20]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d01c      	beq.n	800180e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017d4:	4b68      	ldr	r3, [pc, #416]	; (8001978 <HAL_RCC_OscConfig+0x578>)
 80017d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017da:	4a67      	ldr	r2, [pc, #412]	; (8001978 <HAL_RCC_OscConfig+0x578>)
 80017dc:	f043 0301 	orr.w	r3, r3, #1
 80017e0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017e4:	f7fe fd58 	bl	8000298 <HAL_GetTick>
 80017e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017ea:	e008      	b.n	80017fe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017ec:	f7fe fd54 	bl	8000298 <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e1de      	b.n	8001bbc <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017fe:	4b5e      	ldr	r3, [pc, #376]	; (8001978 <HAL_RCC_OscConfig+0x578>)
 8001800:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001804:	f003 0302 	and.w	r3, r3, #2
 8001808:	2b00      	cmp	r3, #0
 800180a:	d0ef      	beq.n	80017ec <HAL_RCC_OscConfig+0x3ec>
 800180c:	e01b      	b.n	8001846 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800180e:	4b5a      	ldr	r3, [pc, #360]	; (8001978 <HAL_RCC_OscConfig+0x578>)
 8001810:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001814:	4a58      	ldr	r2, [pc, #352]	; (8001978 <HAL_RCC_OscConfig+0x578>)
 8001816:	f023 0301 	bic.w	r3, r3, #1
 800181a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800181e:	f7fe fd3b 	bl	8000298 <HAL_GetTick>
 8001822:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001824:	e008      	b.n	8001838 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001826:	f7fe fd37 	bl	8000298 <HAL_GetTick>
 800182a:	4602      	mov	r2, r0
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	2b02      	cmp	r3, #2
 8001832:	d901      	bls.n	8001838 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001834:	2303      	movs	r3, #3
 8001836:	e1c1      	b.n	8001bbc <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001838:	4b4f      	ldr	r3, [pc, #316]	; (8001978 <HAL_RCC_OscConfig+0x578>)
 800183a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800183e:	f003 0302 	and.w	r3, r3, #2
 8001842:	2b00      	cmp	r3, #0
 8001844:	d1ef      	bne.n	8001826 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0304 	and.w	r3, r3, #4
 800184e:	2b00      	cmp	r3, #0
 8001850:	f000 80a6 	beq.w	80019a0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001854:	2300      	movs	r3, #0
 8001856:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001858:	4b47      	ldr	r3, [pc, #284]	; (8001978 <HAL_RCC_OscConfig+0x578>)
 800185a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800185c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001860:	2b00      	cmp	r3, #0
 8001862:	d10d      	bne.n	8001880 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001864:	4b44      	ldr	r3, [pc, #272]	; (8001978 <HAL_RCC_OscConfig+0x578>)
 8001866:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001868:	4a43      	ldr	r2, [pc, #268]	; (8001978 <HAL_RCC_OscConfig+0x578>)
 800186a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800186e:	6593      	str	r3, [r2, #88]	; 0x58
 8001870:	4b41      	ldr	r3, [pc, #260]	; (8001978 <HAL_RCC_OscConfig+0x578>)
 8001872:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001874:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001878:	60bb      	str	r3, [r7, #8]
 800187a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800187c:	2301      	movs	r3, #1
 800187e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001880:	4b3e      	ldr	r3, [pc, #248]	; (800197c <HAL_RCC_OscConfig+0x57c>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001888:	2b00      	cmp	r3, #0
 800188a:	d118      	bne.n	80018be <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800188c:	4b3b      	ldr	r3, [pc, #236]	; (800197c <HAL_RCC_OscConfig+0x57c>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a3a      	ldr	r2, [pc, #232]	; (800197c <HAL_RCC_OscConfig+0x57c>)
 8001892:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001896:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001898:	f7fe fcfe 	bl	8000298 <HAL_GetTick>
 800189c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800189e:	e008      	b.n	80018b2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018a0:	f7fe fcfa 	bl	8000298 <HAL_GetTick>
 80018a4:	4602      	mov	r2, r0
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d901      	bls.n	80018b2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e184      	b.n	8001bbc <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018b2:	4b32      	ldr	r3, [pc, #200]	; (800197c <HAL_RCC_OscConfig+0x57c>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d0f0      	beq.n	80018a0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d108      	bne.n	80018d8 <HAL_RCC_OscConfig+0x4d8>
 80018c6:	4b2c      	ldr	r3, [pc, #176]	; (8001978 <HAL_RCC_OscConfig+0x578>)
 80018c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018cc:	4a2a      	ldr	r2, [pc, #168]	; (8001978 <HAL_RCC_OscConfig+0x578>)
 80018ce:	f043 0301 	orr.w	r3, r3, #1
 80018d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018d6:	e024      	b.n	8001922 <HAL_RCC_OscConfig+0x522>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	2b05      	cmp	r3, #5
 80018de:	d110      	bne.n	8001902 <HAL_RCC_OscConfig+0x502>
 80018e0:	4b25      	ldr	r3, [pc, #148]	; (8001978 <HAL_RCC_OscConfig+0x578>)
 80018e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018e6:	4a24      	ldr	r2, [pc, #144]	; (8001978 <HAL_RCC_OscConfig+0x578>)
 80018e8:	f043 0304 	orr.w	r3, r3, #4
 80018ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018f0:	4b21      	ldr	r3, [pc, #132]	; (8001978 <HAL_RCC_OscConfig+0x578>)
 80018f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018f6:	4a20      	ldr	r2, [pc, #128]	; (8001978 <HAL_RCC_OscConfig+0x578>)
 80018f8:	f043 0301 	orr.w	r3, r3, #1
 80018fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001900:	e00f      	b.n	8001922 <HAL_RCC_OscConfig+0x522>
 8001902:	4b1d      	ldr	r3, [pc, #116]	; (8001978 <HAL_RCC_OscConfig+0x578>)
 8001904:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001908:	4a1b      	ldr	r2, [pc, #108]	; (8001978 <HAL_RCC_OscConfig+0x578>)
 800190a:	f023 0301 	bic.w	r3, r3, #1
 800190e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001912:	4b19      	ldr	r3, [pc, #100]	; (8001978 <HAL_RCC_OscConfig+0x578>)
 8001914:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001918:	4a17      	ldr	r2, [pc, #92]	; (8001978 <HAL_RCC_OscConfig+0x578>)
 800191a:	f023 0304 	bic.w	r3, r3, #4
 800191e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d016      	beq.n	8001958 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800192a:	f7fe fcb5 	bl	8000298 <HAL_GetTick>
 800192e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001930:	e00a      	b.n	8001948 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001932:	f7fe fcb1 	bl	8000298 <HAL_GetTick>
 8001936:	4602      	mov	r2, r0
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	1ad3      	subs	r3, r2, r3
 800193c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001940:	4293      	cmp	r3, r2
 8001942:	d901      	bls.n	8001948 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001944:	2303      	movs	r3, #3
 8001946:	e139      	b.n	8001bbc <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001948:	4b0b      	ldr	r3, [pc, #44]	; (8001978 <HAL_RCC_OscConfig+0x578>)
 800194a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800194e:	f003 0302 	and.w	r3, r3, #2
 8001952:	2b00      	cmp	r3, #0
 8001954:	d0ed      	beq.n	8001932 <HAL_RCC_OscConfig+0x532>
 8001956:	e01a      	b.n	800198e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001958:	f7fe fc9e 	bl	8000298 <HAL_GetTick>
 800195c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800195e:	e00f      	b.n	8001980 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001960:	f7fe fc9a 	bl	8000298 <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	f241 3288 	movw	r2, #5000	; 0x1388
 800196e:	4293      	cmp	r3, r2
 8001970:	d906      	bls.n	8001980 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e122      	b.n	8001bbc <HAL_RCC_OscConfig+0x7bc>
 8001976:	bf00      	nop
 8001978:	40021000 	.word	0x40021000
 800197c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001980:	4b90      	ldr	r3, [pc, #576]	; (8001bc4 <HAL_RCC_OscConfig+0x7c4>)
 8001982:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001986:	f003 0302 	and.w	r3, r3, #2
 800198a:	2b00      	cmp	r3, #0
 800198c:	d1e8      	bne.n	8001960 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800198e:	7ffb      	ldrb	r3, [r7, #31]
 8001990:	2b01      	cmp	r3, #1
 8001992:	d105      	bne.n	80019a0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001994:	4b8b      	ldr	r3, [pc, #556]	; (8001bc4 <HAL_RCC_OscConfig+0x7c4>)
 8001996:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001998:	4a8a      	ldr	r2, [pc, #552]	; (8001bc4 <HAL_RCC_OscConfig+0x7c4>)
 800199a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800199e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	f000 8108 	beq.w	8001bba <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	f040 80d0 	bne.w	8001b54 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80019b4:	4b83      	ldr	r3, [pc, #524]	; (8001bc4 <HAL_RCC_OscConfig+0x7c4>)
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	f003 0203 	and.w	r2, r3, #3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d130      	bne.n	8001a2a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d2:	3b01      	subs	r3, #1
 80019d4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d127      	bne.n	8001a2a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019e4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d11f      	bne.n	8001a2a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f0:	687a      	ldr	r2, [r7, #4]
 80019f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80019f4:	2a07      	cmp	r2, #7
 80019f6:	bf14      	ite	ne
 80019f8:	2201      	movne	r2, #1
 80019fa:	2200      	moveq	r2, #0
 80019fc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d113      	bne.n	8001a2a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a0c:	085b      	lsrs	r3, r3, #1
 8001a0e:	3b01      	subs	r3, #1
 8001a10:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001a12:	429a      	cmp	r2, r3
 8001a14:	d109      	bne.n	8001a2a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a20:	085b      	lsrs	r3, r3, #1
 8001a22:	3b01      	subs	r3, #1
 8001a24:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d06e      	beq.n	8001b08 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a2a:	69bb      	ldr	r3, [r7, #24]
 8001a2c:	2b0c      	cmp	r3, #12
 8001a2e:	d069      	beq.n	8001b04 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001a30:	4b64      	ldr	r3, [pc, #400]	; (8001bc4 <HAL_RCC_OscConfig+0x7c4>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d105      	bne.n	8001a48 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001a3c:	4b61      	ldr	r3, [pc, #388]	; (8001bc4 <HAL_RCC_OscConfig+0x7c4>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d001      	beq.n	8001a4c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e0b7      	b.n	8001bbc <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001a4c:	4b5d      	ldr	r3, [pc, #372]	; (8001bc4 <HAL_RCC_OscConfig+0x7c4>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a5c      	ldr	r2, [pc, #368]	; (8001bc4 <HAL_RCC_OscConfig+0x7c4>)
 8001a52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a56:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a58:	f7fe fc1e 	bl	8000298 <HAL_GetTick>
 8001a5c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a5e:	e008      	b.n	8001a72 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a60:	f7fe fc1a 	bl	8000298 <HAL_GetTick>
 8001a64:	4602      	mov	r2, r0
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d901      	bls.n	8001a72 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e0a4      	b.n	8001bbc <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a72:	4b54      	ldr	r3, [pc, #336]	; (8001bc4 <HAL_RCC_OscConfig+0x7c4>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d1f0      	bne.n	8001a60 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a7e:	4b51      	ldr	r3, [pc, #324]	; (8001bc4 <HAL_RCC_OscConfig+0x7c4>)
 8001a80:	68da      	ldr	r2, [r3, #12]
 8001a82:	4b51      	ldr	r3, [pc, #324]	; (8001bc8 <HAL_RCC_OscConfig+0x7c8>)
 8001a84:	4013      	ands	r3, r2
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001a8a:	687a      	ldr	r2, [r7, #4]
 8001a8c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001a8e:	3a01      	subs	r2, #1
 8001a90:	0112      	lsls	r2, r2, #4
 8001a92:	4311      	orrs	r1, r2
 8001a94:	687a      	ldr	r2, [r7, #4]
 8001a96:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001a98:	0212      	lsls	r2, r2, #8
 8001a9a:	4311      	orrs	r1, r2
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001aa0:	0852      	lsrs	r2, r2, #1
 8001aa2:	3a01      	subs	r2, #1
 8001aa4:	0552      	lsls	r2, r2, #21
 8001aa6:	4311      	orrs	r1, r2
 8001aa8:	687a      	ldr	r2, [r7, #4]
 8001aaa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001aac:	0852      	lsrs	r2, r2, #1
 8001aae:	3a01      	subs	r2, #1
 8001ab0:	0652      	lsls	r2, r2, #25
 8001ab2:	4311      	orrs	r1, r2
 8001ab4:	687a      	ldr	r2, [r7, #4]
 8001ab6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001ab8:	0912      	lsrs	r2, r2, #4
 8001aba:	0452      	lsls	r2, r2, #17
 8001abc:	430a      	orrs	r2, r1
 8001abe:	4941      	ldr	r1, [pc, #260]	; (8001bc4 <HAL_RCC_OscConfig+0x7c4>)
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001ac4:	4b3f      	ldr	r3, [pc, #252]	; (8001bc4 <HAL_RCC_OscConfig+0x7c4>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a3e      	ldr	r2, [pc, #248]	; (8001bc4 <HAL_RCC_OscConfig+0x7c4>)
 8001aca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ace:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ad0:	4b3c      	ldr	r3, [pc, #240]	; (8001bc4 <HAL_RCC_OscConfig+0x7c4>)
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	4a3b      	ldr	r2, [pc, #236]	; (8001bc4 <HAL_RCC_OscConfig+0x7c4>)
 8001ad6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ada:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001adc:	f7fe fbdc 	bl	8000298 <HAL_GetTick>
 8001ae0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ae2:	e008      	b.n	8001af6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ae4:	f7fe fbd8 	bl	8000298 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e062      	b.n	8001bbc <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001af6:	4b33      	ldr	r3, [pc, #204]	; (8001bc4 <HAL_RCC_OscConfig+0x7c4>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d0f0      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b02:	e05a      	b.n	8001bba <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e059      	b.n	8001bbc <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b08:	4b2e      	ldr	r3, [pc, #184]	; (8001bc4 <HAL_RCC_OscConfig+0x7c4>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d152      	bne.n	8001bba <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001b14:	4b2b      	ldr	r3, [pc, #172]	; (8001bc4 <HAL_RCC_OscConfig+0x7c4>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a2a      	ldr	r2, [pc, #168]	; (8001bc4 <HAL_RCC_OscConfig+0x7c4>)
 8001b1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b1e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b20:	4b28      	ldr	r3, [pc, #160]	; (8001bc4 <HAL_RCC_OscConfig+0x7c4>)
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	4a27      	ldr	r2, [pc, #156]	; (8001bc4 <HAL_RCC_OscConfig+0x7c4>)
 8001b26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b2a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001b2c:	f7fe fbb4 	bl	8000298 <HAL_GetTick>
 8001b30:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b32:	e008      	b.n	8001b46 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b34:	f7fe fbb0 	bl	8000298 <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d901      	bls.n	8001b46 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e03a      	b.n	8001bbc <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b46:	4b1f      	ldr	r3, [pc, #124]	; (8001bc4 <HAL_RCC_OscConfig+0x7c4>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d0f0      	beq.n	8001b34 <HAL_RCC_OscConfig+0x734>
 8001b52:	e032      	b.n	8001bba <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b54:	69bb      	ldr	r3, [r7, #24]
 8001b56:	2b0c      	cmp	r3, #12
 8001b58:	d02d      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b5a:	4b1a      	ldr	r3, [pc, #104]	; (8001bc4 <HAL_RCC_OscConfig+0x7c4>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a19      	ldr	r2, [pc, #100]	; (8001bc4 <HAL_RCC_OscConfig+0x7c4>)
 8001b60:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b64:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001b66:	4b17      	ldr	r3, [pc, #92]	; (8001bc4 <HAL_RCC_OscConfig+0x7c4>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d105      	bne.n	8001b7e <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001b72:	4b14      	ldr	r3, [pc, #80]	; (8001bc4 <HAL_RCC_OscConfig+0x7c4>)
 8001b74:	68db      	ldr	r3, [r3, #12]
 8001b76:	4a13      	ldr	r2, [pc, #76]	; (8001bc4 <HAL_RCC_OscConfig+0x7c4>)
 8001b78:	f023 0303 	bic.w	r3, r3, #3
 8001b7c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001b7e:	4b11      	ldr	r3, [pc, #68]	; (8001bc4 <HAL_RCC_OscConfig+0x7c4>)
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	4a10      	ldr	r2, [pc, #64]	; (8001bc4 <HAL_RCC_OscConfig+0x7c4>)
 8001b84:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001b88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b8c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b8e:	f7fe fb83 	bl	8000298 <HAL_GetTick>
 8001b92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b94:	e008      	b.n	8001ba8 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b96:	f7fe fb7f 	bl	8000298 <HAL_GetTick>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	2b02      	cmp	r3, #2
 8001ba2:	d901      	bls.n	8001ba8 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	e009      	b.n	8001bbc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ba8:	4b06      	ldr	r3, [pc, #24]	; (8001bc4 <HAL_RCC_OscConfig+0x7c4>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d1f0      	bne.n	8001b96 <HAL_RCC_OscConfig+0x796>
 8001bb4:	e001      	b.n	8001bba <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e000      	b.n	8001bbc <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8001bba:	2300      	movs	r3, #0
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3720      	adds	r7, #32
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	40021000 	.word	0x40021000
 8001bc8:	f99d808c 	.word	0xf99d808c

08001bcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d101      	bne.n	8001be0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e0c8      	b.n	8001d72 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001be0:	4b66      	ldr	r3, [pc, #408]	; (8001d7c <HAL_RCC_ClockConfig+0x1b0>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 0307 	and.w	r3, r3, #7
 8001be8:	683a      	ldr	r2, [r7, #0]
 8001bea:	429a      	cmp	r2, r3
 8001bec:	d910      	bls.n	8001c10 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bee:	4b63      	ldr	r3, [pc, #396]	; (8001d7c <HAL_RCC_ClockConfig+0x1b0>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f023 0207 	bic.w	r2, r3, #7
 8001bf6:	4961      	ldr	r1, [pc, #388]	; (8001d7c <HAL_RCC_ClockConfig+0x1b0>)
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bfe:	4b5f      	ldr	r3, [pc, #380]	; (8001d7c <HAL_RCC_ClockConfig+0x1b0>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0307 	and.w	r3, r3, #7
 8001c06:	683a      	ldr	r2, [r7, #0]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d001      	beq.n	8001c10 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e0b0      	b.n	8001d72 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 0301 	and.w	r3, r3, #1
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d04c      	beq.n	8001cb6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	2b03      	cmp	r3, #3
 8001c22:	d107      	bne.n	8001c34 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c24:	4b56      	ldr	r3, [pc, #344]	; (8001d80 <HAL_RCC_ClockConfig+0x1b4>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d121      	bne.n	8001c74 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e09e      	b.n	8001d72 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d107      	bne.n	8001c4c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c3c:	4b50      	ldr	r3, [pc, #320]	; (8001d80 <HAL_RCC_ClockConfig+0x1b4>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d115      	bne.n	8001c74 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e092      	b.n	8001d72 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d107      	bne.n	8001c64 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c54:	4b4a      	ldr	r3, [pc, #296]	; (8001d80 <HAL_RCC_ClockConfig+0x1b4>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0302 	and.w	r3, r3, #2
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d109      	bne.n	8001c74 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e086      	b.n	8001d72 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c64:	4b46      	ldr	r3, [pc, #280]	; (8001d80 <HAL_RCC_ClockConfig+0x1b4>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d101      	bne.n	8001c74 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e07e      	b.n	8001d72 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c74:	4b42      	ldr	r3, [pc, #264]	; (8001d80 <HAL_RCC_ClockConfig+0x1b4>)
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	f023 0203 	bic.w	r2, r3, #3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	493f      	ldr	r1, [pc, #252]	; (8001d80 <HAL_RCC_ClockConfig+0x1b4>)
 8001c82:	4313      	orrs	r3, r2
 8001c84:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c86:	f7fe fb07 	bl	8000298 <HAL_GetTick>
 8001c8a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c8c:	e00a      	b.n	8001ca4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c8e:	f7fe fb03 	bl	8000298 <HAL_GetTick>
 8001c92:	4602      	mov	r2, r0
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d901      	bls.n	8001ca4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	e066      	b.n	8001d72 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ca4:	4b36      	ldr	r3, [pc, #216]	; (8001d80 <HAL_RCC_ClockConfig+0x1b4>)
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	f003 020c 	and.w	r2, r3, #12
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d1eb      	bne.n	8001c8e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0302 	and.w	r3, r3, #2
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d008      	beq.n	8001cd4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cc2:	4b2f      	ldr	r3, [pc, #188]	; (8001d80 <HAL_RCC_ClockConfig+0x1b4>)
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	492c      	ldr	r1, [pc, #176]	; (8001d80 <HAL_RCC_ClockConfig+0x1b4>)
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cd4:	4b29      	ldr	r3, [pc, #164]	; (8001d7c <HAL_RCC_ClockConfig+0x1b0>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0307 	and.w	r3, r3, #7
 8001cdc:	683a      	ldr	r2, [r7, #0]
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d210      	bcs.n	8001d04 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ce2:	4b26      	ldr	r3, [pc, #152]	; (8001d7c <HAL_RCC_ClockConfig+0x1b0>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f023 0207 	bic.w	r2, r3, #7
 8001cea:	4924      	ldr	r1, [pc, #144]	; (8001d7c <HAL_RCC_ClockConfig+0x1b0>)
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cf2:	4b22      	ldr	r3, [pc, #136]	; (8001d7c <HAL_RCC_ClockConfig+0x1b0>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0307 	and.w	r3, r3, #7
 8001cfa:	683a      	ldr	r2, [r7, #0]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d001      	beq.n	8001d04 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e036      	b.n	8001d72 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 0304 	and.w	r3, r3, #4
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d008      	beq.n	8001d22 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d10:	4b1b      	ldr	r3, [pc, #108]	; (8001d80 <HAL_RCC_ClockConfig+0x1b4>)
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	4918      	ldr	r1, [pc, #96]	; (8001d80 <HAL_RCC_ClockConfig+0x1b4>)
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0308 	and.w	r3, r3, #8
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d009      	beq.n	8001d42 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d2e:	4b14      	ldr	r3, [pc, #80]	; (8001d80 <HAL_RCC_ClockConfig+0x1b4>)
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	691b      	ldr	r3, [r3, #16]
 8001d3a:	00db      	lsls	r3, r3, #3
 8001d3c:	4910      	ldr	r1, [pc, #64]	; (8001d80 <HAL_RCC_ClockConfig+0x1b4>)
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d42:	f000 f825 	bl	8001d90 <HAL_RCC_GetSysClockFreq>
 8001d46:	4601      	mov	r1, r0
 8001d48:	4b0d      	ldr	r3, [pc, #52]	; (8001d80 <HAL_RCC_ClockConfig+0x1b4>)
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	091b      	lsrs	r3, r3, #4
 8001d4e:	f003 030f 	and.w	r3, r3, #15
 8001d52:	4a0c      	ldr	r2, [pc, #48]	; (8001d84 <HAL_RCC_ClockConfig+0x1b8>)
 8001d54:	5cd3      	ldrb	r3, [r2, r3]
 8001d56:	f003 031f 	and.w	r3, r3, #31
 8001d5a:	fa21 f303 	lsr.w	r3, r1, r3
 8001d5e:	4a0a      	ldr	r2, [pc, #40]	; (8001d88 <HAL_RCC_ClockConfig+0x1bc>)
 8001d60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001d62:	4b0a      	ldr	r3, [pc, #40]	; (8001d8c <HAL_RCC_ClockConfig+0x1c0>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7fe fa46 	bl	80001f8 <HAL_InitTick>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	72fb      	strb	r3, [r7, #11]

  return status;
 8001d70:	7afb      	ldrb	r3, [r7, #11]
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3710      	adds	r7, #16
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	40022000 	.word	0x40022000
 8001d80:	40021000 	.word	0x40021000
 8001d84:	08003100 	.word	0x08003100
 8001d88:	20000008 	.word	0x20000008
 8001d8c:	20000000 	.word	0x20000000

08001d90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b089      	sub	sp, #36	; 0x24
 8001d94:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001d96:	2300      	movs	r3, #0
 8001d98:	61fb      	str	r3, [r7, #28]
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d9e:	4b3d      	ldr	r3, [pc, #244]	; (8001e94 <HAL_RCC_GetSysClockFreq+0x104>)
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	f003 030c 	and.w	r3, r3, #12
 8001da6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001da8:	4b3a      	ldr	r3, [pc, #232]	; (8001e94 <HAL_RCC_GetSysClockFreq+0x104>)
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	f003 0303 	and.w	r3, r3, #3
 8001db0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d005      	beq.n	8001dc4 <HAL_RCC_GetSysClockFreq+0x34>
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	2b0c      	cmp	r3, #12
 8001dbc:	d121      	bne.n	8001e02 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d11e      	bne.n	8001e02 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001dc4:	4b33      	ldr	r3, [pc, #204]	; (8001e94 <HAL_RCC_GetSysClockFreq+0x104>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0308 	and.w	r3, r3, #8
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d107      	bne.n	8001de0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001dd0:	4b30      	ldr	r3, [pc, #192]	; (8001e94 <HAL_RCC_GetSysClockFreq+0x104>)
 8001dd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dd6:	0a1b      	lsrs	r3, r3, #8
 8001dd8:	f003 030f 	and.w	r3, r3, #15
 8001ddc:	61fb      	str	r3, [r7, #28]
 8001dde:	e005      	b.n	8001dec <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001de0:	4b2c      	ldr	r3, [pc, #176]	; (8001e94 <HAL_RCC_GetSysClockFreq+0x104>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	091b      	lsrs	r3, r3, #4
 8001de6:	f003 030f 	and.w	r3, r3, #15
 8001dea:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001dec:	4a2a      	ldr	r2, [pc, #168]	; (8001e98 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001df4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d10d      	bne.n	8001e18 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e00:	e00a      	b.n	8001e18 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	2b04      	cmp	r3, #4
 8001e06:	d102      	bne.n	8001e0e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001e08:	4b24      	ldr	r3, [pc, #144]	; (8001e9c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001e0a:	61bb      	str	r3, [r7, #24]
 8001e0c:	e004      	b.n	8001e18 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	2b08      	cmp	r3, #8
 8001e12:	d101      	bne.n	8001e18 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e14:	4b22      	ldr	r3, [pc, #136]	; (8001ea0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e16:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	2b0c      	cmp	r3, #12
 8001e1c:	d133      	bne.n	8001e86 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e1e:	4b1d      	ldr	r3, [pc, #116]	; (8001e94 <HAL_RCC_GetSysClockFreq+0x104>)
 8001e20:	68db      	ldr	r3, [r3, #12]
 8001e22:	f003 0303 	and.w	r3, r3, #3
 8001e26:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d002      	beq.n	8001e34 <HAL_RCC_GetSysClockFreq+0xa4>
 8001e2e:	2b03      	cmp	r3, #3
 8001e30:	d003      	beq.n	8001e3a <HAL_RCC_GetSysClockFreq+0xaa>
 8001e32:	e005      	b.n	8001e40 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001e34:	4b19      	ldr	r3, [pc, #100]	; (8001e9c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001e36:	617b      	str	r3, [r7, #20]
      break;
 8001e38:	e005      	b.n	8001e46 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001e3a:	4b19      	ldr	r3, [pc, #100]	; (8001ea0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e3c:	617b      	str	r3, [r7, #20]
      break;
 8001e3e:	e002      	b.n	8001e46 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	617b      	str	r3, [r7, #20]
      break;
 8001e44:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e46:	4b13      	ldr	r3, [pc, #76]	; (8001e94 <HAL_RCC_GetSysClockFreq+0x104>)
 8001e48:	68db      	ldr	r3, [r3, #12]
 8001e4a:	091b      	lsrs	r3, r3, #4
 8001e4c:	f003 0307 	and.w	r3, r3, #7
 8001e50:	3301      	adds	r3, #1
 8001e52:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001e54:	4b0f      	ldr	r3, [pc, #60]	; (8001e94 <HAL_RCC_GetSysClockFreq+0x104>)
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	0a1b      	lsrs	r3, r3, #8
 8001e5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e5e:	697a      	ldr	r2, [r7, #20]
 8001e60:	fb02 f203 	mul.w	r2, r2, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e6a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e6c:	4b09      	ldr	r3, [pc, #36]	; (8001e94 <HAL_RCC_GetSysClockFreq+0x104>)
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	0e5b      	lsrs	r3, r3, #25
 8001e72:	f003 0303 	and.w	r3, r3, #3
 8001e76:	3301      	adds	r3, #1
 8001e78:	005b      	lsls	r3, r3, #1
 8001e7a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001e7c:	697a      	ldr	r2, [r7, #20]
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e84:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001e86:	69bb      	ldr	r3, [r7, #24]
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3724      	adds	r7, #36	; 0x24
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr
 8001e94:	40021000 	.word	0x40021000
 8001e98:	08003110 	.word	0x08003110
 8001e9c:	00f42400 	.word	0x00f42400
 8001ea0:	007a1200 	.word	0x007a1200

08001ea4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b086      	sub	sp, #24
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001eac:	2300      	movs	r3, #0
 8001eae:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001eb0:	4b2a      	ldr	r3, [pc, #168]	; (8001f5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001eb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d003      	beq.n	8001ec4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001ebc:	f7ff fa3c 	bl	8001338 <HAL_PWREx_GetVoltageRange>
 8001ec0:	6178      	str	r0, [r7, #20]
 8001ec2:	e014      	b.n	8001eee <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ec4:	4b25      	ldr	r3, [pc, #148]	; (8001f5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ec8:	4a24      	ldr	r2, [pc, #144]	; (8001f5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001eca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ece:	6593      	str	r3, [r2, #88]	; 0x58
 8001ed0:	4b22      	ldr	r3, [pc, #136]	; (8001f5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ed2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ed8:	60fb      	str	r3, [r7, #12]
 8001eda:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001edc:	f7ff fa2c 	bl	8001338 <HAL_PWREx_GetVoltageRange>
 8001ee0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001ee2:	4b1e      	ldr	r3, [pc, #120]	; (8001f5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee6:	4a1d      	ldr	r2, [pc, #116]	; (8001f5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ee8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001eec:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ef4:	d10b      	bne.n	8001f0e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2b80      	cmp	r3, #128	; 0x80
 8001efa:	d919      	bls.n	8001f30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2ba0      	cmp	r3, #160	; 0xa0
 8001f00:	d902      	bls.n	8001f08 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f02:	2302      	movs	r3, #2
 8001f04:	613b      	str	r3, [r7, #16]
 8001f06:	e013      	b.n	8001f30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f08:	2301      	movs	r3, #1
 8001f0a:	613b      	str	r3, [r7, #16]
 8001f0c:	e010      	b.n	8001f30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2b80      	cmp	r3, #128	; 0x80
 8001f12:	d902      	bls.n	8001f1a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001f14:	2303      	movs	r3, #3
 8001f16:	613b      	str	r3, [r7, #16]
 8001f18:	e00a      	b.n	8001f30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2b80      	cmp	r3, #128	; 0x80
 8001f1e:	d102      	bne.n	8001f26 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f20:	2302      	movs	r3, #2
 8001f22:	613b      	str	r3, [r7, #16]
 8001f24:	e004      	b.n	8001f30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2b70      	cmp	r3, #112	; 0x70
 8001f2a:	d101      	bne.n	8001f30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001f30:	4b0b      	ldr	r3, [pc, #44]	; (8001f60 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f023 0207 	bic.w	r2, r3, #7
 8001f38:	4909      	ldr	r1, [pc, #36]	; (8001f60 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001f40:	4b07      	ldr	r3, [pc, #28]	; (8001f60 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0307 	and.w	r3, r3, #7
 8001f48:	693a      	ldr	r2, [r7, #16]
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d001      	beq.n	8001f52 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e000      	b.n	8001f54 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001f52:	2300      	movs	r3, #0
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3718      	adds	r7, #24
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	40021000 	.word	0x40021000
 8001f60:	40022000 	.word	0x40022000

08001f64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d101      	bne.n	8001f76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e049      	b.n	800200a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d106      	bne.n	8001f90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f000 ff6c 	bl	8002e68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2202      	movs	r2, #2
 8001f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	3304      	adds	r3, #4
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	4610      	mov	r0, r2
 8001fa4:	f000 faa8 	bl	80024f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2201      	movs	r2, #1
 8001fac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2201      	movs	r2, #1
 8001fec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2201      	movs	r2, #1
 8002004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002008:	2300      	movs	r3, #0
}
 800200a:	4618      	mov	r0, r3
 800200c:	3708      	adds	r7, #8
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
	...

08002014 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002014:	b480      	push	{r7}
 8002016:	b085      	sub	sp, #20
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002022:	b2db      	uxtb	r3, r3
 8002024:	2b01      	cmp	r3, #1
 8002026:	d001      	beq.n	800202c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e047      	b.n	80020bc <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2202      	movs	r2, #2
 8002030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a23      	ldr	r2, [pc, #140]	; (80020c8 <HAL_TIM_Base_Start+0xb4>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d01d      	beq.n	800207a <HAL_TIM_Base_Start+0x66>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002046:	d018      	beq.n	800207a <HAL_TIM_Base_Start+0x66>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a1f      	ldr	r2, [pc, #124]	; (80020cc <HAL_TIM_Base_Start+0xb8>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d013      	beq.n	800207a <HAL_TIM_Base_Start+0x66>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a1e      	ldr	r2, [pc, #120]	; (80020d0 <HAL_TIM_Base_Start+0xbc>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d00e      	beq.n	800207a <HAL_TIM_Base_Start+0x66>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a1c      	ldr	r2, [pc, #112]	; (80020d4 <HAL_TIM_Base_Start+0xc0>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d009      	beq.n	800207a <HAL_TIM_Base_Start+0x66>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a1b      	ldr	r2, [pc, #108]	; (80020d8 <HAL_TIM_Base_Start+0xc4>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d004      	beq.n	800207a <HAL_TIM_Base_Start+0x66>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a19      	ldr	r2, [pc, #100]	; (80020dc <HAL_TIM_Base_Start+0xc8>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d115      	bne.n	80020a6 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	689a      	ldr	r2, [r3, #8]
 8002080:	4b17      	ldr	r3, [pc, #92]	; (80020e0 <HAL_TIM_Base_Start+0xcc>)
 8002082:	4013      	ands	r3, r2
 8002084:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2b06      	cmp	r3, #6
 800208a:	d015      	beq.n	80020b8 <HAL_TIM_Base_Start+0xa4>
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002092:	d011      	beq.n	80020b8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f042 0201 	orr.w	r2, r2, #1
 80020a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020a4:	e008      	b.n	80020b8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f042 0201 	orr.w	r2, r2, #1
 80020b4:	601a      	str	r2, [r3, #0]
 80020b6:	e000      	b.n	80020ba <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020b8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80020ba:	2300      	movs	r3, #0
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3714      	adds	r7, #20
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr
 80020c8:	40012c00 	.word	0x40012c00
 80020cc:	40000400 	.word	0x40000400
 80020d0:	40000800 	.word	0x40000800
 80020d4:	40000c00 	.word	0x40000c00
 80020d8:	40013400 	.word	0x40013400
 80020dc:	40014000 	.word	0x40014000
 80020e0:	00010007 	.word	0x00010007

080020e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	691b      	ldr	r3, [r3, #16]
 80020f2:	f003 0302 	and.w	r3, r3, #2
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d122      	bne.n	8002140 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	f003 0302 	and.w	r3, r3, #2
 8002104:	2b02      	cmp	r3, #2
 8002106:	d11b      	bne.n	8002140 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f06f 0202 	mvn.w	r2, #2
 8002110:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2201      	movs	r2, #1
 8002116:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	699b      	ldr	r3, [r3, #24]
 800211e:	f003 0303 	and.w	r3, r3, #3
 8002122:	2b00      	cmp	r3, #0
 8002124:	d003      	beq.n	800212e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f000 f9c8 	bl	80024bc <HAL_TIM_IC_CaptureCallback>
 800212c:	e005      	b.n	800213a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f000 f9ba 	bl	80024a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f000 f9cb 	bl	80024d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	691b      	ldr	r3, [r3, #16]
 8002146:	f003 0304 	and.w	r3, r3, #4
 800214a:	2b04      	cmp	r3, #4
 800214c:	d122      	bne.n	8002194 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	f003 0304 	and.w	r3, r3, #4
 8002158:	2b04      	cmp	r3, #4
 800215a:	d11b      	bne.n	8002194 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f06f 0204 	mvn.w	r2, #4
 8002164:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2202      	movs	r2, #2
 800216a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	699b      	ldr	r3, [r3, #24]
 8002172:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002176:	2b00      	cmp	r3, #0
 8002178:	d003      	beq.n	8002182 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f000 f99e 	bl	80024bc <HAL_TIM_IC_CaptureCallback>
 8002180:	e005      	b.n	800218e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f000 f990 	bl	80024a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	f000 f9a1 	bl	80024d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2200      	movs	r2, #0
 8002192:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	691b      	ldr	r3, [r3, #16]
 800219a:	f003 0308 	and.w	r3, r3, #8
 800219e:	2b08      	cmp	r3, #8
 80021a0:	d122      	bne.n	80021e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	f003 0308 	and.w	r3, r3, #8
 80021ac:	2b08      	cmp	r3, #8
 80021ae:	d11b      	bne.n	80021e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f06f 0208 	mvn.w	r2, #8
 80021b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2204      	movs	r2, #4
 80021be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	69db      	ldr	r3, [r3, #28]
 80021c6:	f003 0303 	and.w	r3, r3, #3
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d003      	beq.n	80021d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f000 f974 	bl	80024bc <HAL_TIM_IC_CaptureCallback>
 80021d4:	e005      	b.n	80021e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f000 f966 	bl	80024a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	f000 f977 	bl	80024d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2200      	movs	r2, #0
 80021e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	691b      	ldr	r3, [r3, #16]
 80021ee:	f003 0310 	and.w	r3, r3, #16
 80021f2:	2b10      	cmp	r3, #16
 80021f4:	d122      	bne.n	800223c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	f003 0310 	and.w	r3, r3, #16
 8002200:	2b10      	cmp	r3, #16
 8002202:	d11b      	bne.n	800223c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f06f 0210 	mvn.w	r2, #16
 800220c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2208      	movs	r2, #8
 8002212:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	69db      	ldr	r3, [r3, #28]
 800221a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800221e:	2b00      	cmp	r3, #0
 8002220:	d003      	beq.n	800222a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f000 f94a 	bl	80024bc <HAL_TIM_IC_CaptureCallback>
 8002228:	e005      	b.n	8002236 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f000 f93c 	bl	80024a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	f000 f94d 	bl	80024d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2200      	movs	r2, #0
 800223a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	691b      	ldr	r3, [r3, #16]
 8002242:	f003 0301 	and.w	r3, r3, #1
 8002246:	2b01      	cmp	r3, #1
 8002248:	d10e      	bne.n	8002268 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	f003 0301 	and.w	r3, r3, #1
 8002254:	2b01      	cmp	r3, #1
 8002256:	d107      	bne.n	8002268 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f06f 0201 	mvn.w	r2, #1
 8002260:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f000 f916 	bl	8002494 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	691b      	ldr	r3, [r3, #16]
 800226e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002272:	2b80      	cmp	r3, #128	; 0x80
 8002274:	d10e      	bne.n	8002294 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002280:	2b80      	cmp	r3, #128	; 0x80
 8002282:	d107      	bne.n	8002294 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800228c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f000 faf8 	bl	8002884 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	691b      	ldr	r3, [r3, #16]
 800229a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800229e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022a2:	d10e      	bne.n	80022c2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022ae:	2b80      	cmp	r3, #128	; 0x80
 80022b0:	d107      	bne.n	80022c2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80022ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f000 faeb 	bl	8002898 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	691b      	ldr	r3, [r3, #16]
 80022c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022cc:	2b40      	cmp	r3, #64	; 0x40
 80022ce:	d10e      	bne.n	80022ee <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	68db      	ldr	r3, [r3, #12]
 80022d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022da:	2b40      	cmp	r3, #64	; 0x40
 80022dc:	d107      	bne.n	80022ee <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80022e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	f000 f8fb 	bl	80024e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	691b      	ldr	r3, [r3, #16]
 80022f4:	f003 0320 	and.w	r3, r3, #32
 80022f8:	2b20      	cmp	r3, #32
 80022fa:	d10e      	bne.n	800231a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	68db      	ldr	r3, [r3, #12]
 8002302:	f003 0320 	and.w	r3, r3, #32
 8002306:	2b20      	cmp	r3, #32
 8002308:	d107      	bne.n	800231a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f06f 0220 	mvn.w	r2, #32
 8002312:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	f000 faab 	bl	8002870 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800231a:	bf00      	nop
 800231c:	3708      	adds	r7, #8
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}

08002322 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002322:	b580      	push	{r7, lr}
 8002324:	b084      	sub	sp, #16
 8002326:	af00      	add	r7, sp, #0
 8002328:	6078      	str	r0, [r7, #4]
 800232a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002332:	2b01      	cmp	r3, #1
 8002334:	d101      	bne.n	800233a <HAL_TIM_ConfigClockSource+0x18>
 8002336:	2302      	movs	r3, #2
 8002338:	e0a8      	b.n	800248c <HAL_TIM_ConfigClockSource+0x16a>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2201      	movs	r2, #1
 800233e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2202      	movs	r2, #2
 8002346:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002358:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800235c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002364:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	68fa      	ldr	r2, [r7, #12]
 800236c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	2b40      	cmp	r3, #64	; 0x40
 8002374:	d067      	beq.n	8002446 <HAL_TIM_ConfigClockSource+0x124>
 8002376:	2b40      	cmp	r3, #64	; 0x40
 8002378:	d80b      	bhi.n	8002392 <HAL_TIM_ConfigClockSource+0x70>
 800237a:	2b10      	cmp	r3, #16
 800237c:	d073      	beq.n	8002466 <HAL_TIM_ConfigClockSource+0x144>
 800237e:	2b10      	cmp	r3, #16
 8002380:	d802      	bhi.n	8002388 <HAL_TIM_ConfigClockSource+0x66>
 8002382:	2b00      	cmp	r3, #0
 8002384:	d06f      	beq.n	8002466 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002386:	e078      	b.n	800247a <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8002388:	2b20      	cmp	r3, #32
 800238a:	d06c      	beq.n	8002466 <HAL_TIM_ConfigClockSource+0x144>
 800238c:	2b30      	cmp	r3, #48	; 0x30
 800238e:	d06a      	beq.n	8002466 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8002390:	e073      	b.n	800247a <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8002392:	2b70      	cmp	r3, #112	; 0x70
 8002394:	d00d      	beq.n	80023b2 <HAL_TIM_ConfigClockSource+0x90>
 8002396:	2b70      	cmp	r3, #112	; 0x70
 8002398:	d804      	bhi.n	80023a4 <HAL_TIM_ConfigClockSource+0x82>
 800239a:	2b50      	cmp	r3, #80	; 0x50
 800239c:	d033      	beq.n	8002406 <HAL_TIM_ConfigClockSource+0xe4>
 800239e:	2b60      	cmp	r3, #96	; 0x60
 80023a0:	d041      	beq.n	8002426 <HAL_TIM_ConfigClockSource+0x104>
      break;
 80023a2:	e06a      	b.n	800247a <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80023a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023a8:	d066      	beq.n	8002478 <HAL_TIM_ConfigClockSource+0x156>
 80023aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023ae:	d017      	beq.n	80023e0 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 80023b0:	e063      	b.n	800247a <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6818      	ldr	r0, [r3, #0]
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	6899      	ldr	r1, [r3, #8]
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	685a      	ldr	r2, [r3, #4]
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	f000 f9ad 	bl	8002720 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80023d4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	68fa      	ldr	r2, [r7, #12]
 80023dc:	609a      	str	r2, [r3, #8]
      break;
 80023de:	e04c      	b.n	800247a <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6818      	ldr	r0, [r3, #0]
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	6899      	ldr	r1, [r3, #8]
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	685a      	ldr	r2, [r3, #4]
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	f000 f996 	bl	8002720 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	689a      	ldr	r2, [r3, #8]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002402:	609a      	str	r2, [r3, #8]
      break;
 8002404:	e039      	b.n	800247a <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6818      	ldr	r0, [r3, #0]
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	6859      	ldr	r1, [r3, #4]
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	461a      	mov	r2, r3
 8002414:	f000 f90a 	bl	800262c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2150      	movs	r1, #80	; 0x50
 800241e:	4618      	mov	r0, r3
 8002420:	f000 f963 	bl	80026ea <TIM_ITRx_SetConfig>
      break;
 8002424:	e029      	b.n	800247a <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6818      	ldr	r0, [r3, #0]
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	6859      	ldr	r1, [r3, #4]
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	461a      	mov	r2, r3
 8002434:	f000 f929 	bl	800268a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2160      	movs	r1, #96	; 0x60
 800243e:	4618      	mov	r0, r3
 8002440:	f000 f953 	bl	80026ea <TIM_ITRx_SetConfig>
      break;
 8002444:	e019      	b.n	800247a <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6818      	ldr	r0, [r3, #0]
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	6859      	ldr	r1, [r3, #4]
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	461a      	mov	r2, r3
 8002454:	f000 f8ea 	bl	800262c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2140      	movs	r1, #64	; 0x40
 800245e:	4618      	mov	r0, r3
 8002460:	f000 f943 	bl	80026ea <TIM_ITRx_SetConfig>
      break;
 8002464:	e009      	b.n	800247a <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4619      	mov	r1, r3
 8002470:	4610      	mov	r0, r2
 8002472:	f000 f93a 	bl	80026ea <TIM_ITRx_SetConfig>
        break;
 8002476:	e000      	b.n	800247a <HAL_TIM_ConfigClockSource+0x158>
      break;
 8002478:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2201      	movs	r2, #1
 800247e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800248a:	2300      	movs	r3, #0
}
 800248c:	4618      	mov	r0, r3
 800248e:	3710      	adds	r7, #16
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}

08002494 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800249c:	bf00      	nop
 800249e:	370c      	adds	r7, #12
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr

080024a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80024b0:	bf00      	nop
 80024b2:	370c      	adds	r7, #12
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80024c4:	bf00      	nop
 80024c6:	370c      	adds	r7, #12
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr

080024d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80024d8:	bf00      	nop
 80024da:	370c      	adds	r7, #12
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr

080024e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80024ec:	bf00      	nop
 80024ee:	370c      	adds	r7, #12
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b085      	sub	sp, #20
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	4a40      	ldr	r2, [pc, #256]	; (800260c <TIM_Base_SetConfig+0x114>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d013      	beq.n	8002538 <TIM_Base_SetConfig+0x40>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002516:	d00f      	beq.n	8002538 <TIM_Base_SetConfig+0x40>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	4a3d      	ldr	r2, [pc, #244]	; (8002610 <TIM_Base_SetConfig+0x118>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d00b      	beq.n	8002538 <TIM_Base_SetConfig+0x40>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	4a3c      	ldr	r2, [pc, #240]	; (8002614 <TIM_Base_SetConfig+0x11c>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d007      	beq.n	8002538 <TIM_Base_SetConfig+0x40>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	4a3b      	ldr	r2, [pc, #236]	; (8002618 <TIM_Base_SetConfig+0x120>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d003      	beq.n	8002538 <TIM_Base_SetConfig+0x40>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	4a3a      	ldr	r2, [pc, #232]	; (800261c <TIM_Base_SetConfig+0x124>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d108      	bne.n	800254a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800253e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	68fa      	ldr	r2, [r7, #12]
 8002546:	4313      	orrs	r3, r2
 8002548:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a2f      	ldr	r2, [pc, #188]	; (800260c <TIM_Base_SetConfig+0x114>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d01f      	beq.n	8002592 <TIM_Base_SetConfig+0x9a>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002558:	d01b      	beq.n	8002592 <TIM_Base_SetConfig+0x9a>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4a2c      	ldr	r2, [pc, #176]	; (8002610 <TIM_Base_SetConfig+0x118>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d017      	beq.n	8002592 <TIM_Base_SetConfig+0x9a>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a2b      	ldr	r2, [pc, #172]	; (8002614 <TIM_Base_SetConfig+0x11c>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d013      	beq.n	8002592 <TIM_Base_SetConfig+0x9a>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4a2a      	ldr	r2, [pc, #168]	; (8002618 <TIM_Base_SetConfig+0x120>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d00f      	beq.n	8002592 <TIM_Base_SetConfig+0x9a>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a29      	ldr	r2, [pc, #164]	; (800261c <TIM_Base_SetConfig+0x124>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d00b      	beq.n	8002592 <TIM_Base_SetConfig+0x9a>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4a28      	ldr	r2, [pc, #160]	; (8002620 <TIM_Base_SetConfig+0x128>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d007      	beq.n	8002592 <TIM_Base_SetConfig+0x9a>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4a27      	ldr	r2, [pc, #156]	; (8002624 <TIM_Base_SetConfig+0x12c>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d003      	beq.n	8002592 <TIM_Base_SetConfig+0x9a>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4a26      	ldr	r2, [pc, #152]	; (8002628 <TIM_Base_SetConfig+0x130>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d108      	bne.n	80025a4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002598:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	68fa      	ldr	r2, [r7, #12]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	695b      	ldr	r3, [r3, #20]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	68fa      	ldr	r2, [r7, #12]
 80025b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	689a      	ldr	r2, [r3, #8]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	4a10      	ldr	r2, [pc, #64]	; (800260c <TIM_Base_SetConfig+0x114>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d00f      	beq.n	80025f0 <TIM_Base_SetConfig+0xf8>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	4a12      	ldr	r2, [pc, #72]	; (800261c <TIM_Base_SetConfig+0x124>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d00b      	beq.n	80025f0 <TIM_Base_SetConfig+0xf8>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	4a11      	ldr	r2, [pc, #68]	; (8002620 <TIM_Base_SetConfig+0x128>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d007      	beq.n	80025f0 <TIM_Base_SetConfig+0xf8>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	4a10      	ldr	r2, [pc, #64]	; (8002624 <TIM_Base_SetConfig+0x12c>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d003      	beq.n	80025f0 <TIM_Base_SetConfig+0xf8>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	4a0f      	ldr	r2, [pc, #60]	; (8002628 <TIM_Base_SetConfig+0x130>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d103      	bne.n	80025f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	691a      	ldr	r2, [r3, #16]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2201      	movs	r2, #1
 80025fc:	615a      	str	r2, [r3, #20]
}
 80025fe:	bf00      	nop
 8002600:	3714      	adds	r7, #20
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	40012c00 	.word	0x40012c00
 8002610:	40000400 	.word	0x40000400
 8002614:	40000800 	.word	0x40000800
 8002618:	40000c00 	.word	0x40000c00
 800261c:	40013400 	.word	0x40013400
 8002620:	40014000 	.word	0x40014000
 8002624:	40014400 	.word	0x40014400
 8002628:	40014800 	.word	0x40014800

0800262c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800262c:	b480      	push	{r7}
 800262e:	b087      	sub	sp, #28
 8002630:	af00      	add	r7, sp, #0
 8002632:	60f8      	str	r0, [r7, #12]
 8002634:	60b9      	str	r1, [r7, #8]
 8002636:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	6a1b      	ldr	r3, [r3, #32]
 800263c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	6a1b      	ldr	r3, [r3, #32]
 8002642:	f023 0201 	bic.w	r2, r3, #1
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	699b      	ldr	r3, [r3, #24]
 800264e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002656:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	011b      	lsls	r3, r3, #4
 800265c:	693a      	ldr	r2, [r7, #16]
 800265e:	4313      	orrs	r3, r2
 8002660:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	f023 030a 	bic.w	r3, r3, #10
 8002668:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800266a:	697a      	ldr	r2, [r7, #20]
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	4313      	orrs	r3, r2
 8002670:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	693a      	ldr	r2, [r7, #16]
 8002676:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	697a      	ldr	r2, [r7, #20]
 800267c:	621a      	str	r2, [r3, #32]
}
 800267e:	bf00      	nop
 8002680:	371c      	adds	r7, #28
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr

0800268a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800268a:	b480      	push	{r7}
 800268c:	b087      	sub	sp, #28
 800268e:	af00      	add	r7, sp, #0
 8002690:	60f8      	str	r0, [r7, #12]
 8002692:	60b9      	str	r1, [r7, #8]
 8002694:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	6a1b      	ldr	r3, [r3, #32]
 800269a:	f023 0210 	bic.w	r2, r3, #16
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	699b      	ldr	r3, [r3, #24]
 80026a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	6a1b      	ldr	r3, [r3, #32]
 80026ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80026b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	031b      	lsls	r3, r3, #12
 80026ba:	697a      	ldr	r2, [r7, #20]
 80026bc:	4313      	orrs	r3, r2
 80026be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80026c6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	011b      	lsls	r3, r3, #4
 80026cc:	693a      	ldr	r2, [r7, #16]
 80026ce:	4313      	orrs	r3, r2
 80026d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	697a      	ldr	r2, [r7, #20]
 80026d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	693a      	ldr	r2, [r7, #16]
 80026dc:	621a      	str	r2, [r3, #32]
}
 80026de:	bf00      	nop
 80026e0:	371c      	adds	r7, #28
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr

080026ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80026ea:	b480      	push	{r7}
 80026ec:	b085      	sub	sp, #20
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	6078      	str	r0, [r7, #4]
 80026f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002700:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002702:	683a      	ldr	r2, [r7, #0]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	4313      	orrs	r3, r2
 8002708:	f043 0307 	orr.w	r3, r3, #7
 800270c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	68fa      	ldr	r2, [r7, #12]
 8002712:	609a      	str	r2, [r3, #8]
}
 8002714:	bf00      	nop
 8002716:	3714      	adds	r7, #20
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr

08002720 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002720:	b480      	push	{r7}
 8002722:	b087      	sub	sp, #28
 8002724:	af00      	add	r7, sp, #0
 8002726:	60f8      	str	r0, [r7, #12]
 8002728:	60b9      	str	r1, [r7, #8]
 800272a:	607a      	str	r2, [r7, #4]
 800272c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800273a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	021a      	lsls	r2, r3, #8
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	431a      	orrs	r2, r3
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	4313      	orrs	r3, r2
 8002748:	697a      	ldr	r2, [r7, #20]
 800274a:	4313      	orrs	r3, r2
 800274c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	697a      	ldr	r2, [r7, #20]
 8002752:	609a      	str	r2, [r3, #8]
}
 8002754:	bf00      	nop
 8002756:	371c      	adds	r7, #28
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002760:	b480      	push	{r7}
 8002762:	b085      	sub	sp, #20
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002770:	2b01      	cmp	r3, #1
 8002772:	d101      	bne.n	8002778 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002774:	2302      	movs	r3, #2
 8002776:	e068      	b.n	800284a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2201      	movs	r2, #1
 800277c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2202      	movs	r2, #2
 8002784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a2e      	ldr	r2, [pc, #184]	; (8002858 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d004      	beq.n	80027ac <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a2d      	ldr	r2, [pc, #180]	; (800285c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d108      	bne.n	80027be <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80027b2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	68fa      	ldr	r2, [r7, #12]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027c4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	68fa      	ldr	r2, [r7, #12]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	68fa      	ldr	r2, [r7, #12]
 80027d6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a1e      	ldr	r2, [pc, #120]	; (8002858 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d01d      	beq.n	800281e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027ea:	d018      	beq.n	800281e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a1b      	ldr	r2, [pc, #108]	; (8002860 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d013      	beq.n	800281e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a1a      	ldr	r2, [pc, #104]	; (8002864 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d00e      	beq.n	800281e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a18      	ldr	r2, [pc, #96]	; (8002868 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d009      	beq.n	800281e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a13      	ldr	r2, [pc, #76]	; (800285c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d004      	beq.n	800281e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a14      	ldr	r2, [pc, #80]	; (800286c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d10c      	bne.n	8002838 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002824:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	68ba      	ldr	r2, [r7, #8]
 800282c:	4313      	orrs	r3, r2
 800282e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	68ba      	ldr	r2, [r7, #8]
 8002836:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2200      	movs	r2, #0
 8002844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002848:	2300      	movs	r3, #0
}
 800284a:	4618      	mov	r0, r3
 800284c:	3714      	adds	r7, #20
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop
 8002858:	40012c00 	.word	0x40012c00
 800285c:	40013400 	.word	0x40013400
 8002860:	40000400 	.word	0x40000400
 8002864:	40000800 	.word	0x40000800
 8002868:	40000c00 	.word	0x40000c00
 800286c:	40014000 	.word	0x40014000

08002870 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002878:	bf00      	nop
 800287a:	370c      	adds	r7, #12
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr

08002884 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800288c:	bf00      	nop
 800288e:	370c      	adds	r7, #12
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr

08002898 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80028a0:	bf00      	nop
 80028a2:	370c      	adds	r7, #12
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr

080028ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b08a      	sub	sp, #40	; 0x28
 80028b0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80028b2:	f7fd fc89 	bl	80001c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80028b6:	f000 f893 	bl	80029e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80028ba:	f000 f981 	bl	8002bc0 <MX_GPIO_Init>
  MX_DMA_Init();
 80028be:	f000 f961 	bl	8002b84 <MX_DMA_Init>
  MX_DAC1_Init();
 80028c2:	f000 f8df 	bl	8002a84 <MX_DAC1_Init>
  MX_TIM2_Init();
 80028c6:	f000 f90f 	bl	8002ae8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  float radian_1 = 0;
 80028ca:	f04f 0300 	mov.w	r3, #0
 80028ce:	61fb      	str	r3, [r7, #28]
  float radian_2 = 0;
 80028d0:	f04f 0300 	mov.w	r3, #0
 80028d4:	61bb      	str	r3, [r7, #24]
  float radian_3 = 0;
 80028d6:	f04f 0300 	mov.w	r3, #0
 80028da:	617b      	str	r3, [r7, #20]

  for (int i = 0; i < 32; i++) {
 80028dc:	2300      	movs	r3, #0
 80028de:	613b      	str	r3, [r7, #16]
 80028e0:	e01b      	b.n	800291a <main+0x6e>
	  sine_1[i] = arm_sin_f32(radian_1);
 80028e2:	ed97 0a07 	vldr	s0, [r7, #28]
 80028e6:	f000 fb8d 	bl	8003004 <arm_sin_f32>
 80028ea:	eef0 7a40 	vmov.f32	s15, s0
 80028ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028f2:	edc7 7a01 	vstr	s15, [r7, #4]
 80028f6:	793b      	ldrb	r3, [r7, #4]
 80028f8:	b2d9      	uxtb	r1, r3
 80028fa:	4a31      	ldr	r2, [pc, #196]	; (80029c0 <main+0x114>)
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	4413      	add	r3, r2
 8002900:	460a      	mov	r2, r1
 8002902:	701a      	strb	r2, [r3, #0]
	  radian_1 += PI;
 8002904:	edd7 7a07 	vldr	s15, [r7, #28]
 8002908:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 80029c4 <main+0x118>
 800290c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002910:	edc7 7a07 	vstr	s15, [r7, #28]
  for (int i = 0; i < 32; i++) {
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	3301      	adds	r3, #1
 8002918:	613b      	str	r3, [r7, #16]
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	2b1f      	cmp	r3, #31
 800291e:	dde0      	ble.n	80028e2 <main+0x36>
  }

  for (int i = 0; i < 16; i++) {
 8002920:	2300      	movs	r3, #0
 8002922:	60fb      	str	r3, [r7, #12]
 8002924:	e01b      	b.n	800295e <main+0xb2>
	  sine_2[i] = arm_sin_f32(radian_2);
 8002926:	ed97 0a06 	vldr	s0, [r7, #24]
 800292a:	f000 fb6b 	bl	8003004 <arm_sin_f32>
 800292e:	eef0 7a40 	vmov.f32	s15, s0
 8002932:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002936:	edc7 7a01 	vstr	s15, [r7, #4]
 800293a:	793b      	ldrb	r3, [r7, #4]
 800293c:	b2d9      	uxtb	r1, r3
 800293e:	4a22      	ldr	r2, [pc, #136]	; (80029c8 <main+0x11c>)
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	4413      	add	r3, r2
 8002944:	460a      	mov	r2, r1
 8002946:	701a      	strb	r2, [r3, #0]
	  radian_2 += PI /2 ;
 8002948:	edd7 7a06 	vldr	s15, [r7, #24]
 800294c:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80029cc <main+0x120>
 8002950:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002954:	edc7 7a06 	vstr	s15, [r7, #24]
  for (int i = 0; i < 16; i++) {
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	3301      	adds	r3, #1
 800295c:	60fb      	str	r3, [r7, #12]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2b0f      	cmp	r3, #15
 8002962:	dde0      	ble.n	8002926 <main+0x7a>
  }

  for (int i = 0; i < 8; i++) {
 8002964:	2300      	movs	r3, #0
 8002966:	60bb      	str	r3, [r7, #8]
 8002968:	e01b      	b.n	80029a2 <main+0xf6>
	  sine_3[i] = arm_sin_f32(radian_3);
 800296a:	ed97 0a05 	vldr	s0, [r7, #20]
 800296e:	f000 fb49 	bl	8003004 <arm_sin_f32>
 8002972:	eef0 7a40 	vmov.f32	s15, s0
 8002976:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800297a:	edc7 7a01 	vstr	s15, [r7, #4]
 800297e:	793b      	ldrb	r3, [r7, #4]
 8002980:	b2d9      	uxtb	r1, r3
 8002982:	4a13      	ldr	r2, [pc, #76]	; (80029d0 <main+0x124>)
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	4413      	add	r3, r2
 8002988:	460a      	mov	r2, r1
 800298a:	701a      	strb	r2, [r3, #0]
	  radian_3 += PI / 4;
 800298c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002990:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80029d4 <main+0x128>
 8002994:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002998:	edc7 7a05 	vstr	s15, [r7, #20]
  for (int i = 0; i < 8; i++) {
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	3301      	adds	r3, #1
 80029a0:	60bb      	str	r3, [r7, #8]
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	2b07      	cmp	r3, #7
 80029a6:	dde0      	ble.n	800296a <main+0xbe>
  }
  HAL_TIM_Base_Start(&htim2);
 80029a8:	480b      	ldr	r0, [pc, #44]	; (80029d8 <main+0x12c>)
 80029aa:	f7ff fb33 	bl	8002014 <HAL_TIM_Base_Start>
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*) sine_1, 64, DAC_ALIGN_8B_R);
 80029ae:	2308      	movs	r3, #8
 80029b0:	9300      	str	r3, [sp, #0]
 80029b2:	2340      	movs	r3, #64	; 0x40
 80029b4:	4a02      	ldr	r2, [pc, #8]	; (80029c0 <main+0x114>)
 80029b6:	2100      	movs	r1, #0
 80029b8:	4808      	ldr	r0, [pc, #32]	; (80029dc <main+0x130>)
 80029ba:	f7fd fdcf 	bl	800055c <HAL_DAC_Start_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80029be:	e7fe      	b.n	80029be <main+0x112>
 80029c0:	200000a0 	.word	0x200000a0
 80029c4:	40490fdb 	.word	0x40490fdb
 80029c8:	2000002c 	.word	0x2000002c
 80029cc:	3fc90fdb 	.word	0x3fc90fdb
 80029d0:	20000050 	.word	0x20000050
 80029d4:	3f490fdb 	.word	0x3f490fdb
 80029d8:	200000c0 	.word	0x200000c0
 80029dc:	2000003c 	.word	0x2000003c

080029e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b096      	sub	sp, #88	; 0x58
 80029e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80029e6:	f107 0314 	add.w	r3, r7, #20
 80029ea:	2244      	movs	r2, #68	; 0x44
 80029ec:	2100      	movs	r1, #0
 80029ee:	4618      	mov	r0, r3
 80029f0:	f000 fb72 	bl	80030d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80029f4:	463b      	mov	r3, r7
 80029f6:	2200      	movs	r2, #0
 80029f8:	601a      	str	r2, [r3, #0]
 80029fa:	605a      	str	r2, [r3, #4]
 80029fc:	609a      	str	r2, [r3, #8]
 80029fe:	60da      	str	r2, [r3, #12]
 8002a00:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8002a02:	2310      	movs	r3, #16
 8002a04:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002a06:	2301      	movs	r3, #1
 8002a08:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002a0e:	2360      	movs	r3, #96	; 0x60
 8002a10:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a12:	2302      	movs	r3, #2
 8002a14:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002a16:	2301      	movs	r3, #1
 8002a18:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8002a1e:	2328      	movs	r3, #40	; 0x28
 8002a20:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002a22:	2307      	movs	r3, #7
 8002a24:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002a26:	2302      	movs	r3, #2
 8002a28:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002a2a:	2302      	movs	r3, #2
 8002a2c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a2e:	f107 0314 	add.w	r3, r7, #20
 8002a32:	4618      	mov	r0, r3
 8002a34:	f7fe fce4 	bl	8001400 <HAL_RCC_OscConfig>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d001      	beq.n	8002a42 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8002a3e:	f000 f97b 	bl	8002d38 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a42:	230f      	movs	r3, #15
 8002a44:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a46:	2303      	movs	r3, #3
 8002a48:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002a52:	2300      	movs	r3, #0
 8002a54:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002a56:	463b      	mov	r3, r7
 8002a58:	2104      	movs	r1, #4
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f7ff f8b6 	bl	8001bcc <HAL_RCC_ClockConfig>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d001      	beq.n	8002a6a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8002a66:	f000 f967 	bl	8002d38 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002a6a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002a6e:	f7fe fc71 	bl	8001354 <HAL_PWREx_ControlVoltageScaling>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d001      	beq.n	8002a7c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8002a78:	f000 f95e 	bl	8002d38 <Error_Handler>
  }
}
 8002a7c:	bf00      	nop
 8002a7e:	3758      	adds	r7, #88	; 0x58
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b08a      	sub	sp, #40	; 0x28
 8002a88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8002a8a:	1d3b      	adds	r3, r7, #4
 8002a8c:	2224      	movs	r2, #36	; 0x24
 8002a8e:	2100      	movs	r1, #0
 8002a90:	4618      	mov	r0, r3
 8002a92:	f000 fb21 	bl	80030d8 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8002a96:	4b12      	ldr	r3, [pc, #72]	; (8002ae0 <MX_DAC1_Init+0x5c>)
 8002a98:	4a12      	ldr	r2, [pc, #72]	; (8002ae4 <MX_DAC1_Init+0x60>)
 8002a9a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8002a9c:	4810      	ldr	r0, [pc, #64]	; (8002ae0 <MX_DAC1_Init+0x5c>)
 8002a9e:	f7fd fd3a 	bl	8000516 <HAL_DAC_Init>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d001      	beq.n	8002aac <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8002aa8:	f000 f946 	bl	8002d38 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8002aac:	2300      	movs	r3, #0
 8002aae:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8002ab0:	2324      	movs	r3, #36	; 0x24
 8002ab2:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8002abc:	2300      	movs	r3, #0
 8002abe:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002ac0:	1d3b      	adds	r3, r7, #4
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	4806      	ldr	r0, [pc, #24]	; (8002ae0 <MX_DAC1_Init+0x5c>)
 8002ac8:	f7fd fe69 	bl	800079e <HAL_DAC_ConfigChannel>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d001      	beq.n	8002ad6 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8002ad2:	f000 f931 	bl	8002d38 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8002ad6:	bf00      	nop
 8002ad8:	3728      	adds	r7, #40	; 0x28
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	2000003c 	.word	0x2000003c
 8002ae4:	40007400 	.word	0x40007400

08002ae8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b088      	sub	sp, #32
 8002aec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002aee:	f107 0310 	add.w	r3, r7, #16
 8002af2:	2200      	movs	r2, #0
 8002af4:	601a      	str	r2, [r3, #0]
 8002af6:	605a      	str	r2, [r3, #4]
 8002af8:	609a      	str	r2, [r3, #8]
 8002afa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002afc:	1d3b      	adds	r3, r7, #4
 8002afe:	2200      	movs	r2, #0
 8002b00:	601a      	str	r2, [r3, #0]
 8002b02:	605a      	str	r2, [r3, #4]
 8002b04:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002b06:	4b1e      	ldr	r3, [pc, #120]	; (8002b80 <MX_TIM2_Init+0x98>)
 8002b08:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002b0c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002b0e:	4b1c      	ldr	r3, [pc, #112]	; (8002b80 <MX_TIM2_Init+0x98>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b14:	4b1a      	ldr	r3, [pc, #104]	; (8002b80 <MX_TIM2_Init+0x98>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 834;
 8002b1a:	4b19      	ldr	r3, [pc, #100]	; (8002b80 <MX_TIM2_Init+0x98>)
 8002b1c:	f240 3242 	movw	r2, #834	; 0x342
 8002b20:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b22:	4b17      	ldr	r3, [pc, #92]	; (8002b80 <MX_TIM2_Init+0x98>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b28:	4b15      	ldr	r3, [pc, #84]	; (8002b80 <MX_TIM2_Init+0x98>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002b2e:	4814      	ldr	r0, [pc, #80]	; (8002b80 <MX_TIM2_Init+0x98>)
 8002b30:	f7ff fa18 	bl	8001f64 <HAL_TIM_Base_Init>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d001      	beq.n	8002b3e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002b3a:	f000 f8fd 	bl	8002d38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b42:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002b44:	f107 0310 	add.w	r3, r7, #16
 8002b48:	4619      	mov	r1, r3
 8002b4a:	480d      	ldr	r0, [pc, #52]	; (8002b80 <MX_TIM2_Init+0x98>)
 8002b4c:	f7ff fbe9 	bl	8002322 <HAL_TIM_ConfigClockSource>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d001      	beq.n	8002b5a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002b56:	f000 f8ef 	bl	8002d38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002b5a:	2320      	movs	r3, #32
 8002b5c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002b62:	1d3b      	adds	r3, r7, #4
 8002b64:	4619      	mov	r1, r3
 8002b66:	4806      	ldr	r0, [pc, #24]	; (8002b80 <MX_TIM2_Init+0x98>)
 8002b68:	f7ff fdfa 	bl	8002760 <HAL_TIMEx_MasterConfigSynchronization>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d001      	beq.n	8002b76 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002b72:	f000 f8e1 	bl	8002d38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002b76:	bf00      	nop
 8002b78:	3720      	adds	r7, #32
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	200000c0 	.word	0x200000c0

08002b84 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002b8a:	4b0c      	ldr	r3, [pc, #48]	; (8002bbc <MX_DMA_Init+0x38>)
 8002b8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b8e:	4a0b      	ldr	r2, [pc, #44]	; (8002bbc <MX_DMA_Init+0x38>)
 8002b90:	f043 0301 	orr.w	r3, r3, #1
 8002b94:	6493      	str	r3, [r2, #72]	; 0x48
 8002b96:	4b09      	ldr	r3, [pc, #36]	; (8002bbc <MX_DMA_Init+0x38>)
 8002b98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	607b      	str	r3, [r7, #4]
 8002ba0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	2100      	movs	r1, #0
 8002ba6:	200d      	movs	r0, #13
 8002ba8:	f7fd fc7f 	bl	80004aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002bac:	200d      	movs	r0, #13
 8002bae:	f7fd fc98 	bl	80004e2 <HAL_NVIC_EnableIRQ>

}
 8002bb2:	bf00      	nop
 8002bb4:	3708      	adds	r7, #8
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	40021000 	.word	0x40021000

08002bc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b088      	sub	sp, #32
 8002bc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bc6:	f107 030c 	add.w	r3, r7, #12
 8002bca:	2200      	movs	r2, #0
 8002bcc:	601a      	str	r2, [r3, #0]
 8002bce:	605a      	str	r2, [r3, #4]
 8002bd0:	609a      	str	r2, [r3, #8]
 8002bd2:	60da      	str	r2, [r3, #12]
 8002bd4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bd6:	4b29      	ldr	r3, [pc, #164]	; (8002c7c <MX_GPIO_Init+0xbc>)
 8002bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bda:	4a28      	ldr	r2, [pc, #160]	; (8002c7c <MX_GPIO_Init+0xbc>)
 8002bdc:	f043 0304 	orr.w	r3, r3, #4
 8002be0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002be2:	4b26      	ldr	r3, [pc, #152]	; (8002c7c <MX_GPIO_Init+0xbc>)
 8002be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002be6:	f003 0304 	and.w	r3, r3, #4
 8002bea:	60bb      	str	r3, [r7, #8]
 8002bec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bee:	4b23      	ldr	r3, [pc, #140]	; (8002c7c <MX_GPIO_Init+0xbc>)
 8002bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bf2:	4a22      	ldr	r2, [pc, #136]	; (8002c7c <MX_GPIO_Init+0xbc>)
 8002bf4:	f043 0301 	orr.w	r3, r3, #1
 8002bf8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bfa:	4b20      	ldr	r3, [pc, #128]	; (8002c7c <MX_GPIO_Init+0xbc>)
 8002bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bfe:	f003 0301 	and.w	r3, r3, #1
 8002c02:	607b      	str	r3, [r7, #4]
 8002c04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c06:	4b1d      	ldr	r3, [pc, #116]	; (8002c7c <MX_GPIO_Init+0xbc>)
 8002c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c0a:	4a1c      	ldr	r2, [pc, #112]	; (8002c7c <MX_GPIO_Init+0xbc>)
 8002c0c:	f043 0302 	orr.w	r3, r3, #2
 8002c10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c12:	4b1a      	ldr	r3, [pc, #104]	; (8002c7c <MX_GPIO_Init+0xbc>)
 8002c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c16:	f003 0302 	and.w	r3, r3, #2
 8002c1a:	603b      	str	r3, [r7, #0]
 8002c1c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002c1e:	2200      	movs	r2, #0
 8002c20:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002c24:	4816      	ldr	r0, [pc, #88]	; (8002c80 <MX_GPIO_Init+0xc0>)
 8002c26:	f7fe fb3d 	bl	80012a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8002c2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c2e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002c30:	4b14      	ldr	r3, [pc, #80]	; (8002c84 <MX_GPIO_Init+0xc4>)
 8002c32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c34:	2300      	movs	r3, #0
 8002c36:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8002c38:	f107 030c 	add.w	r3, r7, #12
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	4812      	ldr	r0, [pc, #72]	; (8002c88 <MX_GPIO_Init+0xc8>)
 8002c40:	f7fe f988 	bl	8000f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8002c44:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002c48:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c52:	2300      	movs	r3, #0
 8002c54:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002c56:	f107 030c 	add.w	r3, r7, #12
 8002c5a:	4619      	mov	r1, r3
 8002c5c:	4808      	ldr	r0, [pc, #32]	; (8002c80 <MX_GPIO_Init+0xc0>)
 8002c5e:	f7fe f979 	bl	8000f54 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002c62:	2200      	movs	r2, #0
 8002c64:	2100      	movs	r1, #0
 8002c66:	2028      	movs	r0, #40	; 0x28
 8002c68:	f7fd fc1f 	bl	80004aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002c6c:	2028      	movs	r0, #40	; 0x28
 8002c6e:	f7fd fc38 	bl	80004e2 <HAL_NVIC_EnableIRQ>

}
 8002c72:	bf00      	nop
 8002c74:	3720      	adds	r7, #32
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	40021000 	.word	0x40021000
 8002c80:	48000400 	.word	0x48000400
 8002c84:	10310000 	.word	0x10310000
 8002c88:	48000800 	.word	0x48000800

08002c8c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af02      	add	r7, sp, #8
 8002c92:	4603      	mov	r3, r0
 8002c94:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == BUTTON_Pin) {
 8002c96:	88fb      	ldrh	r3, [r7, #6]
 8002c98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c9c:	d13b      	bne.n	8002d16 <HAL_GPIO_EXTI_Callback+0x8a>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8002c9e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002ca2:	481f      	ldr	r0, [pc, #124]	; (8002d20 <HAL_GPIO_EXTI_Callback+0x94>)
 8002ca4:	f7fe fb16 	bl	80012d4 <HAL_GPIO_TogglePin>
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8002ca8:	2100      	movs	r1, #0
 8002caa:	481e      	ldr	r0, [pc, #120]	; (8002d24 <HAL_GPIO_EXTI_Callback+0x98>)
 8002cac:	f7fd fd14 	bl	80006d8 <HAL_DAC_Stop_DMA>
		flag += 1;
 8002cb0:	4b1d      	ldr	r3, [pc, #116]	; (8002d28 <HAL_GPIO_EXTI_Callback+0x9c>)
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	3301      	adds	r3, #1
 8002cb6:	b2da      	uxtb	r2, r3
 8002cb8:	4b1b      	ldr	r3, [pc, #108]	; (8002d28 <HAL_GPIO_EXTI_Callback+0x9c>)
 8002cba:	701a      	strb	r2, [r3, #0]
		if (flag == 1 || flag>3) {
 8002cbc:	4b1a      	ldr	r3, [pc, #104]	; (8002d28 <HAL_GPIO_EXTI_Callback+0x9c>)
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d003      	beq.n	8002ccc <HAL_GPIO_EXTI_Callback+0x40>
 8002cc4:	4b18      	ldr	r3, [pc, #96]	; (8002d28 <HAL_GPIO_EXTI_Callback+0x9c>)
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	2b03      	cmp	r3, #3
 8002cca:	d90b      	bls.n	8002ce4 <HAL_GPIO_EXTI_Callback+0x58>
			flag = 1;
 8002ccc:	4b16      	ldr	r3, [pc, #88]	; (8002d28 <HAL_GPIO_EXTI_Callback+0x9c>)
 8002cce:	2201      	movs	r2, #1
 8002cd0:	701a      	strb	r2, [r3, #0]
			HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*) sine_1, 64, DAC_ALIGN_8B_R);
 8002cd2:	2308      	movs	r3, #8
 8002cd4:	9300      	str	r3, [sp, #0]
 8002cd6:	2340      	movs	r3, #64	; 0x40
 8002cd8:	4a14      	ldr	r2, [pc, #80]	; (8002d2c <HAL_GPIO_EXTI_Callback+0xa0>)
 8002cda:	2100      	movs	r1, #0
 8002cdc:	4811      	ldr	r0, [pc, #68]	; (8002d24 <HAL_GPIO_EXTI_Callback+0x98>)
 8002cde:	f7fd fc3d 	bl	800055c <HAL_DAC_Start_DMA>
		}
		else if (flag == 3) {
			HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*) sine_3, 128, DAC_ALIGN_8B_R);
		}
	}
}
 8002ce2:	e018      	b.n	8002d16 <HAL_GPIO_EXTI_Callback+0x8a>
		else if (flag == 2) {
 8002ce4:	4b10      	ldr	r3, [pc, #64]	; (8002d28 <HAL_GPIO_EXTI_Callback+0x9c>)
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	d108      	bne.n	8002cfe <HAL_GPIO_EXTI_Callback+0x72>
			HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*) sine_2, 32, DAC_ALIGN_8B_R);
 8002cec:	2308      	movs	r3, #8
 8002cee:	9300      	str	r3, [sp, #0]
 8002cf0:	2320      	movs	r3, #32
 8002cf2:	4a0f      	ldr	r2, [pc, #60]	; (8002d30 <HAL_GPIO_EXTI_Callback+0xa4>)
 8002cf4:	2100      	movs	r1, #0
 8002cf6:	480b      	ldr	r0, [pc, #44]	; (8002d24 <HAL_GPIO_EXTI_Callback+0x98>)
 8002cf8:	f7fd fc30 	bl	800055c <HAL_DAC_Start_DMA>
}
 8002cfc:	e00b      	b.n	8002d16 <HAL_GPIO_EXTI_Callback+0x8a>
		else if (flag == 3) {
 8002cfe:	4b0a      	ldr	r3, [pc, #40]	; (8002d28 <HAL_GPIO_EXTI_Callback+0x9c>)
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	2b03      	cmp	r3, #3
 8002d04:	d107      	bne.n	8002d16 <HAL_GPIO_EXTI_Callback+0x8a>
			HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*) sine_3, 128, DAC_ALIGN_8B_R);
 8002d06:	2308      	movs	r3, #8
 8002d08:	9300      	str	r3, [sp, #0]
 8002d0a:	2380      	movs	r3, #128	; 0x80
 8002d0c:	4a09      	ldr	r2, [pc, #36]	; (8002d34 <HAL_GPIO_EXTI_Callback+0xa8>)
 8002d0e:	2100      	movs	r1, #0
 8002d10:	4804      	ldr	r0, [pc, #16]	; (8002d24 <HAL_GPIO_EXTI_Callback+0x98>)
 8002d12:	f7fd fc23 	bl	800055c <HAL_DAC_Start_DMA>
}
 8002d16:	bf00      	nop
 8002d18:	3708      	adds	r7, #8
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	48000400 	.word	0x48000400
 8002d24:	2000003c 	.word	0x2000003c
 8002d28:	20000005 	.word	0x20000005
 8002d2c:	200000a0 	.word	0x200000a0
 8002d30:	2000002c 	.word	0x2000002c
 8002d34:	20000050 	.word	0x20000050

08002d38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002d3c:	bf00      	nop
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr
	...

08002d48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d4e:	4b0f      	ldr	r3, [pc, #60]	; (8002d8c <HAL_MspInit+0x44>)
 8002d50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d52:	4a0e      	ldr	r2, [pc, #56]	; (8002d8c <HAL_MspInit+0x44>)
 8002d54:	f043 0301 	orr.w	r3, r3, #1
 8002d58:	6613      	str	r3, [r2, #96]	; 0x60
 8002d5a:	4b0c      	ldr	r3, [pc, #48]	; (8002d8c <HAL_MspInit+0x44>)
 8002d5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d5e:	f003 0301 	and.w	r3, r3, #1
 8002d62:	607b      	str	r3, [r7, #4]
 8002d64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d66:	4b09      	ldr	r3, [pc, #36]	; (8002d8c <HAL_MspInit+0x44>)
 8002d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d6a:	4a08      	ldr	r2, [pc, #32]	; (8002d8c <HAL_MspInit+0x44>)
 8002d6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d70:	6593      	str	r3, [r2, #88]	; 0x58
 8002d72:	4b06      	ldr	r3, [pc, #24]	; (8002d8c <HAL_MspInit+0x44>)
 8002d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d7a:	603b      	str	r3, [r7, #0]
 8002d7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d7e:	bf00      	nop
 8002d80:	370c      	adds	r7, #12
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr
 8002d8a:	bf00      	nop
 8002d8c:	40021000 	.word	0x40021000

08002d90 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b08a      	sub	sp, #40	; 0x28
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d98:	f107 0314 	add.w	r3, r7, #20
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	601a      	str	r2, [r3, #0]
 8002da0:	605a      	str	r2, [r3, #4]
 8002da2:	609a      	str	r2, [r3, #8]
 8002da4:	60da      	str	r2, [r3, #12]
 8002da6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a2a      	ldr	r2, [pc, #168]	; (8002e58 <HAL_DAC_MspInit+0xc8>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d14d      	bne.n	8002e4e <HAL_DAC_MspInit+0xbe>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8002db2:	4b2a      	ldr	r3, [pc, #168]	; (8002e5c <HAL_DAC_MspInit+0xcc>)
 8002db4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002db6:	4a29      	ldr	r2, [pc, #164]	; (8002e5c <HAL_DAC_MspInit+0xcc>)
 8002db8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002dbc:	6593      	str	r3, [r2, #88]	; 0x58
 8002dbe:	4b27      	ldr	r3, [pc, #156]	; (8002e5c <HAL_DAC_MspInit+0xcc>)
 8002dc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dc2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002dc6:	613b      	str	r3, [r7, #16]
 8002dc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dca:	4b24      	ldr	r3, [pc, #144]	; (8002e5c <HAL_DAC_MspInit+0xcc>)
 8002dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dce:	4a23      	ldr	r2, [pc, #140]	; (8002e5c <HAL_DAC_MspInit+0xcc>)
 8002dd0:	f043 0301 	orr.w	r3, r3, #1
 8002dd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002dd6:	4b21      	ldr	r3, [pc, #132]	; (8002e5c <HAL_DAC_MspInit+0xcc>)
 8002dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dda:	f003 0301 	and.w	r3, r3, #1
 8002dde:	60fb      	str	r3, [r7, #12]
 8002de0:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002de2:	2310      	movs	r3, #16
 8002de4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002de6:	2303      	movs	r3, #3
 8002de8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dea:	2300      	movs	r3, #0
 8002dec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dee:	f107 0314 	add.w	r3, r7, #20
 8002df2:	4619      	mov	r1, r3
 8002df4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002df8:	f7fe f8ac 	bl	8000f54 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 8002dfc:	4b18      	ldr	r3, [pc, #96]	; (8002e60 <HAL_DAC_MspInit+0xd0>)
 8002dfe:	4a19      	ldr	r2, [pc, #100]	; (8002e64 <HAL_DAC_MspInit+0xd4>)
 8002e00:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 8002e02:	4b17      	ldr	r3, [pc, #92]	; (8002e60 <HAL_DAC_MspInit+0xd0>)
 8002e04:	2206      	movs	r2, #6
 8002e06:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002e08:	4b15      	ldr	r3, [pc, #84]	; (8002e60 <HAL_DAC_MspInit+0xd0>)
 8002e0a:	2210      	movs	r2, #16
 8002e0c:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e0e:	4b14      	ldr	r3, [pc, #80]	; (8002e60 <HAL_DAC_MspInit+0xd0>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002e14:	4b12      	ldr	r3, [pc, #72]	; (8002e60 <HAL_DAC_MspInit+0xd0>)
 8002e16:	2280      	movs	r2, #128	; 0x80
 8002e18:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e1a:	4b11      	ldr	r3, [pc, #68]	; (8002e60 <HAL_DAC_MspInit+0xd0>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e20:	4b0f      	ldr	r3, [pc, #60]	; (8002e60 <HAL_DAC_MspInit+0xd0>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 8002e26:	4b0e      	ldr	r3, [pc, #56]	; (8002e60 <HAL_DAC_MspInit+0xd0>)
 8002e28:	2220      	movs	r2, #32
 8002e2a:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002e2c:	4b0c      	ldr	r3, [pc, #48]	; (8002e60 <HAL_DAC_MspInit+0xd0>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8002e32:	480b      	ldr	r0, [pc, #44]	; (8002e60 <HAL_DAC_MspInit+0xd0>)
 8002e34:	f7fd fe58 	bl	8000ae8 <HAL_DMA_Init>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d001      	beq.n	8002e42 <HAL_DAC_MspInit+0xb2>
    {
      Error_Handler();
 8002e3e:	f7ff ff7b 	bl	8002d38 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a06      	ldr	r2, [pc, #24]	; (8002e60 <HAL_DAC_MspInit+0xd0>)
 8002e46:	609a      	str	r2, [r3, #8]
 8002e48:	4a05      	ldr	r2, [pc, #20]	; (8002e60 <HAL_DAC_MspInit+0xd0>)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8002e4e:	bf00      	nop
 8002e50:	3728      	adds	r7, #40	; 0x28
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	40007400 	.word	0x40007400
 8002e5c:	40021000 	.word	0x40021000
 8002e60:	20000058 	.word	0x20000058
 8002e64:	40020030 	.word	0x40020030

08002e68 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e78:	d113      	bne.n	8002ea2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002e7a:	4b0c      	ldr	r3, [pc, #48]	; (8002eac <HAL_TIM_Base_MspInit+0x44>)
 8002e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e7e:	4a0b      	ldr	r2, [pc, #44]	; (8002eac <HAL_TIM_Base_MspInit+0x44>)
 8002e80:	f043 0301 	orr.w	r3, r3, #1
 8002e84:	6593      	str	r3, [r2, #88]	; 0x58
 8002e86:	4b09      	ldr	r3, [pc, #36]	; (8002eac <HAL_TIM_Base_MspInit+0x44>)
 8002e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e8a:	f003 0301 	and.w	r3, r3, #1
 8002e8e:	60fb      	str	r3, [r7, #12]
 8002e90:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002e92:	2200      	movs	r2, #0
 8002e94:	2100      	movs	r1, #0
 8002e96:	201c      	movs	r0, #28
 8002e98:	f7fd fb07 	bl	80004aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002e9c:	201c      	movs	r0, #28
 8002e9e:	f7fd fb20 	bl	80004e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002ea2:	bf00      	nop
 8002ea4:	3710      	adds	r7, #16
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	40021000 	.word	0x40021000

08002eb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002eb4:	bf00      	nop
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr

08002ebe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ebe:	b480      	push	{r7}
 8002ec0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ec2:	e7fe      	b.n	8002ec2 <HardFault_Handler+0x4>

08002ec4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ec8:	e7fe      	b.n	8002ec8 <MemManage_Handler+0x4>

08002eca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002eca:	b480      	push	{r7}
 8002ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ece:	e7fe      	b.n	8002ece <BusFault_Handler+0x4>

08002ed0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ed4:	e7fe      	b.n	8002ed4 <UsageFault_Handler+0x4>

08002ed6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ed6:	b480      	push	{r7}
 8002ed8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002eda:	bf00      	nop
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr

08002ee4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ee8:	bf00      	nop
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr

08002ef2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ef2:	b480      	push	{r7}
 8002ef4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ef6:	bf00      	nop
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr

08002f00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f04:	f7fd f9b4 	bl	8000270 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f08:	bf00      	nop
 8002f0a:	bd80      	pop	{r7, pc}

08002f0c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8002f10:	4802      	ldr	r0, [pc, #8]	; (8002f1c <DMA1_Channel3_IRQHandler+0x10>)
 8002f12:	f7fd ff3f 	bl	8000d94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002f16:	bf00      	nop
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	20000058 	.word	0x20000058

08002f20 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002f24:	4802      	ldr	r0, [pc, #8]	; (8002f30 <TIM2_IRQHandler+0x10>)
 8002f26:	f7ff f8dd 	bl	80020e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002f2a:	bf00      	nop
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	200000c0 	.word	0x200000c0

08002f34 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002f38:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002f3c:	f7fe f9e4 	bl	8001308 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002f40:	bf00      	nop
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002f44:	b480      	push	{r7}
 8002f46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f48:	4b17      	ldr	r3, [pc, #92]	; (8002fa8 <SystemInit+0x64>)
 8002f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f4e:	4a16      	ldr	r2, [pc, #88]	; (8002fa8 <SystemInit+0x64>)
 8002f50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002f58:	4b14      	ldr	r3, [pc, #80]	; (8002fac <SystemInit+0x68>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a13      	ldr	r2, [pc, #76]	; (8002fac <SystemInit+0x68>)
 8002f5e:	f043 0301 	orr.w	r3, r3, #1
 8002f62:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002f64:	4b11      	ldr	r3, [pc, #68]	; (8002fac <SystemInit+0x68>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002f6a:	4b10      	ldr	r3, [pc, #64]	; (8002fac <SystemInit+0x68>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a0f      	ldr	r2, [pc, #60]	; (8002fac <SystemInit+0x68>)
 8002f70:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002f74:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002f78:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002f7a:	4b0c      	ldr	r3, [pc, #48]	; (8002fac <SystemInit+0x68>)
 8002f7c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002f80:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002f82:	4b0a      	ldr	r3, [pc, #40]	; (8002fac <SystemInit+0x68>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a09      	ldr	r2, [pc, #36]	; (8002fac <SystemInit+0x68>)
 8002f88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f8c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002f8e:	4b07      	ldr	r3, [pc, #28]	; (8002fac <SystemInit+0x68>)
 8002f90:	2200      	movs	r2, #0
 8002f92:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002f94:	4b04      	ldr	r3, [pc, #16]	; (8002fa8 <SystemInit+0x64>)
 8002f96:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002f9a:	609a      	str	r2, [r3, #8]
#endif
}
 8002f9c:	bf00      	nop
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr
 8002fa6:	bf00      	nop
 8002fa8:	e000ed00 	.word	0xe000ed00
 8002fac:	40021000 	.word	0x40021000

08002fb0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002fb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002fe8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002fb4:	f7ff ffc6 	bl	8002f44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002fb8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002fba:	e003      	b.n	8002fc4 <LoopCopyDataInit>

08002fbc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002fbc:	4b0b      	ldr	r3, [pc, #44]	; (8002fec <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002fbe:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002fc0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002fc2:	3104      	adds	r1, #4

08002fc4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002fc4:	480a      	ldr	r0, [pc, #40]	; (8002ff0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002fc6:	4b0b      	ldr	r3, [pc, #44]	; (8002ff4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002fc8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002fca:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002fcc:	d3f6      	bcc.n	8002fbc <CopyDataInit>
	ldr	r2, =_sbss
 8002fce:	4a0a      	ldr	r2, [pc, #40]	; (8002ff8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002fd0:	e002      	b.n	8002fd8 <LoopFillZerobss>

08002fd2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002fd2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002fd4:	f842 3b04 	str.w	r3, [r2], #4

08002fd8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002fd8:	4b08      	ldr	r3, [pc, #32]	; (8002ffc <LoopForever+0x16>)
	cmp	r2, r3
 8002fda:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002fdc:	d3f9      	bcc.n	8002fd2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002fde:	f000 f857 	bl	8003090 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002fe2:	f7ff fc63 	bl	80028ac <main>

08002fe6 <LoopForever>:

LoopForever:
    b LoopForever
 8002fe6:	e7fe      	b.n	8002fe6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002fe8:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8002fec:	0800394c 	.word	0x0800394c
	ldr	r0, =_sdata
 8002ff0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002ff4:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8002ff8:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8002ffc:	2000010c 	.word	0x2000010c

08003000 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003000:	e7fe      	b.n	8003000 <ADC1_2_IRQHandler>
	...

08003004 <arm_sin_f32>:
 8003004:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8003084 <arm_sin_f32+0x80>
 8003008:	ee20 0a27 	vmul.f32	s0, s0, s15
 800300c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8003010:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003014:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8003018:	d504      	bpl.n	8003024 <arm_sin_f32+0x20>
 800301a:	ee17 3a90 	vmov	r3, s15
 800301e:	3b01      	subs	r3, #1
 8003020:	ee07 3a90 	vmov	s15, r3
 8003024:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003028:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8003088 <arm_sin_f32+0x84>
 800302c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8003030:	ee20 0a07 	vmul.f32	s0, s0, s14
 8003034:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8003038:	ee17 3a90 	vmov	r3, s15
 800303c:	b29b      	uxth	r3, r3
 800303e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003042:	d21a      	bcs.n	800307a <arm_sin_f32+0x76>
 8003044:	ee07 3a90 	vmov	s15, r3
 8003048:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800304c:	1c59      	adds	r1, r3, #1
 800304e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8003052:	4a0e      	ldr	r2, [pc, #56]	; (800308c <arm_sin_f32+0x88>)
 8003054:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8003058:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800305c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8003060:	ed93 7a00 	vldr	s14, [r3]
 8003064:	edd2 6a00 	vldr	s13, [r2]
 8003068:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800306c:	ee20 0a26 	vmul.f32	s0, s0, s13
 8003070:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003074:	ee37 0a80 	vadd.f32	s0, s15, s0
 8003078:	4770      	bx	lr
 800307a:	ee30 0a47 	vsub.f32	s0, s0, s14
 800307e:	2101      	movs	r1, #1
 8003080:	2300      	movs	r3, #0
 8003082:	e7e6      	b.n	8003052 <arm_sin_f32+0x4e>
 8003084:	3e22f983 	.word	0x3e22f983
 8003088:	44000000 	.word	0x44000000
 800308c:	08003140 	.word	0x08003140

08003090 <__libc_init_array>:
 8003090:	b570      	push	{r4, r5, r6, lr}
 8003092:	4e0d      	ldr	r6, [pc, #52]	; (80030c8 <__libc_init_array+0x38>)
 8003094:	4c0d      	ldr	r4, [pc, #52]	; (80030cc <__libc_init_array+0x3c>)
 8003096:	1ba4      	subs	r4, r4, r6
 8003098:	10a4      	asrs	r4, r4, #2
 800309a:	2500      	movs	r5, #0
 800309c:	42a5      	cmp	r5, r4
 800309e:	d109      	bne.n	80030b4 <__libc_init_array+0x24>
 80030a0:	4e0b      	ldr	r6, [pc, #44]	; (80030d0 <__libc_init_array+0x40>)
 80030a2:	4c0c      	ldr	r4, [pc, #48]	; (80030d4 <__libc_init_array+0x44>)
 80030a4:	f000 f820 	bl	80030e8 <_init>
 80030a8:	1ba4      	subs	r4, r4, r6
 80030aa:	10a4      	asrs	r4, r4, #2
 80030ac:	2500      	movs	r5, #0
 80030ae:	42a5      	cmp	r5, r4
 80030b0:	d105      	bne.n	80030be <__libc_init_array+0x2e>
 80030b2:	bd70      	pop	{r4, r5, r6, pc}
 80030b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80030b8:	4798      	blx	r3
 80030ba:	3501      	adds	r5, #1
 80030bc:	e7ee      	b.n	800309c <__libc_init_array+0xc>
 80030be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80030c2:	4798      	blx	r3
 80030c4:	3501      	adds	r5, #1
 80030c6:	e7f2      	b.n	80030ae <__libc_init_array+0x1e>
 80030c8:	08003944 	.word	0x08003944
 80030cc:	08003944 	.word	0x08003944
 80030d0:	08003944 	.word	0x08003944
 80030d4:	08003948 	.word	0x08003948

080030d8 <memset>:
 80030d8:	4402      	add	r2, r0
 80030da:	4603      	mov	r3, r0
 80030dc:	4293      	cmp	r3, r2
 80030de:	d100      	bne.n	80030e2 <memset+0xa>
 80030e0:	4770      	bx	lr
 80030e2:	f803 1b01 	strb.w	r1, [r3], #1
 80030e6:	e7f9      	b.n	80030dc <memset+0x4>

080030e8 <_init>:
 80030e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030ea:	bf00      	nop
 80030ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030ee:	bc08      	pop	{r3}
 80030f0:	469e      	mov	lr, r3
 80030f2:	4770      	bx	lr

080030f4 <_fini>:
 80030f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030f6:	bf00      	nop
 80030f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030fa:	bc08      	pop	{r3}
 80030fc:	469e      	mov	lr, r3
 80030fe:	4770      	bx	lr
