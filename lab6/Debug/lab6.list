
lab6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d64  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000934  08004eec  08004eec  00014eec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005820  08005820  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08005820  08005820  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005820  08005820  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005820  08005820  00015820  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005824  08005824  00015824  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005828  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004f84  20000070  08005898  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004ff4  08005898  00024ff4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014d62  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002925  00000000  00000000  00034e02  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001030  00000000  00000000  00037728  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ee0  00000000  00000000  00038758  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00028396  00000000  00000000  00039638  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d469  00000000  00000000  000619ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f4aec  00000000  00000000  0006ee37  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000f0  00000000  00000000  00163923  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004828  00000000  00000000  00163a14  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    000000fa  00000000  00000000  0016823c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004ed4 	.word	0x08004ed4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	08004ed4 	.word	0x08004ed4

080001c8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80001ce:	2300      	movs	r3, #0
 80001d0:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001d2:	2003      	movs	r0, #3
 80001d4:	f000 f95e 	bl	8000494 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80001d8:	2000      	movs	r0, #0
 80001da:	f000 f80d 	bl	80001f8 <HAL_InitTick>
 80001de:	4603      	mov	r3, r0
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d002      	beq.n	80001ea <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80001e4:	2301      	movs	r3, #1
 80001e6:	71fb      	strb	r3, [r7, #7]
 80001e8:	e001      	b.n	80001ee <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80001ea:	f003 ff37 	bl	800405c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80001ee:	79fb      	ldrb	r3, [r7, #7]
}
 80001f0:	4618      	mov	r0, r3
 80001f2:	3708      	adds	r7, #8
 80001f4:	46bd      	mov	sp, r7
 80001f6:	bd80      	pop	{r7, pc}

080001f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b084      	sub	sp, #16
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000200:	2300      	movs	r3, #0
 8000202:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000204:	4b17      	ldr	r3, [pc, #92]	; (8000264 <HAL_InitTick+0x6c>)
 8000206:	781b      	ldrb	r3, [r3, #0]
 8000208:	2b00      	cmp	r3, #0
 800020a:	d023      	beq.n	8000254 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800020c:	4b16      	ldr	r3, [pc, #88]	; (8000268 <HAL_InitTick+0x70>)
 800020e:	681a      	ldr	r2, [r3, #0]
 8000210:	4b14      	ldr	r3, [pc, #80]	; (8000264 <HAL_InitTick+0x6c>)
 8000212:	781b      	ldrb	r3, [r3, #0]
 8000214:	4619      	mov	r1, r3
 8000216:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800021a:	fbb3 f3f1 	udiv	r3, r3, r1
 800021e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000222:	4618      	mov	r0, r3
 8000224:	f000 f96b 	bl	80004fe <HAL_SYSTICK_Config>
 8000228:	4603      	mov	r3, r0
 800022a:	2b00      	cmp	r3, #0
 800022c:	d10f      	bne.n	800024e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	2b0f      	cmp	r3, #15
 8000232:	d809      	bhi.n	8000248 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000234:	2200      	movs	r2, #0
 8000236:	6879      	ldr	r1, [r7, #4]
 8000238:	f04f 30ff 	mov.w	r0, #4294967295
 800023c:	f000 f935 	bl	80004aa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000240:	4a0a      	ldr	r2, [pc, #40]	; (800026c <HAL_InitTick+0x74>)
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	6013      	str	r3, [r2, #0]
 8000246:	e007      	b.n	8000258 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000248:	2301      	movs	r3, #1
 800024a:	73fb      	strb	r3, [r7, #15]
 800024c:	e004      	b.n	8000258 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800024e:	2301      	movs	r3, #1
 8000250:	73fb      	strb	r3, [r7, #15]
 8000252:	e001      	b.n	8000258 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000254:	2301      	movs	r3, #1
 8000256:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000258:	7bfb      	ldrb	r3, [r7, #15]
}
 800025a:	4618      	mov	r0, r3
 800025c:	3710      	adds	r7, #16
 800025e:	46bd      	mov	sp, r7
 8000260:	bd80      	pop	{r7, pc}
 8000262:	bf00      	nop
 8000264:	20000004 	.word	0x20000004
 8000268:	20000008 	.word	0x20000008
 800026c:	20000000 	.word	0x20000000

08000270 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000270:	b480      	push	{r7}
 8000272:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000274:	4b06      	ldr	r3, [pc, #24]	; (8000290 <HAL_IncTick+0x20>)
 8000276:	781b      	ldrb	r3, [r3, #0]
 8000278:	461a      	mov	r2, r3
 800027a:	4b06      	ldr	r3, [pc, #24]	; (8000294 <HAL_IncTick+0x24>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	4413      	add	r3, r2
 8000280:	4a04      	ldr	r2, [pc, #16]	; (8000294 <HAL_IncTick+0x24>)
 8000282:	6013      	str	r3, [r2, #0]
}
 8000284:	bf00      	nop
 8000286:	46bd      	mov	sp, r7
 8000288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop
 8000290:	20000004 	.word	0x20000004
 8000294:	20000098 	.word	0x20000098

08000298 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000298:	b480      	push	{r7}
 800029a:	af00      	add	r7, sp, #0
  return uwTick;
 800029c:	4b03      	ldr	r3, [pc, #12]	; (80002ac <HAL_GetTick+0x14>)
 800029e:	681b      	ldr	r3, [r3, #0]
}
 80002a0:	4618      	mov	r0, r3
 80002a2:	46bd      	mov	sp, r7
 80002a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a8:	4770      	bx	lr
 80002aa:	bf00      	nop
 80002ac:	20000098 	.word	0x20000098

080002b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b084      	sub	sp, #16
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80002b8:	f7ff ffee 	bl	8000298 <HAL_GetTick>
 80002bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80002c2:	68fb      	ldr	r3, [r7, #12]
 80002c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80002c8:	d005      	beq.n	80002d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80002ca:	4b09      	ldr	r3, [pc, #36]	; (80002f0 <HAL_Delay+0x40>)
 80002cc:	781b      	ldrb	r3, [r3, #0]
 80002ce:	461a      	mov	r2, r3
 80002d0:	68fb      	ldr	r3, [r7, #12]
 80002d2:	4413      	add	r3, r2
 80002d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80002d6:	bf00      	nop
 80002d8:	f7ff ffde 	bl	8000298 <HAL_GetTick>
 80002dc:	4602      	mov	r2, r0
 80002de:	68bb      	ldr	r3, [r7, #8]
 80002e0:	1ad3      	subs	r3, r2, r3
 80002e2:	68fa      	ldr	r2, [r7, #12]
 80002e4:	429a      	cmp	r2, r3
 80002e6:	d8f7      	bhi.n	80002d8 <HAL_Delay+0x28>
  {
  }
}
 80002e8:	bf00      	nop
 80002ea:	3710      	adds	r7, #16
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	20000004 	.word	0x20000004

080002f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80002f4:	b480      	push	{r7}
 80002f6:	b085      	sub	sp, #20
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	f003 0307 	and.w	r3, r3, #7
 8000302:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000304:	4b0c      	ldr	r3, [pc, #48]	; (8000338 <__NVIC_SetPriorityGrouping+0x44>)
 8000306:	68db      	ldr	r3, [r3, #12]
 8000308:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800030a:	68ba      	ldr	r2, [r7, #8]
 800030c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000310:	4013      	ands	r3, r2
 8000312:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000314:	68fb      	ldr	r3, [r7, #12]
 8000316:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000318:	68bb      	ldr	r3, [r7, #8]
 800031a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800031c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000320:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000324:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000326:	4a04      	ldr	r2, [pc, #16]	; (8000338 <__NVIC_SetPriorityGrouping+0x44>)
 8000328:	68bb      	ldr	r3, [r7, #8]
 800032a:	60d3      	str	r3, [r2, #12]
}
 800032c:	bf00      	nop
 800032e:	3714      	adds	r7, #20
 8000330:	46bd      	mov	sp, r7
 8000332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000336:	4770      	bx	lr
 8000338:	e000ed00 	.word	0xe000ed00

0800033c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800033c:	b480      	push	{r7}
 800033e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000340:	4b04      	ldr	r3, [pc, #16]	; (8000354 <__NVIC_GetPriorityGrouping+0x18>)
 8000342:	68db      	ldr	r3, [r3, #12]
 8000344:	0a1b      	lsrs	r3, r3, #8
 8000346:	f003 0307 	and.w	r3, r3, #7
}
 800034a:	4618      	mov	r0, r3
 800034c:	46bd      	mov	sp, r7
 800034e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000352:	4770      	bx	lr
 8000354:	e000ed00 	.word	0xe000ed00

08000358 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000358:	b480      	push	{r7}
 800035a:	b083      	sub	sp, #12
 800035c:	af00      	add	r7, sp, #0
 800035e:	4603      	mov	r3, r0
 8000360:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000366:	2b00      	cmp	r3, #0
 8000368:	db0b      	blt.n	8000382 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800036a:	79fb      	ldrb	r3, [r7, #7]
 800036c:	f003 021f 	and.w	r2, r3, #31
 8000370:	4907      	ldr	r1, [pc, #28]	; (8000390 <__NVIC_EnableIRQ+0x38>)
 8000372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000376:	095b      	lsrs	r3, r3, #5
 8000378:	2001      	movs	r0, #1
 800037a:	fa00 f202 	lsl.w	r2, r0, r2
 800037e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000382:	bf00      	nop
 8000384:	370c      	adds	r7, #12
 8000386:	46bd      	mov	sp, r7
 8000388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop
 8000390:	e000e100 	.word	0xe000e100

08000394 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000394:	b480      	push	{r7}
 8000396:	b083      	sub	sp, #12
 8000398:	af00      	add	r7, sp, #0
 800039a:	4603      	mov	r3, r0
 800039c:	6039      	str	r1, [r7, #0]
 800039e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80003a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	db0a      	blt.n	80003be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003a8:	683b      	ldr	r3, [r7, #0]
 80003aa:	b2da      	uxtb	r2, r3
 80003ac:	490c      	ldr	r1, [pc, #48]	; (80003e0 <__NVIC_SetPriority+0x4c>)
 80003ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003b2:	0112      	lsls	r2, r2, #4
 80003b4:	b2d2      	uxtb	r2, r2
 80003b6:	440b      	add	r3, r1
 80003b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80003bc:	e00a      	b.n	80003d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003be:	683b      	ldr	r3, [r7, #0]
 80003c0:	b2da      	uxtb	r2, r3
 80003c2:	4908      	ldr	r1, [pc, #32]	; (80003e4 <__NVIC_SetPriority+0x50>)
 80003c4:	79fb      	ldrb	r3, [r7, #7]
 80003c6:	f003 030f 	and.w	r3, r3, #15
 80003ca:	3b04      	subs	r3, #4
 80003cc:	0112      	lsls	r2, r2, #4
 80003ce:	b2d2      	uxtb	r2, r2
 80003d0:	440b      	add	r3, r1
 80003d2:	761a      	strb	r2, [r3, #24]
}
 80003d4:	bf00      	nop
 80003d6:	370c      	adds	r7, #12
 80003d8:	46bd      	mov	sp, r7
 80003da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003de:	4770      	bx	lr
 80003e0:	e000e100 	.word	0xe000e100
 80003e4:	e000ed00 	.word	0xe000ed00

080003e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80003e8:	b480      	push	{r7}
 80003ea:	b089      	sub	sp, #36	; 0x24
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	60f8      	str	r0, [r7, #12]
 80003f0:	60b9      	str	r1, [r7, #8]
 80003f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80003f4:	68fb      	ldr	r3, [r7, #12]
 80003f6:	f003 0307 	and.w	r3, r3, #7
 80003fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80003fc:	69fb      	ldr	r3, [r7, #28]
 80003fe:	f1c3 0307 	rsb	r3, r3, #7
 8000402:	2b04      	cmp	r3, #4
 8000404:	bf28      	it	cs
 8000406:	2304      	movcs	r3, #4
 8000408:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800040a:	69fb      	ldr	r3, [r7, #28]
 800040c:	3304      	adds	r3, #4
 800040e:	2b06      	cmp	r3, #6
 8000410:	d902      	bls.n	8000418 <NVIC_EncodePriority+0x30>
 8000412:	69fb      	ldr	r3, [r7, #28]
 8000414:	3b03      	subs	r3, #3
 8000416:	e000      	b.n	800041a <NVIC_EncodePriority+0x32>
 8000418:	2300      	movs	r3, #0
 800041a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800041c:	f04f 32ff 	mov.w	r2, #4294967295
 8000420:	69bb      	ldr	r3, [r7, #24]
 8000422:	fa02 f303 	lsl.w	r3, r2, r3
 8000426:	43da      	mvns	r2, r3
 8000428:	68bb      	ldr	r3, [r7, #8]
 800042a:	401a      	ands	r2, r3
 800042c:	697b      	ldr	r3, [r7, #20]
 800042e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000430:	f04f 31ff 	mov.w	r1, #4294967295
 8000434:	697b      	ldr	r3, [r7, #20]
 8000436:	fa01 f303 	lsl.w	r3, r1, r3
 800043a:	43d9      	mvns	r1, r3
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000440:	4313      	orrs	r3, r2
         );
}
 8000442:	4618      	mov	r0, r3
 8000444:	3724      	adds	r7, #36	; 0x24
 8000446:	46bd      	mov	sp, r7
 8000448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044c:	4770      	bx	lr
	...

08000450 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b082      	sub	sp, #8
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	3b01      	subs	r3, #1
 800045c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000460:	d301      	bcc.n	8000466 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000462:	2301      	movs	r3, #1
 8000464:	e00f      	b.n	8000486 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000466:	4a0a      	ldr	r2, [pc, #40]	; (8000490 <SysTick_Config+0x40>)
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	3b01      	subs	r3, #1
 800046c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800046e:	210f      	movs	r1, #15
 8000470:	f04f 30ff 	mov.w	r0, #4294967295
 8000474:	f7ff ff8e 	bl	8000394 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000478:	4b05      	ldr	r3, [pc, #20]	; (8000490 <SysTick_Config+0x40>)
 800047a:	2200      	movs	r2, #0
 800047c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800047e:	4b04      	ldr	r3, [pc, #16]	; (8000490 <SysTick_Config+0x40>)
 8000480:	2207      	movs	r2, #7
 8000482:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000484:	2300      	movs	r3, #0
}
 8000486:	4618      	mov	r0, r3
 8000488:	3708      	adds	r7, #8
 800048a:	46bd      	mov	sp, r7
 800048c:	bd80      	pop	{r7, pc}
 800048e:	bf00      	nop
 8000490:	e000e010 	.word	0xe000e010

08000494 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b082      	sub	sp, #8
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800049c:	6878      	ldr	r0, [r7, #4]
 800049e:	f7ff ff29 	bl	80002f4 <__NVIC_SetPriorityGrouping>
}
 80004a2:	bf00      	nop
 80004a4:	3708      	adds	r7, #8
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}

080004aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80004aa:	b580      	push	{r7, lr}
 80004ac:	b086      	sub	sp, #24
 80004ae:	af00      	add	r7, sp, #0
 80004b0:	4603      	mov	r3, r0
 80004b2:	60b9      	str	r1, [r7, #8]
 80004b4:	607a      	str	r2, [r7, #4]
 80004b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80004b8:	2300      	movs	r3, #0
 80004ba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80004bc:	f7ff ff3e 	bl	800033c <__NVIC_GetPriorityGrouping>
 80004c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80004c2:	687a      	ldr	r2, [r7, #4]
 80004c4:	68b9      	ldr	r1, [r7, #8]
 80004c6:	6978      	ldr	r0, [r7, #20]
 80004c8:	f7ff ff8e 	bl	80003e8 <NVIC_EncodePriority>
 80004cc:	4602      	mov	r2, r0
 80004ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80004d2:	4611      	mov	r1, r2
 80004d4:	4618      	mov	r0, r3
 80004d6:	f7ff ff5d 	bl	8000394 <__NVIC_SetPriority>
}
 80004da:	bf00      	nop
 80004dc:	3718      	adds	r7, #24
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}

080004e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80004e2:	b580      	push	{r7, lr}
 80004e4:	b082      	sub	sp, #8
 80004e6:	af00      	add	r7, sp, #0
 80004e8:	4603      	mov	r3, r0
 80004ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80004ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004f0:	4618      	mov	r0, r3
 80004f2:	f7ff ff31 	bl	8000358 <__NVIC_EnableIRQ>
}
 80004f6:	bf00      	nop
 80004f8:	3708      	adds	r7, #8
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}

080004fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80004fe:	b580      	push	{r7, lr}
 8000500:	b082      	sub	sp, #8
 8000502:	af00      	add	r7, sp, #0
 8000504:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000506:	6878      	ldr	r0, [r7, #4]
 8000508:	f7ff ffa2 	bl	8000450 <SysTick_Config>
 800050c:	4603      	mov	r3, r0
}
 800050e:	4618      	mov	r0, r3
 8000510:	3708      	adds	r7, #8
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}

08000516 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8000516:	b580      	push	{r7, lr}
 8000518:	b082      	sub	sp, #8
 800051a:	af00      	add	r7, sp, #0
 800051c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	2b00      	cmp	r3, #0
 8000522:	d101      	bne.n	8000528 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8000524:	2301      	movs	r3, #1
 8000526:	e014      	b.n	8000552 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	791b      	ldrb	r3, [r3, #4]
 800052c:	b2db      	uxtb	r3, r3
 800052e:	2b00      	cmp	r3, #0
 8000530:	d105      	bne.n	800053e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	2200      	movs	r2, #0
 8000536:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000538:	6878      	ldr	r0, [r7, #4]
 800053a:	f003 fdb3 	bl	80040a4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	2202      	movs	r2, #2
 8000542:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	2200      	movs	r2, #0
 8000548:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	2201      	movs	r2, #1
 800054e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8000550:	2300      	movs	r3, #0
}
 8000552:	4618      	mov	r0, r3
 8000554:	3708      	adds	r7, #8
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
	...

0800055c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b086      	sub	sp, #24
 8000560:	af00      	add	r7, sp, #0
 8000562:	60f8      	str	r0, [r7, #12]
 8000564:	60b9      	str	r1, [r7, #8]
 8000566:	607a      	str	r2, [r7, #4]
 8000568:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 800056a:	2300      	movs	r3, #0
 800056c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800056e:	68fb      	ldr	r3, [r7, #12]
 8000570:	795b      	ldrb	r3, [r3, #5]
 8000572:	2b01      	cmp	r3, #1
 8000574:	d101      	bne.n	800057a <HAL_DAC_Start_DMA+0x1e>
 8000576:	2302      	movs	r3, #2
 8000578:	e09e      	b.n	80006b8 <HAL_DAC_Start_DMA+0x15c>
 800057a:	68fb      	ldr	r3, [r7, #12]
 800057c:	2201      	movs	r2, #1
 800057e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	2202      	movs	r2, #2
 8000584:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8000586:	68bb      	ldr	r3, [r7, #8]
 8000588:	2b00      	cmp	r3, #0
 800058a:	d12a      	bne.n	80005e2 <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	689b      	ldr	r3, [r3, #8]
 8000590:	4a4b      	ldr	r2, [pc, #300]	; (80006c0 <HAL_DAC_Start_DMA+0x164>)
 8000592:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	689b      	ldr	r3, [r3, #8]
 8000598:	4a4a      	ldr	r2, [pc, #296]	; (80006c4 <HAL_DAC_Start_DMA+0x168>)
 800059a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	689b      	ldr	r3, [r3, #8]
 80005a0:	4a49      	ldr	r2, [pc, #292]	; (80006c8 <HAL_DAC_Start_DMA+0x16c>)
 80005a2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	681a      	ldr	r2, [r3, #0]
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80005b2:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80005b4:	6a3b      	ldr	r3, [r7, #32]
 80005b6:	2b04      	cmp	r3, #4
 80005b8:	d009      	beq.n	80005ce <HAL_DAC_Start_DMA+0x72>
 80005ba:	2b08      	cmp	r3, #8
 80005bc:	d00c      	beq.n	80005d8 <HAL_DAC_Start_DMA+0x7c>
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d000      	beq.n	80005c4 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 80005c2:	e039      	b.n	8000638 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	3308      	adds	r3, #8
 80005ca:	613b      	str	r3, [r7, #16]
        break;
 80005cc:	e034      	b.n	8000638 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	330c      	adds	r3, #12
 80005d4:	613b      	str	r3, [r7, #16]
        break;
 80005d6:	e02f      	b.n	8000638 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	3310      	adds	r3, #16
 80005de:	613b      	str	r3, [r7, #16]
        break;
 80005e0:	e02a      	b.n	8000638 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	68db      	ldr	r3, [r3, #12]
 80005e6:	4a39      	ldr	r2, [pc, #228]	; (80006cc <HAL_DAC_Start_DMA+0x170>)
 80005e8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	68db      	ldr	r3, [r3, #12]
 80005ee:	4a38      	ldr	r2, [pc, #224]	; (80006d0 <HAL_DAC_Start_DMA+0x174>)
 80005f0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	68db      	ldr	r3, [r3, #12]
 80005f6:	4a37      	ldr	r2, [pc, #220]	; (80006d4 <HAL_DAC_Start_DMA+0x178>)
 80005f8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	681a      	ldr	r2, [r3, #0]
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000608:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 800060a:	6a3b      	ldr	r3, [r7, #32]
 800060c:	2b04      	cmp	r3, #4
 800060e:	d009      	beq.n	8000624 <HAL_DAC_Start_DMA+0xc8>
 8000610:	2b08      	cmp	r3, #8
 8000612:	d00c      	beq.n	800062e <HAL_DAC_Start_DMA+0xd2>
 8000614:	2b00      	cmp	r3, #0
 8000616:	d000      	beq.n	800061a <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8000618:	e00e      	b.n	8000638 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	3314      	adds	r3, #20
 8000620:	613b      	str	r3, [r7, #16]
        break;
 8000622:	e009      	b.n	8000638 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	3318      	adds	r3, #24
 800062a:	613b      	str	r3, [r7, #16]
        break;
 800062c:	e004      	b.n	8000638 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	331c      	adds	r3, #28
 8000634:	613b      	str	r3, [r7, #16]
        break;
 8000636:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8000638:	68bb      	ldr	r3, [r7, #8]
 800063a:	2b00      	cmp	r3, #0
 800063c:	d111      	bne.n	8000662 <HAL_DAC_Start_DMA+0x106>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	681a      	ldr	r2, [r3, #0]
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800064c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	6898      	ldr	r0, [r3, #8]
 8000652:	6879      	ldr	r1, [r7, #4]
 8000654:	683b      	ldr	r3, [r7, #0]
 8000656:	693a      	ldr	r2, [r7, #16]
 8000658:	f000 faf4 	bl	8000c44 <HAL_DMA_Start_IT>
 800065c:	4603      	mov	r3, r0
 800065e:	75fb      	strb	r3, [r7, #23]
 8000660:	e010      	b.n	8000684 <HAL_DAC_Start_DMA+0x128>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8000662:	68fb      	ldr	r3, [r7, #12]
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	681a      	ldr	r2, [r3, #0]
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8000670:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	68d8      	ldr	r0, [r3, #12]
 8000676:	6879      	ldr	r1, [r7, #4]
 8000678:	683b      	ldr	r3, [r7, #0]
 800067a:	693a      	ldr	r2, [r7, #16]
 800067c:	f000 fae2 	bl	8000c44 <HAL_DMA_Start_IT>
 8000680:	4603      	mov	r3, r0
 8000682:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	2200      	movs	r2, #0
 8000688:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 800068a:	7dfb      	ldrb	r3, [r7, #23]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d10c      	bne.n	80006aa <HAL_DAC_Start_DMA+0x14e>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	6819      	ldr	r1, [r3, #0]
 8000696:	68bb      	ldr	r3, [r7, #8]
 8000698:	f003 0310 	and.w	r3, r3, #16
 800069c:	2201      	movs	r2, #1
 800069e:	409a      	lsls	r2, r3
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	430a      	orrs	r2, r1
 80006a6:	601a      	str	r2, [r3, #0]
 80006a8:	e005      	b.n	80006b6 <HAL_DAC_Start_DMA+0x15a>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	691b      	ldr	r3, [r3, #16]
 80006ae:	f043 0204 	orr.w	r2, r3, #4
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80006b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80006b8:	4618      	mov	r0, r3
 80006ba:	3718      	adds	r7, #24
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	080009bf 	.word	0x080009bf
 80006c4:	080009e1 	.word	0x080009e1
 80006c8:	080009fd 	.word	0x080009fd
 80006cc:	08000a67 	.word	0x08000a67
 80006d0:	08000a89 	.word	0x08000a89
 80006d4:	08000aa5 	.word	0x08000aa5

080006d8 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
 80006e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	6819      	ldr	r1, [r3, #0]
 80006e8:	683b      	ldr	r3, [r7, #0]
 80006ea:	f003 0310 	and.w	r3, r3, #16
 80006ee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80006f2:	fa02 f303 	lsl.w	r3, r2, r3
 80006f6:	43da      	mvns	r2, r3
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	400a      	ands	r2, r1
 80006fe:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	6819      	ldr	r1, [r3, #0]
 8000706:	683b      	ldr	r3, [r7, #0]
 8000708:	f003 0310 	and.w	r3, r3, #16
 800070c:	2201      	movs	r2, #1
 800070e:	fa02 f303 	lsl.w	r3, r2, r3
 8000712:	43da      	mvns	r2, r3
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	400a      	ands	r2, r1
 800071a:	601a      	str	r2, [r3, #0]
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	2b00      	cmp	r3, #0
 8000720:	d10d      	bne.n	800073e <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	689b      	ldr	r3, [r3, #8]
 8000726:	4618      	mov	r0, r3
 8000728:	f000 faec 	bl	8000d04 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	681a      	ldr	r2, [r3, #0]
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	e00c      	b.n	8000758 <HAL_DAC_Stop_DMA+0x80>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	68db      	ldr	r3, [r3, #12]
 8000742:	4618      	mov	r0, r3
 8000744:	f000 fade 	bl	8000d04 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	681a      	ldr	r2, [r3, #0]
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8000756:	601a      	str	r2, [r3, #0]
  /* Disable the DAC DMA underrun interrupt */
  __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
#endif /* STM32L451xx STM32L452xx STM32L462xx */

  /* Return function status */
  return HAL_OK;
 8000758:	2300      	movs	r3, #0
}
 800075a:	4618      	mov	r0, r3
 800075c:	3708      	adds	r7, #8
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}

08000762 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8000762:	b480      	push	{r7}
 8000764:	b083      	sub	sp, #12
 8000766:	af00      	add	r7, sp, #0
 8000768:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800076a:	bf00      	nop
 800076c:	370c      	adds	r7, #12
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr

08000776 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8000776:	b480      	push	{r7}
 8000778:	b083      	sub	sp, #12
 800077a:	af00      	add	r7, sp, #0
 800077c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 800077e:	bf00      	nop
 8000780:	370c      	adds	r7, #12
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr

0800078a <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800078a:	b580      	push	{r7, lr}
 800078c:	b088      	sub	sp, #32
 800078e:	af00      	add	r7, sp, #0
 8000790:	60f8      	str	r0, [r7, #12]
 8000792:	60b9      	str	r1, [r7, #8]
 8000794:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8000796:	2300      	movs	r3, #0
 8000798:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	795b      	ldrb	r3, [r3, #5]
 800079e:	2b01      	cmp	r3, #1
 80007a0:	d101      	bne.n	80007a6 <HAL_DAC_ConfigChannel+0x1c>
 80007a2:	2302      	movs	r3, #2
 80007a4:	e107      	b.n	80009b6 <HAL_DAC_ConfigChannel+0x22c>
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	2201      	movs	r2, #1
 80007aa:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	2202      	movs	r2, #2
 80007b0:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80007b2:	68bb      	ldr	r3, [r7, #8]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	2b04      	cmp	r3, #4
 80007b8:	d174      	bne.n	80008a4 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80007ba:	f7ff fd6d 	bl	8000298 <HAL_GetTick>
 80007be:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d134      	bne.n	8000830 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80007c6:	e011      	b.n	80007ec <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80007c8:	f7ff fd66 	bl	8000298 <HAL_GetTick>
 80007cc:	4602      	mov	r2, r0
 80007ce:	69fb      	ldr	r3, [r7, #28]
 80007d0:	1ad3      	subs	r3, r2, r3
 80007d2:	2b01      	cmp	r3, #1
 80007d4:	d90a      	bls.n	80007ec <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	691b      	ldr	r3, [r3, #16]
 80007da:	f043 0208 	orr.w	r2, r3, #8
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	2203      	movs	r2, #3
 80007e6:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80007e8:	2303      	movs	r3, #3
 80007ea:	e0e4      	b.n	80009b6 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d1e6      	bne.n	80007c8 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 80007fa:	2001      	movs	r0, #1
 80007fc:	f7ff fd58 	bl	80002b0 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	68ba      	ldr	r2, [r7, #8]
 8000806:	6992      	ldr	r2, [r2, #24]
 8000808:	641a      	str	r2, [r3, #64]	; 0x40
 800080a:	e01e      	b.n	800084a <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800080c:	f7ff fd44 	bl	8000298 <HAL_GetTick>
 8000810:	4602      	mov	r2, r0
 8000812:	69fb      	ldr	r3, [r7, #28]
 8000814:	1ad3      	subs	r3, r2, r3
 8000816:	2b01      	cmp	r3, #1
 8000818:	d90a      	bls.n	8000830 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	691b      	ldr	r3, [r3, #16]
 800081e:	f043 0208 	orr.w	r2, r3, #8
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	2203      	movs	r2, #3
 800082a:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800082c:	2303      	movs	r3, #3
 800082e:	e0c2      	b.n	80009b6 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000836:	2b00      	cmp	r3, #0
 8000838:	dbe8      	blt.n	800080c <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 800083a:	2001      	movs	r0, #1
 800083c:	f7ff fd38 	bl	80002b0 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	68ba      	ldr	r2, [r7, #8]
 8000846:	6992      	ldr	r2, [r2, #24]
 8000848:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	f003 0310 	and.w	r3, r3, #16
 8000856:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800085a:	fa01 f303 	lsl.w	r3, r1, r3
 800085e:	43db      	mvns	r3, r3
 8000860:	ea02 0103 	and.w	r1, r2, r3
 8000864:	68bb      	ldr	r3, [r7, #8]
 8000866:	69da      	ldr	r2, [r3, #28]
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	f003 0310 	and.w	r3, r3, #16
 800086e:	409a      	lsls	r2, r3
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	430a      	orrs	r2, r1
 8000876:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	f003 0310 	and.w	r3, r3, #16
 8000884:	21ff      	movs	r1, #255	; 0xff
 8000886:	fa01 f303 	lsl.w	r3, r1, r3
 800088a:	43db      	mvns	r3, r3
 800088c:	ea02 0103 	and.w	r1, r2, r3
 8000890:	68bb      	ldr	r3, [r7, #8]
 8000892:	6a1a      	ldr	r2, [r3, #32]
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	f003 0310 	and.w	r3, r3, #16
 800089a:	409a      	lsls	r2, r3
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	430a      	orrs	r2, r1
 80008a2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80008a4:	68bb      	ldr	r3, [r7, #8]
 80008a6:	691b      	ldr	r3, [r3, #16]
 80008a8:	2b01      	cmp	r3, #1
 80008aa:	d11d      	bne.n	80008e8 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80008b2:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	f003 0310 	and.w	r3, r3, #16
 80008ba:	221f      	movs	r2, #31
 80008bc:	fa02 f303 	lsl.w	r3, r2, r3
 80008c0:	43db      	mvns	r3, r3
 80008c2:	69ba      	ldr	r2, [r7, #24]
 80008c4:	4013      	ands	r3, r2
 80008c6:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80008c8:	68bb      	ldr	r3, [r7, #8]
 80008ca:	695b      	ldr	r3, [r3, #20]
 80008cc:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	f003 0310 	and.w	r3, r3, #16
 80008d4:	697a      	ldr	r2, [r7, #20]
 80008d6:	fa02 f303 	lsl.w	r3, r2, r3
 80008da:	69ba      	ldr	r2, [r7, #24]
 80008dc:	4313      	orrs	r3, r2
 80008de:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	69ba      	ldr	r2, [r7, #24]
 80008e6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80008ee:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	f003 0310 	and.w	r3, r3, #16
 80008f6:	2207      	movs	r2, #7
 80008f8:	fa02 f303 	lsl.w	r3, r2, r3
 80008fc:	43db      	mvns	r3, r3
 80008fe:	69ba      	ldr	r2, [r7, #24]
 8000900:	4013      	ands	r3, r2
 8000902:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8000904:	68bb      	ldr	r3, [r7, #8]
 8000906:	681a      	ldr	r2, [r3, #0]
 8000908:	68bb      	ldr	r3, [r7, #8]
 800090a:	689b      	ldr	r3, [r3, #8]
 800090c:	431a      	orrs	r2, r3
 800090e:	68bb      	ldr	r3, [r7, #8]
 8000910:	68db      	ldr	r3, [r3, #12]
 8000912:	4313      	orrs	r3, r2
 8000914:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	f003 0310 	and.w	r3, r3, #16
 800091c:	697a      	ldr	r2, [r7, #20]
 800091e:	fa02 f303 	lsl.w	r3, r2, r3
 8000922:	69ba      	ldr	r2, [r7, #24]
 8000924:	4313      	orrs	r3, r2
 8000926:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	69ba      	ldr	r2, [r7, #24]
 800092e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	6819      	ldr	r1, [r3, #0]
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	f003 0310 	and.w	r3, r3, #16
 800093c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000940:	fa02 f303 	lsl.w	r3, r2, r3
 8000944:	43da      	mvns	r2, r3
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	400a      	ands	r2, r1
 800094c:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	f003 0310 	and.w	r3, r3, #16
 800095c:	f640 72fc 	movw	r2, #4092	; 0xffc
 8000960:	fa02 f303 	lsl.w	r3, r2, r3
 8000964:	43db      	mvns	r3, r3
 8000966:	69ba      	ldr	r2, [r7, #24]
 8000968:	4013      	ands	r3, r2
 800096a:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800096c:	68bb      	ldr	r3, [r7, #8]
 800096e:	685b      	ldr	r3, [r3, #4]
 8000970:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	f003 0310 	and.w	r3, r3, #16
 8000978:	697a      	ldr	r2, [r7, #20]
 800097a:	fa02 f303 	lsl.w	r3, r2, r3
 800097e:	69ba      	ldr	r2, [r7, #24]
 8000980:	4313      	orrs	r3, r2
 8000982:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	69ba      	ldr	r2, [r7, #24]
 800098a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	6819      	ldr	r1, [r3, #0]
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	f003 0310 	and.w	r3, r3, #16
 8000998:	22c0      	movs	r2, #192	; 0xc0
 800099a:	fa02 f303 	lsl.w	r3, r2, r3
 800099e:	43da      	mvns	r2, r3
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	400a      	ands	r2, r1
 80009a6:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	2201      	movs	r2, #1
 80009ac:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	2200      	movs	r2, #0
 80009b2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80009b4:	2300      	movs	r3, #0
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	3720      	adds	r7, #32
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}

080009be <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80009be:	b580      	push	{r7, lr}
 80009c0:	b084      	sub	sp, #16
 80009c2:	af00      	add	r7, sp, #0
 80009c4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009ca:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80009cc:	68f8      	ldr	r0, [r7, #12]
 80009ce:	f002 ff0f 	bl	80037f0 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	2201      	movs	r2, #1
 80009d6:	711a      	strb	r2, [r3, #4]
}
 80009d8:	bf00      	nop
 80009da:	3710      	adds	r7, #16
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}

080009e0 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b084      	sub	sp, #16
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009ec:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80009ee:	68f8      	ldr	r0, [r7, #12]
 80009f0:	f7ff feb7 	bl	8000762 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80009f4:	bf00      	nop
 80009f6:	3710      	adds	r7, #16
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}

080009fc <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b084      	sub	sp, #16
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a08:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	691b      	ldr	r3, [r3, #16]
 8000a0e:	f043 0204 	orr.w	r2, r3, #4
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8000a16:	68f8      	ldr	r0, [r7, #12]
 8000a18:	f7ff fead 	bl	8000776 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	2201      	movs	r2, #1
 8000a20:	711a      	strb	r2, [r3, #4]
}
 8000a22:	bf00      	nop
 8000a24:	3710      	adds	r7, #16
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}

08000a2a <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8000a2a:	b480      	push	{r7}
 8000a2c:	b083      	sub	sp, #12
 8000a2e:	af00      	add	r7, sp, #0
 8000a30:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8000a32:	bf00      	nop
 8000a34:	370c      	adds	r7, #12
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr

08000a3e <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8000a3e:	b480      	push	{r7}
 8000a40:	b083      	sub	sp, #12
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8000a46:	bf00      	nop
 8000a48:	370c      	adds	r7, #12
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr

08000a52 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8000a52:	b480      	push	{r7}
 8000a54:	b083      	sub	sp, #12
 8000a56:	af00      	add	r7, sp, #0
 8000a58:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8000a5a:	bf00      	nop
 8000a5c:	370c      	adds	r7, #12
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr

08000a66 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8000a66:	b580      	push	{r7, lr}
 8000a68:	b084      	sub	sp, #16
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a72:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8000a74:	68f8      	ldr	r0, [r7, #12]
 8000a76:	f7ff ffd8 	bl	8000a2a <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	711a      	strb	r2, [r3, #4]
}
 8000a80:	bf00      	nop
 8000a82:	3710      	adds	r7, #16
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}

08000a88 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b084      	sub	sp, #16
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a94:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8000a96:	68f8      	ldr	r0, [r7, #12]
 8000a98:	f7ff ffd1 	bl	8000a3e <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8000a9c:	bf00      	nop
 8000a9e:	3710      	adds	r7, #16
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}

08000aa4 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b084      	sub	sp, #16
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ab0:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	691b      	ldr	r3, [r3, #16]
 8000ab6:	f043 0204 	orr.w	r2, r3, #4
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8000abe:	68f8      	ldr	r0, [r7, #12]
 8000ac0:	f7ff ffc7 	bl	8000a52 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	711a      	strb	r2, [r3, #4]
}
 8000aca:	bf00      	nop
 8000acc:	3710      	adds	r7, #16
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
	...

08000ad4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b085      	sub	sp, #20
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d101      	bne.n	8000ae6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	e098      	b.n	8000c18 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	461a      	mov	r2, r3
 8000aec:	4b4d      	ldr	r3, [pc, #308]	; (8000c24 <HAL_DMA_Init+0x150>)
 8000aee:	429a      	cmp	r2, r3
 8000af0:	d80f      	bhi.n	8000b12 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	461a      	mov	r2, r3
 8000af8:	4b4b      	ldr	r3, [pc, #300]	; (8000c28 <HAL_DMA_Init+0x154>)
 8000afa:	4413      	add	r3, r2
 8000afc:	4a4b      	ldr	r2, [pc, #300]	; (8000c2c <HAL_DMA_Init+0x158>)
 8000afe:	fba2 2303 	umull	r2, r3, r2, r3
 8000b02:	091b      	lsrs	r3, r3, #4
 8000b04:	009a      	lsls	r2, r3, #2
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	4a48      	ldr	r2, [pc, #288]	; (8000c30 <HAL_DMA_Init+0x15c>)
 8000b0e:	641a      	str	r2, [r3, #64]	; 0x40
 8000b10:	e00e      	b.n	8000b30 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	461a      	mov	r2, r3
 8000b18:	4b46      	ldr	r3, [pc, #280]	; (8000c34 <HAL_DMA_Init+0x160>)
 8000b1a:	4413      	add	r3, r2
 8000b1c:	4a43      	ldr	r2, [pc, #268]	; (8000c2c <HAL_DMA_Init+0x158>)
 8000b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b22:	091b      	lsrs	r3, r3, #4
 8000b24:	009a      	lsls	r2, r3, #2
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	4a42      	ldr	r2, [pc, #264]	; (8000c38 <HAL_DMA_Init+0x164>)
 8000b2e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	2202      	movs	r2, #2
 8000b34:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000b46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000b4a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000b54:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	691b      	ldr	r3, [r3, #16]
 8000b5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b60:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	699b      	ldr	r3, [r3, #24]
 8000b66:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b6c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	6a1b      	ldr	r3, [r3, #32]
 8000b72:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000b74:	68fa      	ldr	r2, [r7, #12]
 8000b76:	4313      	orrs	r3, r2
 8000b78:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	68fa      	ldr	r2, [r7, #12]
 8000b80:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	689b      	ldr	r3, [r3, #8]
 8000b86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000b8a:	d039      	beq.n	8000c00 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b90:	4a27      	ldr	r2, [pc, #156]	; (8000c30 <HAL_DMA_Init+0x15c>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d11a      	bne.n	8000bcc <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000b96:	4b29      	ldr	r3, [pc, #164]	; (8000c3c <HAL_DMA_Init+0x168>)
 8000b98:	681a      	ldr	r2, [r3, #0]
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b9e:	f003 031c 	and.w	r3, r3, #28
 8000ba2:	210f      	movs	r1, #15
 8000ba4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ba8:	43db      	mvns	r3, r3
 8000baa:	4924      	ldr	r1, [pc, #144]	; (8000c3c <HAL_DMA_Init+0x168>)
 8000bac:	4013      	ands	r3, r2
 8000bae:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000bb0:	4b22      	ldr	r3, [pc, #136]	; (8000c3c <HAL_DMA_Init+0x168>)
 8000bb2:	681a      	ldr	r2, [r3, #0]
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	6859      	ldr	r1, [r3, #4]
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bbc:	f003 031c 	and.w	r3, r3, #28
 8000bc0:	fa01 f303 	lsl.w	r3, r1, r3
 8000bc4:	491d      	ldr	r1, [pc, #116]	; (8000c3c <HAL_DMA_Init+0x168>)
 8000bc6:	4313      	orrs	r3, r2
 8000bc8:	600b      	str	r3, [r1, #0]
 8000bca:	e019      	b.n	8000c00 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000bcc:	4b1c      	ldr	r3, [pc, #112]	; (8000c40 <HAL_DMA_Init+0x16c>)
 8000bce:	681a      	ldr	r2, [r3, #0]
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bd4:	f003 031c 	and.w	r3, r3, #28
 8000bd8:	210f      	movs	r1, #15
 8000bda:	fa01 f303 	lsl.w	r3, r1, r3
 8000bde:	43db      	mvns	r3, r3
 8000be0:	4917      	ldr	r1, [pc, #92]	; (8000c40 <HAL_DMA_Init+0x16c>)
 8000be2:	4013      	ands	r3, r2
 8000be4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000be6:	4b16      	ldr	r3, [pc, #88]	; (8000c40 <HAL_DMA_Init+0x16c>)
 8000be8:	681a      	ldr	r2, [r3, #0]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	6859      	ldr	r1, [r3, #4]
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bf2:	f003 031c 	and.w	r3, r3, #28
 8000bf6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bfa:	4911      	ldr	r1, [pc, #68]	; (8000c40 <HAL_DMA_Init+0x16c>)
 8000bfc:	4313      	orrs	r3, r2
 8000bfe:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	2200      	movs	r2, #0
 8000c04:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	2201      	movs	r2, #1
 8000c0a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	2200      	movs	r2, #0
 8000c12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8000c16:	2300      	movs	r3, #0
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	3714      	adds	r7, #20
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr
 8000c24:	40020407 	.word	0x40020407
 8000c28:	bffdfff8 	.word	0xbffdfff8
 8000c2c:	cccccccd 	.word	0xcccccccd
 8000c30:	40020000 	.word	0x40020000
 8000c34:	bffdfbf8 	.word	0xbffdfbf8
 8000c38:	40020400 	.word	0x40020400
 8000c3c:	400200a8 	.word	0x400200a8
 8000c40:	400204a8 	.word	0x400204a8

08000c44 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b086      	sub	sp, #24
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	60f8      	str	r0, [r7, #12]
 8000c4c:	60b9      	str	r1, [r7, #8]
 8000c4e:	607a      	str	r2, [r7, #4]
 8000c50:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000c52:	2300      	movs	r3, #0
 8000c54:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000c5c:	2b01      	cmp	r3, #1
 8000c5e:	d101      	bne.n	8000c64 <HAL_DMA_Start_IT+0x20>
 8000c60:	2302      	movs	r3, #2
 8000c62:	e04b      	b.n	8000cfc <HAL_DMA_Start_IT+0xb8>
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	2201      	movs	r2, #1
 8000c68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000c72:	b2db      	uxtb	r3, r3
 8000c74:	2b01      	cmp	r3, #1
 8000c76:	d13a      	bne.n	8000cee <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	2202      	movs	r2, #2
 8000c7c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	2200      	movs	r2, #0
 8000c84:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	681a      	ldr	r2, [r3, #0]
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	f022 0201 	bic.w	r2, r2, #1
 8000c94:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	687a      	ldr	r2, [r7, #4]
 8000c9a:	68b9      	ldr	r1, [r7, #8]
 8000c9c:	68f8      	ldr	r0, [r7, #12]
 8000c9e:	f000 f91e 	bl	8000ede <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d008      	beq.n	8000cbc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	681a      	ldr	r2, [r3, #0]
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	f042 020e 	orr.w	r2, r2, #14
 8000cb8:	601a      	str	r2, [r3, #0]
 8000cba:	e00f      	b.n	8000cdc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	681a      	ldr	r2, [r3, #0]
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f022 0204 	bic.w	r2, r2, #4
 8000cca:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	681a      	ldr	r2, [r3, #0]
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f042 020a 	orr.w	r2, r2, #10
 8000cda:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	681a      	ldr	r2, [r3, #0]
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f042 0201 	orr.w	r2, r2, #1
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	e005      	b.n	8000cfa <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8000cfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	3718      	adds	r7, #24
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b085      	sub	sp, #20
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000d16:	b2db      	uxtb	r3, r3
 8000d18:	2b02      	cmp	r3, #2
 8000d1a:	d008      	beq.n	8000d2e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2204      	movs	r2, #4
 8000d20:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	2200      	movs	r2, #0
 8000d26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	e022      	b.n	8000d74 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	681a      	ldr	r2, [r3, #0]
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f022 020e 	bic.w	r2, r2, #14
 8000d3c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	681a      	ldr	r2, [r3, #0]
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f022 0201 	bic.w	r2, r2, #1
 8000d4c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d52:	f003 021c 	and.w	r2, r3, #28
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5a:	2101      	movs	r1, #1
 8000d5c:	fa01 f202 	lsl.w	r2, r1, r2
 8000d60:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	2201      	movs	r2, #1
 8000d66:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8000d72:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	3714      	adds	r7, #20
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr

08000d80 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d9c:	f003 031c 	and.w	r3, r3, #28
 8000da0:	2204      	movs	r2, #4
 8000da2:	409a      	lsls	r2, r3
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	4013      	ands	r3, r2
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d026      	beq.n	8000dfa <HAL_DMA_IRQHandler+0x7a>
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	f003 0304 	and.w	r3, r3, #4
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d021      	beq.n	8000dfa <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f003 0320 	and.w	r3, r3, #32
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d107      	bne.n	8000dd4 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	681a      	ldr	r2, [r3, #0]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f022 0204 	bic.w	r2, r2, #4
 8000dd2:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dd8:	f003 021c 	and.w	r2, r3, #28
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de0:	2104      	movs	r1, #4
 8000de2:	fa01 f202 	lsl.w	r2, r1, r2
 8000de6:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d071      	beq.n	8000ed4 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df4:	6878      	ldr	r0, [r7, #4]
 8000df6:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8000df8:	e06c      	b.n	8000ed4 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dfe:	f003 031c 	and.w	r3, r3, #28
 8000e02:	2202      	movs	r2, #2
 8000e04:	409a      	lsls	r2, r3
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	4013      	ands	r3, r2
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d02e      	beq.n	8000e6c <HAL_DMA_IRQHandler+0xec>
 8000e0e:	68bb      	ldr	r3, [r7, #8]
 8000e10:	f003 0302 	and.w	r3, r3, #2
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d029      	beq.n	8000e6c <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f003 0320 	and.w	r3, r3, #32
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d10b      	bne.n	8000e3e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f022 020a 	bic.w	r2, r2, #10
 8000e34:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2201      	movs	r2, #1
 8000e3a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e42:	f003 021c 	and.w	r2, r3, #28
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4a:	2102      	movs	r1, #2
 8000e4c:	fa01 f202 	lsl.w	r2, r1, r2
 8000e50:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2200      	movs	r2, #0
 8000e56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d038      	beq.n	8000ed4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e66:	6878      	ldr	r0, [r7, #4]
 8000e68:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000e6a:	e033      	b.n	8000ed4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e70:	f003 031c 	and.w	r3, r3, #28
 8000e74:	2208      	movs	r2, #8
 8000e76:	409a      	lsls	r2, r3
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d02a      	beq.n	8000ed6 <HAL_DMA_IRQHandler+0x156>
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	f003 0308 	and.w	r3, r3, #8
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d025      	beq.n	8000ed6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f022 020e 	bic.w	r2, r2, #14
 8000e98:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e9e:	f003 021c 	and.w	r2, r3, #28
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea6:	2101      	movs	r1, #1
 8000ea8:	fa01 f202 	lsl.w	r2, r1, r2
 8000eac:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d004      	beq.n	8000ed6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ed0:	6878      	ldr	r0, [r7, #4]
 8000ed2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8000ed4:	bf00      	nop
 8000ed6:	bf00      	nop
}
 8000ed8:	3710      	adds	r7, #16
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}

08000ede <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	b085      	sub	sp, #20
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	60f8      	str	r0, [r7, #12]
 8000ee6:	60b9      	str	r1, [r7, #8]
 8000ee8:	607a      	str	r2, [r7, #4]
 8000eea:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef0:	f003 021c 	and.w	r2, r3, #28
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef8:	2101      	movs	r1, #1
 8000efa:	fa01 f202 	lsl.w	r2, r1, r2
 8000efe:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	683a      	ldr	r2, [r7, #0]
 8000f06:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	689b      	ldr	r3, [r3, #8]
 8000f0c:	2b10      	cmp	r3, #16
 8000f0e:	d108      	bne.n	8000f22 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	687a      	ldr	r2, [r7, #4]
 8000f16:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	68ba      	ldr	r2, [r7, #8]
 8000f1e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000f20:	e007      	b.n	8000f32 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	68ba      	ldr	r2, [r7, #8]
 8000f28:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	687a      	ldr	r2, [r7, #4]
 8000f30:	60da      	str	r2, [r3, #12]
}
 8000f32:	bf00      	nop
 8000f34:	3714      	adds	r7, #20
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
	...

08000f40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b087      	sub	sp, #28
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f4e:	e17f      	b.n	8001250 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	2101      	movs	r1, #1
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	fa01 f303 	lsl.w	r3, r1, r3
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	f000 8171 	beq.w	800124a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d00b      	beq.n	8000f88 <HAL_GPIO_Init+0x48>
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	2b02      	cmp	r3, #2
 8000f76:	d007      	beq.n	8000f88 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f7c:	2b11      	cmp	r3, #17
 8000f7e:	d003      	beq.n	8000f88 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	2b12      	cmp	r3, #18
 8000f86:	d130      	bne.n	8000fea <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	689b      	ldr	r3, [r3, #8]
 8000f8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	2203      	movs	r2, #3
 8000f94:	fa02 f303 	lsl.w	r3, r2, r3
 8000f98:	43db      	mvns	r3, r3
 8000f9a:	693a      	ldr	r2, [r7, #16]
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	68da      	ldr	r2, [r3, #12]
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	005b      	lsls	r3, r3, #1
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	693a      	ldr	r2, [r7, #16]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	693a      	ldr	r2, [r7, #16]
 8000fb6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc6:	43db      	mvns	r3, r3
 8000fc8:	693a      	ldr	r2, [r7, #16]
 8000fca:	4013      	ands	r3, r2
 8000fcc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	091b      	lsrs	r3, r3, #4
 8000fd4:	f003 0201 	and.w	r2, r3, #1
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	fa02 f303 	lsl.w	r3, r2, r3
 8000fde:	693a      	ldr	r2, [r7, #16]
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	f003 0303 	and.w	r3, r3, #3
 8000ff2:	2b03      	cmp	r3, #3
 8000ff4:	d118      	bne.n	8001028 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ffa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	43db      	mvns	r3, r3
 8001006:	693a      	ldr	r2, [r7, #16]
 8001008:	4013      	ands	r3, r2
 800100a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	08db      	lsrs	r3, r3, #3
 8001012:	f003 0201 	and.w	r2, r3, #1
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	fa02 f303 	lsl.w	r3, r2, r3
 800101c:	693a      	ldr	r2, [r7, #16]
 800101e:	4313      	orrs	r3, r2
 8001020:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	693a      	ldr	r2, [r7, #16]
 8001026:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	005b      	lsls	r3, r3, #1
 8001032:	2203      	movs	r2, #3
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	43db      	mvns	r3, r3
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	4013      	ands	r3, r2
 800103e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	689a      	ldr	r2, [r3, #8]
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	005b      	lsls	r3, r3, #1
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	693a      	ldr	r2, [r7, #16]
 800104e:	4313      	orrs	r3, r2
 8001050:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	693a      	ldr	r2, [r7, #16]
 8001056:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	2b02      	cmp	r3, #2
 800105e:	d003      	beq.n	8001068 <HAL_GPIO_Init+0x128>
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	2b12      	cmp	r3, #18
 8001066:	d123      	bne.n	80010b0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	08da      	lsrs	r2, r3, #3
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	3208      	adds	r2, #8
 8001070:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001074:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	f003 0307 	and.w	r3, r3, #7
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	220f      	movs	r2, #15
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	43db      	mvns	r3, r3
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	4013      	ands	r3, r2
 800108a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	691a      	ldr	r2, [r3, #16]
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	f003 0307 	and.w	r3, r3, #7
 8001096:	009b      	lsls	r3, r3, #2
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	693a      	ldr	r2, [r7, #16]
 800109e:	4313      	orrs	r3, r2
 80010a0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	08da      	lsrs	r2, r3, #3
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	3208      	adds	r2, #8
 80010aa:	6939      	ldr	r1, [r7, #16]
 80010ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	2203      	movs	r2, #3
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	43db      	mvns	r3, r3
 80010c2:	693a      	ldr	r2, [r7, #16]
 80010c4:	4013      	ands	r3, r2
 80010c6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f003 0203 	and.w	r2, r3, #3
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	693a      	ldr	r2, [r7, #16]
 80010da:	4313      	orrs	r3, r2
 80010dc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	693a      	ldr	r2, [r7, #16]
 80010e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	f000 80ac 	beq.w	800124a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010f2:	4b5e      	ldr	r3, [pc, #376]	; (800126c <HAL_GPIO_Init+0x32c>)
 80010f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010f6:	4a5d      	ldr	r2, [pc, #372]	; (800126c <HAL_GPIO_Init+0x32c>)
 80010f8:	f043 0301 	orr.w	r3, r3, #1
 80010fc:	6613      	str	r3, [r2, #96]	; 0x60
 80010fe:	4b5b      	ldr	r3, [pc, #364]	; (800126c <HAL_GPIO_Init+0x32c>)
 8001100:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001102:	f003 0301 	and.w	r3, r3, #1
 8001106:	60bb      	str	r3, [r7, #8]
 8001108:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800110a:	4a59      	ldr	r2, [pc, #356]	; (8001270 <HAL_GPIO_Init+0x330>)
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	089b      	lsrs	r3, r3, #2
 8001110:	3302      	adds	r3, #2
 8001112:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001116:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	f003 0303 	and.w	r3, r3, #3
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	220f      	movs	r2, #15
 8001122:	fa02 f303 	lsl.w	r3, r2, r3
 8001126:	43db      	mvns	r3, r3
 8001128:	693a      	ldr	r2, [r7, #16]
 800112a:	4013      	ands	r3, r2
 800112c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001134:	d025      	beq.n	8001182 <HAL_GPIO_Init+0x242>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a4e      	ldr	r2, [pc, #312]	; (8001274 <HAL_GPIO_Init+0x334>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d01f      	beq.n	800117e <HAL_GPIO_Init+0x23e>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a4d      	ldr	r2, [pc, #308]	; (8001278 <HAL_GPIO_Init+0x338>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d019      	beq.n	800117a <HAL_GPIO_Init+0x23a>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4a4c      	ldr	r2, [pc, #304]	; (800127c <HAL_GPIO_Init+0x33c>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d013      	beq.n	8001176 <HAL_GPIO_Init+0x236>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a4b      	ldr	r2, [pc, #300]	; (8001280 <HAL_GPIO_Init+0x340>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d00d      	beq.n	8001172 <HAL_GPIO_Init+0x232>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a4a      	ldr	r2, [pc, #296]	; (8001284 <HAL_GPIO_Init+0x344>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d007      	beq.n	800116e <HAL_GPIO_Init+0x22e>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4a49      	ldr	r2, [pc, #292]	; (8001288 <HAL_GPIO_Init+0x348>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d101      	bne.n	800116a <HAL_GPIO_Init+0x22a>
 8001166:	2306      	movs	r3, #6
 8001168:	e00c      	b.n	8001184 <HAL_GPIO_Init+0x244>
 800116a:	2307      	movs	r3, #7
 800116c:	e00a      	b.n	8001184 <HAL_GPIO_Init+0x244>
 800116e:	2305      	movs	r3, #5
 8001170:	e008      	b.n	8001184 <HAL_GPIO_Init+0x244>
 8001172:	2304      	movs	r3, #4
 8001174:	e006      	b.n	8001184 <HAL_GPIO_Init+0x244>
 8001176:	2303      	movs	r3, #3
 8001178:	e004      	b.n	8001184 <HAL_GPIO_Init+0x244>
 800117a:	2302      	movs	r3, #2
 800117c:	e002      	b.n	8001184 <HAL_GPIO_Init+0x244>
 800117e:	2301      	movs	r3, #1
 8001180:	e000      	b.n	8001184 <HAL_GPIO_Init+0x244>
 8001182:	2300      	movs	r3, #0
 8001184:	697a      	ldr	r2, [r7, #20]
 8001186:	f002 0203 	and.w	r2, r2, #3
 800118a:	0092      	lsls	r2, r2, #2
 800118c:	4093      	lsls	r3, r2
 800118e:	693a      	ldr	r2, [r7, #16]
 8001190:	4313      	orrs	r3, r2
 8001192:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001194:	4936      	ldr	r1, [pc, #216]	; (8001270 <HAL_GPIO_Init+0x330>)
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	089b      	lsrs	r3, r3, #2
 800119a:	3302      	adds	r3, #2
 800119c:	693a      	ldr	r2, [r7, #16]
 800119e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80011a2:	4b3a      	ldr	r3, [pc, #232]	; (800128c <HAL_GPIO_Init+0x34c>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	43db      	mvns	r3, r3
 80011ac:	693a      	ldr	r2, [r7, #16]
 80011ae:	4013      	ands	r3, r2
 80011b0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d003      	beq.n	80011c6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011c6:	4a31      	ldr	r2, [pc, #196]	; (800128c <HAL_GPIO_Init+0x34c>)
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80011cc:	4b2f      	ldr	r3, [pc, #188]	; (800128c <HAL_GPIO_Init+0x34c>)
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	43db      	mvns	r3, r3
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	4013      	ands	r3, r2
 80011da:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d003      	beq.n	80011f0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80011e8:	693a      	ldr	r2, [r7, #16]
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80011f0:	4a26      	ldr	r2, [pc, #152]	; (800128c <HAL_GPIO_Init+0x34c>)
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011f6:	4b25      	ldr	r3, [pc, #148]	; (800128c <HAL_GPIO_Init+0x34c>)
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	43db      	mvns	r3, r3
 8001200:	693a      	ldr	r2, [r7, #16]
 8001202:	4013      	ands	r3, r2
 8001204:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800120e:	2b00      	cmp	r3, #0
 8001210:	d003      	beq.n	800121a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	4313      	orrs	r3, r2
 8001218:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800121a:	4a1c      	ldr	r2, [pc, #112]	; (800128c <HAL_GPIO_Init+0x34c>)
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001220:	4b1a      	ldr	r3, [pc, #104]	; (800128c <HAL_GPIO_Init+0x34c>)
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	43db      	mvns	r3, r3
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	4013      	ands	r3, r2
 800122e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001238:	2b00      	cmp	r3, #0
 800123a:	d003      	beq.n	8001244 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800123c:	693a      	ldr	r2, [r7, #16]
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	4313      	orrs	r3, r2
 8001242:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001244:	4a11      	ldr	r2, [pc, #68]	; (800128c <HAL_GPIO_Init+0x34c>)
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	3301      	adds	r3, #1
 800124e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	fa22 f303 	lsr.w	r3, r2, r3
 800125a:	2b00      	cmp	r3, #0
 800125c:	f47f ae78 	bne.w	8000f50 <HAL_GPIO_Init+0x10>
  }
}
 8001260:	bf00      	nop
 8001262:	371c      	adds	r7, #28
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr
 800126c:	40021000 	.word	0x40021000
 8001270:	40010000 	.word	0x40010000
 8001274:	48000400 	.word	0x48000400
 8001278:	48000800 	.word	0x48000800
 800127c:	48000c00 	.word	0x48000c00
 8001280:	48001000 	.word	0x48001000
 8001284:	48001400 	.word	0x48001400
 8001288:	48001800 	.word	0x48001800
 800128c:	40010400 	.word	0x40010400

08001290 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001290:	b480      	push	{r7}
 8001292:	b087      	sub	sp, #28
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800129a:	2300      	movs	r3, #0
 800129c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800129e:	e0cd      	b.n	800143c <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80012a0:	2201      	movs	r2, #1
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	683a      	ldr	r2, [r7, #0]
 80012aa:	4013      	ands	r3, r2
 80012ac:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	f000 80c0 	beq.w	8001436 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80012b6:	4a68      	ldr	r2, [pc, #416]	; (8001458 <HAL_GPIO_DeInit+0x1c8>)
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	089b      	lsrs	r3, r3, #2
 80012bc:	3302      	adds	r3, #2
 80012be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012c2:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	f003 0303 	and.w	r3, r3, #3
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	220f      	movs	r2, #15
 80012ce:	fa02 f303 	lsl.w	r3, r2, r3
 80012d2:	68fa      	ldr	r2, [r7, #12]
 80012d4:	4013      	ands	r3, r2
 80012d6:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80012de:	d025      	beq.n	800132c <HAL_GPIO_DeInit+0x9c>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	4a5e      	ldr	r2, [pc, #376]	; (800145c <HAL_GPIO_DeInit+0x1cc>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d01f      	beq.n	8001328 <HAL_GPIO_DeInit+0x98>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	4a5d      	ldr	r2, [pc, #372]	; (8001460 <HAL_GPIO_DeInit+0x1d0>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d019      	beq.n	8001324 <HAL_GPIO_DeInit+0x94>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	4a5c      	ldr	r2, [pc, #368]	; (8001464 <HAL_GPIO_DeInit+0x1d4>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d013      	beq.n	8001320 <HAL_GPIO_DeInit+0x90>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	4a5b      	ldr	r2, [pc, #364]	; (8001468 <HAL_GPIO_DeInit+0x1d8>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d00d      	beq.n	800131c <HAL_GPIO_DeInit+0x8c>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	4a5a      	ldr	r2, [pc, #360]	; (800146c <HAL_GPIO_DeInit+0x1dc>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d007      	beq.n	8001318 <HAL_GPIO_DeInit+0x88>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	4a59      	ldr	r2, [pc, #356]	; (8001470 <HAL_GPIO_DeInit+0x1e0>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d101      	bne.n	8001314 <HAL_GPIO_DeInit+0x84>
 8001310:	2306      	movs	r3, #6
 8001312:	e00c      	b.n	800132e <HAL_GPIO_DeInit+0x9e>
 8001314:	2307      	movs	r3, #7
 8001316:	e00a      	b.n	800132e <HAL_GPIO_DeInit+0x9e>
 8001318:	2305      	movs	r3, #5
 800131a:	e008      	b.n	800132e <HAL_GPIO_DeInit+0x9e>
 800131c:	2304      	movs	r3, #4
 800131e:	e006      	b.n	800132e <HAL_GPIO_DeInit+0x9e>
 8001320:	2303      	movs	r3, #3
 8001322:	e004      	b.n	800132e <HAL_GPIO_DeInit+0x9e>
 8001324:	2302      	movs	r3, #2
 8001326:	e002      	b.n	800132e <HAL_GPIO_DeInit+0x9e>
 8001328:	2301      	movs	r3, #1
 800132a:	e000      	b.n	800132e <HAL_GPIO_DeInit+0x9e>
 800132c:	2300      	movs	r3, #0
 800132e:	697a      	ldr	r2, [r7, #20]
 8001330:	f002 0203 	and.w	r2, r2, #3
 8001334:	0092      	lsls	r2, r2, #2
 8001336:	4093      	lsls	r3, r2
 8001338:	68fa      	ldr	r2, [r7, #12]
 800133a:	429a      	cmp	r2, r3
 800133c:	d132      	bne.n	80013a4 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800133e:	4b4d      	ldr	r3, [pc, #308]	; (8001474 <HAL_GPIO_DeInit+0x1e4>)
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	43db      	mvns	r3, r3
 8001346:	494b      	ldr	r1, [pc, #300]	; (8001474 <HAL_GPIO_DeInit+0x1e4>)
 8001348:	4013      	ands	r3, r2
 800134a:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800134c:	4b49      	ldr	r3, [pc, #292]	; (8001474 <HAL_GPIO_DeInit+0x1e4>)
 800134e:	685a      	ldr	r2, [r3, #4]
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	43db      	mvns	r3, r3
 8001354:	4947      	ldr	r1, [pc, #284]	; (8001474 <HAL_GPIO_DeInit+0x1e4>)
 8001356:	4013      	ands	r3, r2
 8001358:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800135a:	4b46      	ldr	r3, [pc, #280]	; (8001474 <HAL_GPIO_DeInit+0x1e4>)
 800135c:	689a      	ldr	r2, [r3, #8]
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	43db      	mvns	r3, r3
 8001362:	4944      	ldr	r1, [pc, #272]	; (8001474 <HAL_GPIO_DeInit+0x1e4>)
 8001364:	4013      	ands	r3, r2
 8001366:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8001368:	4b42      	ldr	r3, [pc, #264]	; (8001474 <HAL_GPIO_DeInit+0x1e4>)
 800136a:	68da      	ldr	r2, [r3, #12]
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	43db      	mvns	r3, r3
 8001370:	4940      	ldr	r1, [pc, #256]	; (8001474 <HAL_GPIO_DeInit+0x1e4>)
 8001372:	4013      	ands	r3, r2
 8001374:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	f003 0303 	and.w	r3, r3, #3
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	220f      	movs	r2, #15
 8001380:	fa02 f303 	lsl.w	r3, r2, r3
 8001384:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8001386:	4a34      	ldr	r2, [pc, #208]	; (8001458 <HAL_GPIO_DeInit+0x1c8>)
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	089b      	lsrs	r3, r3, #2
 800138c:	3302      	adds	r3, #2
 800138e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	43da      	mvns	r2, r3
 8001396:	4830      	ldr	r0, [pc, #192]	; (8001458 <HAL_GPIO_DeInit+0x1c8>)
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	089b      	lsrs	r3, r3, #2
 800139c:	400a      	ands	r2, r1
 800139e:	3302      	adds	r3, #2
 80013a0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	005b      	lsls	r3, r3, #1
 80013ac:	2103      	movs	r1, #3
 80013ae:	fa01 f303 	lsl.w	r3, r1, r3
 80013b2:	431a      	orrs	r2, r3
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	08da      	lsrs	r2, r3, #3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	3208      	adds	r2, #8
 80013c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	f003 0307 	and.w	r3, r3, #7
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	220f      	movs	r2, #15
 80013ce:	fa02 f303 	lsl.w	r3, r2, r3
 80013d2:	43db      	mvns	r3, r3
 80013d4:	697a      	ldr	r2, [r7, #20]
 80013d6:	08d2      	lsrs	r2, r2, #3
 80013d8:	4019      	ands	r1, r3
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	3208      	adds	r2, #8
 80013de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	689a      	ldr	r2, [r3, #8]
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	005b      	lsls	r3, r3, #1
 80013ea:	2103      	movs	r1, #3
 80013ec:	fa01 f303 	lsl.w	r3, r1, r3
 80013f0:	43db      	mvns	r3, r3
 80013f2:	401a      	ands	r2, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	685a      	ldr	r2, [r3, #4]
 80013fc:	2101      	movs	r1, #1
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	fa01 f303 	lsl.w	r3, r1, r3
 8001404:	43db      	mvns	r3, r3
 8001406:	401a      	ands	r2, r3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	68da      	ldr	r2, [r3, #12]
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	2103      	movs	r1, #3
 8001416:	fa01 f303 	lsl.w	r3, r1, r3
 800141a:	43db      	mvns	r3, r3
 800141c:	401a      	ands	r2, r3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001426:	2101      	movs	r1, #1
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	fa01 f303 	lsl.w	r3, r1, r3
 800142e:	43db      	mvns	r3, r3
 8001430:	401a      	ands	r2, r3
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	3301      	adds	r3, #1
 800143a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800143c:	683a      	ldr	r2, [r7, #0]
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	fa22 f303 	lsr.w	r3, r2, r3
 8001444:	2b00      	cmp	r3, #0
 8001446:	f47f af2b 	bne.w	80012a0 <HAL_GPIO_DeInit+0x10>
  }
}
 800144a:	bf00      	nop
 800144c:	371c      	adds	r7, #28
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	40010000 	.word	0x40010000
 800145c:	48000400 	.word	0x48000400
 8001460:	48000800 	.word	0x48000800
 8001464:	48000c00 	.word	0x48000c00
 8001468:	48001000 	.word	0x48001000
 800146c:	48001400 	.word	0x48001400
 8001470:	48001800 	.word	0x48001800
 8001474:	40010400 	.word	0x40010400

08001478 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	460b      	mov	r3, r1
 8001482:	807b      	strh	r3, [r7, #2]
 8001484:	4613      	mov	r3, r2
 8001486:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001488:	787b      	ldrb	r3, [r7, #1]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d003      	beq.n	8001496 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800148e:	887a      	ldrh	r2, [r7, #2]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001494:	e002      	b.n	800149c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001496:	887a      	ldrh	r2, [r7, #2]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800149c:	bf00      	nop
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr

080014a8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80014ac:	4b04      	ldr	r3, [pc, #16]	; (80014c0 <HAL_PWREx_GetVoltageRange+0x18>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	40007000 	.word	0x40007000

080014c4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b085      	sub	sp, #20
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014d2:	d130      	bne.n	8001536 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80014d4:	4b23      	ldr	r3, [pc, #140]	; (8001564 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80014dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014e0:	d038      	beq.n	8001554 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80014e2:	4b20      	ldr	r3, [pc, #128]	; (8001564 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80014ea:	4a1e      	ldr	r2, [pc, #120]	; (8001564 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014f0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80014f2:	4b1d      	ldr	r3, [pc, #116]	; (8001568 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	2232      	movs	r2, #50	; 0x32
 80014f8:	fb02 f303 	mul.w	r3, r2, r3
 80014fc:	4a1b      	ldr	r2, [pc, #108]	; (800156c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80014fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001502:	0c9b      	lsrs	r3, r3, #18
 8001504:	3301      	adds	r3, #1
 8001506:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001508:	e002      	b.n	8001510 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	3b01      	subs	r3, #1
 800150e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001510:	4b14      	ldr	r3, [pc, #80]	; (8001564 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001512:	695b      	ldr	r3, [r3, #20]
 8001514:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001518:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800151c:	d102      	bne.n	8001524 <HAL_PWREx_ControlVoltageScaling+0x60>
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d1f2      	bne.n	800150a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001524:	4b0f      	ldr	r3, [pc, #60]	; (8001564 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001526:	695b      	ldr	r3, [r3, #20]
 8001528:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800152c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001530:	d110      	bne.n	8001554 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001532:	2303      	movs	r3, #3
 8001534:	e00f      	b.n	8001556 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001536:	4b0b      	ldr	r3, [pc, #44]	; (8001564 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800153e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001542:	d007      	beq.n	8001554 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001544:	4b07      	ldr	r3, [pc, #28]	; (8001564 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800154c:	4a05      	ldr	r2, [pc, #20]	; (8001564 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800154e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001552:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001554:	2300      	movs	r3, #0
}
 8001556:	4618      	mov	r0, r3
 8001558:	3714      	adds	r7, #20
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	40007000 	.word	0x40007000
 8001568:	20000008 	.word	0x20000008
 800156c:	431bde83 	.word	0x431bde83

08001570 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b086      	sub	sp, #24
 8001574:	af02      	add	r7, sp, #8
 8001576:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8001578:	f7fe fe8e 	bl	8000298 <HAL_GetTick>
 800157c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d101      	bne.n	8001588 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8001584:	2301      	movs	r3, #1
 8001586:	e063      	b.n	8001650 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800158e:	b2db      	uxtb	r3, r3
 8001590:	2b00      	cmp	r3, #0
 8001592:	d10b      	bne.n	80015ac <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2200      	movs	r2, #0
 8001598:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	f002 fded 	bl	800417c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80015a2:	f241 3188 	movw	r1, #5000	; 0x1388
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f000 faf7 	bl	8001b9a <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	3b01      	subs	r3, #1
 80015bc:	021a      	lsls	r2, r3, #8
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	430a      	orrs	r2, r1
 80015c4:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ca:	9300      	str	r3, [sp, #0]
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	2200      	movs	r2, #0
 80015d0:	2120      	movs	r1, #32
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f000 faef 	bl	8001bb6 <QSPI_WaitFlagStateUntilTimeout>
 80015d8:	4603      	mov	r3, r0
 80015da:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80015dc:	7afb      	ldrb	r3, [r7, #11]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d131      	bne.n	8001646 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80015ec:	f023 0310 	bic.w	r3, r3, #16
 80015f0:	687a      	ldr	r2, [r7, #4]
 80015f2:	6852      	ldr	r2, [r2, #4]
 80015f4:	0611      	lsls	r1, r2, #24
 80015f6:	687a      	ldr	r2, [r7, #4]
 80015f8:	68d2      	ldr	r2, [r2, #12]
 80015fa:	4311      	orrs	r1, r2
 80015fc:	687a      	ldr	r2, [r7, #4]
 80015fe:	6812      	ldr	r2, [r2, #0]
 8001600:	430b      	orrs	r3, r1
 8001602:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	685a      	ldr	r2, [r3, #4]
 800160a:	4b13      	ldr	r3, [pc, #76]	; (8001658 <HAL_QSPI_Init+0xe8>)
 800160c:	4013      	ands	r3, r2
 800160e:	687a      	ldr	r2, [r7, #4]
 8001610:	6912      	ldr	r2, [r2, #16]
 8001612:	0411      	lsls	r1, r2, #16
 8001614:	687a      	ldr	r2, [r7, #4]
 8001616:	6952      	ldr	r2, [r2, #20]
 8001618:	4311      	orrs	r1, r2
 800161a:	687a      	ldr	r2, [r7, #4]
 800161c:	6992      	ldr	r2, [r2, #24]
 800161e:	4311      	orrs	r1, r2
 8001620:	687a      	ldr	r2, [r7, #4]
 8001622:	6812      	ldr	r2, [r2, #0]
 8001624:	430b      	orrs	r3, r1
 8001626:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f042 0201 	orr.w	r2, r2, #1
 8001636:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2200      	movs	r2, #0
 800163c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2201      	movs	r2, #1
 8001642:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2200      	movs	r2, #0
 800164a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 800164e:	7afb      	ldrb	r3, [r7, #11]
}
 8001650:	4618      	mov	r0, r3
 8001652:	3710      	adds	r7, #16
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	ffe0f8fe 	.word	0xffe0f8fe

0800165c <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d101      	bne.n	800166e <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e016      	b.n	800169c <HAL_QSPI_DeInit+0x40>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f022 0201 	bic.w	r2, r2, #1
 800167c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f002 fdc0 	bl	8004204 <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2200      	movs	r2, #0
 8001688:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2200      	movs	r2, #0
 800168e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2200      	movs	r2, #0
 8001696:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800169a:	2300      	movs	r3, #0
}
 800169c:	4618      	mov	r0, r3
 800169e:	3708      	adds	r7, #8
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <HAL_QSPI_Command>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b088      	sub	sp, #32
 80016a8:	af02      	add	r7, sp, #8
 80016aa:	60f8      	str	r0, [r7, #12]
 80016ac:	60b9      	str	r1, [r7, #8]
 80016ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80016b0:	f7fe fdf2 	bl	8000298 <HAL_GetTick>
 80016b4:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d101      	bne.n	80016c6 <HAL_QSPI_Command+0x22>
 80016c2:	2302      	movs	r3, #2
 80016c4:	e048      	b.n	8001758 <HAL_QSPI_Command+0xb4>
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	2201      	movs	r2, #1
 80016ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d137      	bne.n	800174a <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	2200      	movs	r2, #0
 80016de:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	2202      	movs	r2, #2
 80016e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	9300      	str	r3, [sp, #0]
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	2200      	movs	r2, #0
 80016f0:	2120      	movs	r1, #32
 80016f2:	68f8      	ldr	r0, [r7, #12]
 80016f4:	f000 fa5f 	bl	8001bb6 <QSPI_WaitFlagStateUntilTimeout>
 80016f8:	4603      	mov	r3, r0
 80016fa:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 80016fc:	7dfb      	ldrb	r3, [r7, #23]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d125      	bne.n	800174e <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8001702:	2200      	movs	r2, #0
 8001704:	68b9      	ldr	r1, [r7, #8]
 8001706:	68f8      	ldr	r0, [r7, #12]
 8001708:	f000 fa8c 	bl	8001c24 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001710:	2b00      	cmp	r3, #0
 8001712:	d115      	bne.n	8001740 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	9300      	str	r3, [sp, #0]
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	2201      	movs	r2, #1
 800171c:	2102      	movs	r1, #2
 800171e:	68f8      	ldr	r0, [r7, #12]
 8001720:	f000 fa49 	bl	8001bb6 <QSPI_WaitFlagStateUntilTimeout>
 8001724:	4603      	mov	r3, r0
 8001726:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8001728:	7dfb      	ldrb	r3, [r7, #23]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d10f      	bne.n	800174e <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	2202      	movs	r2, #2
 8001734:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	2201      	movs	r2, #1
 800173a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800173e:	e006      	b.n	800174e <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	2201      	movs	r2, #1
 8001744:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8001748:	e001      	b.n	800174e <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800174a:	2302      	movs	r3, #2
 800174c:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	2200      	movs	r2, #0
 8001752:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8001756:	7dfb      	ldrb	r3, [r7, #23]
}
 8001758:	4618      	mov	r0, r3
 800175a:	3718      	adds	r7, #24
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}

08001760 <HAL_QSPI_Transmit>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b08a      	sub	sp, #40	; 0x28
 8001764:	af02      	add	r7, sp, #8
 8001766:	60f8      	str	r0, [r7, #12]
 8001768:	60b9      	str	r1, [r7, #8]
 800176a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800176c:	2300      	movs	r3, #0
 800176e:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8001770:	f7fe fd92 	bl	8000298 <HAL_GetTick>
 8001774:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	3320      	adds	r3, #32
 800177c:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001784:	b2db      	uxtb	r3, r3
 8001786:	2b01      	cmp	r3, #1
 8001788:	d101      	bne.n	800178e <HAL_QSPI_Transmit+0x2e>
 800178a:	2302      	movs	r3, #2
 800178c:	e07b      	b.n	8001886 <HAL_QSPI_Transmit+0x126>
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	2201      	movs	r2, #1
 8001792:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800179c:	b2db      	uxtb	r3, r3
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d16a      	bne.n	8001878 <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	2200      	movs	r2, #0
 80017a6:	63da      	str	r2, [r3, #60]	; 0x3c

    if(pData != NULL )
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d05b      	beq.n	8001866 <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	2212      	movs	r2, #18
 80017b2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	691b      	ldr	r3, [r3, #16]
 80017bc:	1c5a      	adds	r2, r3, #1
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	625a      	str	r2, [r3, #36]	; 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	691b      	ldr	r3, [r3, #16]
 80017c8:	1c5a      	adds	r2, r3, #1
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	621a      	str	r2, [r3, #32]
      hqspi->pTxBuffPtr = pData;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	68ba      	ldr	r2, [r7, #8]
 80017d2:	61da      	str	r2, [r3, #28]

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	695a      	ldr	r2, [r3, #20]
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80017e2:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 80017e4:	e01b      	b.n	800181e <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	9300      	str	r3, [sp, #0]
 80017ea:	69bb      	ldr	r3, [r7, #24]
 80017ec:	2201      	movs	r2, #1
 80017ee:	2104      	movs	r1, #4
 80017f0:	68f8      	ldr	r0, [r7, #12]
 80017f2:	f000 f9e0 	bl	8001bb6 <QSPI_WaitFlagStateUntilTimeout>
 80017f6:	4603      	mov	r3, r0
 80017f8:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 80017fa:	7ffb      	ldrb	r3, [r7, #31]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d113      	bne.n	8001828 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	69db      	ldr	r3, [r3, #28]
 8001804:	781a      	ldrb	r2, [r3, #0]
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	69db      	ldr	r3, [r3, #28]
 800180e:	1c5a      	adds	r2, r3, #1
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	61da      	str	r2, [r3, #28]
        hqspi->TxXferCount--;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001818:	1e5a      	subs	r2, r3, #1
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	625a      	str	r2, [r3, #36]	; 0x24
      while(hqspi->TxXferCount > 0U)
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001822:	2b00      	cmp	r3, #0
 8001824:	d1df      	bne.n	80017e6 <HAL_QSPI_Transmit+0x86>
 8001826:	e000      	b.n	800182a <HAL_QSPI_Transmit+0xca>
          break;
 8001828:	bf00      	nop
      }

      if (status == HAL_OK)
 800182a:	7ffb      	ldrb	r3, [r7, #31]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d115      	bne.n	800185c <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	9300      	str	r3, [sp, #0]
 8001834:	69bb      	ldr	r3, [r7, #24]
 8001836:	2201      	movs	r2, #1
 8001838:	2102      	movs	r1, #2
 800183a:	68f8      	ldr	r0, [r7, #12]
 800183c:	f000 f9bb 	bl	8001bb6 <QSPI_WaitFlagStateUntilTimeout>
 8001840:	4603      	mov	r3, r0
 8001842:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8001844:	7ffb      	ldrb	r3, [r7, #31]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d108      	bne.n	800185c <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	2202      	movs	r2, #2
 8001850:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 8001852:	68f8      	ldr	r0, [r7, #12]
 8001854:	f000 f934 	bl	8001ac0 <HAL_QSPI_Abort>
 8001858:	4603      	mov	r3, r0
 800185a:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	2201      	movs	r2, #1
 8001860:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8001864:	e00a      	b.n	800187c <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800186a:	f043 0208 	orr.w	r2, r3, #8
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	63da      	str	r2, [r3, #60]	; 0x3c
      status = HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	77fb      	strb	r3, [r7, #31]
 8001876:	e001      	b.n	800187c <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 8001878:	2302      	movs	r3, #2
 800187a:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	2200      	movs	r2, #0
 8001880:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 8001884:	7ffb      	ldrb	r3, [r7, #31]
}
 8001886:	4618      	mov	r0, r3
 8001888:	3720      	adds	r7, #32
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}

0800188e <HAL_QSPI_Receive>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800188e:	b580      	push	{r7, lr}
 8001890:	b08a      	sub	sp, #40	; 0x28
 8001892:	af02      	add	r7, sp, #8
 8001894:	60f8      	str	r0, [r7, #12]
 8001896:	60b9      	str	r1, [r7, #8]
 8001898:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800189a:	2300      	movs	r3, #0
 800189c:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800189e:	f7fe fcfb 	bl	8000298 <HAL_GetTick>
 80018a2:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	699b      	ldr	r3, [r3, #24]
 80018aa:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	3320      	adds	r3, #32
 80018b2:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d101      	bne.n	80018c4 <HAL_QSPI_Receive+0x36>
 80018c0:	2302      	movs	r3, #2
 80018c2:	e082      	b.n	80019ca <HAL_QSPI_Receive+0x13c>
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	2201      	movs	r2, #1
 80018c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d171      	bne.n	80019bc <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	2200      	movs	r2, #0
 80018dc:	63da      	str	r2, [r3, #60]	; 0x3c

    if(pData != NULL )
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d062      	beq.n	80019aa <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	2222      	movs	r2, #34	; 0x22
 80018e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	691b      	ldr	r3, [r3, #16]
 80018f2:	1c5a      	adds	r2, r3, #1
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	631a      	str	r2, [r3, #48]	; 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	691b      	ldr	r3, [r3, #16]
 80018fe:	1c5a      	adds	r2, r3, #1
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->pRxBuffPtr = pData;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	68ba      	ldr	r2, [r7, #8]
 8001908:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	695b      	ldr	r3, [r3, #20]
 8001910:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800191c:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	697a      	ldr	r2, [r7, #20]
 8001924:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8001926:	e01c      	b.n	8001962 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	9300      	str	r3, [sp, #0]
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	2201      	movs	r2, #1
 8001930:	2106      	movs	r1, #6
 8001932:	68f8      	ldr	r0, [r7, #12]
 8001934:	f000 f93f 	bl	8001bb6 <QSPI_WaitFlagStateUntilTimeout>
 8001938:	4603      	mov	r3, r0
 800193a:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 800193c:	7ffb      	ldrb	r3, [r7, #31]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d114      	bne.n	800196c <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001946:	693a      	ldr	r2, [r7, #16]
 8001948:	7812      	ldrb	r2, [r2, #0]
 800194a:	b2d2      	uxtb	r2, r2
 800194c:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001952:	1c5a      	adds	r2, r3, #1
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	629a      	str	r2, [r3, #40]	; 0x28
        hqspi->RxXferCount--;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195c:	1e5a      	subs	r2, r3, #1
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	631a      	str	r2, [r3, #48]	; 0x30
      while(hqspi->RxXferCount > 0U)
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001966:	2b00      	cmp	r3, #0
 8001968:	d1de      	bne.n	8001928 <HAL_QSPI_Receive+0x9a>
 800196a:	e000      	b.n	800196e <HAL_QSPI_Receive+0xe0>
          break;
 800196c:	bf00      	nop
      }

      if (status == HAL_OK)
 800196e:	7ffb      	ldrb	r3, [r7, #31]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d115      	bne.n	80019a0 <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	9300      	str	r3, [sp, #0]
 8001978:	69bb      	ldr	r3, [r7, #24]
 800197a:	2201      	movs	r2, #1
 800197c:	2102      	movs	r1, #2
 800197e:	68f8      	ldr	r0, [r7, #12]
 8001980:	f000 f919 	bl	8001bb6 <QSPI_WaitFlagStateUntilTimeout>
 8001984:	4603      	mov	r3, r0
 8001986:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 8001988:	7ffb      	ldrb	r3, [r7, #31]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d108      	bne.n	80019a0 <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	2202      	movs	r2, #2
 8001994:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 8001996:	68f8      	ldr	r0, [r7, #12]
 8001998:	f000 f892 	bl	8001ac0 <HAL_QSPI_Abort>
 800199c:	4603      	mov	r3, r0
 800199e:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	2201      	movs	r2, #1
 80019a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80019a8:	e00a      	b.n	80019c0 <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019ae:	f043 0208 	orr.w	r2, r3, #8
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	63da      	str	r2, [r3, #60]	; 0x3c
      status = HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	77fb      	strb	r3, [r7, #31]
 80019ba:	e001      	b.n	80019c0 <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 80019bc:	2302      	movs	r3, #2
 80019be:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	2200      	movs	r2, #0
 80019c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 80019c8:	7ffb      	ldrb	r3, [r7, #31]
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3720      	adds	r7, #32
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}

080019d2 <HAL_QSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 80019d2:	b580      	push	{r7, lr}
 80019d4:	b088      	sub	sp, #32
 80019d6:	af02      	add	r7, sp, #8
 80019d8:	60f8      	str	r0, [r7, #12]
 80019da:	60b9      	str	r1, [r7, #8]
 80019dc:	607a      	str	r2, [r7, #4]
 80019de:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80019e0:	f7fe fc5a 	bl	8000298 <HAL_GetTick>
 80019e4:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d101      	bne.n	80019f6 <HAL_QSPI_AutoPolling+0x24>
 80019f2:	2302      	movs	r3, #2
 80019f4:	e060      	b.n	8001ab8 <HAL_QSPI_AutoPolling+0xe6>
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	2201      	movs	r2, #1
 80019fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d14f      	bne.n	8001aaa <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	2242      	movs	r2, #66	; 0x42
 8001a14:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	9300      	str	r3, [sp, #0]
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	2120      	movs	r1, #32
 8001a22:	68f8      	ldr	r0, [r7, #12]
 8001a24:	f000 f8c7 	bl	8001bb6 <QSPI_WaitFlagStateUntilTimeout>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8001a2c:	7dfb      	ldrb	r3, [r7, #23]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d13d      	bne.n	8001aae <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	6812      	ldr	r2, [r2, #0]
 8001a3a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	6852      	ldr	r2, [r2, #4]
 8001a44:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	6892      	ldr	r2, [r2, #8]
 8001a4e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	691b      	ldr	r3, [r3, #16]
 8001a5e:	431a      	orrs	r2, r3
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001a68:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	68da      	ldr	r2, [r3, #12]
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8001a72:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a76:	68b9      	ldr	r1, [r7, #8]
 8001a78:	68f8      	ldr	r0, [r7, #12]
 8001a7a:	f000 f8d3 	bl	8001c24 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	9300      	str	r3, [sp, #0]
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	2201      	movs	r2, #1
 8001a86:	2108      	movs	r1, #8
 8001a88:	68f8      	ldr	r0, [r7, #12]
 8001a8a:	f000 f894 	bl	8001bb6 <QSPI_WaitFlagStateUntilTimeout>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8001a92:	7dfb      	ldrb	r3, [r7, #23]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d10a      	bne.n	8001aae <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	2208      	movs	r2, #8
 8001a9e:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8001aa8:	e001      	b.n	8001aae <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8001aaa:	2302      	movs	r3, #2
 8001aac:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8001ab6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3718      	adds	r7, #24
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}

08001ac0 <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi : QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b086      	sub	sp, #24
 8001ac4:	af02      	add	r7, sp, #8
 8001ac6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8001acc:	f7fe fbe4 	bl	8000298 <HAL_GetTick>
 8001ad0:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	f003 0302 	and.w	r3, r3, #2
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d056      	beq.n	8001b90 <HAL_QSPI_Abort+0xd0>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0304 	and.w	r3, r3, #4
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d017      	beq.n	8001b28 <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f022 0204 	bic.w	r2, r2, #4
 8001b06:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7ff f8f9 	bl	8000d04 <HAL_DMA_Abort>
 8001b12:	4603      	mov	r3, r0
 8001b14:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 8001b16:	7bfb      	ldrb	r3, [r7, #15]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d005      	beq.n	8001b28 <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b20:	f043 0204 	orr.w	r2, r3, #4
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f042 0202 	orr.w	r2, r2, #2
 8001b36:	601a      	str	r2, [r3, #0]

    /* Wait until TC flag is set to go back in idle state */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3c:	9300      	str	r3, [sp, #0]
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	2201      	movs	r2, #1
 8001b42:	2102      	movs	r1, #2
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f000 f836 	bl	8001bb6 <QSPI_WaitFlagStateUntilTimeout>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8001b4e:	7bfb      	ldrb	r3, [r7, #15]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d10e      	bne.n	8001b72 <HAL_QSPI_Abort+0xb2>
    {
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	2202      	movs	r2, #2
 8001b5a:	60da      	str	r2, [r3, #12]

      /* Wait until BUSY flag is reset */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b60:	9300      	str	r3, [sp, #0]
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	2200      	movs	r2, #0
 8001b66:	2120      	movs	r1, #32
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f000 f824 	bl	8001bb6 <QSPI_WaitFlagStateUntilTimeout>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8001b72:	7bfb      	ldrb	r3, [r7, #15]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d10b      	bne.n	8001b90 <HAL_QSPI_Abort+0xd0>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	695a      	ldr	r2, [r3, #20]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8001b86:	615a      	str	r2, [r3, #20]

      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }
  }

  return status;
 8001b90:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3710      	adds	r7, #16
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}

08001b9a <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	b083      	sub	sp, #12
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
 8001ba2:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	683a      	ldr	r2, [r7, #0]
 8001ba8:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001baa:	bf00      	nop
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr

08001bb6 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	b084      	sub	sp, #16
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	60f8      	str	r0, [r7, #12]
 8001bbe:	60b9      	str	r1, [r7, #8]
 8001bc0:	603b      	str	r3, [r7, #0]
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8001bc6:	e01a      	b.n	8001bfe <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bc8:	69bb      	ldr	r3, [r7, #24]
 8001bca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bce:	d016      	beq.n	8001bfe <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bd0:	f7fe fb62 	bl	8000298 <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	69ba      	ldr	r2, [r7, #24]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d302      	bcc.n	8001be6 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8001be0:	69bb      	ldr	r3, [r7, #24]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d10b      	bne.n	8001bfe <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	2204      	movs	r2, #4
 8001bea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bf2:	f043 0201 	orr.w	r2, r3, #1
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e00e      	b.n	8001c1c <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	689a      	ldr	r2, [r3, #8]
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	4013      	ands	r3, r2
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	bf14      	ite	ne
 8001c0c:	2301      	movne	r3, #1
 8001c0e:	2300      	moveq	r3, #0
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	461a      	mov	r2, r3
 8001c14:	79fb      	ldrb	r3, [r7, #7]
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d1d6      	bne.n	8001bc8 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001c1a:	2300      	movs	r3, #0
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3710      	adds	r7, #16
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b085      	sub	sp, #20
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	60f8      	str	r0, [r7, #12]
 8001c2c:	60b9      	str	r1, [r7, #8]
 8001c2e:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d009      	beq.n	8001c4c <QSPI_Config+0x28>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8001c3e:	d005      	beq.n	8001c4c <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	3a01      	subs	r2, #1
 8001c4a:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	699b      	ldr	r3, [r3, #24]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	f000 80b9 	beq.w	8001dc8 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	6a1b      	ldr	r3, [r3, #32]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d05f      	beq.n	8001d1e <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	68ba      	ldr	r2, [r7, #8]
 8001c64:	6892      	ldr	r2, [r2, #8]
 8001c66:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	69db      	ldr	r3, [r3, #28]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d031      	beq.n	8001cd4 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c78:	431a      	orrs	r2, r3
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c7e:	431a      	orrs	r2, r3
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c84:	431a      	orrs	r2, r3
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	695b      	ldr	r3, [r3, #20]
 8001c8a:	049b      	lsls	r3, r3, #18
 8001c8c:	431a      	orrs	r2, r3
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	691b      	ldr	r3, [r3, #16]
 8001c92:	431a      	orrs	r2, r3
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	6a1b      	ldr	r3, [r3, #32]
 8001c98:	431a      	orrs	r2, r3
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	68db      	ldr	r3, [r3, #12]
 8001c9e:	431a      	orrs	r2, r3
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	69db      	ldr	r3, [r3, #28]
 8001ca4:	431a      	orrs	r2, r3
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	699b      	ldr	r3, [r3, #24]
 8001caa:	431a      	orrs	r2, r3
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	ea42 0103 	orr.w	r1, r2, r3
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	430a      	orrs	r2, r1
 8001cbc:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8001cc4:	f000 812e 	beq.w	8001f24 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	68ba      	ldr	r2, [r7, #8]
 8001cce:	6852      	ldr	r2, [r2, #4]
 8001cd0:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8001cd2:	e127      	b.n	8001f24 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cdc:	431a      	orrs	r2, r3
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ce2:	431a      	orrs	r2, r3
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce8:	431a      	orrs	r2, r3
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	695b      	ldr	r3, [r3, #20]
 8001cee:	049b      	lsls	r3, r3, #18
 8001cf0:	431a      	orrs	r2, r3
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	691b      	ldr	r3, [r3, #16]
 8001cf6:	431a      	orrs	r2, r3
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	6a1b      	ldr	r3, [r3, #32]
 8001cfc:	431a      	orrs	r2, r3
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	69db      	ldr	r3, [r3, #28]
 8001d02:	431a      	orrs	r2, r3
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	699b      	ldr	r3, [r3, #24]
 8001d08:	431a      	orrs	r2, r3
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	ea42 0103 	orr.w	r1, r2, r3
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	430a      	orrs	r2, r1
 8001d1a:	615a      	str	r2, [r3, #20]
}
 8001d1c:	e102      	b.n	8001f24 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	69db      	ldr	r3, [r3, #28]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d02e      	beq.n	8001d84 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2e:	431a      	orrs	r2, r3
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d34:	431a      	orrs	r2, r3
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d3a:	431a      	orrs	r2, r3
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	695b      	ldr	r3, [r3, #20]
 8001d40:	049b      	lsls	r3, r3, #18
 8001d42:	431a      	orrs	r2, r3
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	6a1b      	ldr	r3, [r3, #32]
 8001d48:	431a      	orrs	r2, r3
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	68db      	ldr	r3, [r3, #12]
 8001d4e:	431a      	orrs	r2, r3
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	69db      	ldr	r3, [r3, #28]
 8001d54:	431a      	orrs	r2, r3
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	699b      	ldr	r3, [r3, #24]
 8001d5a:	431a      	orrs	r2, r3
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	ea42 0103 	orr.w	r1, r2, r3
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	687a      	ldr	r2, [r7, #4]
 8001d6a:	430a      	orrs	r2, r1
 8001d6c:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8001d74:	f000 80d6 	beq.w	8001f24 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	68ba      	ldr	r2, [r7, #8]
 8001d7e:	6852      	ldr	r2, [r2, #4]
 8001d80:	619a      	str	r2, [r3, #24]
}
 8001d82:	e0cf      	b.n	8001f24 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8c:	431a      	orrs	r2, r3
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d92:	431a      	orrs	r2, r3
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d98:	431a      	orrs	r2, r3
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	695b      	ldr	r3, [r3, #20]
 8001d9e:	049b      	lsls	r3, r3, #18
 8001da0:	431a      	orrs	r2, r3
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	6a1b      	ldr	r3, [r3, #32]
 8001da6:	431a      	orrs	r2, r3
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	69db      	ldr	r3, [r3, #28]
 8001dac:	431a      	orrs	r2, r3
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	699b      	ldr	r3, [r3, #24]
 8001db2:	431a      	orrs	r2, r3
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	ea42 0103 	orr.w	r1, r2, r3
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	687a      	ldr	r2, [r7, #4]
 8001dc2:	430a      	orrs	r2, r1
 8001dc4:	615a      	str	r2, [r3, #20]
}
 8001dc6:	e0ad      	b.n	8001f24 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	6a1b      	ldr	r3, [r3, #32]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d058      	beq.n	8001e82 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	68ba      	ldr	r2, [r7, #8]
 8001dd6:	6892      	ldr	r2, [r2, #8]
 8001dd8:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	69db      	ldr	r3, [r3, #28]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d02d      	beq.n	8001e3e <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dea:	431a      	orrs	r2, r3
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001df0:	431a      	orrs	r2, r3
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df6:	431a      	orrs	r2, r3
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	695b      	ldr	r3, [r3, #20]
 8001dfc:	049b      	lsls	r3, r3, #18
 8001dfe:	431a      	orrs	r2, r3
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	691b      	ldr	r3, [r3, #16]
 8001e04:	431a      	orrs	r2, r3
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	6a1b      	ldr	r3, [r3, #32]
 8001e0a:	431a      	orrs	r2, r3
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	431a      	orrs	r2, r3
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	69db      	ldr	r3, [r3, #28]
 8001e16:	431a      	orrs	r2, r3
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	699b      	ldr	r3, [r3, #24]
 8001e1c:	ea42 0103 	orr.w	r1, r2, r3
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	430a      	orrs	r2, r1
 8001e28:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8001e30:	d078      	beq.n	8001f24 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	68ba      	ldr	r2, [r7, #8]
 8001e38:	6852      	ldr	r2, [r2, #4]
 8001e3a:	619a      	str	r2, [r3, #24]
}
 8001e3c:	e072      	b.n	8001f24 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e46:	431a      	orrs	r2, r3
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e4c:	431a      	orrs	r2, r3
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e52:	431a      	orrs	r2, r3
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	695b      	ldr	r3, [r3, #20]
 8001e58:	049b      	lsls	r3, r3, #18
 8001e5a:	431a      	orrs	r2, r3
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	691b      	ldr	r3, [r3, #16]
 8001e60:	431a      	orrs	r2, r3
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	6a1b      	ldr	r3, [r3, #32]
 8001e66:	431a      	orrs	r2, r3
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	69db      	ldr	r3, [r3, #28]
 8001e6c:	431a      	orrs	r2, r3
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	699b      	ldr	r3, [r3, #24]
 8001e72:	ea42 0103 	orr.w	r1, r2, r3
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	430a      	orrs	r2, r1
 8001e7e:	615a      	str	r2, [r3, #20]
}
 8001e80:	e050      	b.n	8001f24 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	69db      	ldr	r3, [r3, #28]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d02a      	beq.n	8001ee0 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e92:	431a      	orrs	r2, r3
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e98:	431a      	orrs	r2, r3
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e9e:	431a      	orrs	r2, r3
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	695b      	ldr	r3, [r3, #20]
 8001ea4:	049b      	lsls	r3, r3, #18
 8001ea6:	431a      	orrs	r2, r3
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	6a1b      	ldr	r3, [r3, #32]
 8001eac:	431a      	orrs	r2, r3
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	68db      	ldr	r3, [r3, #12]
 8001eb2:	431a      	orrs	r2, r3
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	69db      	ldr	r3, [r3, #28]
 8001eb8:	431a      	orrs	r2, r3
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	699b      	ldr	r3, [r3, #24]
 8001ebe:	ea42 0103 	orr.w	r1, r2, r3
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	687a      	ldr	r2, [r7, #4]
 8001ec8:	430a      	orrs	r2, r1
 8001eca:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8001ed2:	d027      	beq.n	8001f24 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	68ba      	ldr	r2, [r7, #8]
 8001eda:	6852      	ldr	r2, [r2, #4]
 8001edc:	619a      	str	r2, [r3, #24]
}
 8001ede:	e021      	b.n	8001f24 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d01d      	beq.n	8001f24 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef0:	431a      	orrs	r2, r3
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ef6:	431a      	orrs	r2, r3
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001efc:	431a      	orrs	r2, r3
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	695b      	ldr	r3, [r3, #20]
 8001f02:	049b      	lsls	r3, r3, #18
 8001f04:	431a      	orrs	r2, r3
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	6a1b      	ldr	r3, [r3, #32]
 8001f0a:	431a      	orrs	r2, r3
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	69db      	ldr	r3, [r3, #28]
 8001f10:	431a      	orrs	r2, r3
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	699b      	ldr	r3, [r3, #24]
 8001f16:	ea42 0103 	orr.w	r1, r2, r3
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	430a      	orrs	r2, r1
 8001f22:	615a      	str	r2, [r3, #20]
}
 8001f24:	bf00      	nop
 8001f26:	3714      	adds	r7, #20
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr

08001f30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b088      	sub	sp, #32
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d101      	bne.n	8001f42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e3d4      	b.n	80026ec <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f42:	4ba1      	ldr	r3, [pc, #644]	; (80021c8 <HAL_RCC_OscConfig+0x298>)
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	f003 030c 	and.w	r3, r3, #12
 8001f4a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f4c:	4b9e      	ldr	r3, [pc, #632]	; (80021c8 <HAL_RCC_OscConfig+0x298>)
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	f003 0303 	and.w	r3, r3, #3
 8001f54:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0310 	and.w	r3, r3, #16
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	f000 80e4 	beq.w	800212c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d007      	beq.n	8001f7a <HAL_RCC_OscConfig+0x4a>
 8001f6a:	69bb      	ldr	r3, [r7, #24]
 8001f6c:	2b0c      	cmp	r3, #12
 8001f6e:	f040 808b 	bne.w	8002088 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	f040 8087 	bne.w	8002088 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f7a:	4b93      	ldr	r3, [pc, #588]	; (80021c8 <HAL_RCC_OscConfig+0x298>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0302 	and.w	r3, r3, #2
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d005      	beq.n	8001f92 <HAL_RCC_OscConfig+0x62>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	699b      	ldr	r3, [r3, #24]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d101      	bne.n	8001f92 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e3ac      	b.n	80026ec <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6a1a      	ldr	r2, [r3, #32]
 8001f96:	4b8c      	ldr	r3, [pc, #560]	; (80021c8 <HAL_RCC_OscConfig+0x298>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0308 	and.w	r3, r3, #8
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d004      	beq.n	8001fac <HAL_RCC_OscConfig+0x7c>
 8001fa2:	4b89      	ldr	r3, [pc, #548]	; (80021c8 <HAL_RCC_OscConfig+0x298>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001faa:	e005      	b.n	8001fb8 <HAL_RCC_OscConfig+0x88>
 8001fac:	4b86      	ldr	r3, [pc, #536]	; (80021c8 <HAL_RCC_OscConfig+0x298>)
 8001fae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fb2:	091b      	lsrs	r3, r3, #4
 8001fb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d223      	bcs.n	8002004 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6a1b      	ldr	r3, [r3, #32]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f000 fd07 	bl	80029d4 <RCC_SetFlashLatencyFromMSIRange>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d001      	beq.n	8001fd0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e38d      	b.n	80026ec <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fd0:	4b7d      	ldr	r3, [pc, #500]	; (80021c8 <HAL_RCC_OscConfig+0x298>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a7c      	ldr	r2, [pc, #496]	; (80021c8 <HAL_RCC_OscConfig+0x298>)
 8001fd6:	f043 0308 	orr.w	r3, r3, #8
 8001fda:	6013      	str	r3, [r2, #0]
 8001fdc:	4b7a      	ldr	r3, [pc, #488]	; (80021c8 <HAL_RCC_OscConfig+0x298>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6a1b      	ldr	r3, [r3, #32]
 8001fe8:	4977      	ldr	r1, [pc, #476]	; (80021c8 <HAL_RCC_OscConfig+0x298>)
 8001fea:	4313      	orrs	r3, r2
 8001fec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fee:	4b76      	ldr	r3, [pc, #472]	; (80021c8 <HAL_RCC_OscConfig+0x298>)
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	69db      	ldr	r3, [r3, #28]
 8001ffa:	021b      	lsls	r3, r3, #8
 8001ffc:	4972      	ldr	r1, [pc, #456]	; (80021c8 <HAL_RCC_OscConfig+0x298>)
 8001ffe:	4313      	orrs	r3, r2
 8002000:	604b      	str	r3, [r1, #4]
 8002002:	e025      	b.n	8002050 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002004:	4b70      	ldr	r3, [pc, #448]	; (80021c8 <HAL_RCC_OscConfig+0x298>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a6f      	ldr	r2, [pc, #444]	; (80021c8 <HAL_RCC_OscConfig+0x298>)
 800200a:	f043 0308 	orr.w	r3, r3, #8
 800200e:	6013      	str	r3, [r2, #0]
 8002010:	4b6d      	ldr	r3, [pc, #436]	; (80021c8 <HAL_RCC_OscConfig+0x298>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6a1b      	ldr	r3, [r3, #32]
 800201c:	496a      	ldr	r1, [pc, #424]	; (80021c8 <HAL_RCC_OscConfig+0x298>)
 800201e:	4313      	orrs	r3, r2
 8002020:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002022:	4b69      	ldr	r3, [pc, #420]	; (80021c8 <HAL_RCC_OscConfig+0x298>)
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	69db      	ldr	r3, [r3, #28]
 800202e:	021b      	lsls	r3, r3, #8
 8002030:	4965      	ldr	r1, [pc, #404]	; (80021c8 <HAL_RCC_OscConfig+0x298>)
 8002032:	4313      	orrs	r3, r2
 8002034:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d109      	bne.n	8002050 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6a1b      	ldr	r3, [r3, #32]
 8002040:	4618      	mov	r0, r3
 8002042:	f000 fcc7 	bl	80029d4 <RCC_SetFlashLatencyFromMSIRange>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e34d      	b.n	80026ec <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002050:	f000 fc36 	bl	80028c0 <HAL_RCC_GetSysClockFreq>
 8002054:	4601      	mov	r1, r0
 8002056:	4b5c      	ldr	r3, [pc, #368]	; (80021c8 <HAL_RCC_OscConfig+0x298>)
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	091b      	lsrs	r3, r3, #4
 800205c:	f003 030f 	and.w	r3, r3, #15
 8002060:	4a5a      	ldr	r2, [pc, #360]	; (80021cc <HAL_RCC_OscConfig+0x29c>)
 8002062:	5cd3      	ldrb	r3, [r2, r3]
 8002064:	f003 031f 	and.w	r3, r3, #31
 8002068:	fa21 f303 	lsr.w	r3, r1, r3
 800206c:	4a58      	ldr	r2, [pc, #352]	; (80021d0 <HAL_RCC_OscConfig+0x2a0>)
 800206e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002070:	4b58      	ldr	r3, [pc, #352]	; (80021d4 <HAL_RCC_OscConfig+0x2a4>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4618      	mov	r0, r3
 8002076:	f7fe f8bf 	bl	80001f8 <HAL_InitTick>
 800207a:	4603      	mov	r3, r0
 800207c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800207e:	7bfb      	ldrb	r3, [r7, #15]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d052      	beq.n	800212a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002084:	7bfb      	ldrb	r3, [r7, #15]
 8002086:	e331      	b.n	80026ec <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	699b      	ldr	r3, [r3, #24]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d032      	beq.n	80020f6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002090:	4b4d      	ldr	r3, [pc, #308]	; (80021c8 <HAL_RCC_OscConfig+0x298>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a4c      	ldr	r2, [pc, #304]	; (80021c8 <HAL_RCC_OscConfig+0x298>)
 8002096:	f043 0301 	orr.w	r3, r3, #1
 800209a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800209c:	f7fe f8fc 	bl	8000298 <HAL_GetTick>
 80020a0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80020a2:	e008      	b.n	80020b6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80020a4:	f7fe f8f8 	bl	8000298 <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d901      	bls.n	80020b6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e31a      	b.n	80026ec <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80020b6:	4b44      	ldr	r3, [pc, #272]	; (80021c8 <HAL_RCC_OscConfig+0x298>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0302 	and.w	r3, r3, #2
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d0f0      	beq.n	80020a4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020c2:	4b41      	ldr	r3, [pc, #260]	; (80021c8 <HAL_RCC_OscConfig+0x298>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a40      	ldr	r2, [pc, #256]	; (80021c8 <HAL_RCC_OscConfig+0x298>)
 80020c8:	f043 0308 	orr.w	r3, r3, #8
 80020cc:	6013      	str	r3, [r2, #0]
 80020ce:	4b3e      	ldr	r3, [pc, #248]	; (80021c8 <HAL_RCC_OscConfig+0x298>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6a1b      	ldr	r3, [r3, #32]
 80020da:	493b      	ldr	r1, [pc, #236]	; (80021c8 <HAL_RCC_OscConfig+0x298>)
 80020dc:	4313      	orrs	r3, r2
 80020de:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020e0:	4b39      	ldr	r3, [pc, #228]	; (80021c8 <HAL_RCC_OscConfig+0x298>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	69db      	ldr	r3, [r3, #28]
 80020ec:	021b      	lsls	r3, r3, #8
 80020ee:	4936      	ldr	r1, [pc, #216]	; (80021c8 <HAL_RCC_OscConfig+0x298>)
 80020f0:	4313      	orrs	r3, r2
 80020f2:	604b      	str	r3, [r1, #4]
 80020f4:	e01a      	b.n	800212c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80020f6:	4b34      	ldr	r3, [pc, #208]	; (80021c8 <HAL_RCC_OscConfig+0x298>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a33      	ldr	r2, [pc, #204]	; (80021c8 <HAL_RCC_OscConfig+0x298>)
 80020fc:	f023 0301 	bic.w	r3, r3, #1
 8002100:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002102:	f7fe f8c9 	bl	8000298 <HAL_GetTick>
 8002106:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002108:	e008      	b.n	800211c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800210a:	f7fe f8c5 	bl	8000298 <HAL_GetTick>
 800210e:	4602      	mov	r2, r0
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	2b02      	cmp	r3, #2
 8002116:	d901      	bls.n	800211c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e2e7      	b.n	80026ec <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800211c:	4b2a      	ldr	r3, [pc, #168]	; (80021c8 <HAL_RCC_OscConfig+0x298>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0302 	and.w	r3, r3, #2
 8002124:	2b00      	cmp	r3, #0
 8002126:	d1f0      	bne.n	800210a <HAL_RCC_OscConfig+0x1da>
 8002128:	e000      	b.n	800212c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800212a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0301 	and.w	r3, r3, #1
 8002134:	2b00      	cmp	r3, #0
 8002136:	d074      	beq.n	8002222 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	2b08      	cmp	r3, #8
 800213c:	d005      	beq.n	800214a <HAL_RCC_OscConfig+0x21a>
 800213e:	69bb      	ldr	r3, [r7, #24]
 8002140:	2b0c      	cmp	r3, #12
 8002142:	d10e      	bne.n	8002162 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	2b03      	cmp	r3, #3
 8002148:	d10b      	bne.n	8002162 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800214a:	4b1f      	ldr	r3, [pc, #124]	; (80021c8 <HAL_RCC_OscConfig+0x298>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d064      	beq.n	8002220 <HAL_RCC_OscConfig+0x2f0>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d160      	bne.n	8002220 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e2c4      	b.n	80026ec <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800216a:	d106      	bne.n	800217a <HAL_RCC_OscConfig+0x24a>
 800216c:	4b16      	ldr	r3, [pc, #88]	; (80021c8 <HAL_RCC_OscConfig+0x298>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a15      	ldr	r2, [pc, #84]	; (80021c8 <HAL_RCC_OscConfig+0x298>)
 8002172:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002176:	6013      	str	r3, [r2, #0]
 8002178:	e01d      	b.n	80021b6 <HAL_RCC_OscConfig+0x286>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002182:	d10c      	bne.n	800219e <HAL_RCC_OscConfig+0x26e>
 8002184:	4b10      	ldr	r3, [pc, #64]	; (80021c8 <HAL_RCC_OscConfig+0x298>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a0f      	ldr	r2, [pc, #60]	; (80021c8 <HAL_RCC_OscConfig+0x298>)
 800218a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800218e:	6013      	str	r3, [r2, #0]
 8002190:	4b0d      	ldr	r3, [pc, #52]	; (80021c8 <HAL_RCC_OscConfig+0x298>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a0c      	ldr	r2, [pc, #48]	; (80021c8 <HAL_RCC_OscConfig+0x298>)
 8002196:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800219a:	6013      	str	r3, [r2, #0]
 800219c:	e00b      	b.n	80021b6 <HAL_RCC_OscConfig+0x286>
 800219e:	4b0a      	ldr	r3, [pc, #40]	; (80021c8 <HAL_RCC_OscConfig+0x298>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a09      	ldr	r2, [pc, #36]	; (80021c8 <HAL_RCC_OscConfig+0x298>)
 80021a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021a8:	6013      	str	r3, [r2, #0]
 80021aa:	4b07      	ldr	r3, [pc, #28]	; (80021c8 <HAL_RCC_OscConfig+0x298>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a06      	ldr	r2, [pc, #24]	; (80021c8 <HAL_RCC_OscConfig+0x298>)
 80021b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021b4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d01c      	beq.n	80021f8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021be:	f7fe f86b 	bl	8000298 <HAL_GetTick>
 80021c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021c4:	e011      	b.n	80021ea <HAL_RCC_OscConfig+0x2ba>
 80021c6:	bf00      	nop
 80021c8:	40021000 	.word	0x40021000
 80021cc:	08004f78 	.word	0x08004f78
 80021d0:	20000008 	.word	0x20000008
 80021d4:	20000000 	.word	0x20000000
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021d8:	f7fe f85e 	bl	8000298 <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	2b64      	cmp	r3, #100	; 0x64
 80021e4:	d901      	bls.n	80021ea <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e280      	b.n	80026ec <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021ea:	4baf      	ldr	r3, [pc, #700]	; (80024a8 <HAL_RCC_OscConfig+0x578>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d0f0      	beq.n	80021d8 <HAL_RCC_OscConfig+0x2a8>
 80021f6:	e014      	b.n	8002222 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021f8:	f7fe f84e 	bl	8000298 <HAL_GetTick>
 80021fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021fe:	e008      	b.n	8002212 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002200:	f7fe f84a 	bl	8000298 <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	2b64      	cmp	r3, #100	; 0x64
 800220c:	d901      	bls.n	8002212 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e26c      	b.n	80026ec <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002212:	4ba5      	ldr	r3, [pc, #660]	; (80024a8 <HAL_RCC_OscConfig+0x578>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d1f0      	bne.n	8002200 <HAL_RCC_OscConfig+0x2d0>
 800221e:	e000      	b.n	8002222 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002220:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0302 	and.w	r3, r3, #2
 800222a:	2b00      	cmp	r3, #0
 800222c:	d060      	beq.n	80022f0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800222e:	69bb      	ldr	r3, [r7, #24]
 8002230:	2b04      	cmp	r3, #4
 8002232:	d005      	beq.n	8002240 <HAL_RCC_OscConfig+0x310>
 8002234:	69bb      	ldr	r3, [r7, #24]
 8002236:	2b0c      	cmp	r3, #12
 8002238:	d119      	bne.n	800226e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	2b02      	cmp	r3, #2
 800223e:	d116      	bne.n	800226e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002240:	4b99      	ldr	r3, [pc, #612]	; (80024a8 <HAL_RCC_OscConfig+0x578>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002248:	2b00      	cmp	r3, #0
 800224a:	d005      	beq.n	8002258 <HAL_RCC_OscConfig+0x328>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d101      	bne.n	8002258 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e249      	b.n	80026ec <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002258:	4b93      	ldr	r3, [pc, #588]	; (80024a8 <HAL_RCC_OscConfig+0x578>)
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	691b      	ldr	r3, [r3, #16]
 8002264:	061b      	lsls	r3, r3, #24
 8002266:	4990      	ldr	r1, [pc, #576]	; (80024a8 <HAL_RCC_OscConfig+0x578>)
 8002268:	4313      	orrs	r3, r2
 800226a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800226c:	e040      	b.n	80022f0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	68db      	ldr	r3, [r3, #12]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d023      	beq.n	80022be <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002276:	4b8c      	ldr	r3, [pc, #560]	; (80024a8 <HAL_RCC_OscConfig+0x578>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a8b      	ldr	r2, [pc, #556]	; (80024a8 <HAL_RCC_OscConfig+0x578>)
 800227c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002280:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002282:	f7fe f809 	bl	8000298 <HAL_GetTick>
 8002286:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002288:	e008      	b.n	800229c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800228a:	f7fe f805 	bl	8000298 <HAL_GetTick>
 800228e:	4602      	mov	r2, r0
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	2b02      	cmp	r3, #2
 8002296:	d901      	bls.n	800229c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002298:	2303      	movs	r3, #3
 800229a:	e227      	b.n	80026ec <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800229c:	4b82      	ldr	r3, [pc, #520]	; (80024a8 <HAL_RCC_OscConfig+0x578>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d0f0      	beq.n	800228a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022a8:	4b7f      	ldr	r3, [pc, #508]	; (80024a8 <HAL_RCC_OscConfig+0x578>)
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	691b      	ldr	r3, [r3, #16]
 80022b4:	061b      	lsls	r3, r3, #24
 80022b6:	497c      	ldr	r1, [pc, #496]	; (80024a8 <HAL_RCC_OscConfig+0x578>)
 80022b8:	4313      	orrs	r3, r2
 80022ba:	604b      	str	r3, [r1, #4]
 80022bc:	e018      	b.n	80022f0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022be:	4b7a      	ldr	r3, [pc, #488]	; (80024a8 <HAL_RCC_OscConfig+0x578>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a79      	ldr	r2, [pc, #484]	; (80024a8 <HAL_RCC_OscConfig+0x578>)
 80022c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80022c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ca:	f7fd ffe5 	bl	8000298 <HAL_GetTick>
 80022ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022d0:	e008      	b.n	80022e4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022d2:	f7fd ffe1 	bl	8000298 <HAL_GetTick>
 80022d6:	4602      	mov	r2, r0
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	2b02      	cmp	r3, #2
 80022de:	d901      	bls.n	80022e4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80022e0:	2303      	movs	r3, #3
 80022e2:	e203      	b.n	80026ec <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022e4:	4b70      	ldr	r3, [pc, #448]	; (80024a8 <HAL_RCC_OscConfig+0x578>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d1f0      	bne.n	80022d2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0308 	and.w	r3, r3, #8
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d03c      	beq.n	8002376 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	695b      	ldr	r3, [r3, #20]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d01c      	beq.n	800233e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002304:	4b68      	ldr	r3, [pc, #416]	; (80024a8 <HAL_RCC_OscConfig+0x578>)
 8002306:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800230a:	4a67      	ldr	r2, [pc, #412]	; (80024a8 <HAL_RCC_OscConfig+0x578>)
 800230c:	f043 0301 	orr.w	r3, r3, #1
 8002310:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002314:	f7fd ffc0 	bl	8000298 <HAL_GetTick>
 8002318:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800231a:	e008      	b.n	800232e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800231c:	f7fd ffbc 	bl	8000298 <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	2b02      	cmp	r3, #2
 8002328:	d901      	bls.n	800232e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e1de      	b.n	80026ec <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800232e:	4b5e      	ldr	r3, [pc, #376]	; (80024a8 <HAL_RCC_OscConfig+0x578>)
 8002330:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002334:	f003 0302 	and.w	r3, r3, #2
 8002338:	2b00      	cmp	r3, #0
 800233a:	d0ef      	beq.n	800231c <HAL_RCC_OscConfig+0x3ec>
 800233c:	e01b      	b.n	8002376 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800233e:	4b5a      	ldr	r3, [pc, #360]	; (80024a8 <HAL_RCC_OscConfig+0x578>)
 8002340:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002344:	4a58      	ldr	r2, [pc, #352]	; (80024a8 <HAL_RCC_OscConfig+0x578>)
 8002346:	f023 0301 	bic.w	r3, r3, #1
 800234a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800234e:	f7fd ffa3 	bl	8000298 <HAL_GetTick>
 8002352:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002354:	e008      	b.n	8002368 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002356:	f7fd ff9f 	bl	8000298 <HAL_GetTick>
 800235a:	4602      	mov	r2, r0
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	2b02      	cmp	r3, #2
 8002362:	d901      	bls.n	8002368 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002364:	2303      	movs	r3, #3
 8002366:	e1c1      	b.n	80026ec <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002368:	4b4f      	ldr	r3, [pc, #316]	; (80024a8 <HAL_RCC_OscConfig+0x578>)
 800236a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800236e:	f003 0302 	and.w	r3, r3, #2
 8002372:	2b00      	cmp	r3, #0
 8002374:	d1ef      	bne.n	8002356 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0304 	and.w	r3, r3, #4
 800237e:	2b00      	cmp	r3, #0
 8002380:	f000 80a6 	beq.w	80024d0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002384:	2300      	movs	r3, #0
 8002386:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002388:	4b47      	ldr	r3, [pc, #284]	; (80024a8 <HAL_RCC_OscConfig+0x578>)
 800238a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800238c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d10d      	bne.n	80023b0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002394:	4b44      	ldr	r3, [pc, #272]	; (80024a8 <HAL_RCC_OscConfig+0x578>)
 8002396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002398:	4a43      	ldr	r2, [pc, #268]	; (80024a8 <HAL_RCC_OscConfig+0x578>)
 800239a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800239e:	6593      	str	r3, [r2, #88]	; 0x58
 80023a0:	4b41      	ldr	r3, [pc, #260]	; (80024a8 <HAL_RCC_OscConfig+0x578>)
 80023a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023a8:	60bb      	str	r3, [r7, #8]
 80023aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023ac:	2301      	movs	r3, #1
 80023ae:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023b0:	4b3e      	ldr	r3, [pc, #248]	; (80024ac <HAL_RCC_OscConfig+0x57c>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d118      	bne.n	80023ee <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023bc:	4b3b      	ldr	r3, [pc, #236]	; (80024ac <HAL_RCC_OscConfig+0x57c>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a3a      	ldr	r2, [pc, #232]	; (80024ac <HAL_RCC_OscConfig+0x57c>)
 80023c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023c6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023c8:	f7fd ff66 	bl	8000298 <HAL_GetTick>
 80023cc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023ce:	e008      	b.n	80023e2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023d0:	f7fd ff62 	bl	8000298 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d901      	bls.n	80023e2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e184      	b.n	80026ec <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023e2:	4b32      	ldr	r3, [pc, #200]	; (80024ac <HAL_RCC_OscConfig+0x57c>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d0f0      	beq.n	80023d0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d108      	bne.n	8002408 <HAL_RCC_OscConfig+0x4d8>
 80023f6:	4b2c      	ldr	r3, [pc, #176]	; (80024a8 <HAL_RCC_OscConfig+0x578>)
 80023f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023fc:	4a2a      	ldr	r2, [pc, #168]	; (80024a8 <HAL_RCC_OscConfig+0x578>)
 80023fe:	f043 0301 	orr.w	r3, r3, #1
 8002402:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002406:	e024      	b.n	8002452 <HAL_RCC_OscConfig+0x522>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	2b05      	cmp	r3, #5
 800240e:	d110      	bne.n	8002432 <HAL_RCC_OscConfig+0x502>
 8002410:	4b25      	ldr	r3, [pc, #148]	; (80024a8 <HAL_RCC_OscConfig+0x578>)
 8002412:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002416:	4a24      	ldr	r2, [pc, #144]	; (80024a8 <HAL_RCC_OscConfig+0x578>)
 8002418:	f043 0304 	orr.w	r3, r3, #4
 800241c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002420:	4b21      	ldr	r3, [pc, #132]	; (80024a8 <HAL_RCC_OscConfig+0x578>)
 8002422:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002426:	4a20      	ldr	r2, [pc, #128]	; (80024a8 <HAL_RCC_OscConfig+0x578>)
 8002428:	f043 0301 	orr.w	r3, r3, #1
 800242c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002430:	e00f      	b.n	8002452 <HAL_RCC_OscConfig+0x522>
 8002432:	4b1d      	ldr	r3, [pc, #116]	; (80024a8 <HAL_RCC_OscConfig+0x578>)
 8002434:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002438:	4a1b      	ldr	r2, [pc, #108]	; (80024a8 <HAL_RCC_OscConfig+0x578>)
 800243a:	f023 0301 	bic.w	r3, r3, #1
 800243e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002442:	4b19      	ldr	r3, [pc, #100]	; (80024a8 <HAL_RCC_OscConfig+0x578>)
 8002444:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002448:	4a17      	ldr	r2, [pc, #92]	; (80024a8 <HAL_RCC_OscConfig+0x578>)
 800244a:	f023 0304 	bic.w	r3, r3, #4
 800244e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d016      	beq.n	8002488 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800245a:	f7fd ff1d 	bl	8000298 <HAL_GetTick>
 800245e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002460:	e00a      	b.n	8002478 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002462:	f7fd ff19 	bl	8000298 <HAL_GetTick>
 8002466:	4602      	mov	r2, r0
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002470:	4293      	cmp	r3, r2
 8002472:	d901      	bls.n	8002478 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	e139      	b.n	80026ec <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002478:	4b0b      	ldr	r3, [pc, #44]	; (80024a8 <HAL_RCC_OscConfig+0x578>)
 800247a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800247e:	f003 0302 	and.w	r3, r3, #2
 8002482:	2b00      	cmp	r3, #0
 8002484:	d0ed      	beq.n	8002462 <HAL_RCC_OscConfig+0x532>
 8002486:	e01a      	b.n	80024be <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002488:	f7fd ff06 	bl	8000298 <HAL_GetTick>
 800248c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800248e:	e00f      	b.n	80024b0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002490:	f7fd ff02 	bl	8000298 <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	f241 3288 	movw	r2, #5000	; 0x1388
 800249e:	4293      	cmp	r3, r2
 80024a0:	d906      	bls.n	80024b0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e122      	b.n	80026ec <HAL_RCC_OscConfig+0x7bc>
 80024a6:	bf00      	nop
 80024a8:	40021000 	.word	0x40021000
 80024ac:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80024b0:	4b90      	ldr	r3, [pc, #576]	; (80026f4 <HAL_RCC_OscConfig+0x7c4>)
 80024b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024b6:	f003 0302 	and.w	r3, r3, #2
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d1e8      	bne.n	8002490 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024be:	7ffb      	ldrb	r3, [r7, #31]
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d105      	bne.n	80024d0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024c4:	4b8b      	ldr	r3, [pc, #556]	; (80026f4 <HAL_RCC_OscConfig+0x7c4>)
 80024c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024c8:	4a8a      	ldr	r2, [pc, #552]	; (80026f4 <HAL_RCC_OscConfig+0x7c4>)
 80024ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024ce:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	f000 8108 	beq.w	80026ea <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024de:	2b02      	cmp	r3, #2
 80024e0:	f040 80d0 	bne.w	8002684 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80024e4:	4b83      	ldr	r3, [pc, #524]	; (80026f4 <HAL_RCC_OscConfig+0x7c4>)
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	f003 0203 	and.w	r2, r3, #3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d130      	bne.n	800255a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002502:	3b01      	subs	r3, #1
 8002504:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002506:	429a      	cmp	r2, r3
 8002508:	d127      	bne.n	800255a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002514:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002516:	429a      	cmp	r2, r3
 8002518:	d11f      	bne.n	800255a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002524:	2a07      	cmp	r2, #7
 8002526:	bf14      	ite	ne
 8002528:	2201      	movne	r2, #1
 800252a:	2200      	moveq	r2, #0
 800252c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800252e:	4293      	cmp	r3, r2
 8002530:	d113      	bne.n	800255a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800253c:	085b      	lsrs	r3, r3, #1
 800253e:	3b01      	subs	r3, #1
 8002540:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002542:	429a      	cmp	r2, r3
 8002544:	d109      	bne.n	800255a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002550:	085b      	lsrs	r3, r3, #1
 8002552:	3b01      	subs	r3, #1
 8002554:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002556:	429a      	cmp	r2, r3
 8002558:	d06e      	beq.n	8002638 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800255a:	69bb      	ldr	r3, [r7, #24]
 800255c:	2b0c      	cmp	r3, #12
 800255e:	d069      	beq.n	8002634 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002560:	4b64      	ldr	r3, [pc, #400]	; (80026f4 <HAL_RCC_OscConfig+0x7c4>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d105      	bne.n	8002578 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800256c:	4b61      	ldr	r3, [pc, #388]	; (80026f4 <HAL_RCC_OscConfig+0x7c4>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d001      	beq.n	800257c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e0b7      	b.n	80026ec <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800257c:	4b5d      	ldr	r3, [pc, #372]	; (80026f4 <HAL_RCC_OscConfig+0x7c4>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a5c      	ldr	r2, [pc, #368]	; (80026f4 <HAL_RCC_OscConfig+0x7c4>)
 8002582:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002586:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002588:	f7fd fe86 	bl	8000298 <HAL_GetTick>
 800258c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800258e:	e008      	b.n	80025a2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002590:	f7fd fe82 	bl	8000298 <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	2b02      	cmp	r3, #2
 800259c:	d901      	bls.n	80025a2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e0a4      	b.n	80026ec <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025a2:	4b54      	ldr	r3, [pc, #336]	; (80026f4 <HAL_RCC_OscConfig+0x7c4>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d1f0      	bne.n	8002590 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025ae:	4b51      	ldr	r3, [pc, #324]	; (80026f4 <HAL_RCC_OscConfig+0x7c4>)
 80025b0:	68da      	ldr	r2, [r3, #12]
 80025b2:	4b51      	ldr	r3, [pc, #324]	; (80026f8 <HAL_RCC_OscConfig+0x7c8>)
 80025b4:	4013      	ands	r3, r2
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80025be:	3a01      	subs	r2, #1
 80025c0:	0112      	lsls	r2, r2, #4
 80025c2:	4311      	orrs	r1, r2
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80025c8:	0212      	lsls	r2, r2, #8
 80025ca:	4311      	orrs	r1, r2
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80025d0:	0852      	lsrs	r2, r2, #1
 80025d2:	3a01      	subs	r2, #1
 80025d4:	0552      	lsls	r2, r2, #21
 80025d6:	4311      	orrs	r1, r2
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80025dc:	0852      	lsrs	r2, r2, #1
 80025de:	3a01      	subs	r2, #1
 80025e0:	0652      	lsls	r2, r2, #25
 80025e2:	4311      	orrs	r1, r2
 80025e4:	687a      	ldr	r2, [r7, #4]
 80025e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80025e8:	0912      	lsrs	r2, r2, #4
 80025ea:	0452      	lsls	r2, r2, #17
 80025ec:	430a      	orrs	r2, r1
 80025ee:	4941      	ldr	r1, [pc, #260]	; (80026f4 <HAL_RCC_OscConfig+0x7c4>)
 80025f0:	4313      	orrs	r3, r2
 80025f2:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80025f4:	4b3f      	ldr	r3, [pc, #252]	; (80026f4 <HAL_RCC_OscConfig+0x7c4>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a3e      	ldr	r2, [pc, #248]	; (80026f4 <HAL_RCC_OscConfig+0x7c4>)
 80025fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025fe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002600:	4b3c      	ldr	r3, [pc, #240]	; (80026f4 <HAL_RCC_OscConfig+0x7c4>)
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	4a3b      	ldr	r2, [pc, #236]	; (80026f4 <HAL_RCC_OscConfig+0x7c4>)
 8002606:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800260a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800260c:	f7fd fe44 	bl	8000298 <HAL_GetTick>
 8002610:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002612:	e008      	b.n	8002626 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002614:	f7fd fe40 	bl	8000298 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b02      	cmp	r3, #2
 8002620:	d901      	bls.n	8002626 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e062      	b.n	80026ec <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002626:	4b33      	ldr	r3, [pc, #204]	; (80026f4 <HAL_RCC_OscConfig+0x7c4>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d0f0      	beq.n	8002614 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002632:	e05a      	b.n	80026ea <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e059      	b.n	80026ec <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002638:	4b2e      	ldr	r3, [pc, #184]	; (80026f4 <HAL_RCC_OscConfig+0x7c4>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d152      	bne.n	80026ea <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002644:	4b2b      	ldr	r3, [pc, #172]	; (80026f4 <HAL_RCC_OscConfig+0x7c4>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a2a      	ldr	r2, [pc, #168]	; (80026f4 <HAL_RCC_OscConfig+0x7c4>)
 800264a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800264e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002650:	4b28      	ldr	r3, [pc, #160]	; (80026f4 <HAL_RCC_OscConfig+0x7c4>)
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	4a27      	ldr	r2, [pc, #156]	; (80026f4 <HAL_RCC_OscConfig+0x7c4>)
 8002656:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800265a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800265c:	f7fd fe1c 	bl	8000298 <HAL_GetTick>
 8002660:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002662:	e008      	b.n	8002676 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002664:	f7fd fe18 	bl	8000298 <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	2b02      	cmp	r3, #2
 8002670:	d901      	bls.n	8002676 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e03a      	b.n	80026ec <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002676:	4b1f      	ldr	r3, [pc, #124]	; (80026f4 <HAL_RCC_OscConfig+0x7c4>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d0f0      	beq.n	8002664 <HAL_RCC_OscConfig+0x734>
 8002682:	e032      	b.n	80026ea <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002684:	69bb      	ldr	r3, [r7, #24]
 8002686:	2b0c      	cmp	r3, #12
 8002688:	d02d      	beq.n	80026e6 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800268a:	4b1a      	ldr	r3, [pc, #104]	; (80026f4 <HAL_RCC_OscConfig+0x7c4>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a19      	ldr	r2, [pc, #100]	; (80026f4 <HAL_RCC_OscConfig+0x7c4>)
 8002690:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002694:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002696:	4b17      	ldr	r3, [pc, #92]	; (80026f4 <HAL_RCC_OscConfig+0x7c4>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d105      	bne.n	80026ae <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80026a2:	4b14      	ldr	r3, [pc, #80]	; (80026f4 <HAL_RCC_OscConfig+0x7c4>)
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	4a13      	ldr	r2, [pc, #76]	; (80026f4 <HAL_RCC_OscConfig+0x7c4>)
 80026a8:	f023 0303 	bic.w	r3, r3, #3
 80026ac:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80026ae:	4b11      	ldr	r3, [pc, #68]	; (80026f4 <HAL_RCC_OscConfig+0x7c4>)
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	4a10      	ldr	r2, [pc, #64]	; (80026f4 <HAL_RCC_OscConfig+0x7c4>)
 80026b4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80026b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026bc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026be:	f7fd fdeb 	bl	8000298 <HAL_GetTick>
 80026c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026c4:	e008      	b.n	80026d8 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026c6:	f7fd fde7 	bl	8000298 <HAL_GetTick>
 80026ca:	4602      	mov	r2, r0
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d901      	bls.n	80026d8 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80026d4:	2303      	movs	r3, #3
 80026d6:	e009      	b.n	80026ec <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026d8:	4b06      	ldr	r3, [pc, #24]	; (80026f4 <HAL_RCC_OscConfig+0x7c4>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d1f0      	bne.n	80026c6 <HAL_RCC_OscConfig+0x796>
 80026e4:	e001      	b.n	80026ea <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e000      	b.n	80026ec <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80026ea:	2300      	movs	r3, #0
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3720      	adds	r7, #32
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	40021000 	.word	0x40021000
 80026f8:	f99d808c 	.word	0xf99d808c

080026fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d101      	bne.n	8002710 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e0c8      	b.n	80028a2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002710:	4b66      	ldr	r3, [pc, #408]	; (80028ac <HAL_RCC_ClockConfig+0x1b0>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0307 	and.w	r3, r3, #7
 8002718:	683a      	ldr	r2, [r7, #0]
 800271a:	429a      	cmp	r2, r3
 800271c:	d910      	bls.n	8002740 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800271e:	4b63      	ldr	r3, [pc, #396]	; (80028ac <HAL_RCC_ClockConfig+0x1b0>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f023 0207 	bic.w	r2, r3, #7
 8002726:	4961      	ldr	r1, [pc, #388]	; (80028ac <HAL_RCC_ClockConfig+0x1b0>)
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	4313      	orrs	r3, r2
 800272c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800272e:	4b5f      	ldr	r3, [pc, #380]	; (80028ac <HAL_RCC_ClockConfig+0x1b0>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0307 	and.w	r3, r3, #7
 8002736:	683a      	ldr	r2, [r7, #0]
 8002738:	429a      	cmp	r2, r3
 800273a:	d001      	beq.n	8002740 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e0b0      	b.n	80028a2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0301 	and.w	r3, r3, #1
 8002748:	2b00      	cmp	r3, #0
 800274a:	d04c      	beq.n	80027e6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	2b03      	cmp	r3, #3
 8002752:	d107      	bne.n	8002764 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002754:	4b56      	ldr	r3, [pc, #344]	; (80028b0 <HAL_RCC_ClockConfig+0x1b4>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d121      	bne.n	80027a4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e09e      	b.n	80028a2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	2b02      	cmp	r3, #2
 800276a:	d107      	bne.n	800277c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800276c:	4b50      	ldr	r3, [pc, #320]	; (80028b0 <HAL_RCC_ClockConfig+0x1b4>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d115      	bne.n	80027a4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e092      	b.n	80028a2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d107      	bne.n	8002794 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002784:	4b4a      	ldr	r3, [pc, #296]	; (80028b0 <HAL_RCC_ClockConfig+0x1b4>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0302 	and.w	r3, r3, #2
 800278c:	2b00      	cmp	r3, #0
 800278e:	d109      	bne.n	80027a4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e086      	b.n	80028a2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002794:	4b46      	ldr	r3, [pc, #280]	; (80028b0 <HAL_RCC_ClockConfig+0x1b4>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800279c:	2b00      	cmp	r3, #0
 800279e:	d101      	bne.n	80027a4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e07e      	b.n	80028a2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80027a4:	4b42      	ldr	r3, [pc, #264]	; (80028b0 <HAL_RCC_ClockConfig+0x1b4>)
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	f023 0203 	bic.w	r2, r3, #3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	493f      	ldr	r1, [pc, #252]	; (80028b0 <HAL_RCC_ClockConfig+0x1b4>)
 80027b2:	4313      	orrs	r3, r2
 80027b4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027b6:	f7fd fd6f 	bl	8000298 <HAL_GetTick>
 80027ba:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027bc:	e00a      	b.n	80027d4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027be:	f7fd fd6b 	bl	8000298 <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d901      	bls.n	80027d4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80027d0:	2303      	movs	r3, #3
 80027d2:	e066      	b.n	80028a2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027d4:	4b36      	ldr	r3, [pc, #216]	; (80028b0 <HAL_RCC_ClockConfig+0x1b4>)
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	f003 020c 	and.w	r2, r3, #12
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d1eb      	bne.n	80027be <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0302 	and.w	r3, r3, #2
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d008      	beq.n	8002804 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027f2:	4b2f      	ldr	r3, [pc, #188]	; (80028b0 <HAL_RCC_ClockConfig+0x1b4>)
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	492c      	ldr	r1, [pc, #176]	; (80028b0 <HAL_RCC_ClockConfig+0x1b4>)
 8002800:	4313      	orrs	r3, r2
 8002802:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002804:	4b29      	ldr	r3, [pc, #164]	; (80028ac <HAL_RCC_ClockConfig+0x1b0>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0307 	and.w	r3, r3, #7
 800280c:	683a      	ldr	r2, [r7, #0]
 800280e:	429a      	cmp	r2, r3
 8002810:	d210      	bcs.n	8002834 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002812:	4b26      	ldr	r3, [pc, #152]	; (80028ac <HAL_RCC_ClockConfig+0x1b0>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f023 0207 	bic.w	r2, r3, #7
 800281a:	4924      	ldr	r1, [pc, #144]	; (80028ac <HAL_RCC_ClockConfig+0x1b0>)
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	4313      	orrs	r3, r2
 8002820:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002822:	4b22      	ldr	r3, [pc, #136]	; (80028ac <HAL_RCC_ClockConfig+0x1b0>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 0307 	and.w	r3, r3, #7
 800282a:	683a      	ldr	r2, [r7, #0]
 800282c:	429a      	cmp	r2, r3
 800282e:	d001      	beq.n	8002834 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	e036      	b.n	80028a2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0304 	and.w	r3, r3, #4
 800283c:	2b00      	cmp	r3, #0
 800283e:	d008      	beq.n	8002852 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002840:	4b1b      	ldr	r3, [pc, #108]	; (80028b0 <HAL_RCC_ClockConfig+0x1b4>)
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	4918      	ldr	r1, [pc, #96]	; (80028b0 <HAL_RCC_ClockConfig+0x1b4>)
 800284e:	4313      	orrs	r3, r2
 8002850:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0308 	and.w	r3, r3, #8
 800285a:	2b00      	cmp	r3, #0
 800285c:	d009      	beq.n	8002872 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800285e:	4b14      	ldr	r3, [pc, #80]	; (80028b0 <HAL_RCC_ClockConfig+0x1b4>)
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	691b      	ldr	r3, [r3, #16]
 800286a:	00db      	lsls	r3, r3, #3
 800286c:	4910      	ldr	r1, [pc, #64]	; (80028b0 <HAL_RCC_ClockConfig+0x1b4>)
 800286e:	4313      	orrs	r3, r2
 8002870:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002872:	f000 f825 	bl	80028c0 <HAL_RCC_GetSysClockFreq>
 8002876:	4601      	mov	r1, r0
 8002878:	4b0d      	ldr	r3, [pc, #52]	; (80028b0 <HAL_RCC_ClockConfig+0x1b4>)
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	091b      	lsrs	r3, r3, #4
 800287e:	f003 030f 	and.w	r3, r3, #15
 8002882:	4a0c      	ldr	r2, [pc, #48]	; (80028b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002884:	5cd3      	ldrb	r3, [r2, r3]
 8002886:	f003 031f 	and.w	r3, r3, #31
 800288a:	fa21 f303 	lsr.w	r3, r1, r3
 800288e:	4a0a      	ldr	r2, [pc, #40]	; (80028b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002890:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002892:	4b0a      	ldr	r3, [pc, #40]	; (80028bc <HAL_RCC_ClockConfig+0x1c0>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4618      	mov	r0, r3
 8002898:	f7fd fcae 	bl	80001f8 <HAL_InitTick>
 800289c:	4603      	mov	r3, r0
 800289e:	72fb      	strb	r3, [r7, #11]

  return status;
 80028a0:	7afb      	ldrb	r3, [r7, #11]
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3710      	adds	r7, #16
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	40022000 	.word	0x40022000
 80028b0:	40021000 	.word	0x40021000
 80028b4:	08004f78 	.word	0x08004f78
 80028b8:	20000008 	.word	0x20000008
 80028bc:	20000000 	.word	0x20000000

080028c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b089      	sub	sp, #36	; 0x24
 80028c4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80028c6:	2300      	movs	r3, #0
 80028c8:	61fb      	str	r3, [r7, #28]
 80028ca:	2300      	movs	r3, #0
 80028cc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028ce:	4b3d      	ldr	r3, [pc, #244]	; (80029c4 <HAL_RCC_GetSysClockFreq+0x104>)
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	f003 030c 	and.w	r3, r3, #12
 80028d6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028d8:	4b3a      	ldr	r3, [pc, #232]	; (80029c4 <HAL_RCC_GetSysClockFreq+0x104>)
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	f003 0303 	and.w	r3, r3, #3
 80028e0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d005      	beq.n	80028f4 <HAL_RCC_GetSysClockFreq+0x34>
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	2b0c      	cmp	r3, #12
 80028ec:	d121      	bne.n	8002932 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d11e      	bne.n	8002932 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80028f4:	4b33      	ldr	r3, [pc, #204]	; (80029c4 <HAL_RCC_GetSysClockFreq+0x104>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0308 	and.w	r3, r3, #8
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d107      	bne.n	8002910 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002900:	4b30      	ldr	r3, [pc, #192]	; (80029c4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002902:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002906:	0a1b      	lsrs	r3, r3, #8
 8002908:	f003 030f 	and.w	r3, r3, #15
 800290c:	61fb      	str	r3, [r7, #28]
 800290e:	e005      	b.n	800291c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002910:	4b2c      	ldr	r3, [pc, #176]	; (80029c4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	091b      	lsrs	r3, r3, #4
 8002916:	f003 030f 	and.w	r3, r3, #15
 800291a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800291c:	4a2a      	ldr	r2, [pc, #168]	; (80029c8 <HAL_RCC_GetSysClockFreq+0x108>)
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002924:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d10d      	bne.n	8002948 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002930:	e00a      	b.n	8002948 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	2b04      	cmp	r3, #4
 8002936:	d102      	bne.n	800293e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002938:	4b24      	ldr	r3, [pc, #144]	; (80029cc <HAL_RCC_GetSysClockFreq+0x10c>)
 800293a:	61bb      	str	r3, [r7, #24]
 800293c:	e004      	b.n	8002948 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	2b08      	cmp	r3, #8
 8002942:	d101      	bne.n	8002948 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002944:	4b22      	ldr	r3, [pc, #136]	; (80029d0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002946:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	2b0c      	cmp	r3, #12
 800294c:	d133      	bne.n	80029b6 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800294e:	4b1d      	ldr	r3, [pc, #116]	; (80029c4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	f003 0303 	and.w	r3, r3, #3
 8002956:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	2b02      	cmp	r3, #2
 800295c:	d002      	beq.n	8002964 <HAL_RCC_GetSysClockFreq+0xa4>
 800295e:	2b03      	cmp	r3, #3
 8002960:	d003      	beq.n	800296a <HAL_RCC_GetSysClockFreq+0xaa>
 8002962:	e005      	b.n	8002970 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002964:	4b19      	ldr	r3, [pc, #100]	; (80029cc <HAL_RCC_GetSysClockFreq+0x10c>)
 8002966:	617b      	str	r3, [r7, #20]
      break;
 8002968:	e005      	b.n	8002976 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800296a:	4b19      	ldr	r3, [pc, #100]	; (80029d0 <HAL_RCC_GetSysClockFreq+0x110>)
 800296c:	617b      	str	r3, [r7, #20]
      break;
 800296e:	e002      	b.n	8002976 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	617b      	str	r3, [r7, #20]
      break;
 8002974:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002976:	4b13      	ldr	r3, [pc, #76]	; (80029c4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	091b      	lsrs	r3, r3, #4
 800297c:	f003 0307 	and.w	r3, r3, #7
 8002980:	3301      	adds	r3, #1
 8002982:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002984:	4b0f      	ldr	r3, [pc, #60]	; (80029c4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	0a1b      	lsrs	r3, r3, #8
 800298a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800298e:	697a      	ldr	r2, [r7, #20]
 8002990:	fb02 f203 	mul.w	r2, r2, r3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	fbb2 f3f3 	udiv	r3, r2, r3
 800299a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800299c:	4b09      	ldr	r3, [pc, #36]	; (80029c4 <HAL_RCC_GetSysClockFreq+0x104>)
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	0e5b      	lsrs	r3, r3, #25
 80029a2:	f003 0303 	and.w	r3, r3, #3
 80029a6:	3301      	adds	r3, #1
 80029a8:	005b      	lsls	r3, r3, #1
 80029aa:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80029ac:	697a      	ldr	r2, [r7, #20]
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80029b4:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80029b6:	69bb      	ldr	r3, [r7, #24]
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3724      	adds	r7, #36	; 0x24
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr
 80029c4:	40021000 	.word	0x40021000
 80029c8:	08004f88 	.word	0x08004f88
 80029cc:	00f42400 	.word	0x00f42400
 80029d0:	007a1200 	.word	0x007a1200

080029d4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b086      	sub	sp, #24
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80029dc:	2300      	movs	r3, #0
 80029de:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80029e0:	4b2a      	ldr	r3, [pc, #168]	; (8002a8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d003      	beq.n	80029f4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80029ec:	f7fe fd5c 	bl	80014a8 <HAL_PWREx_GetVoltageRange>
 80029f0:	6178      	str	r0, [r7, #20]
 80029f2:	e014      	b.n	8002a1e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80029f4:	4b25      	ldr	r3, [pc, #148]	; (8002a8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029f8:	4a24      	ldr	r2, [pc, #144]	; (8002a8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029fe:	6593      	str	r3, [r2, #88]	; 0x58
 8002a00:	4b22      	ldr	r3, [pc, #136]	; (8002a8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a08:	60fb      	str	r3, [r7, #12]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002a0c:	f7fe fd4c 	bl	80014a8 <HAL_PWREx_GetVoltageRange>
 8002a10:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002a12:	4b1e      	ldr	r3, [pc, #120]	; (8002a8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a16:	4a1d      	ldr	r2, [pc, #116]	; (8002a8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a1c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a24:	d10b      	bne.n	8002a3e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2b80      	cmp	r3, #128	; 0x80
 8002a2a:	d919      	bls.n	8002a60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2ba0      	cmp	r3, #160	; 0xa0
 8002a30:	d902      	bls.n	8002a38 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a32:	2302      	movs	r3, #2
 8002a34:	613b      	str	r3, [r7, #16]
 8002a36:	e013      	b.n	8002a60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a38:	2301      	movs	r3, #1
 8002a3a:	613b      	str	r3, [r7, #16]
 8002a3c:	e010      	b.n	8002a60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2b80      	cmp	r3, #128	; 0x80
 8002a42:	d902      	bls.n	8002a4a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002a44:	2303      	movs	r3, #3
 8002a46:	613b      	str	r3, [r7, #16]
 8002a48:	e00a      	b.n	8002a60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2b80      	cmp	r3, #128	; 0x80
 8002a4e:	d102      	bne.n	8002a56 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a50:	2302      	movs	r3, #2
 8002a52:	613b      	str	r3, [r7, #16]
 8002a54:	e004      	b.n	8002a60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2b70      	cmp	r3, #112	; 0x70
 8002a5a:	d101      	bne.n	8002a60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002a60:	4b0b      	ldr	r3, [pc, #44]	; (8002a90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f023 0207 	bic.w	r2, r3, #7
 8002a68:	4909      	ldr	r1, [pc, #36]	; (8002a90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002a70:	4b07      	ldr	r3, [pc, #28]	; (8002a90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 0307 	and.w	r3, r3, #7
 8002a78:	693a      	ldr	r2, [r7, #16]
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d001      	beq.n	8002a82 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e000      	b.n	8002a84 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002a82:	2300      	movs	r3, #0
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3718      	adds	r7, #24
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	40021000 	.word	0x40021000
 8002a90:	40022000 	.word	0x40022000

08002a94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d101      	bne.n	8002aa6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e049      	b.n	8002b3a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d106      	bne.n	8002ac0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f001 fbc0 	bl	8004240 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2202      	movs	r2, #2
 8002ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	3304      	adds	r3, #4
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	4610      	mov	r0, r2
 8002ad4:	f000 faa8 	bl	8003028 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2201      	movs	r2, #1
 8002adc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2201      	movs	r2, #1
 8002aec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2201      	movs	r2, #1
 8002af4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2201      	movs	r2, #1
 8002afc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2201      	movs	r2, #1
 8002b04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2201      	movs	r2, #1
 8002b14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2201      	movs	r2, #1
 8002b24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2201      	movs	r2, #1
 8002b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b38:	2300      	movs	r3, #0
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3708      	adds	r7, #8
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
	...

08002b44 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b085      	sub	sp, #20
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d001      	beq.n	8002b5c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e047      	b.n	8002bec <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2202      	movs	r2, #2
 8002b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a23      	ldr	r2, [pc, #140]	; (8002bf8 <HAL_TIM_Base_Start+0xb4>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d01d      	beq.n	8002baa <HAL_TIM_Base_Start+0x66>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b76:	d018      	beq.n	8002baa <HAL_TIM_Base_Start+0x66>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a1f      	ldr	r2, [pc, #124]	; (8002bfc <HAL_TIM_Base_Start+0xb8>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d013      	beq.n	8002baa <HAL_TIM_Base_Start+0x66>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a1e      	ldr	r2, [pc, #120]	; (8002c00 <HAL_TIM_Base_Start+0xbc>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d00e      	beq.n	8002baa <HAL_TIM_Base_Start+0x66>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a1c      	ldr	r2, [pc, #112]	; (8002c04 <HAL_TIM_Base_Start+0xc0>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d009      	beq.n	8002baa <HAL_TIM_Base_Start+0x66>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a1b      	ldr	r2, [pc, #108]	; (8002c08 <HAL_TIM_Base_Start+0xc4>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d004      	beq.n	8002baa <HAL_TIM_Base_Start+0x66>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a19      	ldr	r2, [pc, #100]	; (8002c0c <HAL_TIM_Base_Start+0xc8>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d115      	bne.n	8002bd6 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	689a      	ldr	r2, [r3, #8]
 8002bb0:	4b17      	ldr	r3, [pc, #92]	; (8002c10 <HAL_TIM_Base_Start+0xcc>)
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2b06      	cmp	r3, #6
 8002bba:	d015      	beq.n	8002be8 <HAL_TIM_Base_Start+0xa4>
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bc2:	d011      	beq.n	8002be8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f042 0201 	orr.w	r2, r2, #1
 8002bd2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bd4:	e008      	b.n	8002be8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f042 0201 	orr.w	r2, r2, #1
 8002be4:	601a      	str	r2, [r3, #0]
 8002be6:	e000      	b.n	8002bea <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002be8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002bea:	2300      	movs	r3, #0
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3714      	adds	r7, #20
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr
 8002bf8:	40012c00 	.word	0x40012c00
 8002bfc:	40000400 	.word	0x40000400
 8002c00:	40000800 	.word	0x40000800
 8002c04:	40000c00 	.word	0x40000c00
 8002c08:	40013400 	.word	0x40013400
 8002c0c:	40014000 	.word	0x40014000
 8002c10:	00010007 	.word	0x00010007

08002c14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	691b      	ldr	r3, [r3, #16]
 8002c22:	f003 0302 	and.w	r3, r3, #2
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d122      	bne.n	8002c70 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	f003 0302 	and.w	r3, r3, #2
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	d11b      	bne.n	8002c70 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f06f 0202 	mvn.w	r2, #2
 8002c40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2201      	movs	r2, #1
 8002c46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	699b      	ldr	r3, [r3, #24]
 8002c4e:	f003 0303 	and.w	r3, r3, #3
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d003      	beq.n	8002c5e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f000 f9c8 	bl	8002fec <HAL_TIM_IC_CaptureCallback>
 8002c5c:	e005      	b.n	8002c6a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f000 f9ba 	bl	8002fd8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f000 f9cb 	bl	8003000 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	691b      	ldr	r3, [r3, #16]
 8002c76:	f003 0304 	and.w	r3, r3, #4
 8002c7a:	2b04      	cmp	r3, #4
 8002c7c:	d122      	bne.n	8002cc4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	f003 0304 	and.w	r3, r3, #4
 8002c88:	2b04      	cmp	r3, #4
 8002c8a:	d11b      	bne.n	8002cc4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f06f 0204 	mvn.w	r2, #4
 8002c94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2202      	movs	r2, #2
 8002c9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	699b      	ldr	r3, [r3, #24]
 8002ca2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d003      	beq.n	8002cb2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f000 f99e 	bl	8002fec <HAL_TIM_IC_CaptureCallback>
 8002cb0:	e005      	b.n	8002cbe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 f990 	bl	8002fd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f000 f9a1 	bl	8003000 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	691b      	ldr	r3, [r3, #16]
 8002cca:	f003 0308 	and.w	r3, r3, #8
 8002cce:	2b08      	cmp	r3, #8
 8002cd0:	d122      	bne.n	8002d18 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	f003 0308 	and.w	r3, r3, #8
 8002cdc:	2b08      	cmp	r3, #8
 8002cde:	d11b      	bne.n	8002d18 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f06f 0208 	mvn.w	r2, #8
 8002ce8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2204      	movs	r2, #4
 8002cee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	69db      	ldr	r3, [r3, #28]
 8002cf6:	f003 0303 	and.w	r3, r3, #3
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d003      	beq.n	8002d06 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f000 f974 	bl	8002fec <HAL_TIM_IC_CaptureCallback>
 8002d04:	e005      	b.n	8002d12 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f000 f966 	bl	8002fd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f000 f977 	bl	8003000 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2200      	movs	r2, #0
 8002d16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	691b      	ldr	r3, [r3, #16]
 8002d1e:	f003 0310 	and.w	r3, r3, #16
 8002d22:	2b10      	cmp	r3, #16
 8002d24:	d122      	bne.n	8002d6c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	f003 0310 	and.w	r3, r3, #16
 8002d30:	2b10      	cmp	r3, #16
 8002d32:	d11b      	bne.n	8002d6c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f06f 0210 	mvn.w	r2, #16
 8002d3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2208      	movs	r2, #8
 8002d42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	69db      	ldr	r3, [r3, #28]
 8002d4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d003      	beq.n	8002d5a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f000 f94a 	bl	8002fec <HAL_TIM_IC_CaptureCallback>
 8002d58:	e005      	b.n	8002d66 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f000 f93c 	bl	8002fd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f000 f94d 	bl	8003000 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	691b      	ldr	r3, [r3, #16]
 8002d72:	f003 0301 	and.w	r3, r3, #1
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d10e      	bne.n	8002d98 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	f003 0301 	and.w	r3, r3, #1
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d107      	bne.n	8002d98 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f06f 0201 	mvn.w	r2, #1
 8002d90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f000 f916 	bl	8002fc4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	691b      	ldr	r3, [r3, #16]
 8002d9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002da2:	2b80      	cmp	r3, #128	; 0x80
 8002da4:	d10e      	bne.n	8002dc4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002db0:	2b80      	cmp	r3, #128	; 0x80
 8002db2:	d107      	bne.n	8002dc4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002dbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f000 faf8 	bl	80033b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	691b      	ldr	r3, [r3, #16]
 8002dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dd2:	d10e      	bne.n	8002df2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dde:	2b80      	cmp	r3, #128	; 0x80
 8002de0:	d107      	bne.n	8002df2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002dea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	f000 faeb 	bl	80033c8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	691b      	ldr	r3, [r3, #16]
 8002df8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dfc:	2b40      	cmp	r3, #64	; 0x40
 8002dfe:	d10e      	bne.n	8002e1e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e0a:	2b40      	cmp	r3, #64	; 0x40
 8002e0c:	d107      	bne.n	8002e1e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f000 f8fb 	bl	8003014 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	691b      	ldr	r3, [r3, #16]
 8002e24:	f003 0320 	and.w	r3, r3, #32
 8002e28:	2b20      	cmp	r3, #32
 8002e2a:	d10e      	bne.n	8002e4a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	68db      	ldr	r3, [r3, #12]
 8002e32:	f003 0320 	and.w	r3, r3, #32
 8002e36:	2b20      	cmp	r3, #32
 8002e38:	d107      	bne.n	8002e4a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f06f 0220 	mvn.w	r2, #32
 8002e42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f000 faab 	bl	80033a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e4a:	bf00      	nop
 8002e4c:	3708      	adds	r7, #8
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}

08002e52 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e52:	b580      	push	{r7, lr}
 8002e54:	b084      	sub	sp, #16
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	6078      	str	r0, [r7, #4]
 8002e5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d101      	bne.n	8002e6a <HAL_TIM_ConfigClockSource+0x18>
 8002e66:	2302      	movs	r3, #2
 8002e68:	e0a8      	b.n	8002fbc <HAL_TIM_ConfigClockSource+0x16a>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2202      	movs	r2, #2
 8002e76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e88:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002e8c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e94:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	68fa      	ldr	r2, [r7, #12]
 8002e9c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	2b40      	cmp	r3, #64	; 0x40
 8002ea4:	d067      	beq.n	8002f76 <HAL_TIM_ConfigClockSource+0x124>
 8002ea6:	2b40      	cmp	r3, #64	; 0x40
 8002ea8:	d80b      	bhi.n	8002ec2 <HAL_TIM_ConfigClockSource+0x70>
 8002eaa:	2b10      	cmp	r3, #16
 8002eac:	d073      	beq.n	8002f96 <HAL_TIM_ConfigClockSource+0x144>
 8002eae:	2b10      	cmp	r3, #16
 8002eb0:	d802      	bhi.n	8002eb8 <HAL_TIM_ConfigClockSource+0x66>
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d06f      	beq.n	8002f96 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002eb6:	e078      	b.n	8002faa <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8002eb8:	2b20      	cmp	r3, #32
 8002eba:	d06c      	beq.n	8002f96 <HAL_TIM_ConfigClockSource+0x144>
 8002ebc:	2b30      	cmp	r3, #48	; 0x30
 8002ebe:	d06a      	beq.n	8002f96 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8002ec0:	e073      	b.n	8002faa <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8002ec2:	2b70      	cmp	r3, #112	; 0x70
 8002ec4:	d00d      	beq.n	8002ee2 <HAL_TIM_ConfigClockSource+0x90>
 8002ec6:	2b70      	cmp	r3, #112	; 0x70
 8002ec8:	d804      	bhi.n	8002ed4 <HAL_TIM_ConfigClockSource+0x82>
 8002eca:	2b50      	cmp	r3, #80	; 0x50
 8002ecc:	d033      	beq.n	8002f36 <HAL_TIM_ConfigClockSource+0xe4>
 8002ece:	2b60      	cmp	r3, #96	; 0x60
 8002ed0:	d041      	beq.n	8002f56 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8002ed2:	e06a      	b.n	8002faa <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8002ed4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ed8:	d066      	beq.n	8002fa8 <HAL_TIM_ConfigClockSource+0x156>
 8002eda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ede:	d017      	beq.n	8002f10 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8002ee0:	e063      	b.n	8002faa <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6818      	ldr	r0, [r3, #0]
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	6899      	ldr	r1, [r3, #8]
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	685a      	ldr	r2, [r3, #4]
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	f000 f9ad 	bl	8003250 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002f04:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	68fa      	ldr	r2, [r7, #12]
 8002f0c:	609a      	str	r2, [r3, #8]
      break;
 8002f0e:	e04c      	b.n	8002faa <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6818      	ldr	r0, [r3, #0]
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	6899      	ldr	r1, [r3, #8]
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	685a      	ldr	r2, [r3, #4]
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	f000 f996 	bl	8003250 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	689a      	ldr	r2, [r3, #8]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f32:	609a      	str	r2, [r3, #8]
      break;
 8002f34:	e039      	b.n	8002faa <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6818      	ldr	r0, [r3, #0]
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	6859      	ldr	r1, [r3, #4]
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	461a      	mov	r2, r3
 8002f44:	f000 f90a 	bl	800315c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	2150      	movs	r1, #80	; 0x50
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f000 f963 	bl	800321a <TIM_ITRx_SetConfig>
      break;
 8002f54:	e029      	b.n	8002faa <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6818      	ldr	r0, [r3, #0]
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	6859      	ldr	r1, [r3, #4]
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	461a      	mov	r2, r3
 8002f64:	f000 f929 	bl	80031ba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	2160      	movs	r1, #96	; 0x60
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f000 f953 	bl	800321a <TIM_ITRx_SetConfig>
      break;
 8002f74:	e019      	b.n	8002faa <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6818      	ldr	r0, [r3, #0]
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	6859      	ldr	r1, [r3, #4]
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	461a      	mov	r2, r3
 8002f84:	f000 f8ea 	bl	800315c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2140      	movs	r1, #64	; 0x40
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f000 f943 	bl	800321a <TIM_ITRx_SetConfig>
      break;
 8002f94:	e009      	b.n	8002faa <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	4610      	mov	r0, r2
 8002fa2:	f000 f93a 	bl	800321a <TIM_ITRx_SetConfig>
        break;
 8002fa6:	e000      	b.n	8002faa <HAL_TIM_ConfigClockSource+0x158>
      break;
 8002fa8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2201      	movs	r2, #1
 8002fae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002fba:	2300      	movs	r3, #0
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3710      	adds	r7, #16
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}

08002fc4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002fcc:	bf00      	nop
 8002fce:	370c      	adds	r7, #12
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr

08002fd8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002fe0:	bf00      	nop
 8002fe2:	370c      	adds	r7, #12
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr

08002fec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ff4:	bf00      	nop
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr

08003000 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003008:	bf00      	nop
 800300a:	370c      	adds	r7, #12
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr

08003014 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800301c:	bf00      	nop
 800301e:	370c      	adds	r7, #12
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr

08003028 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003028:	b480      	push	{r7}
 800302a:	b085      	sub	sp, #20
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	4a40      	ldr	r2, [pc, #256]	; (800313c <TIM_Base_SetConfig+0x114>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d013      	beq.n	8003068 <TIM_Base_SetConfig+0x40>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003046:	d00f      	beq.n	8003068 <TIM_Base_SetConfig+0x40>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	4a3d      	ldr	r2, [pc, #244]	; (8003140 <TIM_Base_SetConfig+0x118>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d00b      	beq.n	8003068 <TIM_Base_SetConfig+0x40>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	4a3c      	ldr	r2, [pc, #240]	; (8003144 <TIM_Base_SetConfig+0x11c>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d007      	beq.n	8003068 <TIM_Base_SetConfig+0x40>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	4a3b      	ldr	r2, [pc, #236]	; (8003148 <TIM_Base_SetConfig+0x120>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d003      	beq.n	8003068 <TIM_Base_SetConfig+0x40>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	4a3a      	ldr	r2, [pc, #232]	; (800314c <TIM_Base_SetConfig+0x124>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d108      	bne.n	800307a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800306e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	68fa      	ldr	r2, [r7, #12]
 8003076:	4313      	orrs	r3, r2
 8003078:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4a2f      	ldr	r2, [pc, #188]	; (800313c <TIM_Base_SetConfig+0x114>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d01f      	beq.n	80030c2 <TIM_Base_SetConfig+0x9a>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003088:	d01b      	beq.n	80030c2 <TIM_Base_SetConfig+0x9a>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4a2c      	ldr	r2, [pc, #176]	; (8003140 <TIM_Base_SetConfig+0x118>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d017      	beq.n	80030c2 <TIM_Base_SetConfig+0x9a>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4a2b      	ldr	r2, [pc, #172]	; (8003144 <TIM_Base_SetConfig+0x11c>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d013      	beq.n	80030c2 <TIM_Base_SetConfig+0x9a>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4a2a      	ldr	r2, [pc, #168]	; (8003148 <TIM_Base_SetConfig+0x120>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d00f      	beq.n	80030c2 <TIM_Base_SetConfig+0x9a>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a29      	ldr	r2, [pc, #164]	; (800314c <TIM_Base_SetConfig+0x124>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d00b      	beq.n	80030c2 <TIM_Base_SetConfig+0x9a>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4a28      	ldr	r2, [pc, #160]	; (8003150 <TIM_Base_SetConfig+0x128>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d007      	beq.n	80030c2 <TIM_Base_SetConfig+0x9a>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4a27      	ldr	r2, [pc, #156]	; (8003154 <TIM_Base_SetConfig+0x12c>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d003      	beq.n	80030c2 <TIM_Base_SetConfig+0x9a>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4a26      	ldr	r2, [pc, #152]	; (8003158 <TIM_Base_SetConfig+0x130>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d108      	bne.n	80030d4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	68fa      	ldr	r2, [r7, #12]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	695b      	ldr	r3, [r3, #20]
 80030de:	4313      	orrs	r3, r2
 80030e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	68fa      	ldr	r2, [r7, #12]
 80030e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	689a      	ldr	r2, [r3, #8]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	4a10      	ldr	r2, [pc, #64]	; (800313c <TIM_Base_SetConfig+0x114>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d00f      	beq.n	8003120 <TIM_Base_SetConfig+0xf8>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	4a12      	ldr	r2, [pc, #72]	; (800314c <TIM_Base_SetConfig+0x124>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d00b      	beq.n	8003120 <TIM_Base_SetConfig+0xf8>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	4a11      	ldr	r2, [pc, #68]	; (8003150 <TIM_Base_SetConfig+0x128>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d007      	beq.n	8003120 <TIM_Base_SetConfig+0xf8>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	4a10      	ldr	r2, [pc, #64]	; (8003154 <TIM_Base_SetConfig+0x12c>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d003      	beq.n	8003120 <TIM_Base_SetConfig+0xf8>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	4a0f      	ldr	r2, [pc, #60]	; (8003158 <TIM_Base_SetConfig+0x130>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d103      	bne.n	8003128 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	691a      	ldr	r2, [r3, #16]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2201      	movs	r2, #1
 800312c:	615a      	str	r2, [r3, #20]
}
 800312e:	bf00      	nop
 8003130:	3714      	adds	r7, #20
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop
 800313c:	40012c00 	.word	0x40012c00
 8003140:	40000400 	.word	0x40000400
 8003144:	40000800 	.word	0x40000800
 8003148:	40000c00 	.word	0x40000c00
 800314c:	40013400 	.word	0x40013400
 8003150:	40014000 	.word	0x40014000
 8003154:	40014400 	.word	0x40014400
 8003158:	40014800 	.word	0x40014800

0800315c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800315c:	b480      	push	{r7}
 800315e:	b087      	sub	sp, #28
 8003160:	af00      	add	r7, sp, #0
 8003162:	60f8      	str	r0, [r7, #12]
 8003164:	60b9      	str	r1, [r7, #8]
 8003166:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6a1b      	ldr	r3, [r3, #32]
 800316c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	6a1b      	ldr	r3, [r3, #32]
 8003172:	f023 0201 	bic.w	r2, r3, #1
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	699b      	ldr	r3, [r3, #24]
 800317e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003186:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	011b      	lsls	r3, r3, #4
 800318c:	693a      	ldr	r2, [r7, #16]
 800318e:	4313      	orrs	r3, r2
 8003190:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	f023 030a 	bic.w	r3, r3, #10
 8003198:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800319a:	697a      	ldr	r2, [r7, #20]
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	4313      	orrs	r3, r2
 80031a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	693a      	ldr	r2, [r7, #16]
 80031a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	697a      	ldr	r2, [r7, #20]
 80031ac:	621a      	str	r2, [r3, #32]
}
 80031ae:	bf00      	nop
 80031b0:	371c      	adds	r7, #28
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr

080031ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031ba:	b480      	push	{r7}
 80031bc:	b087      	sub	sp, #28
 80031be:	af00      	add	r7, sp, #0
 80031c0:	60f8      	str	r0, [r7, #12]
 80031c2:	60b9      	str	r1, [r7, #8]
 80031c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	6a1b      	ldr	r3, [r3, #32]
 80031ca:	f023 0210 	bic.w	r2, r3, #16
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	699b      	ldr	r3, [r3, #24]
 80031d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	6a1b      	ldr	r3, [r3, #32]
 80031dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80031e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	031b      	lsls	r3, r3, #12
 80031ea:	697a      	ldr	r2, [r7, #20]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80031f6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	011b      	lsls	r3, r3, #4
 80031fc:	693a      	ldr	r2, [r7, #16]
 80031fe:	4313      	orrs	r3, r2
 8003200:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	697a      	ldr	r2, [r7, #20]
 8003206:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	693a      	ldr	r2, [r7, #16]
 800320c:	621a      	str	r2, [r3, #32]
}
 800320e:	bf00      	nop
 8003210:	371c      	adds	r7, #28
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr

0800321a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800321a:	b480      	push	{r7}
 800321c:	b085      	sub	sp, #20
 800321e:	af00      	add	r7, sp, #0
 8003220:	6078      	str	r0, [r7, #4]
 8003222:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003230:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003232:	683a      	ldr	r2, [r7, #0]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	4313      	orrs	r3, r2
 8003238:	f043 0307 	orr.w	r3, r3, #7
 800323c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	68fa      	ldr	r2, [r7, #12]
 8003242:	609a      	str	r2, [r3, #8]
}
 8003244:	bf00      	nop
 8003246:	3714      	adds	r7, #20
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr

08003250 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003250:	b480      	push	{r7}
 8003252:	b087      	sub	sp, #28
 8003254:	af00      	add	r7, sp, #0
 8003256:	60f8      	str	r0, [r7, #12]
 8003258:	60b9      	str	r1, [r7, #8]
 800325a:	607a      	str	r2, [r7, #4]
 800325c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800326a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	021a      	lsls	r2, r3, #8
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	431a      	orrs	r2, r3
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	4313      	orrs	r3, r2
 8003278:	697a      	ldr	r2, [r7, #20]
 800327a:	4313      	orrs	r3, r2
 800327c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	697a      	ldr	r2, [r7, #20]
 8003282:	609a      	str	r2, [r3, #8]
}
 8003284:	bf00      	nop
 8003286:	371c      	adds	r7, #28
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr

08003290 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003290:	b480      	push	{r7}
 8003292:	b085      	sub	sp, #20
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d101      	bne.n	80032a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80032a4:	2302      	movs	r3, #2
 80032a6:	e068      	b.n	800337a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2201      	movs	r2, #1
 80032ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2202      	movs	r2, #2
 80032b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a2e      	ldr	r2, [pc, #184]	; (8003388 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d004      	beq.n	80032dc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a2d      	ldr	r2, [pc, #180]	; (800338c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d108      	bne.n	80032ee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80032e2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	68fa      	ldr	r2, [r7, #12]
 80032ea:	4313      	orrs	r3, r2
 80032ec:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032f4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	68fa      	ldr	r2, [r7, #12]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	68fa      	ldr	r2, [r7, #12]
 8003306:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a1e      	ldr	r2, [pc, #120]	; (8003388 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d01d      	beq.n	800334e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800331a:	d018      	beq.n	800334e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a1b      	ldr	r2, [pc, #108]	; (8003390 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d013      	beq.n	800334e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a1a      	ldr	r2, [pc, #104]	; (8003394 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d00e      	beq.n	800334e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a18      	ldr	r2, [pc, #96]	; (8003398 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d009      	beq.n	800334e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a13      	ldr	r2, [pc, #76]	; (800338c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d004      	beq.n	800334e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a14      	ldr	r2, [pc, #80]	; (800339c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d10c      	bne.n	8003368 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003354:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	68ba      	ldr	r2, [r7, #8]
 800335c:	4313      	orrs	r3, r2
 800335e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	68ba      	ldr	r2, [r7, #8]
 8003366:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003378:	2300      	movs	r3, #0
}
 800337a:	4618      	mov	r0, r3
 800337c:	3714      	adds	r7, #20
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr
 8003386:	bf00      	nop
 8003388:	40012c00 	.word	0x40012c00
 800338c:	40013400 	.word	0x40013400
 8003390:	40000400 	.word	0x40000400
 8003394:	40000800 	.word	0x40000800
 8003398:	40000c00 	.word	0x40000c00
 800339c:	40014000 	.word	0x40014000

080033a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80033a8:	bf00      	nop
 80033aa:	370c      	adds	r7, #12
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr

080033b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80033bc:	bf00      	nop
 80033be:	370c      	adds	r7, #12
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr

080033c8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80033d0:	bf00      	nop
 80033d2:	370c      	adds	r7, #12
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr

080033dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b088      	sub	sp, #32
 80033e0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80033e2:	f7fc fef1 	bl	80001c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80033e6:	f000 f8a1 	bl	800352c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80033ea:	f000 f9b5 	bl	8003758 <MX_GPIO_Init>
  MX_DMA_Init();
 80033ee:	f000 f995 	bl	800371c <MX_DMA_Init>
  MX_DAC1_Init();
 80033f2:	f000 f8ed 	bl	80035d0 <MX_DAC1_Init>
  MX_TIM2_Init();
 80033f6:	f000 f943 	bl	8003680 <MX_TIM2_Init>
  MX_QUADSPI_Init();
 80033fa:	f000 f91b 	bl	8003634 <MX_QUADSPI_Init>
  /* USER CODE BEGIN 2 */
  BSP_QSPI_Init();
 80033fe:	f000 fa3d 	bl	800387c <BSP_QSPI_Init>
  counter = 0;
 8003402:	4b3f      	ldr	r3, [pc, #252]	; (8003500 <main+0x124>)
 8003404:	2200      	movs	r2, #0
 8003406:	601a      	str	r2, [r3, #0]
  if(BSP_QSPI_Erase_Block(WRITE_READ_ADDR) != QSPI_OK){
 8003408:	2050      	movs	r0, #80	; 0x50
 800340a:	f000 fb67 	bl	8003adc <BSP_QSPI_Erase_Block>
 800340e:	4603      	mov	r3, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d003      	beq.n	800341c <main+0x40>
 		  printf("QSPI ERASE : FAILED, QSPI Test Aborted \n");
 8003414:	483b      	ldr	r0, [pc, #236]	; (8003504 <main+0x128>)
 8003416:	f001 f951 	bl	80046bc <puts>
 800341a:	e056      	b.n	80034ca <main+0xee>
  }else{
	  for(int i = 0; i<6; i++){
 800341c:	2300      	movs	r3, #0
 800341e:	617b      	str	r3, [r7, #20]
 8003420:	e050      	b.n	80034c4 <main+0xe8>
		 float radian = 0;
 8003422:	f04f 0300 	mov.w	r3, #0
 8003426:	613b      	str	r3, [r7, #16]
		 	 for (int j = 0; j < QSPI_BUFFER_SIZE; j++) {
 8003428:	2300      	movs	r3, #0
 800342a:	60fb      	str	r3, [r7, #12]
 800342c:	e02c      	b.n	8003488 <main+0xac>
		 		 sine[j] = (125 * arm_sin_f32(radian)) +125;
 800342e:	ed97 0a04 	vldr	s0, [r7, #16]
 8003432:	f001 f86f 	bl	8004514 <arm_sin_f32>
 8003436:	eeb0 7a40 	vmov.f32	s14, s0
 800343a:	eddf 7a33 	vldr	s15, [pc, #204]	; 8003508 <main+0x12c>
 800343e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003442:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8003508 <main+0x12c>
 8003446:	ee77 7a87 	vadd.f32	s15, s15, s14
 800344a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800344e:	edc7 7a01 	vstr	s15, [r7, #4]
 8003452:	793b      	ldrb	r3, [r7, #4]
 8003454:	b2d9      	uxtb	r1, r3
 8003456:	4a2d      	ldr	r2, [pc, #180]	; (800350c <main+0x130>)
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	4413      	add	r3, r2
 800345c:	460a      	mov	r2, r1
 800345e:	701a      	strb	r2, [r3, #0]
 				 radian += PI / (2*(i+1)) ;
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	3301      	adds	r3, #1
 8003464:	005b      	lsls	r3, r3, #1
 8003466:	ee07 3a90 	vmov	s15, r3
 800346a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800346e:	eddf 6a28 	vldr	s13, [pc, #160]	; 8003510 <main+0x134>
 8003472:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003476:	ed97 7a04 	vldr	s14, [r7, #16]
 800347a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800347e:	edc7 7a04 	vstr	s15, [r7, #16]
		 	 for (int j = 0; j < QSPI_BUFFER_SIZE; j++) {
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	3301      	adds	r3, #1
 8003486:	60fb      	str	r3, [r7, #12]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f242 720f 	movw	r2, #9999	; 0x270f
 800348e:	4293      	cmp	r3, r2
 8003490:	d9cd      	bls.n	800342e <main+0x52>
		}
		if(BSP_QSPI_Write(sine, WRITE_READ_ADDR + (i*QSPI_BUFFER_SIZE), QSPI_BUFFER_SIZE) != QSPI_OK){
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	f242 7210 	movw	r2, #10000	; 0x2710
 8003498:	fb02 f303 	mul.w	r3, r2, r3
 800349c:	3350      	adds	r3, #80	; 0x50
 800349e:	f242 7210 	movw	r2, #10000	; 0x2710
 80034a2:	4619      	mov	r1, r3
 80034a4:	4819      	ldr	r0, [pc, #100]	; (800350c <main+0x130>)
 80034a6:	f000 fa9b 	bl	80039e0 <BSP_QSPI_Write>
 80034aa:	4603      	mov	r3, r0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d003      	beq.n	80034b8 <main+0xdc>
			printf("QSPI WRITE : FAILED, QSPI Test Aborted \n");
 80034b0:	4818      	ldr	r0, [pc, #96]	; (8003514 <main+0x138>)
 80034b2:	f001 f903 	bl	80046bc <puts>
 80034b6:	e002      	b.n	80034be <main+0xe2>
		}else{
			printf("QSPI WRITE : OK \n");
 80034b8:	4817      	ldr	r0, [pc, #92]	; (8003518 <main+0x13c>)
 80034ba:	f001 f8ff 	bl	80046bc <puts>
	  for(int i = 0; i<6; i++){
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	3301      	adds	r3, #1
 80034c2:	617b      	str	r3, [r7, #20]
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	2b05      	cmp	r3, #5
 80034c8:	ddab      	ble.n	8003422 <main+0x46>
		}
	  }
  }
  HAL_TIM_Base_Start(&htim2);
 80034ca:	4814      	ldr	r0, [pc, #80]	; (800351c <main+0x140>)
 80034cc:	f7ff fb3a 	bl	8002b44 <HAL_TIM_Base_Start>
  if(BSP_QSPI_Read(audio, WRITE_READ_ADDR, QSPI_BUFFER_SIZE) != QSPI_OK){
 80034d0:	f242 7210 	movw	r2, #10000	; 0x2710
 80034d4:	2150      	movs	r1, #80	; 0x50
 80034d6:	4812      	ldr	r0, [pc, #72]	; (8003520 <main+0x144>)
 80034d8:	f000 fa3c 	bl	8003954 <BSP_QSPI_Read>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d003      	beq.n	80034ea <main+0x10e>
    printf("QSPI READ : FAILED, QSPI Test Aborted \n");
 80034e2:	4810      	ldr	r0, [pc, #64]	; (8003524 <main+0x148>)
 80034e4:	f001 f8ea 	bl	80046bc <puts>
 80034e8:	e008      	b.n	80034fc <main+0x120>
  }else{
	HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*) audio, QSPI_BUFFER_SIZE, DAC_ALIGN_8B_R);
 80034ea:	2308      	movs	r3, #8
 80034ec:	9300      	str	r3, [sp, #0]
 80034ee:	f242 7310 	movw	r3, #10000	; 0x2710
 80034f2:	4a0b      	ldr	r2, [pc, #44]	; (8003520 <main+0x144>)
 80034f4:	2100      	movs	r1, #0
 80034f6:	480c      	ldr	r0, [pc, #48]	; (8003528 <main+0x14c>)
 80034f8:	f7fd f830 	bl	800055c <HAL_DAC_Start_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80034fc:	e7fe      	b.n	80034fc <main+0x120>
 80034fe:	bf00      	nop
 8003500:	20002808 	.word	0x20002808
 8003504:	08004eec 	.word	0x08004eec
 8003508:	42fa0000 	.word	0x42fa0000
 800350c:	200000f8 	.word	0x200000f8
 8003510:	40490fdb 	.word	0x40490fdb
 8003514:	08004f14 	.word	0x08004f14
 8003518:	08004f3c 	.word	0x08004f3c
 800351c:	20004f1c 	.word	0x20004f1c
 8003520:	2000280c 	.word	0x2000280c
 8003524:	08004f50 	.word	0x08004f50
 8003528:	2000009c 	.word	0x2000009c

0800352c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b096      	sub	sp, #88	; 0x58
 8003530:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003532:	f107 0314 	add.w	r3, r7, #20
 8003536:	2244      	movs	r2, #68	; 0x44
 8003538:	2100      	movs	r1, #0
 800353a:	4618      	mov	r0, r3
 800353c:	f001 f85a 	bl	80045f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003540:	463b      	mov	r3, r7
 8003542:	2200      	movs	r2, #0
 8003544:	601a      	str	r2, [r3, #0]
 8003546:	605a      	str	r2, [r3, #4]
 8003548:	609a      	str	r2, [r3, #8]
 800354a:	60da      	str	r2, [r3, #12]
 800354c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800354e:	2310      	movs	r3, #16
 8003550:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003552:	2301      	movs	r3, #1
 8003554:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8003556:	2300      	movs	r3, #0
 8003558:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800355a:	2360      	movs	r3, #96	; 0x60
 800355c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800355e:	2302      	movs	r3, #2
 8003560:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8003562:	2301      	movs	r3, #1
 8003564:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8003566:	2301      	movs	r3, #1
 8003568:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 800356a:	2328      	movs	r3, #40	; 0x28
 800356c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800356e:	2307      	movs	r3, #7
 8003570:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003572:	2302      	movs	r3, #2
 8003574:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003576:	2302      	movs	r3, #2
 8003578:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800357a:	f107 0314 	add.w	r3, r7, #20
 800357e:	4618      	mov	r0, r3
 8003580:	f7fe fcd6 	bl	8001f30 <HAL_RCC_OscConfig>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d001      	beq.n	800358e <SystemClock_Config+0x62>
  {
    Error_Handler();
 800358a:	f000 f96f 	bl	800386c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800358e:	230f      	movs	r3, #15
 8003590:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003592:	2303      	movs	r3, #3
 8003594:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003596:	2300      	movs	r3, #0
 8003598:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800359a:	2300      	movs	r3, #0
 800359c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800359e:	2300      	movs	r3, #0
 80035a0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80035a2:	463b      	mov	r3, r7
 80035a4:	2104      	movs	r1, #4
 80035a6:	4618      	mov	r0, r3
 80035a8:	f7ff f8a8 	bl	80026fc <HAL_RCC_ClockConfig>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d001      	beq.n	80035b6 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80035b2:	f000 f95b 	bl	800386c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80035b6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80035ba:	f7fd ff83 	bl	80014c4 <HAL_PWREx_ControlVoltageScaling>
 80035be:	4603      	mov	r3, r0
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d001      	beq.n	80035c8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80035c4:	f000 f952 	bl	800386c <Error_Handler>
  }
}
 80035c8:	bf00      	nop
 80035ca:	3758      	adds	r7, #88	; 0x58
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b08a      	sub	sp, #40	; 0x28
 80035d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80035d6:	1d3b      	adds	r3, r7, #4
 80035d8:	2224      	movs	r2, #36	; 0x24
 80035da:	2100      	movs	r1, #0
 80035dc:	4618      	mov	r0, r3
 80035de:	f001 f809 	bl	80045f4 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80035e2:	4b12      	ldr	r3, [pc, #72]	; (800362c <MX_DAC1_Init+0x5c>)
 80035e4:	4a12      	ldr	r2, [pc, #72]	; (8003630 <MX_DAC1_Init+0x60>)
 80035e6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80035e8:	4810      	ldr	r0, [pc, #64]	; (800362c <MX_DAC1_Init+0x5c>)
 80035ea:	f7fc ff94 	bl	8000516 <HAL_DAC_Init>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d001      	beq.n	80035f8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80035f4:	f000 f93a 	bl	800386c <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80035f8:	2300      	movs	r3, #0
 80035fa:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80035fc:	2324      	movs	r3, #36	; 0x24
 80035fe:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8003600:	2300      	movs	r3, #0
 8003602:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8003604:	2300      	movs	r3, #0
 8003606:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8003608:	2300      	movs	r3, #0
 800360a:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800360c:	1d3b      	adds	r3, r7, #4
 800360e:	2200      	movs	r2, #0
 8003610:	4619      	mov	r1, r3
 8003612:	4806      	ldr	r0, [pc, #24]	; (800362c <MX_DAC1_Init+0x5c>)
 8003614:	f7fd f8b9 	bl	800078a <HAL_DAC_ConfigChannel>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	d001      	beq.n	8003622 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800361e:	f000 f925 	bl	800386c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8003622:	bf00      	nop
 8003624:	3728      	adds	r7, #40	; 0x28
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	2000009c 	.word	0x2000009c
 8003630:	40007400 	.word	0x40007400

08003634 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8003638:	4b0f      	ldr	r3, [pc, #60]	; (8003678 <MX_QUADSPI_Init+0x44>)
 800363a:	4a10      	ldr	r2, [pc, #64]	; (800367c <MX_QUADSPI_Init+0x48>)
 800363c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 800363e:	4b0e      	ldr	r3, [pc, #56]	; (8003678 <MX_QUADSPI_Init+0x44>)
 8003640:	22ff      	movs	r2, #255	; 0xff
 8003642:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8003644:	4b0c      	ldr	r3, [pc, #48]	; (8003678 <MX_QUADSPI_Init+0x44>)
 8003646:	2201      	movs	r2, #1
 8003648:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 800364a:	4b0b      	ldr	r3, [pc, #44]	; (8003678 <MX_QUADSPI_Init+0x44>)
 800364c:	2200      	movs	r2, #0
 800364e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8003650:	4b09      	ldr	r3, [pc, #36]	; (8003678 <MX_QUADSPI_Init+0x44>)
 8003652:	2201      	movs	r2, #1
 8003654:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8003656:	4b08      	ldr	r3, [pc, #32]	; (8003678 <MX_QUADSPI_Init+0x44>)
 8003658:	2200      	movs	r2, #0
 800365a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800365c:	4b06      	ldr	r3, [pc, #24]	; (8003678 <MX_QUADSPI_Init+0x44>)
 800365e:	2200      	movs	r2, #0
 8003660:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8003662:	4805      	ldr	r0, [pc, #20]	; (8003678 <MX_QUADSPI_Init+0x44>)
 8003664:	f7fd ff84 	bl	8001570 <HAL_QSPI_Init>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d001      	beq.n	8003672 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 800366e:	f000 f8fd 	bl	800386c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8003672:	bf00      	nop
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	20004f68 	.word	0x20004f68
 800367c:	a0001000 	.word	0xa0001000

08003680 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b088      	sub	sp, #32
 8003684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003686:	f107 0310 	add.w	r3, r7, #16
 800368a:	2200      	movs	r2, #0
 800368c:	601a      	str	r2, [r3, #0]
 800368e:	605a      	str	r2, [r3, #4]
 8003690:	609a      	str	r2, [r3, #8]
 8003692:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003694:	1d3b      	adds	r3, r7, #4
 8003696:	2200      	movs	r2, #0
 8003698:	601a      	str	r2, [r3, #0]
 800369a:	605a      	str	r2, [r3, #4]
 800369c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800369e:	4b1e      	ldr	r3, [pc, #120]	; (8003718 <MX_TIM2_Init+0x98>)
 80036a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80036a4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80036a6:	4b1c      	ldr	r3, [pc, #112]	; (8003718 <MX_TIM2_Init+0x98>)
 80036a8:	2200      	movs	r2, #0
 80036aa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036ac:	4b1a      	ldr	r3, [pc, #104]	; (8003718 <MX_TIM2_Init+0x98>)
 80036ae:	2200      	movs	r2, #0
 80036b0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1814;
 80036b2:	4b19      	ldr	r3, [pc, #100]	; (8003718 <MX_TIM2_Init+0x98>)
 80036b4:	f240 7216 	movw	r2, #1814	; 0x716
 80036b8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036ba:	4b17      	ldr	r3, [pc, #92]	; (8003718 <MX_TIM2_Init+0x98>)
 80036bc:	2200      	movs	r2, #0
 80036be:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036c0:	4b15      	ldr	r3, [pc, #84]	; (8003718 <MX_TIM2_Init+0x98>)
 80036c2:	2200      	movs	r2, #0
 80036c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80036c6:	4814      	ldr	r0, [pc, #80]	; (8003718 <MX_TIM2_Init+0x98>)
 80036c8:	f7ff f9e4 	bl	8002a94 <HAL_TIM_Base_Init>
 80036cc:	4603      	mov	r3, r0
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d001      	beq.n	80036d6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80036d2:	f000 f8cb 	bl	800386c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80036d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036da:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80036dc:	f107 0310 	add.w	r3, r7, #16
 80036e0:	4619      	mov	r1, r3
 80036e2:	480d      	ldr	r0, [pc, #52]	; (8003718 <MX_TIM2_Init+0x98>)
 80036e4:	f7ff fbb5 	bl	8002e52 <HAL_TIM_ConfigClockSource>
 80036e8:	4603      	mov	r3, r0
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d001      	beq.n	80036f2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80036ee:	f000 f8bd 	bl	800386c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80036f2:	2320      	movs	r3, #32
 80036f4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80036f6:	2300      	movs	r3, #0
 80036f8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80036fa:	1d3b      	adds	r3, r7, #4
 80036fc:	4619      	mov	r1, r3
 80036fe:	4806      	ldr	r0, [pc, #24]	; (8003718 <MX_TIM2_Init+0x98>)
 8003700:	f7ff fdc6 	bl	8003290 <HAL_TIMEx_MasterConfigSynchronization>
 8003704:	4603      	mov	r3, r0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d001      	beq.n	800370e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800370a:	f000 f8af 	bl	800386c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800370e:	bf00      	nop
 8003710:	3720      	adds	r7, #32
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	20004f1c 	.word	0x20004f1c

0800371c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b082      	sub	sp, #8
 8003720:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003722:	4b0c      	ldr	r3, [pc, #48]	; (8003754 <MX_DMA_Init+0x38>)
 8003724:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003726:	4a0b      	ldr	r2, [pc, #44]	; (8003754 <MX_DMA_Init+0x38>)
 8003728:	f043 0301 	orr.w	r3, r3, #1
 800372c:	6493      	str	r3, [r2, #72]	; 0x48
 800372e:	4b09      	ldr	r3, [pc, #36]	; (8003754 <MX_DMA_Init+0x38>)
 8003730:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003732:	f003 0301 	and.w	r3, r3, #1
 8003736:	607b      	str	r3, [r7, #4]
 8003738:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800373a:	2200      	movs	r2, #0
 800373c:	2100      	movs	r1, #0
 800373e:	200d      	movs	r0, #13
 8003740:	f7fc feb3 	bl	80004aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8003744:	200d      	movs	r0, #13
 8003746:	f7fc fecc 	bl	80004e2 <HAL_NVIC_EnableIRQ>

}
 800374a:	bf00      	nop
 800374c:	3708      	adds	r7, #8
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	40021000 	.word	0x40021000

08003758 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b088      	sub	sp, #32
 800375c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800375e:	f107 030c 	add.w	r3, r7, #12
 8003762:	2200      	movs	r2, #0
 8003764:	601a      	str	r2, [r3, #0]
 8003766:	605a      	str	r2, [r3, #4]
 8003768:	609a      	str	r2, [r3, #8]
 800376a:	60da      	str	r2, [r3, #12]
 800376c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800376e:	4b1e      	ldr	r3, [pc, #120]	; (80037e8 <MX_GPIO_Init+0x90>)
 8003770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003772:	4a1d      	ldr	r2, [pc, #116]	; (80037e8 <MX_GPIO_Init+0x90>)
 8003774:	f043 0301 	orr.w	r3, r3, #1
 8003778:	64d3      	str	r3, [r2, #76]	; 0x4c
 800377a:	4b1b      	ldr	r3, [pc, #108]	; (80037e8 <MX_GPIO_Init+0x90>)
 800377c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800377e:	f003 0301 	and.w	r3, r3, #1
 8003782:	60bb      	str	r3, [r7, #8]
 8003784:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003786:	4b18      	ldr	r3, [pc, #96]	; (80037e8 <MX_GPIO_Init+0x90>)
 8003788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800378a:	4a17      	ldr	r2, [pc, #92]	; (80037e8 <MX_GPIO_Init+0x90>)
 800378c:	f043 0310 	orr.w	r3, r3, #16
 8003790:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003792:	4b15      	ldr	r3, [pc, #84]	; (80037e8 <MX_GPIO_Init+0x90>)
 8003794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003796:	f003 0310 	and.w	r3, r3, #16
 800379a:	607b      	str	r3, [r7, #4]
 800379c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800379e:	4b12      	ldr	r3, [pc, #72]	; (80037e8 <MX_GPIO_Init+0x90>)
 80037a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037a2:	4a11      	ldr	r2, [pc, #68]	; (80037e8 <MX_GPIO_Init+0x90>)
 80037a4:	f043 0302 	orr.w	r3, r3, #2
 80037a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80037aa:	4b0f      	ldr	r3, [pc, #60]	; (80037e8 <MX_GPIO_Init+0x90>)
 80037ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037ae:	f003 0302 	and.w	r3, r3, #2
 80037b2:	603b      	str	r3, [r7, #0]
 80037b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80037b6:	2200      	movs	r2, #0
 80037b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80037bc:	480b      	ldr	r0, [pc, #44]	; (80037ec <MX_GPIO_Init+0x94>)
 80037be:	f7fd fe5b 	bl	8001478 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80037c2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80037c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037c8:	2301      	movs	r3, #1
 80037ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037cc:	2300      	movs	r3, #0
 80037ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037d0:	2300      	movs	r3, #0
 80037d2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80037d4:	f107 030c 	add.w	r3, r7, #12
 80037d8:	4619      	mov	r1, r3
 80037da:	4804      	ldr	r0, [pc, #16]	; (80037ec <MX_GPIO_Init+0x94>)
 80037dc:	f7fd fbb0 	bl	8000f40 <HAL_GPIO_Init>

}
 80037e0:	bf00      	nop
 80037e2:	3720      	adds	r7, #32
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}
 80037e8:	40021000 	.word	0x40021000
 80037ec:	48000400 	.word	0x48000400

080037f0 <HAL_DAC_ConvCpltCallbackCh1>:

/* USER CODE BEGIN 4 */
void HAL_DAC_ConvCpltCallbackCh1 (DAC_HandleTypeDef * hdac){
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af02      	add	r7, sp, #8
 80037f6:	6078      	str	r0, [r7, #4]
  HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 80037f8:	2100      	movs	r1, #0
 80037fa:	4818      	ldr	r0, [pc, #96]	; (800385c <HAL_DAC_ConvCpltCallbackCh1+0x6c>)
 80037fc:	f7fc ff6c 	bl	80006d8 <HAL_DAC_Stop_DMA>
  counter +=1;
 8003800:	4b17      	ldr	r3, [pc, #92]	; (8003860 <HAL_DAC_ConvCpltCallbackCh1+0x70>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	3301      	adds	r3, #1
 8003806:	4a16      	ldr	r2, [pc, #88]	; (8003860 <HAL_DAC_ConvCpltCallbackCh1+0x70>)
 8003808:	6013      	str	r3, [r2, #0]
  if(counter > 5) counter=0;
 800380a:	4b15      	ldr	r3, [pc, #84]	; (8003860 <HAL_DAC_ConvCpltCallbackCh1+0x70>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	2b05      	cmp	r3, #5
 8003810:	dd02      	ble.n	8003818 <HAL_DAC_ConvCpltCallbackCh1+0x28>
 8003812:	4b13      	ldr	r3, [pc, #76]	; (8003860 <HAL_DAC_ConvCpltCallbackCh1+0x70>)
 8003814:	2200      	movs	r2, #0
 8003816:	601a      	str	r2, [r3, #0]
  if(BSP_QSPI_Read(audio, WRITE_READ_ADDR + ((counter)*QSPI_BUFFER_SIZE), QSPI_BUFFER_SIZE) != QSPI_OK){
 8003818:	4b11      	ldr	r3, [pc, #68]	; (8003860 <HAL_DAC_ConvCpltCallbackCh1+0x70>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	461a      	mov	r2, r3
 800381e:	f242 7310 	movw	r3, #10000	; 0x2710
 8003822:	fb03 f302 	mul.w	r3, r3, r2
 8003826:	3350      	adds	r3, #80	; 0x50
 8003828:	f242 7210 	movw	r2, #10000	; 0x2710
 800382c:	4619      	mov	r1, r3
 800382e:	480d      	ldr	r0, [pc, #52]	; (8003864 <HAL_DAC_ConvCpltCallbackCh1+0x74>)
 8003830:	f000 f890 	bl	8003954 <BSP_QSPI_Read>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d003      	beq.n	8003842 <HAL_DAC_ConvCpltCallbackCh1+0x52>
	printf("QSPI READ : FAILED, QSPI Test Aborted \n");
 800383a:	480b      	ldr	r0, [pc, #44]	; (8003868 <HAL_DAC_ConvCpltCallbackCh1+0x78>)
 800383c:	f000 ff3e 	bl	80046bc <puts>
  }else{
	  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*) audio, QSPI_BUFFER_SIZE, DAC_ALIGN_8B_R);
  }

}
 8003840:	e008      	b.n	8003854 <HAL_DAC_ConvCpltCallbackCh1+0x64>
	  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*) audio, QSPI_BUFFER_SIZE, DAC_ALIGN_8B_R);
 8003842:	2308      	movs	r3, #8
 8003844:	9300      	str	r3, [sp, #0]
 8003846:	f242 7310 	movw	r3, #10000	; 0x2710
 800384a:	4a06      	ldr	r2, [pc, #24]	; (8003864 <HAL_DAC_ConvCpltCallbackCh1+0x74>)
 800384c:	2100      	movs	r1, #0
 800384e:	4803      	ldr	r0, [pc, #12]	; (800385c <HAL_DAC_ConvCpltCallbackCh1+0x6c>)
 8003850:	f7fc fe84 	bl	800055c <HAL_DAC_Start_DMA>
}
 8003854:	bf00      	nop
 8003856:	3708      	adds	r7, #8
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}
 800385c:	2000009c 	.word	0x2000009c
 8003860:	20002808 	.word	0x20002808
 8003864:	2000280c 	.word	0x2000280c
 8003868:	08004f50 	.word	0x08004f50

0800386c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800386c:	b480      	push	{r7}
 800386e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003870:	bf00      	nop
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr
	...

0800387c <BSP_QSPI_Init>:
/**
  * @brief  Initializes the QSPI interface.
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Init(void)
{ 
 800387c:	b580      	push	{r7, lr}
 800387e:	b084      	sub	sp, #16
 8003880:	af00      	add	r7, sp, #0
  QSPIHandle.Instance = QUADSPI;
 8003882:	4b32      	ldr	r3, [pc, #200]	; (800394c <BSP_QSPI_Init+0xd0>)
 8003884:	4a32      	ldr	r2, [pc, #200]	; (8003950 <BSP_QSPI_Init+0xd4>)
 8003886:	601a      	str	r2, [r3, #0]

  /* Call the DeInit function to reset the driver */
  if (HAL_QSPI_DeInit(&QSPIHandle) != HAL_OK)
 8003888:	4830      	ldr	r0, [pc, #192]	; (800394c <BSP_QSPI_Init+0xd0>)
 800388a:	f7fd fee7 	bl	800165c <HAL_QSPI_DeInit>
 800388e:	4603      	mov	r3, r0
 8003890:	2b00      	cmp	r3, #0
 8003892:	d001      	beq.n	8003898 <BSP_QSPI_Init+0x1c>
  {
    return QSPI_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e054      	b.n	8003942 <BSP_QSPI_Init+0xc6>
  }
        
  /* System level initialization */
  BSP_QSPI_MspInit();
 8003898:	f000 f964 	bl	8003b64 <BSP_QSPI_MspInit>
  
  /* QSPI initialization */
  QSPIHandle.Init.ClockPrescaler     = 2; /* QSPI clock = 80MHz / (ClockPrescaler+1) = 26.67MHz */
 800389c:	4b2b      	ldr	r3, [pc, #172]	; (800394c <BSP_QSPI_Init+0xd0>)
 800389e:	2202      	movs	r2, #2
 80038a0:	605a      	str	r2, [r3, #4]
  QSPIHandle.Init.FifoThreshold      = 4;
 80038a2:	4b2a      	ldr	r3, [pc, #168]	; (800394c <BSP_QSPI_Init+0xd0>)
 80038a4:	2204      	movs	r2, #4
 80038a6:	609a      	str	r2, [r3, #8]
  QSPIHandle.Init.SampleShifting     = QSPI_SAMPLE_SHIFTING_NONE;
 80038a8:	4b28      	ldr	r3, [pc, #160]	; (800394c <BSP_QSPI_Init+0xd0>)
 80038aa:	2200      	movs	r2, #0
 80038ac:	60da      	str	r2, [r3, #12]
 80038ae:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80038b2:	60bb      	str	r3, [r7, #8]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	fa93 f3a3 	rbit	r3, r3
 80038ba:	607b      	str	r3, [r7, #4]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	60fb      	str	r3, [r7, #12]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d101      	bne.n	80038ca <BSP_QSPI_Init+0x4e>
  {
    return 32U;
 80038c6:	2320      	movs	r3, #32
 80038c8:	e003      	b.n	80038d2 <BSP_QSPI_Init+0x56>
  }
  return __builtin_clz(value);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	fab3 f383 	clz	r3, r3
 80038d0:	b2db      	uxtb	r3, r3
  QSPIHandle.Init.FlashSize          = POSITION_VAL(MX25R6435F_FLASH_SIZE) - 1;
 80038d2:	3b01      	subs	r3, #1
 80038d4:	461a      	mov	r2, r3
 80038d6:	4b1d      	ldr	r3, [pc, #116]	; (800394c <BSP_QSPI_Init+0xd0>)
 80038d8:	611a      	str	r2, [r3, #16]
  QSPIHandle.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80038da:	4b1c      	ldr	r3, [pc, #112]	; (800394c <BSP_QSPI_Init+0xd0>)
 80038dc:	2200      	movs	r2, #0
 80038de:	615a      	str	r2, [r3, #20]
  QSPIHandle.Init.ClockMode          = QSPI_CLOCK_MODE_0;
 80038e0:	4b1a      	ldr	r3, [pc, #104]	; (800394c <BSP_QSPI_Init+0xd0>)
 80038e2:	2200      	movs	r2, #0
 80038e4:	619a      	str	r2, [r3, #24]

  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 80038e6:	4819      	ldr	r0, [pc, #100]	; (800394c <BSP_QSPI_Init+0xd0>)
 80038e8:	f7fd fe42 	bl	8001570 <HAL_QSPI_Init>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d001      	beq.n	80038f6 <BSP_QSPI_Init+0x7a>
  {
    return QSPI_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e025      	b.n	8003942 <BSP_QSPI_Init+0xc6>
  }

  /* QSPI memory reset */
  if (QSPI_ResetMemory(&QSPIHandle) != QSPI_OK)
 80038f6:	4815      	ldr	r0, [pc, #84]	; (800394c <BSP_QSPI_Init+0xd0>)
 80038f8:	f000 f974 	bl	8003be4 <QSPI_ResetMemory>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d001      	beq.n	8003906 <BSP_QSPI_Init+0x8a>
  {
    return QSPI_NOT_SUPPORTED;
 8003902:	2304      	movs	r3, #4
 8003904:	e01d      	b.n	8003942 <BSP_QSPI_Init+0xc6>
  }
 
  /* QSPI quad enable */
  if (QSPI_QuadMode(&QSPIHandle, QSPI_QUAD_ENABLE) != QSPI_OK)
 8003906:	2101      	movs	r1, #1
 8003908:	4810      	ldr	r0, [pc, #64]	; (800394c <BSP_QSPI_Init+0xd0>)
 800390a:	f000 fa35 	bl	8003d78 <QSPI_QuadMode>
 800390e:	4603      	mov	r3, r0
 8003910:	2b00      	cmp	r3, #0
 8003912:	d001      	beq.n	8003918 <BSP_QSPI_Init+0x9c>
  {
    return QSPI_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	e014      	b.n	8003942 <BSP_QSPI_Init+0xc6>
  }
 
  /* High performance mode enable */
  if (QSPI_HighPerfMode(&QSPIHandle, QSPI_HIGH_PERF_ENABLE) != QSPI_OK)
 8003918:	2101      	movs	r1, #1
 800391a:	480c      	ldr	r0, [pc, #48]	; (800394c <BSP_QSPI_Init+0xd0>)
 800391c:	f000 fad4 	bl	8003ec8 <QSPI_HighPerfMode>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d001      	beq.n	800392a <BSP_QSPI_Init+0xae>
  {
    return QSPI_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e00b      	b.n	8003942 <BSP_QSPI_Init+0xc6>
  }
  
  /* Re-configure the clock for the high performance mode */
  QSPIHandle.Init.ClockPrescaler = 1; /* QSPI clock = 80MHz / (ClockPrescaler+1) = 40MHz */
 800392a:	4b08      	ldr	r3, [pc, #32]	; (800394c <BSP_QSPI_Init+0xd0>)
 800392c:	2201      	movs	r2, #1
 800392e:	605a      	str	r2, [r3, #4]

  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 8003930:	4806      	ldr	r0, [pc, #24]	; (800394c <BSP_QSPI_Init+0xd0>)
 8003932:	f7fd fe1d 	bl	8001570 <HAL_QSPI_Init>
 8003936:	4603      	mov	r3, r0
 8003938:	2b00      	cmp	r3, #0
 800393a:	d001      	beq.n	8003940 <BSP_QSPI_Init+0xc4>
  {
    return QSPI_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e000      	b.n	8003942 <BSP_QSPI_Init+0xc6>
  }

  return QSPI_OK;
 8003940:	2300      	movs	r3, #0
}
 8003942:	4618      	mov	r0, r3
 8003944:	3710      	adds	r7, #16
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	20004fac 	.word	0x20004fac
 8003950:	a0001000 	.word	0xa0001000

08003954 <BSP_QSPI_Read>:
  * @param  ReadAddr : Read start address
  * @param  Size     : Size of data to read    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Read(uint8_t* pData, uint32_t ReadAddr, uint32_t Size)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b092      	sub	sp, #72	; 0x48
 8003958:	af00      	add	r7, sp, #0
 800395a:	60f8      	str	r0, [r7, #12]
 800395c:	60b9      	str	r1, [r7, #8]
 800395e:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef sCommand;

  /* Initialize the read command */
  sCommand.InstructionMode    = QSPI_INSTRUCTION_1_LINE;
 8003960:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003964:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.Instruction        = QUAD_INOUT_READ_CMD;
 8003966:	23eb      	movs	r3, #235	; 0xeb
 8003968:	613b      	str	r3, [r7, #16]
  sCommand.AddressMode        = QSPI_ADDRESS_4_LINES;
 800396a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800396e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AddressSize        = QSPI_ADDRESS_24_BITS;
 8003970:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003974:	61fb      	str	r3, [r7, #28]
  sCommand.Address            = ReadAddr;
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	617b      	str	r3, [r7, #20]
  sCommand.AlternateByteMode  = QSPI_ALTERNATE_BYTES_4_LINES;
 800397a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800397e:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AlternateBytesSize = QSPI_ALTERNATE_BYTES_8_BITS;
 8003980:	2300      	movs	r3, #0
 8003982:	623b      	str	r3, [r7, #32]
  sCommand.AlternateBytes     = MX25R6435F_ALT_BYTES_NO_PE_MODE;
 8003984:	23aa      	movs	r3, #170	; 0xaa
 8003986:	61bb      	str	r3, [r7, #24]
  sCommand.DataMode           = QSPI_DATA_4_LINES;
 8003988:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800398c:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DummyCycles        = MX25R6435F_DUMMY_CYCLES_READ_QUAD;
 800398e:	2304      	movs	r3, #4
 8003990:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.NbData             = Size;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DdrMode            = QSPI_DDR_MODE_DISABLE;
 8003996:	2300      	movs	r3, #0
 8003998:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DdrHoldHalfCycle   = QSPI_DDR_HHC_ANALOG_DELAY;
 800399a:	2300      	movs	r3, #0
 800399c:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.SIOOMode           = QSPI_SIOO_INST_EVERY_CMD;
 800399e:	2300      	movs	r3, #0
 80039a0:	647b      	str	r3, [r7, #68]	; 0x44
  
  /* Configure the command */
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80039a2:	f107 0310 	add.w	r3, r7, #16
 80039a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80039aa:	4619      	mov	r1, r3
 80039ac:	480b      	ldr	r0, [pc, #44]	; (80039dc <BSP_QSPI_Read+0x88>)
 80039ae:	f7fd fe79 	bl	80016a4 <HAL_QSPI_Command>
 80039b2:	4603      	mov	r3, r0
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d001      	beq.n	80039bc <BSP_QSPI_Read+0x68>
  {
    return QSPI_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e00b      	b.n	80039d4 <BSP_QSPI_Read+0x80>
  }
  
  /* Reception of the data */
  if (HAL_QSPI_Receive(&QSPIHandle, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80039bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80039c0:	68f9      	ldr	r1, [r7, #12]
 80039c2:	4806      	ldr	r0, [pc, #24]	; (80039dc <BSP_QSPI_Read+0x88>)
 80039c4:	f7fd ff63 	bl	800188e <HAL_QSPI_Receive>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d001      	beq.n	80039d2 <BSP_QSPI_Read+0x7e>
  {
    return QSPI_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e000      	b.n	80039d4 <BSP_QSPI_Read+0x80>
  }

  return QSPI_OK;
 80039d2:	2300      	movs	r3, #0
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3748      	adds	r7, #72	; 0x48
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}
 80039dc:	20004fac 	.word	0x20004fac

080039e0 <BSP_QSPI_Write>:
  * @param  WriteAddr : Write start address
  * @param  Size      : Size of data to write    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Write(uint8_t* pData, uint32_t WriteAddr, uint32_t Size)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b096      	sub	sp, #88	; 0x58
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	60f8      	str	r0, [r7, #12]
 80039e8:	60b9      	str	r1, [r7, #8]
 80039ea:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef sCommand;
  uint32_t end_addr, current_size, current_addr;

  /* Calculation of the size between the write address and the end of the page */
  current_size = MX25R6435F_PAGE_SIZE - (WriteAddr % MX25R6435F_PAGE_SIZE);
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80039f4:	657b      	str	r3, [r7, #84]	; 0x54

  /* Check if the size of the data is less than the remaining place in the page */
  if (current_size > Size)
 80039f6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d901      	bls.n	8003a02 <BSP_QSPI_Write+0x22>
  {
    current_size = Size;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	657b      	str	r3, [r7, #84]	; 0x54
  }

  /* Initialize the adress variables */
  current_addr = WriteAddr;
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	653b      	str	r3, [r7, #80]	; 0x50
  end_addr = WriteAddr + Size;
 8003a06:	68ba      	ldr	r2, [r7, #8]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	4413      	add	r3, r2
 8003a0c:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Initialize the program command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003a0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a12:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.Instruction       = QUAD_PAGE_PROG_CMD;
 8003a14:	2338      	movs	r3, #56	; 0x38
 8003a16:	617b      	str	r3, [r7, #20]
  sCommand.AddressMode       = QSPI_ADDRESS_4_LINES;
 8003a18:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003a1c:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AddressSize       = QSPI_ADDRESS_24_BITS;
 8003a1e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003a22:	623b      	str	r3, [r7, #32]
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003a24:	2300      	movs	r3, #0
 8003a26:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DataMode          = QSPI_DATA_4_LINES;
 8003a28:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8003a2c:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DummyCycles       = 0;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003a32:	2300      	movs	r3, #0
 8003a34:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003a36:	2300      	movs	r3, #0
 8003a38:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	64bb      	str	r3, [r7, #72]	; 0x48
  
  /* Perform the write page by page */
  do
  {
    sCommand.Address = current_addr;
 8003a3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a40:	61bb      	str	r3, [r7, #24]
    sCommand.NbData  = current_size;
 8003a42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a44:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Enable write operations */
    if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 8003a46:	4824      	ldr	r0, [pc, #144]	; (8003ad8 <BSP_QSPI_Write+0xf8>)
 8003a48:	f000 f910 	bl	8003c6c <QSPI_WriteEnable>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d001      	beq.n	8003a56 <BSP_QSPI_Write+0x76>
    {
      return QSPI_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e03b      	b.n	8003ace <BSP_QSPI_Write+0xee>
    }
    
    /* Configure the command */
    if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003a56:	f107 0314 	add.w	r3, r7, #20
 8003a5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a5e:	4619      	mov	r1, r3
 8003a60:	481d      	ldr	r0, [pc, #116]	; (8003ad8 <BSP_QSPI_Write+0xf8>)
 8003a62:	f7fd fe1f 	bl	80016a4 <HAL_QSPI_Command>
 8003a66:	4603      	mov	r3, r0
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d001      	beq.n	8003a70 <BSP_QSPI_Write+0x90>
    {
      return QSPI_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e02e      	b.n	8003ace <BSP_QSPI_Write+0xee>
    }
    
    /* Transmission of the data */
    if (HAL_QSPI_Transmit(&QSPIHandle, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003a70:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a74:	68f9      	ldr	r1, [r7, #12]
 8003a76:	4818      	ldr	r0, [pc, #96]	; (8003ad8 <BSP_QSPI_Write+0xf8>)
 8003a78:	f7fd fe72 	bl	8001760 <HAL_QSPI_Transmit>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d001      	beq.n	8003a86 <BSP_QSPI_Write+0xa6>
    {
      return QSPI_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e023      	b.n	8003ace <BSP_QSPI_Write+0xee>
    }
    
    /* Configure automatic polling mode to wait for end of program */  
    if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8003a86:	f241 3188 	movw	r1, #5000	; 0x1388
 8003a8a:	4813      	ldr	r0, [pc, #76]	; (8003ad8 <BSP_QSPI_Write+0xf8>)
 8003a8c:	f000 f93a 	bl	8003d04 <QSPI_AutoPollingMemReady>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d001      	beq.n	8003a9a <BSP_QSPI_Write+0xba>
    {
      return QSPI_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e019      	b.n	8003ace <BSP_QSPI_Write+0xee>
    }
    
    /* Update the address and size variables for next page programming */
    current_addr += current_size;
 8003a9a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003a9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a9e:	4413      	add	r3, r2
 8003aa0:	653b      	str	r3, [r7, #80]	; 0x50
    pData += current_size;
 8003aa2:	68fa      	ldr	r2, [r7, #12]
 8003aa4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003aa6:	4413      	add	r3, r2
 8003aa8:	60fb      	str	r3, [r7, #12]
    current_size = ((current_addr + MX25R6435F_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : MX25R6435F_PAGE_SIZE;
 8003aaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003aac:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003ab0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d203      	bcs.n	8003abe <BSP_QSPI_Write+0xde>
 8003ab6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003ab8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003aba:	1ad3      	subs	r3, r2, r3
 8003abc:	e001      	b.n	8003ac2 <BSP_QSPI_Write+0xe2>
 8003abe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ac2:	657b      	str	r3, [r7, #84]	; 0x54
  } while (current_addr < end_addr);
 8003ac4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003ac6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d3b8      	bcc.n	8003a3e <BSP_QSPI_Write+0x5e>
  
  return QSPI_OK;
 8003acc:	2300      	movs	r3, #0
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3758      	adds	r7, #88	; 0x58
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	20004fac 	.word	0x20004fac

08003adc <BSP_QSPI_Erase_Block>:
  * @brief  Erases the specified block of the QSPI memory. 
  * @param  BlockAddress : Block address to erase  
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Erase_Block(uint32_t BlockAddress)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b090      	sub	sp, #64	; 0x40
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef sCommand;

  /* Initialize the erase command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003ae4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ae8:	623b      	str	r3, [r7, #32]
  sCommand.Instruction       = BLOCK_ERASE_CMD;
 8003aea:	23d8      	movs	r3, #216	; 0xd8
 8003aec:	60bb      	str	r3, [r7, #8]
  sCommand.AddressMode       = QSPI_ADDRESS_1_LINE;
 8003aee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003af2:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressSize       = QSPI_ADDRESS_24_BITS;
 8003af4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003af8:	617b      	str	r3, [r7, #20]
  sCommand.Address           = BlockAddress;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	60fb      	str	r3, [r7, #12]
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003afe:	2300      	movs	r3, #0
 8003b00:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DataMode          = QSPI_DATA_NONE;
 8003b02:	2300      	movs	r3, #0
 8003b04:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.DummyCycles       = 0;
 8003b06:	2300      	movs	r3, #0
 8003b08:	61fb      	str	r3, [r7, #28]
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003b12:	2300      	movs	r3, #0
 8003b14:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Enable write operations */
  if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 8003b16:	4812      	ldr	r0, [pc, #72]	; (8003b60 <BSP_QSPI_Erase_Block+0x84>)
 8003b18:	f000 f8a8 	bl	8003c6c <QSPI_WriteEnable>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d001      	beq.n	8003b26 <BSP_QSPI_Erase_Block+0x4a>
  {
    return QSPI_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e017      	b.n	8003b56 <BSP_QSPI_Erase_Block+0x7a>
  }

  /* Send the command */
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003b26:	f107 0308 	add.w	r3, r7, #8
 8003b2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b2e:	4619      	mov	r1, r3
 8003b30:	480b      	ldr	r0, [pc, #44]	; (8003b60 <BSP_QSPI_Erase_Block+0x84>)
 8003b32:	f7fd fdb7 	bl	80016a4 <HAL_QSPI_Command>
 8003b36:	4603      	mov	r3, r0
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d001      	beq.n	8003b40 <BSP_QSPI_Erase_Block+0x64>
  {
    return QSPI_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e00a      	b.n	8003b56 <BSP_QSPI_Erase_Block+0x7a>
  }
  
  /* Configure automatic polling mode to wait for end of erase */  
  if (QSPI_AutoPollingMemReady(&QSPIHandle, MX25R6435F_BLOCK_ERASE_MAX_TIME) != QSPI_OK)
 8003b40:	f640 51ac 	movw	r1, #3500	; 0xdac
 8003b44:	4806      	ldr	r0, [pc, #24]	; (8003b60 <BSP_QSPI_Erase_Block+0x84>)
 8003b46:	f000 f8dd 	bl	8003d04 <QSPI_AutoPollingMemReady>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d001      	beq.n	8003b54 <BSP_QSPI_Erase_Block+0x78>
  {
    return QSPI_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	e000      	b.n	8003b56 <BSP_QSPI_Erase_Block+0x7a>
  }

  return QSPI_OK;
 8003b54:	2300      	movs	r3, #0
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3740      	adds	r7, #64	; 0x40
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	20004fac 	.word	0x20004fac

08003b64 <BSP_QSPI_MspInit>:
/**
  * @brief  Initializes the QSPI MSP.
  * @retval None
  */
__weak void BSP_QSPI_MspInit(void)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b088      	sub	sp, #32
 8003b68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the QuadSPI memory interface clock */
  __HAL_RCC_QSPI_CLK_ENABLE();
 8003b6a:	4b1c      	ldr	r3, [pc, #112]	; (8003bdc <BSP_QSPI_MspInit+0x78>)
 8003b6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b6e:	4a1b      	ldr	r2, [pc, #108]	; (8003bdc <BSP_QSPI_MspInit+0x78>)
 8003b70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b74:	6513      	str	r3, [r2, #80]	; 0x50
 8003b76:	4b19      	ldr	r3, [pc, #100]	; (8003bdc <BSP_QSPI_MspInit+0x78>)
 8003b78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b7e:	60bb      	str	r3, [r7, #8]
 8003b80:	68bb      	ldr	r3, [r7, #8]

  /* Reset the QuadSPI memory interface */
  __HAL_RCC_QSPI_FORCE_RESET();
 8003b82:	4b16      	ldr	r3, [pc, #88]	; (8003bdc <BSP_QSPI_MspInit+0x78>)
 8003b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b86:	4a15      	ldr	r2, [pc, #84]	; (8003bdc <BSP_QSPI_MspInit+0x78>)
 8003b88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b8c:	6313      	str	r3, [r2, #48]	; 0x30
  __HAL_RCC_QSPI_RELEASE_RESET();
 8003b8e:	4b13      	ldr	r3, [pc, #76]	; (8003bdc <BSP_QSPI_MspInit+0x78>)
 8003b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b92:	4a12      	ldr	r2, [pc, #72]	; (8003bdc <BSP_QSPI_MspInit+0x78>)
 8003b94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b98:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable GPIO clocks */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003b9a:	4b10      	ldr	r3, [pc, #64]	; (8003bdc <BSP_QSPI_MspInit+0x78>)
 8003b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b9e:	4a0f      	ldr	r2, [pc, #60]	; (8003bdc <BSP_QSPI_MspInit+0x78>)
 8003ba0:	f043 0310 	orr.w	r3, r3, #16
 8003ba4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003ba6:	4b0d      	ldr	r3, [pc, #52]	; (8003bdc <BSP_QSPI_MspInit+0x78>)
 8003ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003baa:	f003 0310 	and.w	r3, r3, #16
 8003bae:	607b      	str	r3, [r7, #4]
 8003bb0:	687b      	ldr	r3, [r7, #4]

  /* QSPI CLK, CS, D0, D1, D2 and D3 GPIO pins configuration  */
  GPIO_InitStruct.Pin       = GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 |\
 8003bb2:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8003bb6:	60fb      	str	r3, [r7, #12]
                              GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8003bb8:	2302      	movs	r3, #2
 8003bba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8003bc4:	230a      	movs	r3, #10
 8003bc6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003bc8:	f107 030c 	add.w	r3, r7, #12
 8003bcc:	4619      	mov	r1, r3
 8003bce:	4804      	ldr	r0, [pc, #16]	; (8003be0 <BSP_QSPI_MspInit+0x7c>)
 8003bd0:	f7fd f9b6 	bl	8000f40 <HAL_GPIO_Init>
}
 8003bd4:	bf00      	nop
 8003bd6:	3720      	adds	r7, #32
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}
 8003bdc:	40021000 	.word	0x40021000
 8003be0:	48001000 	.word	0x48001000

08003be4 <QSPI_ResetMemory>:
  * @brief  This function reset the QSPI memory.
  * @param  hqspi : QSPI handle
  * @retval None
  */
static uint8_t QSPI_ResetMemory(QSPI_HandleTypeDef *hqspi)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b090      	sub	sp, #64	; 0x40
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef sCommand;

  /* Initialize the reset enable command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003bec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003bf0:	623b      	str	r3, [r7, #32]
  sCommand.Instruction       = RESET_ENABLE_CMD;
 8003bf2:	2366      	movs	r3, #102	; 0x66
 8003bf4:	60bb      	str	r3, [r7, #8]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DataMode          = QSPI_DATA_NONE;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.DummyCycles       = 0;
 8003c02:	2300      	movs	r3, #0
 8003c04:	61fb      	str	r3, [r7, #28]
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003c06:	2300      	movs	r3, #0
 8003c08:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003c12:	f107 0308 	add.w	r3, r7, #8
 8003c16:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	4812      	ldr	r0, [pc, #72]	; (8003c68 <QSPI_ResetMemory+0x84>)
 8003c1e:	f7fd fd41 	bl	80016a4 <HAL_QSPI_Command>
 8003c22:	4603      	mov	r3, r0
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d001      	beq.n	8003c2c <QSPI_ResetMemory+0x48>
  {
    return QSPI_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e019      	b.n	8003c60 <QSPI_ResetMemory+0x7c>
  }

  /* Send the reset memory command */
  sCommand.Instruction = RESET_MEMORY_CMD;
 8003c2c:	2399      	movs	r3, #153	; 0x99
 8003c2e:	60bb      	str	r3, [r7, #8]
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003c30:	f107 0308 	add.w	r3, r7, #8
 8003c34:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c38:	4619      	mov	r1, r3
 8003c3a:	480b      	ldr	r0, [pc, #44]	; (8003c68 <QSPI_ResetMemory+0x84>)
 8003c3c:	f7fd fd32 	bl	80016a4 <HAL_QSPI_Command>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d001      	beq.n	8003c4a <QSPI_ResetMemory+0x66>
  {
    return QSPI_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e00a      	b.n	8003c60 <QSPI_ResetMemory+0x7c>
  }

  /* Configure automatic polling mode to wait the memory is ready */  
  if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8003c4a:	f241 3188 	movw	r1, #5000	; 0x1388
 8003c4e:	4806      	ldr	r0, [pc, #24]	; (8003c68 <QSPI_ResetMemory+0x84>)
 8003c50:	f000 f858 	bl	8003d04 <QSPI_AutoPollingMemReady>
 8003c54:	4603      	mov	r3, r0
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d001      	beq.n	8003c5e <QSPI_ResetMemory+0x7a>
  {
    return QSPI_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e000      	b.n	8003c60 <QSPI_ResetMemory+0x7c>
  }

  return QSPI_OK;
 8003c5e:	2300      	movs	r3, #0
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3740      	adds	r7, #64	; 0x40
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	20004fac 	.word	0x20004fac

08003c6c <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hqspi : QSPI handle
  * @retval None
  */
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b096      	sub	sp, #88	; 0x58
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef     sCommand;
  QSPI_AutoPollingTypeDef sConfig;

  /* Enable write operations */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003c74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c78:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.Instruction       = WRITE_ENABLE_CMD;
 8003c7a:	2306      	movs	r3, #6
 8003c7c:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003c82:	2300      	movs	r3, #0
 8003c84:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DataMode          = QSPI_DATA_NONE;
 8003c86:	2300      	movs	r3, #0
 8003c88:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DummyCycles       = 0;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003c92:	2300      	movs	r3, #0
 8003c94:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003c96:	2300      	movs	r3, #0
 8003c98:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003c9a:	f107 0320 	add.w	r3, r7, #32
 8003c9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ca2:	4619      	mov	r1, r3
 8003ca4:	4816      	ldr	r0, [pc, #88]	; (8003d00 <QSPI_WriteEnable+0x94>)
 8003ca6:	f7fd fcfd 	bl	80016a4 <HAL_QSPI_Command>
 8003caa:	4603      	mov	r3, r0
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d001      	beq.n	8003cb4 <QSPI_WriteEnable+0x48>
  {
    return QSPI_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e020      	b.n	8003cf6 <QSPI_WriteEnable+0x8a>
  }
  
  /* Configure automatic polling mode to wait for write enabling */  
  sConfig.Match           = MX25R6435F_SR_WEL;
 8003cb4:	2302      	movs	r3, #2
 8003cb6:	60bb      	str	r3, [r7, #8]
  sConfig.Mask            = MX25R6435F_SR_WEL;
 8003cb8:	2302      	movs	r3, #2
 8003cba:	60fb      	str	r3, [r7, #12]
  sConfig.MatchMode       = QSPI_MATCH_MODE_AND;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	61bb      	str	r3, [r7, #24]
  sConfig.StatusBytesSize = 1;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	617b      	str	r3, [r7, #20]
  sConfig.Interval        = 0x10;
 8003cc4:	2310      	movs	r3, #16
 8003cc6:	613b      	str	r3, [r7, #16]
  sConfig.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8003cc8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003ccc:	61fb      	str	r3, [r7, #28]

  sCommand.Instruction    = READ_STATUS_REG_CMD;
 8003cce:	2305      	movs	r3, #5
 8003cd0:	623b      	str	r3, [r7, #32]
  sCommand.DataMode       = QSPI_DATA_1_LINE;
 8003cd2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003cd6:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_AutoPolling(&QSPIHandle, &sCommand, &sConfig, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003cd8:	f107 0208 	add.w	r2, r7, #8
 8003cdc:	f107 0120 	add.w	r1, r7, #32
 8003ce0:	f241 3388 	movw	r3, #5000	; 0x1388
 8003ce4:	4806      	ldr	r0, [pc, #24]	; (8003d00 <QSPI_WriteEnable+0x94>)
 8003ce6:	f7fd fe74 	bl	80019d2 <HAL_QSPI_AutoPolling>
 8003cea:	4603      	mov	r3, r0
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d001      	beq.n	8003cf4 <QSPI_WriteEnable+0x88>
  {
    return QSPI_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e000      	b.n	8003cf6 <QSPI_WriteEnable+0x8a>
  }

  return QSPI_OK;
 8003cf4:	2300      	movs	r3, #0
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3758      	adds	r7, #88	; 0x58
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	20004fac 	.word	0x20004fac

08003d04 <QSPI_AutoPollingMemReady>:
  * @param  hqspi   : QSPI handle
  * @param  Timeout : Timeout for auto-polling
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b096      	sub	sp, #88	; 0x58
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	6039      	str	r1, [r7, #0]
  QSPI_CommandTypeDef     sCommand;
  QSPI_AutoPollingTypeDef sConfig;

  /* Configure automatic polling mode to wait for memory ready */  
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003d0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d12:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.Instruction       = READ_STATUS_REG_CMD;
 8003d14:	2305      	movs	r3, #5
 8003d16:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 8003d20:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d24:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DummyCycles       = 0;
 8003d26:	2300      	movs	r3, #0
 8003d28:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003d32:	2300      	movs	r3, #0
 8003d34:	657b      	str	r3, [r7, #84]	; 0x54

  sConfig.Match           = 0;
 8003d36:	2300      	movs	r3, #0
 8003d38:	60bb      	str	r3, [r7, #8]
  sConfig.Mask            = MX25R6435F_SR_WIP;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	60fb      	str	r3, [r7, #12]
  sConfig.MatchMode       = QSPI_MATCH_MODE_AND;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	61bb      	str	r3, [r7, #24]
  sConfig.StatusBytesSize = 1;
 8003d42:	2301      	movs	r3, #1
 8003d44:	617b      	str	r3, [r7, #20]
  sConfig.Interval        = 0x10;
 8003d46:	2310      	movs	r3, #16
 8003d48:	613b      	str	r3, [r7, #16]
  sConfig.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8003d4a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003d4e:	61fb      	str	r3, [r7, #28]

  if (HAL_QSPI_AutoPolling(&QSPIHandle, &sCommand, &sConfig, Timeout) != HAL_OK)
 8003d50:	f107 0208 	add.w	r2, r7, #8
 8003d54:	f107 0120 	add.w	r1, r7, #32
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	4806      	ldr	r0, [pc, #24]	; (8003d74 <QSPI_AutoPollingMemReady+0x70>)
 8003d5c:	f7fd fe39 	bl	80019d2 <HAL_QSPI_AutoPolling>
 8003d60:	4603      	mov	r3, r0
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d001      	beq.n	8003d6a <QSPI_AutoPollingMemReady+0x66>
  {
    return QSPI_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e000      	b.n	8003d6c <QSPI_AutoPollingMemReady+0x68>
  }

  return QSPI_OK;
 8003d6a:	2300      	movs	r3, #0
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	3758      	adds	r7, #88	; 0x58
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}
 8003d74:	20004fac 	.word	0x20004fac

08003d78 <QSPI_QuadMode>:
  * @param  hqspi     : QSPI handle
  * @param  Operation : QSPI_QUAD_ENABLE or QSPI_QUAD_DISABLE mode  
  * @retval None
  */
static uint8_t QSPI_QuadMode(QSPI_HandleTypeDef *hqspi, uint8_t Operation)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b092      	sub	sp, #72	; 0x48
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	460b      	mov	r3, r1
 8003d82:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef sCommand;
  uint8_t reg;

  /* Read status register */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003d84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d88:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.Instruction       = READ_STATUS_REG_CMD;
 8003d8a:	2305      	movs	r3, #5
 8003d8c:	613b      	str	r3, [r7, #16]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003d92:	2300      	movs	r3, #0
 8003d94:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 8003d96:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d9a:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DummyCycles       = 0;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.NbData            = 1;
 8003da0:	2301      	movs	r3, #1
 8003da2:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003da4:	2300      	movs	r3, #0
 8003da6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003da8:	2300      	movs	r3, #0
 8003daa:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003dac:	2300      	movs	r3, #0
 8003dae:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003db0:	f107 0310 	add.w	r3, r7, #16
 8003db4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003db8:	4619      	mov	r1, r3
 8003dba:	4842      	ldr	r0, [pc, #264]	; (8003ec4 <QSPI_QuadMode+0x14c>)
 8003dbc:	f7fd fc72 	bl	80016a4 <HAL_QSPI_Command>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d001      	beq.n	8003dca <QSPI_QuadMode+0x52>
  {
    return QSPI_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e077      	b.n	8003eba <QSPI_QuadMode+0x142>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003dca:	f107 030f 	add.w	r3, r7, #15
 8003dce:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dd2:	4619      	mov	r1, r3
 8003dd4:	483b      	ldr	r0, [pc, #236]	; (8003ec4 <QSPI_QuadMode+0x14c>)
 8003dd6:	f7fd fd5a 	bl	800188e <HAL_QSPI_Receive>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d001      	beq.n	8003de4 <QSPI_QuadMode+0x6c>
  {
    return QSPI_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	e06a      	b.n	8003eba <QSPI_QuadMode+0x142>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 8003de4:	4837      	ldr	r0, [pc, #220]	; (8003ec4 <QSPI_QuadMode+0x14c>)
 8003de6:	f7ff ff41 	bl	8003c6c <QSPI_WriteEnable>
 8003dea:	4603      	mov	r3, r0
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d001      	beq.n	8003df4 <QSPI_QuadMode+0x7c>
  {
    return QSPI_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e062      	b.n	8003eba <QSPI_QuadMode+0x142>
  }
  
  /* Activate/deactivate the Quad mode */
  if (Operation == QSPI_QUAD_ENABLE)
 8003df4:	78fb      	ldrb	r3, [r7, #3]
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d105      	bne.n	8003e06 <QSPI_QuadMode+0x8e>
  {
    SET_BIT(reg, MX25R6435F_SR_QE);
 8003dfa:	7bfb      	ldrb	r3, [r7, #15]
 8003dfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	73fb      	strb	r3, [r7, #15]
 8003e04:	e004      	b.n	8003e10 <QSPI_QuadMode+0x98>
  }
  else
  {
    CLEAR_BIT(reg, MX25R6435F_SR_QE);
 8003e06:	7bfb      	ldrb	r3, [r7, #15]
 8003e08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	73fb      	strb	r3, [r7, #15]
  }

  sCommand.Instruction = WRITE_STATUS_CFG_REG_CMD;
 8003e10:	2301      	movs	r3, #1
 8003e12:	613b      	str	r3, [r7, #16]

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003e14:	f107 0310 	add.w	r3, r7, #16
 8003e18:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	4829      	ldr	r0, [pc, #164]	; (8003ec4 <QSPI_QuadMode+0x14c>)
 8003e20:	f7fd fc40 	bl	80016a4 <HAL_QSPI_Command>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d001      	beq.n	8003e2e <QSPI_QuadMode+0xb6>
  {
    return QSPI_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e045      	b.n	8003eba <QSPI_QuadMode+0x142>
  }

  if (HAL_QSPI_Transmit(&QSPIHandle, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003e2e:	f107 030f 	add.w	r3, r7, #15
 8003e32:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e36:	4619      	mov	r1, r3
 8003e38:	4822      	ldr	r0, [pc, #136]	; (8003ec4 <QSPI_QuadMode+0x14c>)
 8003e3a:	f7fd fc91 	bl	8001760 <HAL_QSPI_Transmit>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d001      	beq.n	8003e48 <QSPI_QuadMode+0xd0>
  {
    return QSPI_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	e038      	b.n	8003eba <QSPI_QuadMode+0x142>
  }

  /* Wait that memory is ready */  
  if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8003e48:	f241 3188 	movw	r1, #5000	; 0x1388
 8003e4c:	481d      	ldr	r0, [pc, #116]	; (8003ec4 <QSPI_QuadMode+0x14c>)
 8003e4e:	f7ff ff59 	bl	8003d04 <QSPI_AutoPollingMemReady>
 8003e52:	4603      	mov	r3, r0
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d001      	beq.n	8003e5c <QSPI_QuadMode+0xe4>
  {
    return QSPI_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e02e      	b.n	8003eba <QSPI_QuadMode+0x142>
  }
  
  /* Check the configuration has been correctly done */
  sCommand.Instruction = READ_STATUS_REG_CMD;
 8003e5c:	2305      	movs	r3, #5
 8003e5e:	613b      	str	r3, [r7, #16]

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003e60:	f107 0310 	add.w	r3, r7, #16
 8003e64:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e68:	4619      	mov	r1, r3
 8003e6a:	4816      	ldr	r0, [pc, #88]	; (8003ec4 <QSPI_QuadMode+0x14c>)
 8003e6c:	f7fd fc1a 	bl	80016a4 <HAL_QSPI_Command>
 8003e70:	4603      	mov	r3, r0
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d001      	beq.n	8003e7a <QSPI_QuadMode+0x102>
  {
    return QSPI_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e01f      	b.n	8003eba <QSPI_QuadMode+0x142>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003e7a:	f107 030f 	add.w	r3, r7, #15
 8003e7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e82:	4619      	mov	r1, r3
 8003e84:	480f      	ldr	r0, [pc, #60]	; (8003ec4 <QSPI_QuadMode+0x14c>)
 8003e86:	f7fd fd02 	bl	800188e <HAL_QSPI_Receive>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d001      	beq.n	8003e94 <QSPI_QuadMode+0x11c>
  {
    return QSPI_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e012      	b.n	8003eba <QSPI_QuadMode+0x142>
  }
  
  if ((((reg & MX25R6435F_SR_QE) == 0) && (Operation == QSPI_QUAD_ENABLE)) ||
 8003e94:	7bfb      	ldrb	r3, [r7, #15]
 8003e96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d102      	bne.n	8003ea4 <QSPI_QuadMode+0x12c>
 8003e9e:	78fb      	ldrb	r3, [r7, #3]
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d007      	beq.n	8003eb4 <QSPI_QuadMode+0x13c>
      (((reg & MX25R6435F_SR_QE) != 0) && (Operation == QSPI_QUAD_DISABLE)))
 8003ea4:	7bfb      	ldrb	r3, [r7, #15]
 8003ea6:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((reg & MX25R6435F_SR_QE) == 0) && (Operation == QSPI_QUAD_ENABLE)) ||
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d004      	beq.n	8003eb8 <QSPI_QuadMode+0x140>
      (((reg & MX25R6435F_SR_QE) != 0) && (Operation == QSPI_QUAD_DISABLE)))
 8003eae:	78fb      	ldrb	r3, [r7, #3]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d101      	bne.n	8003eb8 <QSPI_QuadMode+0x140>
  {
    return QSPI_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e000      	b.n	8003eba <QSPI_QuadMode+0x142>
  }

  return QSPI_OK;
 8003eb8:	2300      	movs	r3, #0
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3748      	adds	r7, #72	; 0x48
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	bf00      	nop
 8003ec4:	20004fac 	.word	0x20004fac

08003ec8 <QSPI_HighPerfMode>:
  * @param  hqspi     : QSPI handle
  * @param  Operation : QSPI_HIGH_PERF_ENABLE or QSPI_HIGH_PERF_DISABLE high performance mode    
  * @retval None
  */
static uint8_t QSPI_HighPerfMode(QSPI_HandleTypeDef *hqspi, uint8_t Operation)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b092      	sub	sp, #72	; 0x48
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	460b      	mov	r3, r1
 8003ed2:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef sCommand;
  uint8_t reg[3];

  /* Read status register */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003ed4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ed8:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.Instruction       = READ_STATUS_REG_CMD;
 8003eda:	2305      	movs	r3, #5
 8003edc:	613b      	str	r3, [r7, #16]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 8003ee6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003eea:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DummyCycles       = 0;
 8003eec:	2300      	movs	r3, #0
 8003eee:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.NbData            = 1;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003efc:	2300      	movs	r3, #0
 8003efe:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003f00:	f107 0310 	add.w	r3, r7, #16
 8003f04:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f08:	4619      	mov	r1, r3
 8003f0a:	4853      	ldr	r0, [pc, #332]	; (8004058 <QSPI_HighPerfMode+0x190>)
 8003f0c:	f7fd fbca 	bl	80016a4 <HAL_QSPI_Command>
 8003f10:	4603      	mov	r3, r0
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d001      	beq.n	8003f1a <QSPI_HighPerfMode+0x52>
  {
    return QSPI_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e09a      	b.n	8004050 <QSPI_HighPerfMode+0x188>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003f1a:	f107 030c 	add.w	r3, r7, #12
 8003f1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f22:	4619      	mov	r1, r3
 8003f24:	484c      	ldr	r0, [pc, #304]	; (8004058 <QSPI_HighPerfMode+0x190>)
 8003f26:	f7fd fcb2 	bl	800188e <HAL_QSPI_Receive>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d001      	beq.n	8003f34 <QSPI_HighPerfMode+0x6c>
  {
    return QSPI_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e08d      	b.n	8004050 <QSPI_HighPerfMode+0x188>
  }

  /* Read configuration registers */
  sCommand.Instruction = READ_CFG_REG_CMD;
 8003f34:	2315      	movs	r3, #21
 8003f36:	613b      	str	r3, [r7, #16]
  sCommand.NbData      = 2;
 8003f38:	2302      	movs	r3, #2
 8003f3a:	63bb      	str	r3, [r7, #56]	; 0x38

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003f3c:	f107 0310 	add.w	r3, r7, #16
 8003f40:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f44:	4619      	mov	r1, r3
 8003f46:	4844      	ldr	r0, [pc, #272]	; (8004058 <QSPI_HighPerfMode+0x190>)
 8003f48:	f7fd fbac 	bl	80016a4 <HAL_QSPI_Command>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d001      	beq.n	8003f56 <QSPI_HighPerfMode+0x8e>
  {
    return QSPI_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e07c      	b.n	8004050 <QSPI_HighPerfMode+0x188>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &(reg[1]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003f56:	f107 030c 	add.w	r3, r7, #12
 8003f5a:	3301      	adds	r3, #1
 8003f5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f60:	4619      	mov	r1, r3
 8003f62:	483d      	ldr	r0, [pc, #244]	; (8004058 <QSPI_HighPerfMode+0x190>)
 8003f64:	f7fd fc93 	bl	800188e <HAL_QSPI_Receive>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d001      	beq.n	8003f72 <QSPI_HighPerfMode+0xaa>
  {
    return QSPI_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e06e      	b.n	8004050 <QSPI_HighPerfMode+0x188>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 8003f72:	4839      	ldr	r0, [pc, #228]	; (8004058 <QSPI_HighPerfMode+0x190>)
 8003f74:	f7ff fe7a 	bl	8003c6c <QSPI_WriteEnable>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d001      	beq.n	8003f82 <QSPI_HighPerfMode+0xba>
  {
    return QSPI_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e066      	b.n	8004050 <QSPI_HighPerfMode+0x188>
  }
  
  /* Activate/deactivate the Quad mode */
  if (Operation == QSPI_HIGH_PERF_ENABLE)
 8003f82:	78fb      	ldrb	r3, [r7, #3]
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d105      	bne.n	8003f94 <QSPI_HighPerfMode+0xcc>
  {
    SET_BIT(reg[2], MX25R6435F_CR2_LH_SWITCH);
 8003f88:	7bbb      	ldrb	r3, [r7, #14]
 8003f8a:	f043 0302 	orr.w	r3, r3, #2
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	73bb      	strb	r3, [r7, #14]
 8003f92:	e004      	b.n	8003f9e <QSPI_HighPerfMode+0xd6>
  }
  else
  {
    CLEAR_BIT(reg[2], MX25R6435F_CR2_LH_SWITCH);
 8003f94:	7bbb      	ldrb	r3, [r7, #14]
 8003f96:	f023 0302 	bic.w	r3, r3, #2
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	73bb      	strb	r3, [r7, #14]
  }

  sCommand.Instruction = WRITE_STATUS_CFG_REG_CMD;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	613b      	str	r3, [r7, #16]
  sCommand.NbData      = 3;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	63bb      	str	r3, [r7, #56]	; 0x38

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003fa6:	f107 0310 	add.w	r3, r7, #16
 8003faa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fae:	4619      	mov	r1, r3
 8003fb0:	4829      	ldr	r0, [pc, #164]	; (8004058 <QSPI_HighPerfMode+0x190>)
 8003fb2:	f7fd fb77 	bl	80016a4 <HAL_QSPI_Command>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d001      	beq.n	8003fc0 <QSPI_HighPerfMode+0xf8>
  {
    return QSPI_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e047      	b.n	8004050 <QSPI_HighPerfMode+0x188>
  }

  if (HAL_QSPI_Transmit(&QSPIHandle, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003fc0:	f107 030c 	add.w	r3, r7, #12
 8003fc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fc8:	4619      	mov	r1, r3
 8003fca:	4823      	ldr	r0, [pc, #140]	; (8004058 <QSPI_HighPerfMode+0x190>)
 8003fcc:	f7fd fbc8 	bl	8001760 <HAL_QSPI_Transmit>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d001      	beq.n	8003fda <QSPI_HighPerfMode+0x112>
  {
    return QSPI_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e03a      	b.n	8004050 <QSPI_HighPerfMode+0x188>
  }

  /* Wait that memory is ready */  
  if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8003fda:	f241 3188 	movw	r1, #5000	; 0x1388
 8003fde:	481e      	ldr	r0, [pc, #120]	; (8004058 <QSPI_HighPerfMode+0x190>)
 8003fe0:	f7ff fe90 	bl	8003d04 <QSPI_AutoPollingMemReady>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d001      	beq.n	8003fee <QSPI_HighPerfMode+0x126>
  {
    return QSPI_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e030      	b.n	8004050 <QSPI_HighPerfMode+0x188>
  }
  
  /* Check the configuration has been correctly done */
  sCommand.Instruction = READ_CFG_REG_CMD;
 8003fee:	2315      	movs	r3, #21
 8003ff0:	613b      	str	r3, [r7, #16]
  sCommand.NbData      = 2;
 8003ff2:	2302      	movs	r3, #2
 8003ff4:	63bb      	str	r3, [r7, #56]	; 0x38

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003ff6:	f107 0310 	add.w	r3, r7, #16
 8003ffa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ffe:	4619      	mov	r1, r3
 8004000:	4815      	ldr	r0, [pc, #84]	; (8004058 <QSPI_HighPerfMode+0x190>)
 8004002:	f7fd fb4f 	bl	80016a4 <HAL_QSPI_Command>
 8004006:	4603      	mov	r3, r0
 8004008:	2b00      	cmp	r3, #0
 800400a:	d001      	beq.n	8004010 <QSPI_HighPerfMode+0x148>
  {
    return QSPI_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	e01f      	b.n	8004050 <QSPI_HighPerfMode+0x188>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004010:	f107 030c 	add.w	r3, r7, #12
 8004014:	f241 3288 	movw	r2, #5000	; 0x1388
 8004018:	4619      	mov	r1, r3
 800401a:	480f      	ldr	r0, [pc, #60]	; (8004058 <QSPI_HighPerfMode+0x190>)
 800401c:	f7fd fc37 	bl	800188e <HAL_QSPI_Receive>
 8004020:	4603      	mov	r3, r0
 8004022:	2b00      	cmp	r3, #0
 8004024:	d001      	beq.n	800402a <QSPI_HighPerfMode+0x162>
  {
    return QSPI_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e012      	b.n	8004050 <QSPI_HighPerfMode+0x188>
  }
  
  if ((((reg[1] & MX25R6435F_CR2_LH_SWITCH) == 0) && (Operation == QSPI_HIGH_PERF_ENABLE)) ||
 800402a:	7b7b      	ldrb	r3, [r7, #13]
 800402c:	f003 0302 	and.w	r3, r3, #2
 8004030:	2b00      	cmp	r3, #0
 8004032:	d102      	bne.n	800403a <QSPI_HighPerfMode+0x172>
 8004034:	78fb      	ldrb	r3, [r7, #3]
 8004036:	2b01      	cmp	r3, #1
 8004038:	d007      	beq.n	800404a <QSPI_HighPerfMode+0x182>
      (((reg[1] & MX25R6435F_CR2_LH_SWITCH) != 0) && (Operation == QSPI_HIGH_PERF_DISABLE)))
 800403a:	7b7b      	ldrb	r3, [r7, #13]
 800403c:	f003 0302 	and.w	r3, r3, #2
  if ((((reg[1] & MX25R6435F_CR2_LH_SWITCH) == 0) && (Operation == QSPI_HIGH_PERF_ENABLE)) ||
 8004040:	2b00      	cmp	r3, #0
 8004042:	d004      	beq.n	800404e <QSPI_HighPerfMode+0x186>
      (((reg[1] & MX25R6435F_CR2_LH_SWITCH) != 0) && (Operation == QSPI_HIGH_PERF_DISABLE)))
 8004044:	78fb      	ldrb	r3, [r7, #3]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d101      	bne.n	800404e <QSPI_HighPerfMode+0x186>
  {
    return QSPI_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e000      	b.n	8004050 <QSPI_HighPerfMode+0x188>
  }

  return QSPI_OK;
 800404e:	2300      	movs	r3, #0
}
 8004050:	4618      	mov	r0, r3
 8004052:	3748      	adds	r7, #72	; 0x48
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}
 8004058:	20004fac 	.word	0x20004fac

0800405c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800405c:	b480      	push	{r7}
 800405e:	b083      	sub	sp, #12
 8004060:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004062:	4b0f      	ldr	r3, [pc, #60]	; (80040a0 <HAL_MspInit+0x44>)
 8004064:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004066:	4a0e      	ldr	r2, [pc, #56]	; (80040a0 <HAL_MspInit+0x44>)
 8004068:	f043 0301 	orr.w	r3, r3, #1
 800406c:	6613      	str	r3, [r2, #96]	; 0x60
 800406e:	4b0c      	ldr	r3, [pc, #48]	; (80040a0 <HAL_MspInit+0x44>)
 8004070:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004072:	f003 0301 	and.w	r3, r3, #1
 8004076:	607b      	str	r3, [r7, #4]
 8004078:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800407a:	4b09      	ldr	r3, [pc, #36]	; (80040a0 <HAL_MspInit+0x44>)
 800407c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800407e:	4a08      	ldr	r2, [pc, #32]	; (80040a0 <HAL_MspInit+0x44>)
 8004080:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004084:	6593      	str	r3, [r2, #88]	; 0x58
 8004086:	4b06      	ldr	r3, [pc, #24]	; (80040a0 <HAL_MspInit+0x44>)
 8004088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800408a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800408e:	603b      	str	r3, [r7, #0]
 8004090:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004092:	bf00      	nop
 8004094:	370c      	adds	r7, #12
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr
 800409e:	bf00      	nop
 80040a0:	40021000 	.word	0x40021000

080040a4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b08a      	sub	sp, #40	; 0x28
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040ac:	f107 0314 	add.w	r3, r7, #20
 80040b0:	2200      	movs	r2, #0
 80040b2:	601a      	str	r2, [r3, #0]
 80040b4:	605a      	str	r2, [r3, #4]
 80040b6:	609a      	str	r2, [r3, #8]
 80040b8:	60da      	str	r2, [r3, #12]
 80040ba:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a2a      	ldr	r2, [pc, #168]	; (800416c <HAL_DAC_MspInit+0xc8>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d14d      	bne.n	8004162 <HAL_DAC_MspInit+0xbe>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80040c6:	4b2a      	ldr	r3, [pc, #168]	; (8004170 <HAL_DAC_MspInit+0xcc>)
 80040c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ca:	4a29      	ldr	r2, [pc, #164]	; (8004170 <HAL_DAC_MspInit+0xcc>)
 80040cc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80040d0:	6593      	str	r3, [r2, #88]	; 0x58
 80040d2:	4b27      	ldr	r3, [pc, #156]	; (8004170 <HAL_DAC_MspInit+0xcc>)
 80040d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040da:	613b      	str	r3, [r7, #16]
 80040dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040de:	4b24      	ldr	r3, [pc, #144]	; (8004170 <HAL_DAC_MspInit+0xcc>)
 80040e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040e2:	4a23      	ldr	r2, [pc, #140]	; (8004170 <HAL_DAC_MspInit+0xcc>)
 80040e4:	f043 0301 	orr.w	r3, r3, #1
 80040e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80040ea:	4b21      	ldr	r3, [pc, #132]	; (8004170 <HAL_DAC_MspInit+0xcc>)
 80040ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040ee:	f003 0301 	and.w	r3, r3, #1
 80040f2:	60fb      	str	r3, [r7, #12]
 80040f4:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80040f6:	2310      	movs	r3, #16
 80040f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80040fa:	2303      	movs	r3, #3
 80040fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040fe:	2300      	movs	r3, #0
 8004100:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004102:	f107 0314 	add.w	r3, r7, #20
 8004106:	4619      	mov	r1, r3
 8004108:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800410c:	f7fc ff18 	bl	8000f40 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 8004110:	4b18      	ldr	r3, [pc, #96]	; (8004174 <HAL_DAC_MspInit+0xd0>)
 8004112:	4a19      	ldr	r2, [pc, #100]	; (8004178 <HAL_DAC_MspInit+0xd4>)
 8004114:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 8004116:	4b17      	ldr	r3, [pc, #92]	; (8004174 <HAL_DAC_MspInit+0xd0>)
 8004118:	2206      	movs	r2, #6
 800411a:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800411c:	4b15      	ldr	r3, [pc, #84]	; (8004174 <HAL_DAC_MspInit+0xd0>)
 800411e:	2210      	movs	r2, #16
 8004120:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004122:	4b14      	ldr	r3, [pc, #80]	; (8004174 <HAL_DAC_MspInit+0xd0>)
 8004124:	2200      	movs	r2, #0
 8004126:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8004128:	4b12      	ldr	r3, [pc, #72]	; (8004174 <HAL_DAC_MspInit+0xd0>)
 800412a:	2280      	movs	r2, #128	; 0x80
 800412c:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800412e:	4b11      	ldr	r3, [pc, #68]	; (8004174 <HAL_DAC_MspInit+0xd0>)
 8004130:	2200      	movs	r2, #0
 8004132:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004134:	4b0f      	ldr	r3, [pc, #60]	; (8004174 <HAL_DAC_MspInit+0xd0>)
 8004136:	2200      	movs	r2, #0
 8004138:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_NORMAL;
 800413a:	4b0e      	ldr	r3, [pc, #56]	; (8004174 <HAL_DAC_MspInit+0xd0>)
 800413c:	2200      	movs	r2, #0
 800413e:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8004140:	4b0c      	ldr	r3, [pc, #48]	; (8004174 <HAL_DAC_MspInit+0xd0>)
 8004142:	2200      	movs	r2, #0
 8004144:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8004146:	480b      	ldr	r0, [pc, #44]	; (8004174 <HAL_DAC_MspInit+0xd0>)
 8004148:	f7fc fcc4 	bl	8000ad4 <HAL_DMA_Init>
 800414c:	4603      	mov	r3, r0
 800414e:	2b00      	cmp	r3, #0
 8004150:	d001      	beq.n	8004156 <HAL_DAC_MspInit+0xb2>
    {
      Error_Handler();
 8004152:	f7ff fb8b 	bl	800386c <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a06      	ldr	r2, [pc, #24]	; (8004174 <HAL_DAC_MspInit+0xd0>)
 800415a:	609a      	str	r2, [r3, #8]
 800415c:	4a05      	ldr	r2, [pc, #20]	; (8004174 <HAL_DAC_MspInit+0xd0>)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8004162:	bf00      	nop
 8004164:	3728      	adds	r7, #40	; 0x28
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
 800416a:	bf00      	nop
 800416c:	40007400 	.word	0x40007400
 8004170:	40021000 	.word	0x40021000
 8004174:	200000b0 	.word	0x200000b0
 8004178:	40020030 	.word	0x40020030

0800417c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b08a      	sub	sp, #40	; 0x28
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004184:	f107 0314 	add.w	r3, r7, #20
 8004188:	2200      	movs	r2, #0
 800418a:	601a      	str	r2, [r3, #0]
 800418c:	605a      	str	r2, [r3, #4]
 800418e:	609a      	str	r2, [r3, #8]
 8004190:	60da      	str	r2, [r3, #12]
 8004192:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a17      	ldr	r2, [pc, #92]	; (80041f8 <HAL_QSPI_MspInit+0x7c>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d128      	bne.n	80041f0 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800419e:	4b17      	ldr	r3, [pc, #92]	; (80041fc <HAL_QSPI_MspInit+0x80>)
 80041a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041a2:	4a16      	ldr	r2, [pc, #88]	; (80041fc <HAL_QSPI_MspInit+0x80>)
 80041a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041a8:	6513      	str	r3, [r2, #80]	; 0x50
 80041aa:	4b14      	ldr	r3, [pc, #80]	; (80041fc <HAL_QSPI_MspInit+0x80>)
 80041ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041b2:	613b      	str	r3, [r7, #16]
 80041b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80041b6:	4b11      	ldr	r3, [pc, #68]	; (80041fc <HAL_QSPI_MspInit+0x80>)
 80041b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041ba:	4a10      	ldr	r2, [pc, #64]	; (80041fc <HAL_QSPI_MspInit+0x80>)
 80041bc:	f043 0310 	orr.w	r3, r3, #16
 80041c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80041c2:	4b0e      	ldr	r3, [pc, #56]	; (80041fc <HAL_QSPI_MspInit+0x80>)
 80041c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041c6:	f003 0310 	and.w	r3, r3, #16
 80041ca:	60fb      	str	r3, [r7, #12]
 80041cc:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 80041ce:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80041d2:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041d4:	2302      	movs	r3, #2
 80041d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041d8:	2300      	movs	r3, #0
 80041da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041dc:	2303      	movs	r3, #3
 80041de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80041e0:	230a      	movs	r3, #10
 80041e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80041e4:	f107 0314 	add.w	r3, r7, #20
 80041e8:	4619      	mov	r1, r3
 80041ea:	4805      	ldr	r0, [pc, #20]	; (8004200 <HAL_QSPI_MspInit+0x84>)
 80041ec:	f7fc fea8 	bl	8000f40 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80041f0:	bf00      	nop
 80041f2:	3728      	adds	r7, #40	; 0x28
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}
 80041f8:	a0001000 	.word	0xa0001000
 80041fc:	40021000 	.word	0x40021000
 8004200:	48001000 	.word	0x48001000

08004204 <HAL_QSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* hqspi)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b082      	sub	sp, #8
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  if(hqspi->Instance==QUADSPI)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a08      	ldr	r2, [pc, #32]	; (8004234 <HAL_QSPI_MspDeInit+0x30>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d10a      	bne.n	800422c <HAL_QSPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 8004216:	4b08      	ldr	r3, [pc, #32]	; (8004238 <HAL_QSPI_MspDeInit+0x34>)
 8004218:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800421a:	4a07      	ldr	r2, [pc, #28]	; (8004238 <HAL_QSPI_MspDeInit+0x34>)
 800421c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004220:	6513      	str	r3, [r2, #80]	; 0x50
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8004222:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 8004226:	4805      	ldr	r0, [pc, #20]	; (800423c <HAL_QSPI_MspDeInit+0x38>)
 8004228:	f7fd f832 	bl	8001290 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }

}
 800422c:	bf00      	nop
 800422e:	3708      	adds	r7, #8
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}
 8004234:	a0001000 	.word	0xa0001000
 8004238:	40021000 	.word	0x40021000
 800423c:	48001000 	.word	0x48001000

08004240 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b084      	sub	sp, #16
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004250:	d113      	bne.n	800427a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004252:	4b0c      	ldr	r3, [pc, #48]	; (8004284 <HAL_TIM_Base_MspInit+0x44>)
 8004254:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004256:	4a0b      	ldr	r2, [pc, #44]	; (8004284 <HAL_TIM_Base_MspInit+0x44>)
 8004258:	f043 0301 	orr.w	r3, r3, #1
 800425c:	6593      	str	r3, [r2, #88]	; 0x58
 800425e:	4b09      	ldr	r3, [pc, #36]	; (8004284 <HAL_TIM_Base_MspInit+0x44>)
 8004260:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004262:	f003 0301 	and.w	r3, r3, #1
 8004266:	60fb      	str	r3, [r7, #12]
 8004268:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800426a:	2200      	movs	r2, #0
 800426c:	2100      	movs	r1, #0
 800426e:	201c      	movs	r0, #28
 8004270:	f7fc f91b 	bl	80004aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004274:	201c      	movs	r0, #28
 8004276:	f7fc f934 	bl	80004e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800427a:	bf00      	nop
 800427c:	3710      	adds	r7, #16
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}
 8004282:	bf00      	nop
 8004284:	40021000 	.word	0x40021000

08004288 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004288:	b480      	push	{r7}
 800428a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800428c:	bf00      	nop
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr

08004296 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004296:	b480      	push	{r7}
 8004298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800429a:	e7fe      	b.n	800429a <HardFault_Handler+0x4>

0800429c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800429c:	b480      	push	{r7}
 800429e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80042a0:	e7fe      	b.n	80042a0 <MemManage_Handler+0x4>

080042a2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80042a2:	b480      	push	{r7}
 80042a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80042a6:	e7fe      	b.n	80042a6 <BusFault_Handler+0x4>

080042a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80042a8:	b480      	push	{r7}
 80042aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80042ac:	e7fe      	b.n	80042ac <UsageFault_Handler+0x4>

080042ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80042ae:	b480      	push	{r7}
 80042b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80042b2:	bf00      	nop
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr

080042bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80042bc:	b480      	push	{r7}
 80042be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80042c0:	bf00      	nop
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr

080042ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80042ca:	b480      	push	{r7}
 80042cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80042ce:	bf00      	nop
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr

080042d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80042dc:	f7fb ffc8 	bl	8000270 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80042e0:	bf00      	nop
 80042e2:	bd80      	pop	{r7, pc}

080042e4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 80042e8:	4802      	ldr	r0, [pc, #8]	; (80042f4 <DMA1_Channel3_IRQHandler+0x10>)
 80042ea:	f7fc fd49 	bl	8000d80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80042ee:	bf00      	nop
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	bf00      	nop
 80042f4:	200000b0 	.word	0x200000b0

080042f8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80042fc:	4802      	ldr	r0, [pc, #8]	; (8004308 <TIM2_IRQHandler+0x10>)
 80042fe:	f7fe fc89 	bl	8002c14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004302:	bf00      	nop
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	20004f1c 	.word	0x20004f1c

0800430c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b086      	sub	sp, #24
 8004310:	af00      	add	r7, sp, #0
 8004312:	60f8      	str	r0, [r7, #12]
 8004314:	60b9      	str	r1, [r7, #8]
 8004316:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004318:	2300      	movs	r3, #0
 800431a:	617b      	str	r3, [r7, #20]
 800431c:	e00a      	b.n	8004334 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800431e:	f3af 8000 	nop.w
 8004322:	4601      	mov	r1, r0
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	1c5a      	adds	r2, r3, #1
 8004328:	60ba      	str	r2, [r7, #8]
 800432a:	b2ca      	uxtb	r2, r1
 800432c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	3301      	adds	r3, #1
 8004332:	617b      	str	r3, [r7, #20]
 8004334:	697a      	ldr	r2, [r7, #20]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	429a      	cmp	r2, r3
 800433a:	dbf0      	blt.n	800431e <_read+0x12>
	}

return len;
 800433c:	687b      	ldr	r3, [r7, #4]
}
 800433e:	4618      	mov	r0, r3
 8004340:	3718      	adds	r7, #24
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}

08004346 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004346:	b580      	push	{r7, lr}
 8004348:	b086      	sub	sp, #24
 800434a:	af00      	add	r7, sp, #0
 800434c:	60f8      	str	r0, [r7, #12]
 800434e:	60b9      	str	r1, [r7, #8]
 8004350:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004352:	2300      	movs	r3, #0
 8004354:	617b      	str	r3, [r7, #20]
 8004356:	e009      	b.n	800436c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	1c5a      	adds	r2, r3, #1
 800435c:	60ba      	str	r2, [r7, #8]
 800435e:	781b      	ldrb	r3, [r3, #0]
 8004360:	4618      	mov	r0, r3
 8004362:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	3301      	adds	r3, #1
 800436a:	617b      	str	r3, [r7, #20]
 800436c:	697a      	ldr	r2, [r7, #20]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	429a      	cmp	r2, r3
 8004372:	dbf1      	blt.n	8004358 <_write+0x12>
	}
	return len;
 8004374:	687b      	ldr	r3, [r7, #4]
}
 8004376:	4618      	mov	r0, r3
 8004378:	3718      	adds	r7, #24
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}

0800437e <_close>:

int _close(int file)
{
 800437e:	b480      	push	{r7}
 8004380:	b083      	sub	sp, #12
 8004382:	af00      	add	r7, sp, #0
 8004384:	6078      	str	r0, [r7, #4]
	return -1;
 8004386:	f04f 33ff 	mov.w	r3, #4294967295
}
 800438a:	4618      	mov	r0, r3
 800438c:	370c      	adds	r7, #12
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr

08004396 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004396:	b480      	push	{r7}
 8004398:	b083      	sub	sp, #12
 800439a:	af00      	add	r7, sp, #0
 800439c:	6078      	str	r0, [r7, #4]
 800439e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80043a6:	605a      	str	r2, [r3, #4]
	return 0;
 80043a8:	2300      	movs	r3, #0
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	370c      	adds	r7, #12
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr

080043b6 <_isatty>:

int _isatty(int file)
{
 80043b6:	b480      	push	{r7}
 80043b8:	b083      	sub	sp, #12
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	6078      	str	r0, [r7, #4]
	return 1;
 80043be:	2301      	movs	r3, #1
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	370c      	adds	r7, #12
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr

080043cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b085      	sub	sp, #20
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	60f8      	str	r0, [r7, #12]
 80043d4:	60b9      	str	r1, [r7, #8]
 80043d6:	607a      	str	r2, [r7, #4]
	return 0;
 80043d8:	2300      	movs	r3, #0
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3714      	adds	r7, #20
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr
	...

080043e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b086      	sub	sp, #24
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80043f0:	4a14      	ldr	r2, [pc, #80]	; (8004444 <_sbrk+0x5c>)
 80043f2:	4b15      	ldr	r3, [pc, #84]	; (8004448 <_sbrk+0x60>)
 80043f4:	1ad3      	subs	r3, r2, r3
 80043f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80043fc:	4b13      	ldr	r3, [pc, #76]	; (800444c <_sbrk+0x64>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d102      	bne.n	800440a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004404:	4b11      	ldr	r3, [pc, #68]	; (800444c <_sbrk+0x64>)
 8004406:	4a12      	ldr	r2, [pc, #72]	; (8004450 <_sbrk+0x68>)
 8004408:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800440a:	4b10      	ldr	r3, [pc, #64]	; (800444c <_sbrk+0x64>)
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4413      	add	r3, r2
 8004412:	693a      	ldr	r2, [r7, #16]
 8004414:	429a      	cmp	r2, r3
 8004416:	d207      	bcs.n	8004428 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004418:	f000 f8c2 	bl	80045a0 <__errno>
 800441c:	4602      	mov	r2, r0
 800441e:	230c      	movs	r3, #12
 8004420:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8004422:	f04f 33ff 	mov.w	r3, #4294967295
 8004426:	e009      	b.n	800443c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004428:	4b08      	ldr	r3, [pc, #32]	; (800444c <_sbrk+0x64>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800442e:	4b07      	ldr	r3, [pc, #28]	; (800444c <_sbrk+0x64>)
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	4413      	add	r3, r2
 8004436:	4a05      	ldr	r2, [pc, #20]	; (800444c <_sbrk+0x64>)
 8004438:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800443a:	68fb      	ldr	r3, [r7, #12]
}
 800443c:	4618      	mov	r0, r3
 800443e:	3718      	adds	r7, #24
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}
 8004444:	20018000 	.word	0x20018000
 8004448:	00000400 	.word	0x00000400
 800444c:	2000008c 	.word	0x2000008c
 8004450:	20004ff8 	.word	0x20004ff8

08004454 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8004454:	b480      	push	{r7}
 8004456:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004458:	4b17      	ldr	r3, [pc, #92]	; (80044b8 <SystemInit+0x64>)
 800445a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800445e:	4a16      	ldr	r2, [pc, #88]	; (80044b8 <SystemInit+0x64>)
 8004460:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004464:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8004468:	4b14      	ldr	r3, [pc, #80]	; (80044bc <SystemInit+0x68>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a13      	ldr	r2, [pc, #76]	; (80044bc <SystemInit+0x68>)
 800446e:	f043 0301 	orr.w	r3, r3, #1
 8004472:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8004474:	4b11      	ldr	r3, [pc, #68]	; (80044bc <SystemInit+0x68>)
 8004476:	2200      	movs	r2, #0
 8004478:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800447a:	4b10      	ldr	r3, [pc, #64]	; (80044bc <SystemInit+0x68>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a0f      	ldr	r2, [pc, #60]	; (80044bc <SystemInit+0x68>)
 8004480:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8004484:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8004488:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800448a:	4b0c      	ldr	r3, [pc, #48]	; (80044bc <SystemInit+0x68>)
 800448c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004490:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004492:	4b0a      	ldr	r3, [pc, #40]	; (80044bc <SystemInit+0x68>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a09      	ldr	r2, [pc, #36]	; (80044bc <SystemInit+0x68>)
 8004498:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800449c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800449e:	4b07      	ldr	r3, [pc, #28]	; (80044bc <SystemInit+0x68>)
 80044a0:	2200      	movs	r2, #0
 80044a2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80044a4:	4b04      	ldr	r3, [pc, #16]	; (80044b8 <SystemInit+0x64>)
 80044a6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80044aa:	609a      	str	r2, [r3, #8]
#endif
}
 80044ac:	bf00      	nop
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr
 80044b6:	bf00      	nop
 80044b8:	e000ed00 	.word	0xe000ed00
 80044bc:	40021000 	.word	0x40021000

080044c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80044c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80044f8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80044c4:	f7ff ffc6 	bl	8004454 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80044c8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80044ca:	e003      	b.n	80044d4 <LoopCopyDataInit>

080044cc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80044cc:	4b0b      	ldr	r3, [pc, #44]	; (80044fc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80044ce:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80044d0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80044d2:	3104      	adds	r1, #4

080044d4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80044d4:	480a      	ldr	r0, [pc, #40]	; (8004500 <LoopForever+0xa>)
	ldr	r3, =_edata
 80044d6:	4b0b      	ldr	r3, [pc, #44]	; (8004504 <LoopForever+0xe>)
	adds	r2, r0, r1
 80044d8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80044da:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80044dc:	d3f6      	bcc.n	80044cc <CopyDataInit>
	ldr	r2, =_sbss
 80044de:	4a0a      	ldr	r2, [pc, #40]	; (8004508 <LoopForever+0x12>)
	b	LoopFillZerobss
 80044e0:	e002      	b.n	80044e8 <LoopFillZerobss>

080044e2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80044e2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80044e4:	f842 3b04 	str.w	r3, [r2], #4

080044e8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80044e8:	4b08      	ldr	r3, [pc, #32]	; (800450c <LoopForever+0x16>)
	cmp	r2, r3
 80044ea:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80044ec:	d3f9      	bcc.n	80044e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80044ee:	f000 f85d 	bl	80045ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80044f2:	f7fe ff73 	bl	80033dc <main>

080044f6 <LoopForever>:

LoopForever:
    b LoopForever
 80044f6:	e7fe      	b.n	80044f6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80044f8:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80044fc:	08005828 	.word	0x08005828
	ldr	r0, =_sdata
 8004500:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8004504:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8004508:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 800450c:	20004ff4 	.word	0x20004ff4

08004510 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004510:	e7fe      	b.n	8004510 <ADC1_2_IRQHandler>
	...

08004514 <arm_sin_f32>:
 8004514:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8004594 <arm_sin_f32+0x80>
 8004518:	ee20 0a27 	vmul.f32	s0, s0, s15
 800451c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004524:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8004528:	d504      	bpl.n	8004534 <arm_sin_f32+0x20>
 800452a:	ee17 3a90 	vmov	r3, s15
 800452e:	3b01      	subs	r3, #1
 8004530:	ee07 3a90 	vmov	s15, r3
 8004534:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004538:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8004598 <arm_sin_f32+0x84>
 800453c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8004540:	ee20 0a07 	vmul.f32	s0, s0, s14
 8004544:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8004548:	ee17 3a90 	vmov	r3, s15
 800454c:	b29b      	uxth	r3, r3
 800454e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004552:	d21a      	bcs.n	800458a <arm_sin_f32+0x76>
 8004554:	ee07 3a90 	vmov	s15, r3
 8004558:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800455c:	1c59      	adds	r1, r3, #1
 800455e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8004562:	4a0e      	ldr	r2, [pc, #56]	; (800459c <arm_sin_f32+0x88>)
 8004564:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8004568:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800456c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8004570:	ed93 7a00 	vldr	s14, [r3]
 8004574:	edd2 6a00 	vldr	s13, [r2]
 8004578:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800457c:	ee20 0a26 	vmul.f32	s0, s0, s13
 8004580:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004584:	ee37 0a80 	vadd.f32	s0, s15, s0
 8004588:	4770      	bx	lr
 800458a:	ee30 0a47 	vsub.f32	s0, s0, s14
 800458e:	2101      	movs	r1, #1
 8004590:	2300      	movs	r3, #0
 8004592:	e7e6      	b.n	8004562 <arm_sin_f32+0x4e>
 8004594:	3e22f983 	.word	0x3e22f983
 8004598:	44000000 	.word	0x44000000
 800459c:	08004fb8 	.word	0x08004fb8

080045a0 <__errno>:
 80045a0:	4b01      	ldr	r3, [pc, #4]	; (80045a8 <__errno+0x8>)
 80045a2:	6818      	ldr	r0, [r3, #0]
 80045a4:	4770      	bx	lr
 80045a6:	bf00      	nop
 80045a8:	2000000c 	.word	0x2000000c

080045ac <__libc_init_array>:
 80045ac:	b570      	push	{r4, r5, r6, lr}
 80045ae:	4e0d      	ldr	r6, [pc, #52]	; (80045e4 <__libc_init_array+0x38>)
 80045b0:	4c0d      	ldr	r4, [pc, #52]	; (80045e8 <__libc_init_array+0x3c>)
 80045b2:	1ba4      	subs	r4, r4, r6
 80045b4:	10a4      	asrs	r4, r4, #2
 80045b6:	2500      	movs	r5, #0
 80045b8:	42a5      	cmp	r5, r4
 80045ba:	d109      	bne.n	80045d0 <__libc_init_array+0x24>
 80045bc:	4e0b      	ldr	r6, [pc, #44]	; (80045ec <__libc_init_array+0x40>)
 80045be:	4c0c      	ldr	r4, [pc, #48]	; (80045f0 <__libc_init_array+0x44>)
 80045c0:	f000 fc88 	bl	8004ed4 <_init>
 80045c4:	1ba4      	subs	r4, r4, r6
 80045c6:	10a4      	asrs	r4, r4, #2
 80045c8:	2500      	movs	r5, #0
 80045ca:	42a5      	cmp	r5, r4
 80045cc:	d105      	bne.n	80045da <__libc_init_array+0x2e>
 80045ce:	bd70      	pop	{r4, r5, r6, pc}
 80045d0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80045d4:	4798      	blx	r3
 80045d6:	3501      	adds	r5, #1
 80045d8:	e7ee      	b.n	80045b8 <__libc_init_array+0xc>
 80045da:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80045de:	4798      	blx	r3
 80045e0:	3501      	adds	r5, #1
 80045e2:	e7f2      	b.n	80045ca <__libc_init_array+0x1e>
 80045e4:	08005820 	.word	0x08005820
 80045e8:	08005820 	.word	0x08005820
 80045ec:	08005820 	.word	0x08005820
 80045f0:	08005824 	.word	0x08005824

080045f4 <memset>:
 80045f4:	4402      	add	r2, r0
 80045f6:	4603      	mov	r3, r0
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d100      	bne.n	80045fe <memset+0xa>
 80045fc:	4770      	bx	lr
 80045fe:	f803 1b01 	strb.w	r1, [r3], #1
 8004602:	e7f9      	b.n	80045f8 <memset+0x4>

08004604 <_puts_r>:
 8004604:	b570      	push	{r4, r5, r6, lr}
 8004606:	460e      	mov	r6, r1
 8004608:	4605      	mov	r5, r0
 800460a:	b118      	cbz	r0, 8004614 <_puts_r+0x10>
 800460c:	6983      	ldr	r3, [r0, #24]
 800460e:	b90b      	cbnz	r3, 8004614 <_puts_r+0x10>
 8004610:	f000 fa0c 	bl	8004a2c <__sinit>
 8004614:	69ab      	ldr	r3, [r5, #24]
 8004616:	68ac      	ldr	r4, [r5, #8]
 8004618:	b913      	cbnz	r3, 8004620 <_puts_r+0x1c>
 800461a:	4628      	mov	r0, r5
 800461c:	f000 fa06 	bl	8004a2c <__sinit>
 8004620:	4b23      	ldr	r3, [pc, #140]	; (80046b0 <_puts_r+0xac>)
 8004622:	429c      	cmp	r4, r3
 8004624:	d117      	bne.n	8004656 <_puts_r+0x52>
 8004626:	686c      	ldr	r4, [r5, #4]
 8004628:	89a3      	ldrh	r3, [r4, #12]
 800462a:	071b      	lsls	r3, r3, #28
 800462c:	d51d      	bpl.n	800466a <_puts_r+0x66>
 800462e:	6923      	ldr	r3, [r4, #16]
 8004630:	b1db      	cbz	r3, 800466a <_puts_r+0x66>
 8004632:	3e01      	subs	r6, #1
 8004634:	68a3      	ldr	r3, [r4, #8]
 8004636:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800463a:	3b01      	subs	r3, #1
 800463c:	60a3      	str	r3, [r4, #8]
 800463e:	b9e9      	cbnz	r1, 800467c <_puts_r+0x78>
 8004640:	2b00      	cmp	r3, #0
 8004642:	da2e      	bge.n	80046a2 <_puts_r+0x9e>
 8004644:	4622      	mov	r2, r4
 8004646:	210a      	movs	r1, #10
 8004648:	4628      	mov	r0, r5
 800464a:	f000 f83f 	bl	80046cc <__swbuf_r>
 800464e:	3001      	adds	r0, #1
 8004650:	d011      	beq.n	8004676 <_puts_r+0x72>
 8004652:	200a      	movs	r0, #10
 8004654:	e011      	b.n	800467a <_puts_r+0x76>
 8004656:	4b17      	ldr	r3, [pc, #92]	; (80046b4 <_puts_r+0xb0>)
 8004658:	429c      	cmp	r4, r3
 800465a:	d101      	bne.n	8004660 <_puts_r+0x5c>
 800465c:	68ac      	ldr	r4, [r5, #8]
 800465e:	e7e3      	b.n	8004628 <_puts_r+0x24>
 8004660:	4b15      	ldr	r3, [pc, #84]	; (80046b8 <_puts_r+0xb4>)
 8004662:	429c      	cmp	r4, r3
 8004664:	bf08      	it	eq
 8004666:	68ec      	ldreq	r4, [r5, #12]
 8004668:	e7de      	b.n	8004628 <_puts_r+0x24>
 800466a:	4621      	mov	r1, r4
 800466c:	4628      	mov	r0, r5
 800466e:	f000 f87f 	bl	8004770 <__swsetup_r>
 8004672:	2800      	cmp	r0, #0
 8004674:	d0dd      	beq.n	8004632 <_puts_r+0x2e>
 8004676:	f04f 30ff 	mov.w	r0, #4294967295
 800467a:	bd70      	pop	{r4, r5, r6, pc}
 800467c:	2b00      	cmp	r3, #0
 800467e:	da04      	bge.n	800468a <_puts_r+0x86>
 8004680:	69a2      	ldr	r2, [r4, #24]
 8004682:	429a      	cmp	r2, r3
 8004684:	dc06      	bgt.n	8004694 <_puts_r+0x90>
 8004686:	290a      	cmp	r1, #10
 8004688:	d004      	beq.n	8004694 <_puts_r+0x90>
 800468a:	6823      	ldr	r3, [r4, #0]
 800468c:	1c5a      	adds	r2, r3, #1
 800468e:	6022      	str	r2, [r4, #0]
 8004690:	7019      	strb	r1, [r3, #0]
 8004692:	e7cf      	b.n	8004634 <_puts_r+0x30>
 8004694:	4622      	mov	r2, r4
 8004696:	4628      	mov	r0, r5
 8004698:	f000 f818 	bl	80046cc <__swbuf_r>
 800469c:	3001      	adds	r0, #1
 800469e:	d1c9      	bne.n	8004634 <_puts_r+0x30>
 80046a0:	e7e9      	b.n	8004676 <_puts_r+0x72>
 80046a2:	6823      	ldr	r3, [r4, #0]
 80046a4:	200a      	movs	r0, #10
 80046a6:	1c5a      	adds	r2, r3, #1
 80046a8:	6022      	str	r2, [r4, #0]
 80046aa:	7018      	strb	r0, [r3, #0]
 80046ac:	e7e5      	b.n	800467a <_puts_r+0x76>
 80046ae:	bf00      	nop
 80046b0:	080057e0 	.word	0x080057e0
 80046b4:	08005800 	.word	0x08005800
 80046b8:	080057c0 	.word	0x080057c0

080046bc <puts>:
 80046bc:	4b02      	ldr	r3, [pc, #8]	; (80046c8 <puts+0xc>)
 80046be:	4601      	mov	r1, r0
 80046c0:	6818      	ldr	r0, [r3, #0]
 80046c2:	f7ff bf9f 	b.w	8004604 <_puts_r>
 80046c6:	bf00      	nop
 80046c8:	2000000c 	.word	0x2000000c

080046cc <__swbuf_r>:
 80046cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046ce:	460e      	mov	r6, r1
 80046d0:	4614      	mov	r4, r2
 80046d2:	4605      	mov	r5, r0
 80046d4:	b118      	cbz	r0, 80046de <__swbuf_r+0x12>
 80046d6:	6983      	ldr	r3, [r0, #24]
 80046d8:	b90b      	cbnz	r3, 80046de <__swbuf_r+0x12>
 80046da:	f000 f9a7 	bl	8004a2c <__sinit>
 80046de:	4b21      	ldr	r3, [pc, #132]	; (8004764 <__swbuf_r+0x98>)
 80046e0:	429c      	cmp	r4, r3
 80046e2:	d12a      	bne.n	800473a <__swbuf_r+0x6e>
 80046e4:	686c      	ldr	r4, [r5, #4]
 80046e6:	69a3      	ldr	r3, [r4, #24]
 80046e8:	60a3      	str	r3, [r4, #8]
 80046ea:	89a3      	ldrh	r3, [r4, #12]
 80046ec:	071a      	lsls	r2, r3, #28
 80046ee:	d52e      	bpl.n	800474e <__swbuf_r+0x82>
 80046f0:	6923      	ldr	r3, [r4, #16]
 80046f2:	b363      	cbz	r3, 800474e <__swbuf_r+0x82>
 80046f4:	6923      	ldr	r3, [r4, #16]
 80046f6:	6820      	ldr	r0, [r4, #0]
 80046f8:	1ac0      	subs	r0, r0, r3
 80046fa:	6963      	ldr	r3, [r4, #20]
 80046fc:	b2f6      	uxtb	r6, r6
 80046fe:	4283      	cmp	r3, r0
 8004700:	4637      	mov	r7, r6
 8004702:	dc04      	bgt.n	800470e <__swbuf_r+0x42>
 8004704:	4621      	mov	r1, r4
 8004706:	4628      	mov	r0, r5
 8004708:	f000 f926 	bl	8004958 <_fflush_r>
 800470c:	bb28      	cbnz	r0, 800475a <__swbuf_r+0x8e>
 800470e:	68a3      	ldr	r3, [r4, #8]
 8004710:	3b01      	subs	r3, #1
 8004712:	60a3      	str	r3, [r4, #8]
 8004714:	6823      	ldr	r3, [r4, #0]
 8004716:	1c5a      	adds	r2, r3, #1
 8004718:	6022      	str	r2, [r4, #0]
 800471a:	701e      	strb	r6, [r3, #0]
 800471c:	6963      	ldr	r3, [r4, #20]
 800471e:	3001      	adds	r0, #1
 8004720:	4283      	cmp	r3, r0
 8004722:	d004      	beq.n	800472e <__swbuf_r+0x62>
 8004724:	89a3      	ldrh	r3, [r4, #12]
 8004726:	07db      	lsls	r3, r3, #31
 8004728:	d519      	bpl.n	800475e <__swbuf_r+0x92>
 800472a:	2e0a      	cmp	r6, #10
 800472c:	d117      	bne.n	800475e <__swbuf_r+0x92>
 800472e:	4621      	mov	r1, r4
 8004730:	4628      	mov	r0, r5
 8004732:	f000 f911 	bl	8004958 <_fflush_r>
 8004736:	b190      	cbz	r0, 800475e <__swbuf_r+0x92>
 8004738:	e00f      	b.n	800475a <__swbuf_r+0x8e>
 800473a:	4b0b      	ldr	r3, [pc, #44]	; (8004768 <__swbuf_r+0x9c>)
 800473c:	429c      	cmp	r4, r3
 800473e:	d101      	bne.n	8004744 <__swbuf_r+0x78>
 8004740:	68ac      	ldr	r4, [r5, #8]
 8004742:	e7d0      	b.n	80046e6 <__swbuf_r+0x1a>
 8004744:	4b09      	ldr	r3, [pc, #36]	; (800476c <__swbuf_r+0xa0>)
 8004746:	429c      	cmp	r4, r3
 8004748:	bf08      	it	eq
 800474a:	68ec      	ldreq	r4, [r5, #12]
 800474c:	e7cb      	b.n	80046e6 <__swbuf_r+0x1a>
 800474e:	4621      	mov	r1, r4
 8004750:	4628      	mov	r0, r5
 8004752:	f000 f80d 	bl	8004770 <__swsetup_r>
 8004756:	2800      	cmp	r0, #0
 8004758:	d0cc      	beq.n	80046f4 <__swbuf_r+0x28>
 800475a:	f04f 37ff 	mov.w	r7, #4294967295
 800475e:	4638      	mov	r0, r7
 8004760:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004762:	bf00      	nop
 8004764:	080057e0 	.word	0x080057e0
 8004768:	08005800 	.word	0x08005800
 800476c:	080057c0 	.word	0x080057c0

08004770 <__swsetup_r>:
 8004770:	4b32      	ldr	r3, [pc, #200]	; (800483c <__swsetup_r+0xcc>)
 8004772:	b570      	push	{r4, r5, r6, lr}
 8004774:	681d      	ldr	r5, [r3, #0]
 8004776:	4606      	mov	r6, r0
 8004778:	460c      	mov	r4, r1
 800477a:	b125      	cbz	r5, 8004786 <__swsetup_r+0x16>
 800477c:	69ab      	ldr	r3, [r5, #24]
 800477e:	b913      	cbnz	r3, 8004786 <__swsetup_r+0x16>
 8004780:	4628      	mov	r0, r5
 8004782:	f000 f953 	bl	8004a2c <__sinit>
 8004786:	4b2e      	ldr	r3, [pc, #184]	; (8004840 <__swsetup_r+0xd0>)
 8004788:	429c      	cmp	r4, r3
 800478a:	d10f      	bne.n	80047ac <__swsetup_r+0x3c>
 800478c:	686c      	ldr	r4, [r5, #4]
 800478e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004792:	b29a      	uxth	r2, r3
 8004794:	0715      	lsls	r5, r2, #28
 8004796:	d42c      	bmi.n	80047f2 <__swsetup_r+0x82>
 8004798:	06d0      	lsls	r0, r2, #27
 800479a:	d411      	bmi.n	80047c0 <__swsetup_r+0x50>
 800479c:	2209      	movs	r2, #9
 800479e:	6032      	str	r2, [r6, #0]
 80047a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047a4:	81a3      	strh	r3, [r4, #12]
 80047a6:	f04f 30ff 	mov.w	r0, #4294967295
 80047aa:	e03e      	b.n	800482a <__swsetup_r+0xba>
 80047ac:	4b25      	ldr	r3, [pc, #148]	; (8004844 <__swsetup_r+0xd4>)
 80047ae:	429c      	cmp	r4, r3
 80047b0:	d101      	bne.n	80047b6 <__swsetup_r+0x46>
 80047b2:	68ac      	ldr	r4, [r5, #8]
 80047b4:	e7eb      	b.n	800478e <__swsetup_r+0x1e>
 80047b6:	4b24      	ldr	r3, [pc, #144]	; (8004848 <__swsetup_r+0xd8>)
 80047b8:	429c      	cmp	r4, r3
 80047ba:	bf08      	it	eq
 80047bc:	68ec      	ldreq	r4, [r5, #12]
 80047be:	e7e6      	b.n	800478e <__swsetup_r+0x1e>
 80047c0:	0751      	lsls	r1, r2, #29
 80047c2:	d512      	bpl.n	80047ea <__swsetup_r+0x7a>
 80047c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80047c6:	b141      	cbz	r1, 80047da <__swsetup_r+0x6a>
 80047c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80047cc:	4299      	cmp	r1, r3
 80047ce:	d002      	beq.n	80047d6 <__swsetup_r+0x66>
 80047d0:	4630      	mov	r0, r6
 80047d2:	f000 fa19 	bl	8004c08 <_free_r>
 80047d6:	2300      	movs	r3, #0
 80047d8:	6363      	str	r3, [r4, #52]	; 0x34
 80047da:	89a3      	ldrh	r3, [r4, #12]
 80047dc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80047e0:	81a3      	strh	r3, [r4, #12]
 80047e2:	2300      	movs	r3, #0
 80047e4:	6063      	str	r3, [r4, #4]
 80047e6:	6923      	ldr	r3, [r4, #16]
 80047e8:	6023      	str	r3, [r4, #0]
 80047ea:	89a3      	ldrh	r3, [r4, #12]
 80047ec:	f043 0308 	orr.w	r3, r3, #8
 80047f0:	81a3      	strh	r3, [r4, #12]
 80047f2:	6923      	ldr	r3, [r4, #16]
 80047f4:	b94b      	cbnz	r3, 800480a <__swsetup_r+0x9a>
 80047f6:	89a3      	ldrh	r3, [r4, #12]
 80047f8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80047fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004800:	d003      	beq.n	800480a <__swsetup_r+0x9a>
 8004802:	4621      	mov	r1, r4
 8004804:	4630      	mov	r0, r6
 8004806:	f000 f9bf 	bl	8004b88 <__smakebuf_r>
 800480a:	89a2      	ldrh	r2, [r4, #12]
 800480c:	f012 0301 	ands.w	r3, r2, #1
 8004810:	d00c      	beq.n	800482c <__swsetup_r+0xbc>
 8004812:	2300      	movs	r3, #0
 8004814:	60a3      	str	r3, [r4, #8]
 8004816:	6963      	ldr	r3, [r4, #20]
 8004818:	425b      	negs	r3, r3
 800481a:	61a3      	str	r3, [r4, #24]
 800481c:	6923      	ldr	r3, [r4, #16]
 800481e:	b953      	cbnz	r3, 8004836 <__swsetup_r+0xc6>
 8004820:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004824:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004828:	d1ba      	bne.n	80047a0 <__swsetup_r+0x30>
 800482a:	bd70      	pop	{r4, r5, r6, pc}
 800482c:	0792      	lsls	r2, r2, #30
 800482e:	bf58      	it	pl
 8004830:	6963      	ldrpl	r3, [r4, #20]
 8004832:	60a3      	str	r3, [r4, #8]
 8004834:	e7f2      	b.n	800481c <__swsetup_r+0xac>
 8004836:	2000      	movs	r0, #0
 8004838:	e7f7      	b.n	800482a <__swsetup_r+0xba>
 800483a:	bf00      	nop
 800483c:	2000000c 	.word	0x2000000c
 8004840:	080057e0 	.word	0x080057e0
 8004844:	08005800 	.word	0x08005800
 8004848:	080057c0 	.word	0x080057c0

0800484c <__sflush_r>:
 800484c:	898a      	ldrh	r2, [r1, #12]
 800484e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004852:	4605      	mov	r5, r0
 8004854:	0710      	lsls	r0, r2, #28
 8004856:	460c      	mov	r4, r1
 8004858:	d458      	bmi.n	800490c <__sflush_r+0xc0>
 800485a:	684b      	ldr	r3, [r1, #4]
 800485c:	2b00      	cmp	r3, #0
 800485e:	dc05      	bgt.n	800486c <__sflush_r+0x20>
 8004860:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004862:	2b00      	cmp	r3, #0
 8004864:	dc02      	bgt.n	800486c <__sflush_r+0x20>
 8004866:	2000      	movs	r0, #0
 8004868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800486c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800486e:	2e00      	cmp	r6, #0
 8004870:	d0f9      	beq.n	8004866 <__sflush_r+0x1a>
 8004872:	2300      	movs	r3, #0
 8004874:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004878:	682f      	ldr	r7, [r5, #0]
 800487a:	6a21      	ldr	r1, [r4, #32]
 800487c:	602b      	str	r3, [r5, #0]
 800487e:	d032      	beq.n	80048e6 <__sflush_r+0x9a>
 8004880:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004882:	89a3      	ldrh	r3, [r4, #12]
 8004884:	075a      	lsls	r2, r3, #29
 8004886:	d505      	bpl.n	8004894 <__sflush_r+0x48>
 8004888:	6863      	ldr	r3, [r4, #4]
 800488a:	1ac0      	subs	r0, r0, r3
 800488c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800488e:	b10b      	cbz	r3, 8004894 <__sflush_r+0x48>
 8004890:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004892:	1ac0      	subs	r0, r0, r3
 8004894:	2300      	movs	r3, #0
 8004896:	4602      	mov	r2, r0
 8004898:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800489a:	6a21      	ldr	r1, [r4, #32]
 800489c:	4628      	mov	r0, r5
 800489e:	47b0      	blx	r6
 80048a0:	1c43      	adds	r3, r0, #1
 80048a2:	89a3      	ldrh	r3, [r4, #12]
 80048a4:	d106      	bne.n	80048b4 <__sflush_r+0x68>
 80048a6:	6829      	ldr	r1, [r5, #0]
 80048a8:	291d      	cmp	r1, #29
 80048aa:	d848      	bhi.n	800493e <__sflush_r+0xf2>
 80048ac:	4a29      	ldr	r2, [pc, #164]	; (8004954 <__sflush_r+0x108>)
 80048ae:	40ca      	lsrs	r2, r1
 80048b0:	07d6      	lsls	r6, r2, #31
 80048b2:	d544      	bpl.n	800493e <__sflush_r+0xf2>
 80048b4:	2200      	movs	r2, #0
 80048b6:	6062      	str	r2, [r4, #4]
 80048b8:	04d9      	lsls	r1, r3, #19
 80048ba:	6922      	ldr	r2, [r4, #16]
 80048bc:	6022      	str	r2, [r4, #0]
 80048be:	d504      	bpl.n	80048ca <__sflush_r+0x7e>
 80048c0:	1c42      	adds	r2, r0, #1
 80048c2:	d101      	bne.n	80048c8 <__sflush_r+0x7c>
 80048c4:	682b      	ldr	r3, [r5, #0]
 80048c6:	b903      	cbnz	r3, 80048ca <__sflush_r+0x7e>
 80048c8:	6560      	str	r0, [r4, #84]	; 0x54
 80048ca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80048cc:	602f      	str	r7, [r5, #0]
 80048ce:	2900      	cmp	r1, #0
 80048d0:	d0c9      	beq.n	8004866 <__sflush_r+0x1a>
 80048d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80048d6:	4299      	cmp	r1, r3
 80048d8:	d002      	beq.n	80048e0 <__sflush_r+0x94>
 80048da:	4628      	mov	r0, r5
 80048dc:	f000 f994 	bl	8004c08 <_free_r>
 80048e0:	2000      	movs	r0, #0
 80048e2:	6360      	str	r0, [r4, #52]	; 0x34
 80048e4:	e7c0      	b.n	8004868 <__sflush_r+0x1c>
 80048e6:	2301      	movs	r3, #1
 80048e8:	4628      	mov	r0, r5
 80048ea:	47b0      	blx	r6
 80048ec:	1c41      	adds	r1, r0, #1
 80048ee:	d1c8      	bne.n	8004882 <__sflush_r+0x36>
 80048f0:	682b      	ldr	r3, [r5, #0]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d0c5      	beq.n	8004882 <__sflush_r+0x36>
 80048f6:	2b1d      	cmp	r3, #29
 80048f8:	d001      	beq.n	80048fe <__sflush_r+0xb2>
 80048fa:	2b16      	cmp	r3, #22
 80048fc:	d101      	bne.n	8004902 <__sflush_r+0xb6>
 80048fe:	602f      	str	r7, [r5, #0]
 8004900:	e7b1      	b.n	8004866 <__sflush_r+0x1a>
 8004902:	89a3      	ldrh	r3, [r4, #12]
 8004904:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004908:	81a3      	strh	r3, [r4, #12]
 800490a:	e7ad      	b.n	8004868 <__sflush_r+0x1c>
 800490c:	690f      	ldr	r7, [r1, #16]
 800490e:	2f00      	cmp	r7, #0
 8004910:	d0a9      	beq.n	8004866 <__sflush_r+0x1a>
 8004912:	0793      	lsls	r3, r2, #30
 8004914:	680e      	ldr	r6, [r1, #0]
 8004916:	bf08      	it	eq
 8004918:	694b      	ldreq	r3, [r1, #20]
 800491a:	600f      	str	r7, [r1, #0]
 800491c:	bf18      	it	ne
 800491e:	2300      	movne	r3, #0
 8004920:	eba6 0807 	sub.w	r8, r6, r7
 8004924:	608b      	str	r3, [r1, #8]
 8004926:	f1b8 0f00 	cmp.w	r8, #0
 800492a:	dd9c      	ble.n	8004866 <__sflush_r+0x1a>
 800492c:	4643      	mov	r3, r8
 800492e:	463a      	mov	r2, r7
 8004930:	6a21      	ldr	r1, [r4, #32]
 8004932:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004934:	4628      	mov	r0, r5
 8004936:	47b0      	blx	r6
 8004938:	2800      	cmp	r0, #0
 800493a:	dc06      	bgt.n	800494a <__sflush_r+0xfe>
 800493c:	89a3      	ldrh	r3, [r4, #12]
 800493e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004942:	81a3      	strh	r3, [r4, #12]
 8004944:	f04f 30ff 	mov.w	r0, #4294967295
 8004948:	e78e      	b.n	8004868 <__sflush_r+0x1c>
 800494a:	4407      	add	r7, r0
 800494c:	eba8 0800 	sub.w	r8, r8, r0
 8004950:	e7e9      	b.n	8004926 <__sflush_r+0xda>
 8004952:	bf00      	nop
 8004954:	20400001 	.word	0x20400001

08004958 <_fflush_r>:
 8004958:	b538      	push	{r3, r4, r5, lr}
 800495a:	690b      	ldr	r3, [r1, #16]
 800495c:	4605      	mov	r5, r0
 800495e:	460c      	mov	r4, r1
 8004960:	b1db      	cbz	r3, 800499a <_fflush_r+0x42>
 8004962:	b118      	cbz	r0, 800496c <_fflush_r+0x14>
 8004964:	6983      	ldr	r3, [r0, #24]
 8004966:	b90b      	cbnz	r3, 800496c <_fflush_r+0x14>
 8004968:	f000 f860 	bl	8004a2c <__sinit>
 800496c:	4b0c      	ldr	r3, [pc, #48]	; (80049a0 <_fflush_r+0x48>)
 800496e:	429c      	cmp	r4, r3
 8004970:	d109      	bne.n	8004986 <_fflush_r+0x2e>
 8004972:	686c      	ldr	r4, [r5, #4]
 8004974:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004978:	b17b      	cbz	r3, 800499a <_fflush_r+0x42>
 800497a:	4621      	mov	r1, r4
 800497c:	4628      	mov	r0, r5
 800497e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004982:	f7ff bf63 	b.w	800484c <__sflush_r>
 8004986:	4b07      	ldr	r3, [pc, #28]	; (80049a4 <_fflush_r+0x4c>)
 8004988:	429c      	cmp	r4, r3
 800498a:	d101      	bne.n	8004990 <_fflush_r+0x38>
 800498c:	68ac      	ldr	r4, [r5, #8]
 800498e:	e7f1      	b.n	8004974 <_fflush_r+0x1c>
 8004990:	4b05      	ldr	r3, [pc, #20]	; (80049a8 <_fflush_r+0x50>)
 8004992:	429c      	cmp	r4, r3
 8004994:	bf08      	it	eq
 8004996:	68ec      	ldreq	r4, [r5, #12]
 8004998:	e7ec      	b.n	8004974 <_fflush_r+0x1c>
 800499a:	2000      	movs	r0, #0
 800499c:	bd38      	pop	{r3, r4, r5, pc}
 800499e:	bf00      	nop
 80049a0:	080057e0 	.word	0x080057e0
 80049a4:	08005800 	.word	0x08005800
 80049a8:	080057c0 	.word	0x080057c0

080049ac <std>:
 80049ac:	2300      	movs	r3, #0
 80049ae:	b510      	push	{r4, lr}
 80049b0:	4604      	mov	r4, r0
 80049b2:	e9c0 3300 	strd	r3, r3, [r0]
 80049b6:	6083      	str	r3, [r0, #8]
 80049b8:	8181      	strh	r1, [r0, #12]
 80049ba:	6643      	str	r3, [r0, #100]	; 0x64
 80049bc:	81c2      	strh	r2, [r0, #14]
 80049be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80049c2:	6183      	str	r3, [r0, #24]
 80049c4:	4619      	mov	r1, r3
 80049c6:	2208      	movs	r2, #8
 80049c8:	305c      	adds	r0, #92	; 0x5c
 80049ca:	f7ff fe13 	bl	80045f4 <memset>
 80049ce:	4b05      	ldr	r3, [pc, #20]	; (80049e4 <std+0x38>)
 80049d0:	6263      	str	r3, [r4, #36]	; 0x24
 80049d2:	4b05      	ldr	r3, [pc, #20]	; (80049e8 <std+0x3c>)
 80049d4:	62a3      	str	r3, [r4, #40]	; 0x28
 80049d6:	4b05      	ldr	r3, [pc, #20]	; (80049ec <std+0x40>)
 80049d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80049da:	4b05      	ldr	r3, [pc, #20]	; (80049f0 <std+0x44>)
 80049dc:	6224      	str	r4, [r4, #32]
 80049de:	6323      	str	r3, [r4, #48]	; 0x30
 80049e0:	bd10      	pop	{r4, pc}
 80049e2:	bf00      	nop
 80049e4:	08004d79 	.word	0x08004d79
 80049e8:	08004d9b 	.word	0x08004d9b
 80049ec:	08004dd3 	.word	0x08004dd3
 80049f0:	08004df7 	.word	0x08004df7

080049f4 <_cleanup_r>:
 80049f4:	4901      	ldr	r1, [pc, #4]	; (80049fc <_cleanup_r+0x8>)
 80049f6:	f000 b885 	b.w	8004b04 <_fwalk_reent>
 80049fa:	bf00      	nop
 80049fc:	08004959 	.word	0x08004959

08004a00 <__sfmoreglue>:
 8004a00:	b570      	push	{r4, r5, r6, lr}
 8004a02:	1e4a      	subs	r2, r1, #1
 8004a04:	2568      	movs	r5, #104	; 0x68
 8004a06:	4355      	muls	r5, r2
 8004a08:	460e      	mov	r6, r1
 8004a0a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004a0e:	f000 f949 	bl	8004ca4 <_malloc_r>
 8004a12:	4604      	mov	r4, r0
 8004a14:	b140      	cbz	r0, 8004a28 <__sfmoreglue+0x28>
 8004a16:	2100      	movs	r1, #0
 8004a18:	e9c0 1600 	strd	r1, r6, [r0]
 8004a1c:	300c      	adds	r0, #12
 8004a1e:	60a0      	str	r0, [r4, #8]
 8004a20:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004a24:	f7ff fde6 	bl	80045f4 <memset>
 8004a28:	4620      	mov	r0, r4
 8004a2a:	bd70      	pop	{r4, r5, r6, pc}

08004a2c <__sinit>:
 8004a2c:	6983      	ldr	r3, [r0, #24]
 8004a2e:	b510      	push	{r4, lr}
 8004a30:	4604      	mov	r4, r0
 8004a32:	bb33      	cbnz	r3, 8004a82 <__sinit+0x56>
 8004a34:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8004a38:	6503      	str	r3, [r0, #80]	; 0x50
 8004a3a:	4b12      	ldr	r3, [pc, #72]	; (8004a84 <__sinit+0x58>)
 8004a3c:	4a12      	ldr	r2, [pc, #72]	; (8004a88 <__sinit+0x5c>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	6282      	str	r2, [r0, #40]	; 0x28
 8004a42:	4298      	cmp	r0, r3
 8004a44:	bf04      	itt	eq
 8004a46:	2301      	moveq	r3, #1
 8004a48:	6183      	streq	r3, [r0, #24]
 8004a4a:	f000 f81f 	bl	8004a8c <__sfp>
 8004a4e:	6060      	str	r0, [r4, #4]
 8004a50:	4620      	mov	r0, r4
 8004a52:	f000 f81b 	bl	8004a8c <__sfp>
 8004a56:	60a0      	str	r0, [r4, #8]
 8004a58:	4620      	mov	r0, r4
 8004a5a:	f000 f817 	bl	8004a8c <__sfp>
 8004a5e:	2200      	movs	r2, #0
 8004a60:	60e0      	str	r0, [r4, #12]
 8004a62:	2104      	movs	r1, #4
 8004a64:	6860      	ldr	r0, [r4, #4]
 8004a66:	f7ff ffa1 	bl	80049ac <std>
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	2109      	movs	r1, #9
 8004a6e:	68a0      	ldr	r0, [r4, #8]
 8004a70:	f7ff ff9c 	bl	80049ac <std>
 8004a74:	2202      	movs	r2, #2
 8004a76:	2112      	movs	r1, #18
 8004a78:	68e0      	ldr	r0, [r4, #12]
 8004a7a:	f7ff ff97 	bl	80049ac <std>
 8004a7e:	2301      	movs	r3, #1
 8004a80:	61a3      	str	r3, [r4, #24]
 8004a82:	bd10      	pop	{r4, pc}
 8004a84:	080057bc 	.word	0x080057bc
 8004a88:	080049f5 	.word	0x080049f5

08004a8c <__sfp>:
 8004a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a8e:	4b1b      	ldr	r3, [pc, #108]	; (8004afc <__sfp+0x70>)
 8004a90:	681e      	ldr	r6, [r3, #0]
 8004a92:	69b3      	ldr	r3, [r6, #24]
 8004a94:	4607      	mov	r7, r0
 8004a96:	b913      	cbnz	r3, 8004a9e <__sfp+0x12>
 8004a98:	4630      	mov	r0, r6
 8004a9a:	f7ff ffc7 	bl	8004a2c <__sinit>
 8004a9e:	3648      	adds	r6, #72	; 0x48
 8004aa0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004aa4:	3b01      	subs	r3, #1
 8004aa6:	d503      	bpl.n	8004ab0 <__sfp+0x24>
 8004aa8:	6833      	ldr	r3, [r6, #0]
 8004aaa:	b133      	cbz	r3, 8004aba <__sfp+0x2e>
 8004aac:	6836      	ldr	r6, [r6, #0]
 8004aae:	e7f7      	b.n	8004aa0 <__sfp+0x14>
 8004ab0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004ab4:	b16d      	cbz	r5, 8004ad2 <__sfp+0x46>
 8004ab6:	3468      	adds	r4, #104	; 0x68
 8004ab8:	e7f4      	b.n	8004aa4 <__sfp+0x18>
 8004aba:	2104      	movs	r1, #4
 8004abc:	4638      	mov	r0, r7
 8004abe:	f7ff ff9f 	bl	8004a00 <__sfmoreglue>
 8004ac2:	6030      	str	r0, [r6, #0]
 8004ac4:	2800      	cmp	r0, #0
 8004ac6:	d1f1      	bne.n	8004aac <__sfp+0x20>
 8004ac8:	230c      	movs	r3, #12
 8004aca:	603b      	str	r3, [r7, #0]
 8004acc:	4604      	mov	r4, r0
 8004ace:	4620      	mov	r0, r4
 8004ad0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ad2:	4b0b      	ldr	r3, [pc, #44]	; (8004b00 <__sfp+0x74>)
 8004ad4:	6665      	str	r5, [r4, #100]	; 0x64
 8004ad6:	e9c4 5500 	strd	r5, r5, [r4]
 8004ada:	60a5      	str	r5, [r4, #8]
 8004adc:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8004ae0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8004ae4:	2208      	movs	r2, #8
 8004ae6:	4629      	mov	r1, r5
 8004ae8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004aec:	f7ff fd82 	bl	80045f4 <memset>
 8004af0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004af4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004af8:	e7e9      	b.n	8004ace <__sfp+0x42>
 8004afa:	bf00      	nop
 8004afc:	080057bc 	.word	0x080057bc
 8004b00:	ffff0001 	.word	0xffff0001

08004b04 <_fwalk_reent>:
 8004b04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b08:	4680      	mov	r8, r0
 8004b0a:	4689      	mov	r9, r1
 8004b0c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004b10:	2600      	movs	r6, #0
 8004b12:	b914      	cbnz	r4, 8004b1a <_fwalk_reent+0x16>
 8004b14:	4630      	mov	r0, r6
 8004b16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b1a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8004b1e:	3f01      	subs	r7, #1
 8004b20:	d501      	bpl.n	8004b26 <_fwalk_reent+0x22>
 8004b22:	6824      	ldr	r4, [r4, #0]
 8004b24:	e7f5      	b.n	8004b12 <_fwalk_reent+0xe>
 8004b26:	89ab      	ldrh	r3, [r5, #12]
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d907      	bls.n	8004b3c <_fwalk_reent+0x38>
 8004b2c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004b30:	3301      	adds	r3, #1
 8004b32:	d003      	beq.n	8004b3c <_fwalk_reent+0x38>
 8004b34:	4629      	mov	r1, r5
 8004b36:	4640      	mov	r0, r8
 8004b38:	47c8      	blx	r9
 8004b3a:	4306      	orrs	r6, r0
 8004b3c:	3568      	adds	r5, #104	; 0x68
 8004b3e:	e7ee      	b.n	8004b1e <_fwalk_reent+0x1a>

08004b40 <__swhatbuf_r>:
 8004b40:	b570      	push	{r4, r5, r6, lr}
 8004b42:	460e      	mov	r6, r1
 8004b44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b48:	2900      	cmp	r1, #0
 8004b4a:	b096      	sub	sp, #88	; 0x58
 8004b4c:	4614      	mov	r4, r2
 8004b4e:	461d      	mov	r5, r3
 8004b50:	da07      	bge.n	8004b62 <__swhatbuf_r+0x22>
 8004b52:	2300      	movs	r3, #0
 8004b54:	602b      	str	r3, [r5, #0]
 8004b56:	89b3      	ldrh	r3, [r6, #12]
 8004b58:	061a      	lsls	r2, r3, #24
 8004b5a:	d410      	bmi.n	8004b7e <__swhatbuf_r+0x3e>
 8004b5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b60:	e00e      	b.n	8004b80 <__swhatbuf_r+0x40>
 8004b62:	466a      	mov	r2, sp
 8004b64:	f000 f96e 	bl	8004e44 <_fstat_r>
 8004b68:	2800      	cmp	r0, #0
 8004b6a:	dbf2      	blt.n	8004b52 <__swhatbuf_r+0x12>
 8004b6c:	9a01      	ldr	r2, [sp, #4]
 8004b6e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004b72:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004b76:	425a      	negs	r2, r3
 8004b78:	415a      	adcs	r2, r3
 8004b7a:	602a      	str	r2, [r5, #0]
 8004b7c:	e7ee      	b.n	8004b5c <__swhatbuf_r+0x1c>
 8004b7e:	2340      	movs	r3, #64	; 0x40
 8004b80:	2000      	movs	r0, #0
 8004b82:	6023      	str	r3, [r4, #0]
 8004b84:	b016      	add	sp, #88	; 0x58
 8004b86:	bd70      	pop	{r4, r5, r6, pc}

08004b88 <__smakebuf_r>:
 8004b88:	898b      	ldrh	r3, [r1, #12]
 8004b8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004b8c:	079d      	lsls	r5, r3, #30
 8004b8e:	4606      	mov	r6, r0
 8004b90:	460c      	mov	r4, r1
 8004b92:	d507      	bpl.n	8004ba4 <__smakebuf_r+0x1c>
 8004b94:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004b98:	6023      	str	r3, [r4, #0]
 8004b9a:	6123      	str	r3, [r4, #16]
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	6163      	str	r3, [r4, #20]
 8004ba0:	b002      	add	sp, #8
 8004ba2:	bd70      	pop	{r4, r5, r6, pc}
 8004ba4:	ab01      	add	r3, sp, #4
 8004ba6:	466a      	mov	r2, sp
 8004ba8:	f7ff ffca 	bl	8004b40 <__swhatbuf_r>
 8004bac:	9900      	ldr	r1, [sp, #0]
 8004bae:	4605      	mov	r5, r0
 8004bb0:	4630      	mov	r0, r6
 8004bb2:	f000 f877 	bl	8004ca4 <_malloc_r>
 8004bb6:	b948      	cbnz	r0, 8004bcc <__smakebuf_r+0x44>
 8004bb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004bbc:	059a      	lsls	r2, r3, #22
 8004bbe:	d4ef      	bmi.n	8004ba0 <__smakebuf_r+0x18>
 8004bc0:	f023 0303 	bic.w	r3, r3, #3
 8004bc4:	f043 0302 	orr.w	r3, r3, #2
 8004bc8:	81a3      	strh	r3, [r4, #12]
 8004bca:	e7e3      	b.n	8004b94 <__smakebuf_r+0xc>
 8004bcc:	4b0d      	ldr	r3, [pc, #52]	; (8004c04 <__smakebuf_r+0x7c>)
 8004bce:	62b3      	str	r3, [r6, #40]	; 0x28
 8004bd0:	89a3      	ldrh	r3, [r4, #12]
 8004bd2:	6020      	str	r0, [r4, #0]
 8004bd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bd8:	81a3      	strh	r3, [r4, #12]
 8004bda:	9b00      	ldr	r3, [sp, #0]
 8004bdc:	6163      	str	r3, [r4, #20]
 8004bde:	9b01      	ldr	r3, [sp, #4]
 8004be0:	6120      	str	r0, [r4, #16]
 8004be2:	b15b      	cbz	r3, 8004bfc <__smakebuf_r+0x74>
 8004be4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004be8:	4630      	mov	r0, r6
 8004bea:	f000 f93d 	bl	8004e68 <_isatty_r>
 8004bee:	b128      	cbz	r0, 8004bfc <__smakebuf_r+0x74>
 8004bf0:	89a3      	ldrh	r3, [r4, #12]
 8004bf2:	f023 0303 	bic.w	r3, r3, #3
 8004bf6:	f043 0301 	orr.w	r3, r3, #1
 8004bfa:	81a3      	strh	r3, [r4, #12]
 8004bfc:	89a3      	ldrh	r3, [r4, #12]
 8004bfe:	431d      	orrs	r5, r3
 8004c00:	81a5      	strh	r5, [r4, #12]
 8004c02:	e7cd      	b.n	8004ba0 <__smakebuf_r+0x18>
 8004c04:	080049f5 	.word	0x080049f5

08004c08 <_free_r>:
 8004c08:	b538      	push	{r3, r4, r5, lr}
 8004c0a:	4605      	mov	r5, r0
 8004c0c:	2900      	cmp	r1, #0
 8004c0e:	d045      	beq.n	8004c9c <_free_r+0x94>
 8004c10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c14:	1f0c      	subs	r4, r1, #4
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	bfb8      	it	lt
 8004c1a:	18e4      	addlt	r4, r4, r3
 8004c1c:	f000 f946 	bl	8004eac <__malloc_lock>
 8004c20:	4a1f      	ldr	r2, [pc, #124]	; (8004ca0 <_free_r+0x98>)
 8004c22:	6813      	ldr	r3, [r2, #0]
 8004c24:	4610      	mov	r0, r2
 8004c26:	b933      	cbnz	r3, 8004c36 <_free_r+0x2e>
 8004c28:	6063      	str	r3, [r4, #4]
 8004c2a:	6014      	str	r4, [r2, #0]
 8004c2c:	4628      	mov	r0, r5
 8004c2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004c32:	f000 b93c 	b.w	8004eae <__malloc_unlock>
 8004c36:	42a3      	cmp	r3, r4
 8004c38:	d90c      	bls.n	8004c54 <_free_r+0x4c>
 8004c3a:	6821      	ldr	r1, [r4, #0]
 8004c3c:	1862      	adds	r2, r4, r1
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	bf04      	itt	eq
 8004c42:	681a      	ldreq	r2, [r3, #0]
 8004c44:	685b      	ldreq	r3, [r3, #4]
 8004c46:	6063      	str	r3, [r4, #4]
 8004c48:	bf04      	itt	eq
 8004c4a:	1852      	addeq	r2, r2, r1
 8004c4c:	6022      	streq	r2, [r4, #0]
 8004c4e:	6004      	str	r4, [r0, #0]
 8004c50:	e7ec      	b.n	8004c2c <_free_r+0x24>
 8004c52:	4613      	mov	r3, r2
 8004c54:	685a      	ldr	r2, [r3, #4]
 8004c56:	b10a      	cbz	r2, 8004c5c <_free_r+0x54>
 8004c58:	42a2      	cmp	r2, r4
 8004c5a:	d9fa      	bls.n	8004c52 <_free_r+0x4a>
 8004c5c:	6819      	ldr	r1, [r3, #0]
 8004c5e:	1858      	adds	r0, r3, r1
 8004c60:	42a0      	cmp	r0, r4
 8004c62:	d10b      	bne.n	8004c7c <_free_r+0x74>
 8004c64:	6820      	ldr	r0, [r4, #0]
 8004c66:	4401      	add	r1, r0
 8004c68:	1858      	adds	r0, r3, r1
 8004c6a:	4282      	cmp	r2, r0
 8004c6c:	6019      	str	r1, [r3, #0]
 8004c6e:	d1dd      	bne.n	8004c2c <_free_r+0x24>
 8004c70:	6810      	ldr	r0, [r2, #0]
 8004c72:	6852      	ldr	r2, [r2, #4]
 8004c74:	605a      	str	r2, [r3, #4]
 8004c76:	4401      	add	r1, r0
 8004c78:	6019      	str	r1, [r3, #0]
 8004c7a:	e7d7      	b.n	8004c2c <_free_r+0x24>
 8004c7c:	d902      	bls.n	8004c84 <_free_r+0x7c>
 8004c7e:	230c      	movs	r3, #12
 8004c80:	602b      	str	r3, [r5, #0]
 8004c82:	e7d3      	b.n	8004c2c <_free_r+0x24>
 8004c84:	6820      	ldr	r0, [r4, #0]
 8004c86:	1821      	adds	r1, r4, r0
 8004c88:	428a      	cmp	r2, r1
 8004c8a:	bf04      	itt	eq
 8004c8c:	6811      	ldreq	r1, [r2, #0]
 8004c8e:	6852      	ldreq	r2, [r2, #4]
 8004c90:	6062      	str	r2, [r4, #4]
 8004c92:	bf04      	itt	eq
 8004c94:	1809      	addeq	r1, r1, r0
 8004c96:	6021      	streq	r1, [r4, #0]
 8004c98:	605c      	str	r4, [r3, #4]
 8004c9a:	e7c7      	b.n	8004c2c <_free_r+0x24>
 8004c9c:	bd38      	pop	{r3, r4, r5, pc}
 8004c9e:	bf00      	nop
 8004ca0:	20000090 	.word	0x20000090

08004ca4 <_malloc_r>:
 8004ca4:	b570      	push	{r4, r5, r6, lr}
 8004ca6:	1ccd      	adds	r5, r1, #3
 8004ca8:	f025 0503 	bic.w	r5, r5, #3
 8004cac:	3508      	adds	r5, #8
 8004cae:	2d0c      	cmp	r5, #12
 8004cb0:	bf38      	it	cc
 8004cb2:	250c      	movcc	r5, #12
 8004cb4:	2d00      	cmp	r5, #0
 8004cb6:	4606      	mov	r6, r0
 8004cb8:	db01      	blt.n	8004cbe <_malloc_r+0x1a>
 8004cba:	42a9      	cmp	r1, r5
 8004cbc:	d903      	bls.n	8004cc6 <_malloc_r+0x22>
 8004cbe:	230c      	movs	r3, #12
 8004cc0:	6033      	str	r3, [r6, #0]
 8004cc2:	2000      	movs	r0, #0
 8004cc4:	bd70      	pop	{r4, r5, r6, pc}
 8004cc6:	f000 f8f1 	bl	8004eac <__malloc_lock>
 8004cca:	4a21      	ldr	r2, [pc, #132]	; (8004d50 <_malloc_r+0xac>)
 8004ccc:	6814      	ldr	r4, [r2, #0]
 8004cce:	4621      	mov	r1, r4
 8004cd0:	b991      	cbnz	r1, 8004cf8 <_malloc_r+0x54>
 8004cd2:	4c20      	ldr	r4, [pc, #128]	; (8004d54 <_malloc_r+0xb0>)
 8004cd4:	6823      	ldr	r3, [r4, #0]
 8004cd6:	b91b      	cbnz	r3, 8004ce0 <_malloc_r+0x3c>
 8004cd8:	4630      	mov	r0, r6
 8004cda:	f000 f83d 	bl	8004d58 <_sbrk_r>
 8004cde:	6020      	str	r0, [r4, #0]
 8004ce0:	4629      	mov	r1, r5
 8004ce2:	4630      	mov	r0, r6
 8004ce4:	f000 f838 	bl	8004d58 <_sbrk_r>
 8004ce8:	1c43      	adds	r3, r0, #1
 8004cea:	d124      	bne.n	8004d36 <_malloc_r+0x92>
 8004cec:	230c      	movs	r3, #12
 8004cee:	6033      	str	r3, [r6, #0]
 8004cf0:	4630      	mov	r0, r6
 8004cf2:	f000 f8dc 	bl	8004eae <__malloc_unlock>
 8004cf6:	e7e4      	b.n	8004cc2 <_malloc_r+0x1e>
 8004cf8:	680b      	ldr	r3, [r1, #0]
 8004cfa:	1b5b      	subs	r3, r3, r5
 8004cfc:	d418      	bmi.n	8004d30 <_malloc_r+0x8c>
 8004cfe:	2b0b      	cmp	r3, #11
 8004d00:	d90f      	bls.n	8004d22 <_malloc_r+0x7e>
 8004d02:	600b      	str	r3, [r1, #0]
 8004d04:	50cd      	str	r5, [r1, r3]
 8004d06:	18cc      	adds	r4, r1, r3
 8004d08:	4630      	mov	r0, r6
 8004d0a:	f000 f8d0 	bl	8004eae <__malloc_unlock>
 8004d0e:	f104 000b 	add.w	r0, r4, #11
 8004d12:	1d23      	adds	r3, r4, #4
 8004d14:	f020 0007 	bic.w	r0, r0, #7
 8004d18:	1ac3      	subs	r3, r0, r3
 8004d1a:	d0d3      	beq.n	8004cc4 <_malloc_r+0x20>
 8004d1c:	425a      	negs	r2, r3
 8004d1e:	50e2      	str	r2, [r4, r3]
 8004d20:	e7d0      	b.n	8004cc4 <_malloc_r+0x20>
 8004d22:	428c      	cmp	r4, r1
 8004d24:	684b      	ldr	r3, [r1, #4]
 8004d26:	bf16      	itet	ne
 8004d28:	6063      	strne	r3, [r4, #4]
 8004d2a:	6013      	streq	r3, [r2, #0]
 8004d2c:	460c      	movne	r4, r1
 8004d2e:	e7eb      	b.n	8004d08 <_malloc_r+0x64>
 8004d30:	460c      	mov	r4, r1
 8004d32:	6849      	ldr	r1, [r1, #4]
 8004d34:	e7cc      	b.n	8004cd0 <_malloc_r+0x2c>
 8004d36:	1cc4      	adds	r4, r0, #3
 8004d38:	f024 0403 	bic.w	r4, r4, #3
 8004d3c:	42a0      	cmp	r0, r4
 8004d3e:	d005      	beq.n	8004d4c <_malloc_r+0xa8>
 8004d40:	1a21      	subs	r1, r4, r0
 8004d42:	4630      	mov	r0, r6
 8004d44:	f000 f808 	bl	8004d58 <_sbrk_r>
 8004d48:	3001      	adds	r0, #1
 8004d4a:	d0cf      	beq.n	8004cec <_malloc_r+0x48>
 8004d4c:	6025      	str	r5, [r4, #0]
 8004d4e:	e7db      	b.n	8004d08 <_malloc_r+0x64>
 8004d50:	20000090 	.word	0x20000090
 8004d54:	20000094 	.word	0x20000094

08004d58 <_sbrk_r>:
 8004d58:	b538      	push	{r3, r4, r5, lr}
 8004d5a:	4c06      	ldr	r4, [pc, #24]	; (8004d74 <_sbrk_r+0x1c>)
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	4605      	mov	r5, r0
 8004d60:	4608      	mov	r0, r1
 8004d62:	6023      	str	r3, [r4, #0]
 8004d64:	f7ff fb40 	bl	80043e8 <_sbrk>
 8004d68:	1c43      	adds	r3, r0, #1
 8004d6a:	d102      	bne.n	8004d72 <_sbrk_r+0x1a>
 8004d6c:	6823      	ldr	r3, [r4, #0]
 8004d6e:	b103      	cbz	r3, 8004d72 <_sbrk_r+0x1a>
 8004d70:	602b      	str	r3, [r5, #0]
 8004d72:	bd38      	pop	{r3, r4, r5, pc}
 8004d74:	20004ff0 	.word	0x20004ff0

08004d78 <__sread>:
 8004d78:	b510      	push	{r4, lr}
 8004d7a:	460c      	mov	r4, r1
 8004d7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d80:	f000 f896 	bl	8004eb0 <_read_r>
 8004d84:	2800      	cmp	r0, #0
 8004d86:	bfab      	itete	ge
 8004d88:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004d8a:	89a3      	ldrhlt	r3, [r4, #12]
 8004d8c:	181b      	addge	r3, r3, r0
 8004d8e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004d92:	bfac      	ite	ge
 8004d94:	6563      	strge	r3, [r4, #84]	; 0x54
 8004d96:	81a3      	strhlt	r3, [r4, #12]
 8004d98:	bd10      	pop	{r4, pc}

08004d9a <__swrite>:
 8004d9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d9e:	461f      	mov	r7, r3
 8004da0:	898b      	ldrh	r3, [r1, #12]
 8004da2:	05db      	lsls	r3, r3, #23
 8004da4:	4605      	mov	r5, r0
 8004da6:	460c      	mov	r4, r1
 8004da8:	4616      	mov	r6, r2
 8004daa:	d505      	bpl.n	8004db8 <__swrite+0x1e>
 8004dac:	2302      	movs	r3, #2
 8004dae:	2200      	movs	r2, #0
 8004db0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004db4:	f000 f868 	bl	8004e88 <_lseek_r>
 8004db8:	89a3      	ldrh	r3, [r4, #12]
 8004dba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004dbe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004dc2:	81a3      	strh	r3, [r4, #12]
 8004dc4:	4632      	mov	r2, r6
 8004dc6:	463b      	mov	r3, r7
 8004dc8:	4628      	mov	r0, r5
 8004dca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004dce:	f000 b817 	b.w	8004e00 <_write_r>

08004dd2 <__sseek>:
 8004dd2:	b510      	push	{r4, lr}
 8004dd4:	460c      	mov	r4, r1
 8004dd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dda:	f000 f855 	bl	8004e88 <_lseek_r>
 8004dde:	1c43      	adds	r3, r0, #1
 8004de0:	89a3      	ldrh	r3, [r4, #12]
 8004de2:	bf15      	itete	ne
 8004de4:	6560      	strne	r0, [r4, #84]	; 0x54
 8004de6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004dea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004dee:	81a3      	strheq	r3, [r4, #12]
 8004df0:	bf18      	it	ne
 8004df2:	81a3      	strhne	r3, [r4, #12]
 8004df4:	bd10      	pop	{r4, pc}

08004df6 <__sclose>:
 8004df6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dfa:	f000 b813 	b.w	8004e24 <_close_r>
	...

08004e00 <_write_r>:
 8004e00:	b538      	push	{r3, r4, r5, lr}
 8004e02:	4c07      	ldr	r4, [pc, #28]	; (8004e20 <_write_r+0x20>)
 8004e04:	4605      	mov	r5, r0
 8004e06:	4608      	mov	r0, r1
 8004e08:	4611      	mov	r1, r2
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	6022      	str	r2, [r4, #0]
 8004e0e:	461a      	mov	r2, r3
 8004e10:	f7ff fa99 	bl	8004346 <_write>
 8004e14:	1c43      	adds	r3, r0, #1
 8004e16:	d102      	bne.n	8004e1e <_write_r+0x1e>
 8004e18:	6823      	ldr	r3, [r4, #0]
 8004e1a:	b103      	cbz	r3, 8004e1e <_write_r+0x1e>
 8004e1c:	602b      	str	r3, [r5, #0]
 8004e1e:	bd38      	pop	{r3, r4, r5, pc}
 8004e20:	20004ff0 	.word	0x20004ff0

08004e24 <_close_r>:
 8004e24:	b538      	push	{r3, r4, r5, lr}
 8004e26:	4c06      	ldr	r4, [pc, #24]	; (8004e40 <_close_r+0x1c>)
 8004e28:	2300      	movs	r3, #0
 8004e2a:	4605      	mov	r5, r0
 8004e2c:	4608      	mov	r0, r1
 8004e2e:	6023      	str	r3, [r4, #0]
 8004e30:	f7ff faa5 	bl	800437e <_close>
 8004e34:	1c43      	adds	r3, r0, #1
 8004e36:	d102      	bne.n	8004e3e <_close_r+0x1a>
 8004e38:	6823      	ldr	r3, [r4, #0]
 8004e3a:	b103      	cbz	r3, 8004e3e <_close_r+0x1a>
 8004e3c:	602b      	str	r3, [r5, #0]
 8004e3e:	bd38      	pop	{r3, r4, r5, pc}
 8004e40:	20004ff0 	.word	0x20004ff0

08004e44 <_fstat_r>:
 8004e44:	b538      	push	{r3, r4, r5, lr}
 8004e46:	4c07      	ldr	r4, [pc, #28]	; (8004e64 <_fstat_r+0x20>)
 8004e48:	2300      	movs	r3, #0
 8004e4a:	4605      	mov	r5, r0
 8004e4c:	4608      	mov	r0, r1
 8004e4e:	4611      	mov	r1, r2
 8004e50:	6023      	str	r3, [r4, #0]
 8004e52:	f7ff faa0 	bl	8004396 <_fstat>
 8004e56:	1c43      	adds	r3, r0, #1
 8004e58:	d102      	bne.n	8004e60 <_fstat_r+0x1c>
 8004e5a:	6823      	ldr	r3, [r4, #0]
 8004e5c:	b103      	cbz	r3, 8004e60 <_fstat_r+0x1c>
 8004e5e:	602b      	str	r3, [r5, #0]
 8004e60:	bd38      	pop	{r3, r4, r5, pc}
 8004e62:	bf00      	nop
 8004e64:	20004ff0 	.word	0x20004ff0

08004e68 <_isatty_r>:
 8004e68:	b538      	push	{r3, r4, r5, lr}
 8004e6a:	4c06      	ldr	r4, [pc, #24]	; (8004e84 <_isatty_r+0x1c>)
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	4605      	mov	r5, r0
 8004e70:	4608      	mov	r0, r1
 8004e72:	6023      	str	r3, [r4, #0]
 8004e74:	f7ff fa9f 	bl	80043b6 <_isatty>
 8004e78:	1c43      	adds	r3, r0, #1
 8004e7a:	d102      	bne.n	8004e82 <_isatty_r+0x1a>
 8004e7c:	6823      	ldr	r3, [r4, #0]
 8004e7e:	b103      	cbz	r3, 8004e82 <_isatty_r+0x1a>
 8004e80:	602b      	str	r3, [r5, #0]
 8004e82:	bd38      	pop	{r3, r4, r5, pc}
 8004e84:	20004ff0 	.word	0x20004ff0

08004e88 <_lseek_r>:
 8004e88:	b538      	push	{r3, r4, r5, lr}
 8004e8a:	4c07      	ldr	r4, [pc, #28]	; (8004ea8 <_lseek_r+0x20>)
 8004e8c:	4605      	mov	r5, r0
 8004e8e:	4608      	mov	r0, r1
 8004e90:	4611      	mov	r1, r2
 8004e92:	2200      	movs	r2, #0
 8004e94:	6022      	str	r2, [r4, #0]
 8004e96:	461a      	mov	r2, r3
 8004e98:	f7ff fa98 	bl	80043cc <_lseek>
 8004e9c:	1c43      	adds	r3, r0, #1
 8004e9e:	d102      	bne.n	8004ea6 <_lseek_r+0x1e>
 8004ea0:	6823      	ldr	r3, [r4, #0]
 8004ea2:	b103      	cbz	r3, 8004ea6 <_lseek_r+0x1e>
 8004ea4:	602b      	str	r3, [r5, #0]
 8004ea6:	bd38      	pop	{r3, r4, r5, pc}
 8004ea8:	20004ff0 	.word	0x20004ff0

08004eac <__malloc_lock>:
 8004eac:	4770      	bx	lr

08004eae <__malloc_unlock>:
 8004eae:	4770      	bx	lr

08004eb0 <_read_r>:
 8004eb0:	b538      	push	{r3, r4, r5, lr}
 8004eb2:	4c07      	ldr	r4, [pc, #28]	; (8004ed0 <_read_r+0x20>)
 8004eb4:	4605      	mov	r5, r0
 8004eb6:	4608      	mov	r0, r1
 8004eb8:	4611      	mov	r1, r2
 8004eba:	2200      	movs	r2, #0
 8004ebc:	6022      	str	r2, [r4, #0]
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	f7ff fa24 	bl	800430c <_read>
 8004ec4:	1c43      	adds	r3, r0, #1
 8004ec6:	d102      	bne.n	8004ece <_read_r+0x1e>
 8004ec8:	6823      	ldr	r3, [r4, #0]
 8004eca:	b103      	cbz	r3, 8004ece <_read_r+0x1e>
 8004ecc:	602b      	str	r3, [r5, #0]
 8004ece:	bd38      	pop	{r3, r4, r5, pc}
 8004ed0:	20004ff0 	.word	0x20004ff0

08004ed4 <_init>:
 8004ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ed6:	bf00      	nop
 8004ed8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004eda:	bc08      	pop	{r3}
 8004edc:	469e      	mov	lr, r3
 8004ede:	4770      	bx	lr

08004ee0 <_fini>:
 8004ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ee2:	bf00      	nop
 8004ee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ee6:	bc08      	pop	{r3}
 8004ee8:	469e      	mov	lr, r3
 8004eea:	4770      	bx	lr
