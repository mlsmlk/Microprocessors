
lab5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000414c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080042d4  080042d4  000142d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004314  08004314  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004314  08004314  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004314  08004314  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004314  08004314  00014314  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004318  08004318  00014318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800431c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00015988  2000000c  08004328  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20015994  08004328  00025994  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010b29  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002062  00000000  00000000  00030b65  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001040  00000000  00000000  00032bc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f38  00000000  00000000  00033c08  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00026087  00000000  00000000  00034b40  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c7d1  00000000  00000000  0005abc7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000edf9f  00000000  00000000  00067398  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00155337  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004448  00000000  00000000  001553b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080042bc 	.word	0x080042bc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080042bc 	.word	0x080042bc

080001c8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80001ce:	2300      	movs	r3, #0
 80001d0:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001d2:	2003      	movs	r0, #3
 80001d4:	f000 f95e 	bl	8000494 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80001d8:	2000      	movs	r0, #0
 80001da:	f000 f80d 	bl	80001f8 <HAL_InitTick>
 80001de:	4603      	mov	r3, r0
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d002      	beq.n	80001ea <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80001e4:	2301      	movs	r3, #1
 80001e6:	71fb      	strb	r3, [r7, #7]
 80001e8:	e001      	b.n	80001ee <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80001ea:	f003 fdf9 	bl	8003de0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80001ee:	79fb      	ldrb	r3, [r7, #7]
}
 80001f0:	4618      	mov	r0, r3
 80001f2:	3708      	adds	r7, #8
 80001f4:	46bd      	mov	sp, r7
 80001f6:	bd80      	pop	{r7, pc}

080001f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b084      	sub	sp, #16
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000200:	2300      	movs	r3, #0
 8000202:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000204:	4b17      	ldr	r3, [pc, #92]	; (8000264 <HAL_InitTick+0x6c>)
 8000206:	781b      	ldrb	r3, [r3, #0]
 8000208:	2b00      	cmp	r3, #0
 800020a:	d023      	beq.n	8000254 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800020c:	4b16      	ldr	r3, [pc, #88]	; (8000268 <HAL_InitTick+0x70>)
 800020e:	681a      	ldr	r2, [r3, #0]
 8000210:	4b14      	ldr	r3, [pc, #80]	; (8000264 <HAL_InitTick+0x6c>)
 8000212:	781b      	ldrb	r3, [r3, #0]
 8000214:	4619      	mov	r1, r3
 8000216:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800021a:	fbb3 f3f1 	udiv	r3, r3, r1
 800021e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000222:	4618      	mov	r0, r3
 8000224:	f000 f96b 	bl	80004fe <HAL_SYSTICK_Config>
 8000228:	4603      	mov	r3, r0
 800022a:	2b00      	cmp	r3, #0
 800022c:	d10f      	bne.n	800024e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	2b0f      	cmp	r3, #15
 8000232:	d809      	bhi.n	8000248 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000234:	2200      	movs	r2, #0
 8000236:	6879      	ldr	r1, [r7, #4]
 8000238:	f04f 30ff 	mov.w	r0, #4294967295
 800023c:	f000 f935 	bl	80004aa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000240:	4a0a      	ldr	r2, [pc, #40]	; (800026c <HAL_InitTick+0x74>)
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	6013      	str	r3, [r2, #0]
 8000246:	e007      	b.n	8000258 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000248:	2301      	movs	r3, #1
 800024a:	73fb      	strb	r3, [r7, #15]
 800024c:	e004      	b.n	8000258 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800024e:	2301      	movs	r3, #1
 8000250:	73fb      	strb	r3, [r7, #15]
 8000252:	e001      	b.n	8000258 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000254:	2301      	movs	r3, #1
 8000256:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000258:	7bfb      	ldrb	r3, [r7, #15]
}
 800025a:	4618      	mov	r0, r3
 800025c:	3710      	adds	r7, #16
 800025e:	46bd      	mov	sp, r7
 8000260:	bd80      	pop	{r7, pc}
 8000262:	bf00      	nop
 8000264:	20000004 	.word	0x20000004
 8000268:	20000008 	.word	0x20000008
 800026c:	20000000 	.word	0x20000000

08000270 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000270:	b480      	push	{r7}
 8000272:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000274:	4b06      	ldr	r3, [pc, #24]	; (8000290 <HAL_IncTick+0x20>)
 8000276:	781b      	ldrb	r3, [r3, #0]
 8000278:	461a      	mov	r2, r3
 800027a:	4b06      	ldr	r3, [pc, #24]	; (8000294 <HAL_IncTick+0x24>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	4413      	add	r3, r2
 8000280:	4a04      	ldr	r2, [pc, #16]	; (8000294 <HAL_IncTick+0x24>)
 8000282:	6013      	str	r3, [r2, #0]
}
 8000284:	bf00      	nop
 8000286:	46bd      	mov	sp, r7
 8000288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop
 8000290:	20000004 	.word	0x20000004
 8000294:	20000054 	.word	0x20000054

08000298 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000298:	b480      	push	{r7}
 800029a:	af00      	add	r7, sp, #0
  return uwTick;
 800029c:	4b03      	ldr	r3, [pc, #12]	; (80002ac <HAL_GetTick+0x14>)
 800029e:	681b      	ldr	r3, [r3, #0]
}
 80002a0:	4618      	mov	r0, r3
 80002a2:	46bd      	mov	sp, r7
 80002a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a8:	4770      	bx	lr
 80002aa:	bf00      	nop
 80002ac:	20000054 	.word	0x20000054

080002b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b084      	sub	sp, #16
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80002b8:	f7ff ffee 	bl	8000298 <HAL_GetTick>
 80002bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80002c2:	68fb      	ldr	r3, [r7, #12]
 80002c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80002c8:	d005      	beq.n	80002d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80002ca:	4b09      	ldr	r3, [pc, #36]	; (80002f0 <HAL_Delay+0x40>)
 80002cc:	781b      	ldrb	r3, [r3, #0]
 80002ce:	461a      	mov	r2, r3
 80002d0:	68fb      	ldr	r3, [r7, #12]
 80002d2:	4413      	add	r3, r2
 80002d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80002d6:	bf00      	nop
 80002d8:	f7ff ffde 	bl	8000298 <HAL_GetTick>
 80002dc:	4602      	mov	r2, r0
 80002de:	68bb      	ldr	r3, [r7, #8]
 80002e0:	1ad3      	subs	r3, r2, r3
 80002e2:	68fa      	ldr	r2, [r7, #12]
 80002e4:	429a      	cmp	r2, r3
 80002e6:	d8f7      	bhi.n	80002d8 <HAL_Delay+0x28>
  {
  }
}
 80002e8:	bf00      	nop
 80002ea:	3710      	adds	r7, #16
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	20000004 	.word	0x20000004

080002f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80002f4:	b480      	push	{r7}
 80002f6:	b085      	sub	sp, #20
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	f003 0307 	and.w	r3, r3, #7
 8000302:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000304:	4b0c      	ldr	r3, [pc, #48]	; (8000338 <__NVIC_SetPriorityGrouping+0x44>)
 8000306:	68db      	ldr	r3, [r3, #12]
 8000308:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800030a:	68ba      	ldr	r2, [r7, #8]
 800030c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000310:	4013      	ands	r3, r2
 8000312:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000314:	68fb      	ldr	r3, [r7, #12]
 8000316:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000318:	68bb      	ldr	r3, [r7, #8]
 800031a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800031c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000320:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000324:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000326:	4a04      	ldr	r2, [pc, #16]	; (8000338 <__NVIC_SetPriorityGrouping+0x44>)
 8000328:	68bb      	ldr	r3, [r7, #8]
 800032a:	60d3      	str	r3, [r2, #12]
}
 800032c:	bf00      	nop
 800032e:	3714      	adds	r7, #20
 8000330:	46bd      	mov	sp, r7
 8000332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000336:	4770      	bx	lr
 8000338:	e000ed00 	.word	0xe000ed00

0800033c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800033c:	b480      	push	{r7}
 800033e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000340:	4b04      	ldr	r3, [pc, #16]	; (8000354 <__NVIC_GetPriorityGrouping+0x18>)
 8000342:	68db      	ldr	r3, [r3, #12]
 8000344:	0a1b      	lsrs	r3, r3, #8
 8000346:	f003 0307 	and.w	r3, r3, #7
}
 800034a:	4618      	mov	r0, r3
 800034c:	46bd      	mov	sp, r7
 800034e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000352:	4770      	bx	lr
 8000354:	e000ed00 	.word	0xe000ed00

08000358 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000358:	b480      	push	{r7}
 800035a:	b083      	sub	sp, #12
 800035c:	af00      	add	r7, sp, #0
 800035e:	4603      	mov	r3, r0
 8000360:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000366:	2b00      	cmp	r3, #0
 8000368:	db0b      	blt.n	8000382 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800036a:	79fb      	ldrb	r3, [r7, #7]
 800036c:	f003 021f 	and.w	r2, r3, #31
 8000370:	4907      	ldr	r1, [pc, #28]	; (8000390 <__NVIC_EnableIRQ+0x38>)
 8000372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000376:	095b      	lsrs	r3, r3, #5
 8000378:	2001      	movs	r0, #1
 800037a:	fa00 f202 	lsl.w	r2, r0, r2
 800037e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000382:	bf00      	nop
 8000384:	370c      	adds	r7, #12
 8000386:	46bd      	mov	sp, r7
 8000388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop
 8000390:	e000e100 	.word	0xe000e100

08000394 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000394:	b480      	push	{r7}
 8000396:	b083      	sub	sp, #12
 8000398:	af00      	add	r7, sp, #0
 800039a:	4603      	mov	r3, r0
 800039c:	6039      	str	r1, [r7, #0]
 800039e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80003a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	db0a      	blt.n	80003be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003a8:	683b      	ldr	r3, [r7, #0]
 80003aa:	b2da      	uxtb	r2, r3
 80003ac:	490c      	ldr	r1, [pc, #48]	; (80003e0 <__NVIC_SetPriority+0x4c>)
 80003ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003b2:	0112      	lsls	r2, r2, #4
 80003b4:	b2d2      	uxtb	r2, r2
 80003b6:	440b      	add	r3, r1
 80003b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80003bc:	e00a      	b.n	80003d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003be:	683b      	ldr	r3, [r7, #0]
 80003c0:	b2da      	uxtb	r2, r3
 80003c2:	4908      	ldr	r1, [pc, #32]	; (80003e4 <__NVIC_SetPriority+0x50>)
 80003c4:	79fb      	ldrb	r3, [r7, #7]
 80003c6:	f003 030f 	and.w	r3, r3, #15
 80003ca:	3b04      	subs	r3, #4
 80003cc:	0112      	lsls	r2, r2, #4
 80003ce:	b2d2      	uxtb	r2, r2
 80003d0:	440b      	add	r3, r1
 80003d2:	761a      	strb	r2, [r3, #24]
}
 80003d4:	bf00      	nop
 80003d6:	370c      	adds	r7, #12
 80003d8:	46bd      	mov	sp, r7
 80003da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003de:	4770      	bx	lr
 80003e0:	e000e100 	.word	0xe000e100
 80003e4:	e000ed00 	.word	0xe000ed00

080003e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80003e8:	b480      	push	{r7}
 80003ea:	b089      	sub	sp, #36	; 0x24
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	60f8      	str	r0, [r7, #12]
 80003f0:	60b9      	str	r1, [r7, #8]
 80003f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80003f4:	68fb      	ldr	r3, [r7, #12]
 80003f6:	f003 0307 	and.w	r3, r3, #7
 80003fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80003fc:	69fb      	ldr	r3, [r7, #28]
 80003fe:	f1c3 0307 	rsb	r3, r3, #7
 8000402:	2b04      	cmp	r3, #4
 8000404:	bf28      	it	cs
 8000406:	2304      	movcs	r3, #4
 8000408:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800040a:	69fb      	ldr	r3, [r7, #28]
 800040c:	3304      	adds	r3, #4
 800040e:	2b06      	cmp	r3, #6
 8000410:	d902      	bls.n	8000418 <NVIC_EncodePriority+0x30>
 8000412:	69fb      	ldr	r3, [r7, #28]
 8000414:	3b03      	subs	r3, #3
 8000416:	e000      	b.n	800041a <NVIC_EncodePriority+0x32>
 8000418:	2300      	movs	r3, #0
 800041a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800041c:	f04f 32ff 	mov.w	r2, #4294967295
 8000420:	69bb      	ldr	r3, [r7, #24]
 8000422:	fa02 f303 	lsl.w	r3, r2, r3
 8000426:	43da      	mvns	r2, r3
 8000428:	68bb      	ldr	r3, [r7, #8]
 800042a:	401a      	ands	r2, r3
 800042c:	697b      	ldr	r3, [r7, #20]
 800042e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000430:	f04f 31ff 	mov.w	r1, #4294967295
 8000434:	697b      	ldr	r3, [r7, #20]
 8000436:	fa01 f303 	lsl.w	r3, r1, r3
 800043a:	43d9      	mvns	r1, r3
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000440:	4313      	orrs	r3, r2
         );
}
 8000442:	4618      	mov	r0, r3
 8000444:	3724      	adds	r7, #36	; 0x24
 8000446:	46bd      	mov	sp, r7
 8000448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044c:	4770      	bx	lr
	...

08000450 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b082      	sub	sp, #8
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	3b01      	subs	r3, #1
 800045c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000460:	d301      	bcc.n	8000466 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000462:	2301      	movs	r3, #1
 8000464:	e00f      	b.n	8000486 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000466:	4a0a      	ldr	r2, [pc, #40]	; (8000490 <SysTick_Config+0x40>)
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	3b01      	subs	r3, #1
 800046c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800046e:	210f      	movs	r1, #15
 8000470:	f04f 30ff 	mov.w	r0, #4294967295
 8000474:	f7ff ff8e 	bl	8000394 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000478:	4b05      	ldr	r3, [pc, #20]	; (8000490 <SysTick_Config+0x40>)
 800047a:	2200      	movs	r2, #0
 800047c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800047e:	4b04      	ldr	r3, [pc, #16]	; (8000490 <SysTick_Config+0x40>)
 8000480:	2207      	movs	r2, #7
 8000482:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000484:	2300      	movs	r3, #0
}
 8000486:	4618      	mov	r0, r3
 8000488:	3708      	adds	r7, #8
 800048a:	46bd      	mov	sp, r7
 800048c:	bd80      	pop	{r7, pc}
 800048e:	bf00      	nop
 8000490:	e000e010 	.word	0xe000e010

08000494 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b082      	sub	sp, #8
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800049c:	6878      	ldr	r0, [r7, #4]
 800049e:	f7ff ff29 	bl	80002f4 <__NVIC_SetPriorityGrouping>
}
 80004a2:	bf00      	nop
 80004a4:	3708      	adds	r7, #8
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}

080004aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80004aa:	b580      	push	{r7, lr}
 80004ac:	b086      	sub	sp, #24
 80004ae:	af00      	add	r7, sp, #0
 80004b0:	4603      	mov	r3, r0
 80004b2:	60b9      	str	r1, [r7, #8]
 80004b4:	607a      	str	r2, [r7, #4]
 80004b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80004b8:	2300      	movs	r3, #0
 80004ba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80004bc:	f7ff ff3e 	bl	800033c <__NVIC_GetPriorityGrouping>
 80004c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80004c2:	687a      	ldr	r2, [r7, #4]
 80004c4:	68b9      	ldr	r1, [r7, #8]
 80004c6:	6978      	ldr	r0, [r7, #20]
 80004c8:	f7ff ff8e 	bl	80003e8 <NVIC_EncodePriority>
 80004cc:	4602      	mov	r2, r0
 80004ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80004d2:	4611      	mov	r1, r2
 80004d4:	4618      	mov	r0, r3
 80004d6:	f7ff ff5d 	bl	8000394 <__NVIC_SetPriority>
}
 80004da:	bf00      	nop
 80004dc:	3718      	adds	r7, #24
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}

080004e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80004e2:	b580      	push	{r7, lr}
 80004e4:	b082      	sub	sp, #8
 80004e6:	af00      	add	r7, sp, #0
 80004e8:	4603      	mov	r3, r0
 80004ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80004ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004f0:	4618      	mov	r0, r3
 80004f2:	f7ff ff31 	bl	8000358 <__NVIC_EnableIRQ>
}
 80004f6:	bf00      	nop
 80004f8:	3708      	adds	r7, #8
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}

080004fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80004fe:	b580      	push	{r7, lr}
 8000500:	b082      	sub	sp, #8
 8000502:	af00      	add	r7, sp, #0
 8000504:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000506:	6878      	ldr	r0, [r7, #4]
 8000508:	f7ff ffa2 	bl	8000450 <SysTick_Config>
 800050c:	4603      	mov	r3, r0
}
 800050e:	4618      	mov	r0, r3
 8000510:	3708      	adds	r7, #8
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}

08000516 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8000516:	b580      	push	{r7, lr}
 8000518:	b082      	sub	sp, #8
 800051a:	af00      	add	r7, sp, #0
 800051c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	2b00      	cmp	r3, #0
 8000522:	d101      	bne.n	8000528 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8000524:	2301      	movs	r3, #1
 8000526:	e014      	b.n	8000552 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	791b      	ldrb	r3, [r3, #4]
 800052c:	b2db      	uxtb	r3, r3
 800052e:	2b00      	cmp	r3, #0
 8000530:	d105      	bne.n	800053e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	2200      	movs	r2, #0
 8000536:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000538:	6878      	ldr	r0, [r7, #4]
 800053a:	f003 fc75 	bl	8003e28 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	2202      	movs	r2, #2
 8000542:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	2200      	movs	r2, #0
 8000548:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	2201      	movs	r2, #1
 800054e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8000550:	2300      	movs	r3, #0
}
 8000552:	4618      	mov	r0, r3
 8000554:	3708      	adds	r7, #8
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
	...

0800055c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b086      	sub	sp, #24
 8000560:	af00      	add	r7, sp, #0
 8000562:	60f8      	str	r0, [r7, #12]
 8000564:	60b9      	str	r1, [r7, #8]
 8000566:	607a      	str	r2, [r7, #4]
 8000568:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 800056a:	2300      	movs	r3, #0
 800056c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800056e:	68fb      	ldr	r3, [r7, #12]
 8000570:	795b      	ldrb	r3, [r3, #5]
 8000572:	2b01      	cmp	r3, #1
 8000574:	d101      	bne.n	800057a <HAL_DAC_Start_DMA+0x1e>
 8000576:	2302      	movs	r3, #2
 8000578:	e09e      	b.n	80006b8 <HAL_DAC_Start_DMA+0x15c>
 800057a:	68fb      	ldr	r3, [r7, #12]
 800057c:	2201      	movs	r2, #1
 800057e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	2202      	movs	r2, #2
 8000584:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8000586:	68bb      	ldr	r3, [r7, #8]
 8000588:	2b00      	cmp	r3, #0
 800058a:	d12a      	bne.n	80005e2 <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	689b      	ldr	r3, [r3, #8]
 8000590:	4a4b      	ldr	r2, [pc, #300]	; (80006c0 <HAL_DAC_Start_DMA+0x164>)
 8000592:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	689b      	ldr	r3, [r3, #8]
 8000598:	4a4a      	ldr	r2, [pc, #296]	; (80006c4 <HAL_DAC_Start_DMA+0x168>)
 800059a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	689b      	ldr	r3, [r3, #8]
 80005a0:	4a49      	ldr	r2, [pc, #292]	; (80006c8 <HAL_DAC_Start_DMA+0x16c>)
 80005a2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	681a      	ldr	r2, [r3, #0]
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80005b2:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80005b4:	6a3b      	ldr	r3, [r7, #32]
 80005b6:	2b04      	cmp	r3, #4
 80005b8:	d009      	beq.n	80005ce <HAL_DAC_Start_DMA+0x72>
 80005ba:	2b08      	cmp	r3, #8
 80005bc:	d00c      	beq.n	80005d8 <HAL_DAC_Start_DMA+0x7c>
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d000      	beq.n	80005c4 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 80005c2:	e039      	b.n	8000638 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	3308      	adds	r3, #8
 80005ca:	613b      	str	r3, [r7, #16]
        break;
 80005cc:	e034      	b.n	8000638 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	330c      	adds	r3, #12
 80005d4:	613b      	str	r3, [r7, #16]
        break;
 80005d6:	e02f      	b.n	8000638 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	3310      	adds	r3, #16
 80005de:	613b      	str	r3, [r7, #16]
        break;
 80005e0:	e02a      	b.n	8000638 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	68db      	ldr	r3, [r3, #12]
 80005e6:	4a39      	ldr	r2, [pc, #228]	; (80006cc <HAL_DAC_Start_DMA+0x170>)
 80005e8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	68db      	ldr	r3, [r3, #12]
 80005ee:	4a38      	ldr	r2, [pc, #224]	; (80006d0 <HAL_DAC_Start_DMA+0x174>)
 80005f0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	68db      	ldr	r3, [r3, #12]
 80005f6:	4a37      	ldr	r2, [pc, #220]	; (80006d4 <HAL_DAC_Start_DMA+0x178>)
 80005f8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	681a      	ldr	r2, [r3, #0]
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000608:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 800060a:	6a3b      	ldr	r3, [r7, #32]
 800060c:	2b04      	cmp	r3, #4
 800060e:	d009      	beq.n	8000624 <HAL_DAC_Start_DMA+0xc8>
 8000610:	2b08      	cmp	r3, #8
 8000612:	d00c      	beq.n	800062e <HAL_DAC_Start_DMA+0xd2>
 8000614:	2b00      	cmp	r3, #0
 8000616:	d000      	beq.n	800061a <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8000618:	e00e      	b.n	8000638 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	3314      	adds	r3, #20
 8000620:	613b      	str	r3, [r7, #16]
        break;
 8000622:	e009      	b.n	8000638 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	3318      	adds	r3, #24
 800062a:	613b      	str	r3, [r7, #16]
        break;
 800062c:	e004      	b.n	8000638 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	331c      	adds	r3, #28
 8000634:	613b      	str	r3, [r7, #16]
        break;
 8000636:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8000638:	68bb      	ldr	r3, [r7, #8]
 800063a:	2b00      	cmp	r3, #0
 800063c:	d111      	bne.n	8000662 <HAL_DAC_Start_DMA+0x106>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	681a      	ldr	r2, [r3, #0]
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800064c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	6898      	ldr	r0, [r3, #8]
 8000652:	6879      	ldr	r1, [r7, #4]
 8000654:	683b      	ldr	r3, [r7, #0]
 8000656:	693a      	ldr	r2, [r7, #16]
 8000658:	f000 feb2 	bl	80013c0 <HAL_DMA_Start_IT>
 800065c:	4603      	mov	r3, r0
 800065e:	75fb      	strb	r3, [r7, #23]
 8000660:	e010      	b.n	8000684 <HAL_DAC_Start_DMA+0x128>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8000662:	68fb      	ldr	r3, [r7, #12]
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	681a      	ldr	r2, [r3, #0]
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8000670:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	68d8      	ldr	r0, [r3, #12]
 8000676:	6879      	ldr	r1, [r7, #4]
 8000678:	683b      	ldr	r3, [r7, #0]
 800067a:	693a      	ldr	r2, [r7, #16]
 800067c:	f000 fea0 	bl	80013c0 <HAL_DMA_Start_IT>
 8000680:	4603      	mov	r3, r0
 8000682:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	2200      	movs	r2, #0
 8000688:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 800068a:	7dfb      	ldrb	r3, [r7, #23]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d10c      	bne.n	80006aa <HAL_DAC_Start_DMA+0x14e>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	6819      	ldr	r1, [r3, #0]
 8000696:	68bb      	ldr	r3, [r7, #8]
 8000698:	f003 0310 	and.w	r3, r3, #16
 800069c:	2201      	movs	r2, #1
 800069e:	409a      	lsls	r2, r3
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	430a      	orrs	r2, r1
 80006a6:	601a      	str	r2, [r3, #0]
 80006a8:	e005      	b.n	80006b6 <HAL_DAC_Start_DMA+0x15a>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	691b      	ldr	r3, [r3, #16]
 80006ae:	f043 0204 	orr.w	r2, r3, #4
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80006b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80006b8:	4618      	mov	r0, r3
 80006ba:	3718      	adds	r7, #24
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	080009d3 	.word	0x080009d3
 80006c4:	080009f5 	.word	0x080009f5
 80006c8:	08000a11 	.word	0x08000a11
 80006cc:	08000a7b 	.word	0x08000a7b
 80006d0:	08000a9d 	.word	0x08000a9d
 80006d4:	08000ab9 	.word	0x08000ab9

080006d8 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
 80006e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	6819      	ldr	r1, [r3, #0]
 80006e8:	683b      	ldr	r3, [r7, #0]
 80006ea:	f003 0310 	and.w	r3, r3, #16
 80006ee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80006f2:	fa02 f303 	lsl.w	r3, r2, r3
 80006f6:	43da      	mvns	r2, r3
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	400a      	ands	r2, r1
 80006fe:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	6819      	ldr	r1, [r3, #0]
 8000706:	683b      	ldr	r3, [r7, #0]
 8000708:	f003 0310 	and.w	r3, r3, #16
 800070c:	2201      	movs	r2, #1
 800070e:	fa02 f303 	lsl.w	r3, r2, r3
 8000712:	43da      	mvns	r2, r3
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	400a      	ands	r2, r1
 800071a:	601a      	str	r2, [r3, #0]
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	2b00      	cmp	r3, #0
 8000720:	d10d      	bne.n	800073e <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	689b      	ldr	r3, [r3, #8]
 8000726:	4618      	mov	r0, r3
 8000728:	f000 feaa 	bl	8001480 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	681a      	ldr	r2, [r3, #0]
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	e00c      	b.n	8000758 <HAL_DAC_Stop_DMA+0x80>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	68db      	ldr	r3, [r3, #12]
 8000742:	4618      	mov	r0, r3
 8000744:	f000 fe9c 	bl	8001480 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	681a      	ldr	r2, [r3, #0]
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8000756:	601a      	str	r2, [r3, #0]
  /* Disable the DAC DMA underrun interrupt */
  __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
#endif /* STM32L451xx STM32L452xx STM32L462xx */

  /* Return function status */
  return HAL_OK;
 8000758:	2300      	movs	r3, #0
}
 800075a:	4618      	mov	r0, r3
 800075c:	3708      	adds	r7, #8
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}

08000762 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8000762:	b480      	push	{r7}
 8000764:	b083      	sub	sp, #12
 8000766:	af00      	add	r7, sp, #0
 8000768:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 800076a:	bf00      	nop
 800076c:	370c      	adds	r7, #12
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr

08000776 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8000776:	b480      	push	{r7}
 8000778:	b083      	sub	sp, #12
 800077a:	af00      	add	r7, sp, #0
 800077c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800077e:	bf00      	nop
 8000780:	370c      	adds	r7, #12
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr

0800078a <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800078a:	b480      	push	{r7}
 800078c:	b083      	sub	sp, #12
 800078e:	af00      	add	r7, sp, #0
 8000790:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8000792:	bf00      	nop
 8000794:	370c      	adds	r7, #12
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr

0800079e <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800079e:	b580      	push	{r7, lr}
 80007a0:	b088      	sub	sp, #32
 80007a2:	af00      	add	r7, sp, #0
 80007a4:	60f8      	str	r0, [r7, #12]
 80007a6:	60b9      	str	r1, [r7, #8]
 80007a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 80007aa:	2300      	movs	r3, #0
 80007ac:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	795b      	ldrb	r3, [r3, #5]
 80007b2:	2b01      	cmp	r3, #1
 80007b4:	d101      	bne.n	80007ba <HAL_DAC_ConfigChannel+0x1c>
 80007b6:	2302      	movs	r3, #2
 80007b8:	e107      	b.n	80009ca <HAL_DAC_ConfigChannel+0x22c>
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	2201      	movs	r2, #1
 80007be:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	2202      	movs	r2, #2
 80007c4:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80007c6:	68bb      	ldr	r3, [r7, #8]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	2b04      	cmp	r3, #4
 80007cc:	d174      	bne.n	80008b8 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80007ce:	f7ff fd63 	bl	8000298 <HAL_GetTick>
 80007d2:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d134      	bne.n	8000844 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80007da:	e011      	b.n	8000800 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80007dc:	f7ff fd5c 	bl	8000298 <HAL_GetTick>
 80007e0:	4602      	mov	r2, r0
 80007e2:	69fb      	ldr	r3, [r7, #28]
 80007e4:	1ad3      	subs	r3, r2, r3
 80007e6:	2b01      	cmp	r3, #1
 80007e8:	d90a      	bls.n	8000800 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	691b      	ldr	r3, [r3, #16]
 80007ee:	f043 0208 	orr.w	r2, r3, #8
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	2203      	movs	r2, #3
 80007fa:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80007fc:	2303      	movs	r3, #3
 80007fe:	e0e4      	b.n	80009ca <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000806:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800080a:	2b00      	cmp	r3, #0
 800080c:	d1e6      	bne.n	80007dc <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 800080e:	2001      	movs	r0, #1
 8000810:	f7ff fd4e 	bl	80002b0 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	68ba      	ldr	r2, [r7, #8]
 800081a:	6992      	ldr	r2, [r2, #24]
 800081c:	641a      	str	r2, [r3, #64]	; 0x40
 800081e:	e01e      	b.n	800085e <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8000820:	f7ff fd3a 	bl	8000298 <HAL_GetTick>
 8000824:	4602      	mov	r2, r0
 8000826:	69fb      	ldr	r3, [r7, #28]
 8000828:	1ad3      	subs	r3, r2, r3
 800082a:	2b01      	cmp	r3, #1
 800082c:	d90a      	bls.n	8000844 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	691b      	ldr	r3, [r3, #16]
 8000832:	f043 0208 	orr.w	r2, r3, #8
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	2203      	movs	r2, #3
 800083e:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8000840:	2303      	movs	r3, #3
 8000842:	e0c2      	b.n	80009ca <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800084a:	2b00      	cmp	r3, #0
 800084c:	dbe8      	blt.n	8000820 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 800084e:	2001      	movs	r0, #1
 8000850:	f7ff fd2e 	bl	80002b0 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	68ba      	ldr	r2, [r7, #8]
 800085a:	6992      	ldr	r2, [r2, #24]
 800085c:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	f003 0310 	and.w	r3, r3, #16
 800086a:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800086e:	fa01 f303 	lsl.w	r3, r1, r3
 8000872:	43db      	mvns	r3, r3
 8000874:	ea02 0103 	and.w	r1, r2, r3
 8000878:	68bb      	ldr	r3, [r7, #8]
 800087a:	69da      	ldr	r2, [r3, #28]
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	f003 0310 	and.w	r3, r3, #16
 8000882:	409a      	lsls	r2, r3
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	430a      	orrs	r2, r1
 800088a:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	f003 0310 	and.w	r3, r3, #16
 8000898:	21ff      	movs	r1, #255	; 0xff
 800089a:	fa01 f303 	lsl.w	r3, r1, r3
 800089e:	43db      	mvns	r3, r3
 80008a0:	ea02 0103 	and.w	r1, r2, r3
 80008a4:	68bb      	ldr	r3, [r7, #8]
 80008a6:	6a1a      	ldr	r2, [r3, #32]
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	f003 0310 	and.w	r3, r3, #16
 80008ae:	409a      	lsls	r2, r3
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	430a      	orrs	r2, r1
 80008b6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80008b8:	68bb      	ldr	r3, [r7, #8]
 80008ba:	691b      	ldr	r3, [r3, #16]
 80008bc:	2b01      	cmp	r3, #1
 80008be:	d11d      	bne.n	80008fc <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80008c6:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	f003 0310 	and.w	r3, r3, #16
 80008ce:	221f      	movs	r2, #31
 80008d0:	fa02 f303 	lsl.w	r3, r2, r3
 80008d4:	43db      	mvns	r3, r3
 80008d6:	69ba      	ldr	r2, [r7, #24]
 80008d8:	4013      	ands	r3, r2
 80008da:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80008dc:	68bb      	ldr	r3, [r7, #8]
 80008de:	695b      	ldr	r3, [r3, #20]
 80008e0:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	f003 0310 	and.w	r3, r3, #16
 80008e8:	697a      	ldr	r2, [r7, #20]
 80008ea:	fa02 f303 	lsl.w	r3, r2, r3
 80008ee:	69ba      	ldr	r2, [r7, #24]
 80008f0:	4313      	orrs	r3, r2
 80008f2:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	69ba      	ldr	r2, [r7, #24]
 80008fa:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000902:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	f003 0310 	and.w	r3, r3, #16
 800090a:	2207      	movs	r2, #7
 800090c:	fa02 f303 	lsl.w	r3, r2, r3
 8000910:	43db      	mvns	r3, r3
 8000912:	69ba      	ldr	r2, [r7, #24]
 8000914:	4013      	ands	r3, r2
 8000916:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8000918:	68bb      	ldr	r3, [r7, #8]
 800091a:	681a      	ldr	r2, [r3, #0]
 800091c:	68bb      	ldr	r3, [r7, #8]
 800091e:	689b      	ldr	r3, [r3, #8]
 8000920:	431a      	orrs	r2, r3
 8000922:	68bb      	ldr	r3, [r7, #8]
 8000924:	68db      	ldr	r3, [r3, #12]
 8000926:	4313      	orrs	r3, r2
 8000928:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	f003 0310 	and.w	r3, r3, #16
 8000930:	697a      	ldr	r2, [r7, #20]
 8000932:	fa02 f303 	lsl.w	r3, r2, r3
 8000936:	69ba      	ldr	r2, [r7, #24]
 8000938:	4313      	orrs	r3, r2
 800093a:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	69ba      	ldr	r2, [r7, #24]
 8000942:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	6819      	ldr	r1, [r3, #0]
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	f003 0310 	and.w	r3, r3, #16
 8000950:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000954:	fa02 f303 	lsl.w	r3, r2, r3
 8000958:	43da      	mvns	r2, r3
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	400a      	ands	r2, r1
 8000960:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	f003 0310 	and.w	r3, r3, #16
 8000970:	f640 72fc 	movw	r2, #4092	; 0xffc
 8000974:	fa02 f303 	lsl.w	r3, r2, r3
 8000978:	43db      	mvns	r3, r3
 800097a:	69ba      	ldr	r2, [r7, #24]
 800097c:	4013      	ands	r3, r2
 800097e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8000980:	68bb      	ldr	r3, [r7, #8]
 8000982:	685b      	ldr	r3, [r3, #4]
 8000984:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	f003 0310 	and.w	r3, r3, #16
 800098c:	697a      	ldr	r2, [r7, #20]
 800098e:	fa02 f303 	lsl.w	r3, r2, r3
 8000992:	69ba      	ldr	r2, [r7, #24]
 8000994:	4313      	orrs	r3, r2
 8000996:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	69ba      	ldr	r2, [r7, #24]
 800099e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	6819      	ldr	r1, [r3, #0]
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	f003 0310 	and.w	r3, r3, #16
 80009ac:	22c0      	movs	r2, #192	; 0xc0
 80009ae:	fa02 f303 	lsl.w	r3, r2, r3
 80009b2:	43da      	mvns	r2, r3
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	400a      	ands	r2, r1
 80009ba:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	2201      	movs	r2, #1
 80009c0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	2200      	movs	r2, #0
 80009c6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80009c8:	2300      	movs	r3, #0
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	3720      	adds	r7, #32
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}

080009d2 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80009d2:	b580      	push	{r7, lr}
 80009d4:	b084      	sub	sp, #16
 80009d6:	af00      	add	r7, sp, #0
 80009d8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009de:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80009e0:	68f8      	ldr	r0, [r7, #12]
 80009e2:	f7ff febe 	bl	8000762 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	2201      	movs	r2, #1
 80009ea:	711a      	strb	r2, [r3, #4]
}
 80009ec:	bf00      	nop
 80009ee:	3710      	adds	r7, #16
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}

080009f4 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b084      	sub	sp, #16
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a00:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8000a02:	68f8      	ldr	r0, [r7, #12]
 8000a04:	f7ff feb7 	bl	8000776 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8000a08:	bf00      	nop
 8000a0a:	3710      	adds	r7, #16
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}

08000a10 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b084      	sub	sp, #16
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a1c:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	691b      	ldr	r3, [r3, #16]
 8000a22:	f043 0204 	orr.w	r2, r3, #4
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8000a2a:	68f8      	ldr	r0, [r7, #12]
 8000a2c:	f7ff fead 	bl	800078a <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	2201      	movs	r2, #1
 8000a34:	711a      	strb	r2, [r3, #4]
}
 8000a36:	bf00      	nop
 8000a38:	3710      	adds	r7, #16
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}

08000a3e <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8000a3e:	b480      	push	{r7}
 8000a40:	b083      	sub	sp, #12
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8000a46:	bf00      	nop
 8000a48:	370c      	adds	r7, #12
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr

08000a52 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8000a52:	b480      	push	{r7}
 8000a54:	b083      	sub	sp, #12
 8000a56:	af00      	add	r7, sp, #0
 8000a58:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8000a5a:	bf00      	nop
 8000a5c:	370c      	adds	r7, #12
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr

08000a66 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8000a66:	b480      	push	{r7}
 8000a68:	b083      	sub	sp, #12
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8000a6e:	bf00      	nop
 8000a70:	370c      	adds	r7, #12
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr

08000a7a <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8000a7a:	b580      	push	{r7, lr}
 8000a7c:	b084      	sub	sp, #16
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a86:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8000a88:	68f8      	ldr	r0, [r7, #12]
 8000a8a:	f7ff ffd8 	bl	8000a3e <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	2201      	movs	r2, #1
 8000a92:	711a      	strb	r2, [r3, #4]
}
 8000a94:	bf00      	nop
 8000a96:	3710      	adds	r7, #16
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}

08000a9c <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b084      	sub	sp, #16
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000aa8:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8000aaa:	68f8      	ldr	r0, [r7, #12]
 8000aac:	f7ff ffd1 	bl	8000a52 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8000ab0:	bf00      	nop
 8000ab2:	3710      	adds	r7, #16
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}

08000ab8 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ac4:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	691b      	ldr	r3, [r3, #16]
 8000aca:	f043 0204 	orr.w	r2, r3, #4
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8000ad2:	68f8      	ldr	r0, [r7, #12]
 8000ad4:	f7ff ffc7 	bl	8000a66 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	2201      	movs	r2, #1
 8000adc:	711a      	strb	r2, [r3, #4]
}
 8000ade:	bf00      	nop
 8000ae0:	3710      	adds	r7, #16
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
	...

08000ae8 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d101      	bne.n	8000afa <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8000af6:	2301      	movs	r3, #1
 8000af8:	e0ac      	b.n	8000c54 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4618      	mov	r0, r3
 8000b00:	f000 fab6 	bl	8001070 <DFSDM_GetChannelFromInstance>
 8000b04:	4602      	mov	r2, r0
 8000b06:	4b55      	ldr	r3, [pc, #340]	; (8000c5c <HAL_DFSDM_ChannelInit+0x174>)
 8000b08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8000b10:	2301      	movs	r3, #1
 8000b12:	e09f      	b.n	8000c54 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8000b14:	6878      	ldr	r0, [r7, #4]
 8000b16:	f003 fa7f 	bl	8004018 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8000b1a:	4b51      	ldr	r3, [pc, #324]	; (8000c60 <HAL_DFSDM_ChannelInit+0x178>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	3301      	adds	r3, #1
 8000b20:	4a4f      	ldr	r2, [pc, #316]	; (8000c60 <HAL_DFSDM_ChannelInit+0x178>)
 8000b22:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8000b24:	4b4e      	ldr	r3, [pc, #312]	; (8000c60 <HAL_DFSDM_ChannelInit+0x178>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	2b01      	cmp	r3, #1
 8000b2a:	d125      	bne.n	8000b78 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8000b2c:	4b4d      	ldr	r3, [pc, #308]	; (8000c64 <HAL_DFSDM_ChannelInit+0x17c>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a4c      	ldr	r2, [pc, #304]	; (8000c64 <HAL_DFSDM_ChannelInit+0x17c>)
 8000b32:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8000b36:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8000b38:	4b4a      	ldr	r3, [pc, #296]	; (8000c64 <HAL_DFSDM_ChannelInit+0x17c>)
 8000b3a:	681a      	ldr	r2, [r3, #0]
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	689b      	ldr	r3, [r3, #8]
 8000b40:	4948      	ldr	r1, [pc, #288]	; (8000c64 <HAL_DFSDM_ChannelInit+0x17c>)
 8000b42:	4313      	orrs	r3, r2
 8000b44:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8000b46:	4b47      	ldr	r3, [pc, #284]	; (8000c64 <HAL_DFSDM_ChannelInit+0x17c>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4a46      	ldr	r2, [pc, #280]	; (8000c64 <HAL_DFSDM_ChannelInit+0x17c>)
 8000b4c:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8000b50:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	791b      	ldrb	r3, [r3, #4]
 8000b56:	2b01      	cmp	r3, #1
 8000b58:	d108      	bne.n	8000b6c <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8000b5a:	4b42      	ldr	r3, [pc, #264]	; (8000c64 <HAL_DFSDM_ChannelInit+0x17c>)
 8000b5c:	681a      	ldr	r2, [r3, #0]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	68db      	ldr	r3, [r3, #12]
 8000b62:	3b01      	subs	r3, #1
 8000b64:	041b      	lsls	r3, r3, #16
 8000b66:	493f      	ldr	r1, [pc, #252]	; (8000c64 <HAL_DFSDM_ChannelInit+0x17c>)
 8000b68:	4313      	orrs	r3, r2
 8000b6a:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8000b6c:	4b3d      	ldr	r3, [pc, #244]	; (8000c64 <HAL_DFSDM_ChannelInit+0x17c>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a3c      	ldr	r2, [pc, #240]	; (8000c64 <HAL_DFSDM_ChannelInit+0x17c>)
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8000b86:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	6819      	ldr	r1, [r3, #0]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8000b96:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8000b9c:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	430a      	orrs	r2, r1
 8000ba4:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	681a      	ldr	r2, [r3, #0]
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	f022 020f 	bic.w	r2, r2, #15
 8000bb4:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	6819      	ldr	r1, [r3, #0]
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8000bc4:	431a      	orrs	r2, r3
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	430a      	orrs	r2, r1
 8000bcc:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	689a      	ldr	r2, [r3, #8]
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8000bdc:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	6899      	ldr	r1, [r3, #8]
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bec:	3b01      	subs	r3, #1
 8000bee:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8000bf0:	431a      	orrs	r2, r3
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	430a      	orrs	r2, r1
 8000bf8:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	685a      	ldr	r2, [r3, #4]
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f002 0207 	and.w	r2, r2, #7
 8000c08:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	6859      	ldr	r1, [r3, #4]
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c14:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8000c1c:	431a      	orrs	r2, r3
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	430a      	orrs	r2, r1
 8000c24:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	681a      	ldr	r2, [r3, #0]
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000c34:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	2201      	movs	r2, #1
 8000c3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4618      	mov	r0, r3
 8000c44:	f000 fa14 	bl	8001070 <DFSDM_GetChannelFromInstance>
 8000c48:	4601      	mov	r1, r0
 8000c4a:	4a04      	ldr	r2, [pc, #16]	; (8000c5c <HAL_DFSDM_ChannelInit+0x174>)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 8000c52:	2300      	movs	r3, #0
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	3708      	adds	r7, #8
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	2000002c 	.word	0x2000002c
 8000c60:	20000028 	.word	0x20000028
 8000c64:	40016000 	.word	0x40016000

08000c68 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d101      	bne.n	8000c7a <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 8000c76:	2301      	movs	r3, #1
 8000c78:	e0ca      	b.n	8000e10 <HAL_DFSDM_FilterInit+0x1a8>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4a66      	ldr	r2, [pc, #408]	; (8000e18 <HAL_DFSDM_FilterInit+0x1b0>)
 8000c80:	4293      	cmp	r3, r2
 8000c82:	d109      	bne.n	8000c98 <HAL_DFSDM_FilterInit+0x30>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8000c88:	2b01      	cmp	r3, #1
 8000c8a:	d003      	beq.n	8000c94 <HAL_DFSDM_FilterInit+0x2c>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8000c90:	2b01      	cmp	r3, #1
 8000c92:	d101      	bne.n	8000c98 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 8000c94:	2301      	movs	r3, #1
 8000c96:	e0bb      	b.n	8000e10 <HAL_DFSDM_FilterInit+0x1a8>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	2200      	movs	r2, #0
 8000cae:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8000cb0:	6878      	ldr	r0, [r7, #4]
 8000cb2:	f003 f927 	bl	8003f04 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8000cc4:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	7a1b      	ldrb	r3, [r3, #8]
 8000cca:	2b01      	cmp	r3, #1
 8000ccc:	d108      	bne.n	8000ce0 <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8000cdc:	601a      	str	r2, [r3, #0]
 8000cde:	e007      	b.n	8000cf0 <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	681a      	ldr	r2, [r3, #0]
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8000cee:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	7a5b      	ldrb	r3, [r3, #9]
 8000cf4:	2b01      	cmp	r3, #1
 8000cf6:	d108      	bne.n	8000d0a <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	e007      	b.n	8000d1a <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8000d18:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	687a      	ldr	r2, [r7, #4]
 8000d22:	6812      	ldr	r2, [r2, #0]
 8000d24:	f423 43ce 	bic.w	r3, r3, #26368	; 0x6700
 8000d28:	f023 0308 	bic.w	r3, r3, #8
 8000d2c:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	68db      	ldr	r3, [r3, #12]
 8000d32:	2b02      	cmp	r3, #2
 8000d34:	d108      	bne.n	8000d48 <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	6819      	ldr	r1, [r3, #0]
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	695a      	ldr	r2, [r3, #20]
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	430a      	orrs	r2, r1
 8000d46:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	7c1b      	ldrb	r3, [r3, #16]
 8000d4c:	2b01      	cmp	r3, #1
 8000d4e:	d108      	bne.n	8000d62 <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	681a      	ldr	r2, [r3, #0]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f042 0210 	orr.w	r2, r2, #16
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	e007      	b.n	8000d72 <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	681a      	ldr	r2, [r3, #0]
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f022 0210 	bic.w	r2, r2, #16
 8000d70:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	7c5b      	ldrb	r3, [r3, #17]
 8000d76:	2b01      	cmp	r3, #1
 8000d78:	d108      	bne.n	8000d8c <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f042 0220 	orr.w	r2, r2, #32
 8000d88:	601a      	str	r2, [r3, #0]
 8000d8a:	e007      	b.n	8000d9c <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f022 0220 	bic.w	r2, r2, #32
 8000d9a:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	695b      	ldr	r3, [r3, #20]
 8000da2:	687a      	ldr	r2, [r7, #4]
 8000da4:	6812      	ldr	r2, [r2, #0]
 8000da6:	f023 4363 	bic.w	r3, r3, #3808428032	; 0xe3000000
 8000daa:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 8000dae:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	6959      	ldr	r1, [r3, #20]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	6a1b      	ldr	r3, [r3, #32]
 8000dbe:	3b01      	subs	r3, #1
 8000dc0:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8000dc2:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dc8:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8000dca:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	430a      	orrs	r2, r1
 8000dd2:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	685a      	ldr	r2, [r3, #4]
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	68da      	ldr	r2, [r3, #12]
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	699a      	ldr	r2, [r3, #24]
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	7c1a      	ldrb	r2, [r3, #16]
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f042 0201 	orr.w	r2, r2, #1
 8000e04:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2201      	movs	r2, #1
 8000e0a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 8000e0e:	2300      	movs	r3, #0
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	3708      	adds	r7, #8
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	40016100 	.word	0x40016100

08000e1c <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b087      	sub	sp, #28
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	60f8      	str	r0, [r7, #12]
 8000e24:	60b9      	str	r1, [r7, #8]
 8000e26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d02e      	beq.n	8000e94 <HAL_DFSDM_FilterConfigRegChannel+0x78>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8000e3c:	2bff      	cmp	r3, #255	; 0xff
 8000e3e:	d029      	beq.n	8000e94 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	68fa      	ldr	r2, [r7, #12]
 8000e48:	6812      	ldr	r2, [r2, #0]
 8000e4a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000e4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e52:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2b01      	cmp	r3, #1
 8000e58:	d10d      	bne.n	8000e76 <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	021b      	lsls	r3, r3, #8
 8000e64:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8000e68:	431a      	orrs	r2, r3
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	e00a      	b.n	8000e8c <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	6819      	ldr	r1, [r3, #0]
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	021b      	lsls	r3, r3, #8
 8000e80:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	430a      	orrs	r2, r1
 8000e8a:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	687a      	ldr	r2, [r7, #4]
 8000e90:	631a      	str	r2, [r3, #48]	; 0x30
 8000e92:	e001      	b.n	8000e98 <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }
  else
  {
    status = HAL_ERROR;
 8000e94:	2301      	movs	r3, #1
 8000e96:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8000e98:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	371c      	adds	r7, #28
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
	...

08000ea8 <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b086      	sub	sp, #24
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	60f8      	str	r0, [r7, #12]
 8000eb0:	60b9      	str	r1, [r7, #8]
 8000eb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if ((pData == NULL) || (Length == 0U))
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d002      	beq.n	8000ec4 <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d102      	bne.n	8000eca <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	75fb      	strb	r3, [r7, #23]
 8000ec8:	e064      	b.n	8000f94 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check that DMA is enabled for regular conversion */
  else if ((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ed4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000ed8:	d002      	beq.n	8000ee0 <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
 8000edc:	75fb      	strb	r3, [r7, #23]
 8000ede:	e059      	b.n	8000f94 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check parameters compatibility */
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d10e      	bne.n	8000f06 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d10a      	bne.n	8000f06 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ef4:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d105      	bne.n	8000f06 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2b01      	cmp	r3, #1
 8000efe:	d002      	beq.n	8000f06 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (Length != 1U))
  {
    status = HAL_ERROR;
 8000f00:	2301      	movs	r3, #1
 8000f02:	75fb      	strb	r3, [r7, #23]
 8000f04:	e046      	b.n	8000f94 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d10b      	bne.n	8000f26 <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d107      	bne.n	8000f26 <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f1a:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8000f1c:	2b20      	cmp	r3, #32
 8000f1e:	d102      	bne.n	8000f26 <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
  {
    status = HAL_ERROR;
 8000f20:	2301      	movs	r3, #1
 8000f22:	75fb      	strb	r3, [r7, #23]
 8000f24:	e036      	b.n	8000f94 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check DFSDM filter state */
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8000f2c:	2b01      	cmp	r3, #1
 8000f2e:	d004      	beq.n	8000f3a <HAL_DFSDM_FilterRegularStart_DMA+0x92>
           (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8000f36:	2b03      	cmp	r3, #3
 8000f38:	d12a      	bne.n	8000f90 <HAL_DFSDM_FilterRegularStart_DMA+0xe8>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f3e:	4a18      	ldr	r2, [pc, #96]	; (8000fa0 <HAL_DFSDM_FilterRegularStart_DMA+0xf8>)
 8000f40:	62da      	str	r2, [r3, #44]	; 0x2c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f46:	4a17      	ldr	r2, [pc, #92]	; (8000fa4 <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 8000f48:	635a      	str	r2, [r3, #52]	; 0x34
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f4e:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 8000f50:	2b20      	cmp	r3, #32
 8000f52:	d101      	bne.n	8000f58 <HAL_DFSDM_FilterRegularStart_DMA+0xb0>
 8000f54:	4a14      	ldr	r2, [pc, #80]	; (8000fa8 <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 8000f56:	e000      	b.n	8000f5a <HAL_DFSDM_FilterRegularStart_DMA+0xb2>
 8000f58:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f5e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Start DMA in interrupt mode */
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	331c      	adds	r3, #28
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	68ba      	ldr	r2, [r7, #8]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	f000 fa26 	bl	80013c0 <HAL_DMA_Start_IT>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d006      	beq.n	8000f88 <HAL_DFSDM_FilterRegularStart_DMA+0xe0>
                         (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	22ff      	movs	r2, #255	; 0xff
 8000f7e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      status = HAL_ERROR;
 8000f82:	2301      	movs	r3, #1
 8000f84:	75fb      	strb	r3, [r7, #23]
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8000f86:	e005      	b.n	8000f94 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 8000f88:	68f8      	ldr	r0, [r7, #12]
 8000f8a:	f000 f8bd 	bl	8001108 <DFSDM_RegConvStart>
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8000f8e:	e001      	b.n	8000f94 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f90:	2301      	movs	r3, #1
 8000f92:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 8000f94:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3718      	adds	r7, #24
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	08001031 	.word	0x08001031
 8000fa4:	0800104d 	.word	0x0800104d
 8000fa8:	08001015 	.word	0x08001015

08000fac <HAL_DFSDM_FilterRegularStop_DMA>:
  * @note   This function should be called only if regular conversion is ongoing.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStop_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	73fb      	strb	r3, [r7, #15]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8000fbe:	2b02      	cmp	r3, #2
 8000fc0:	d007      	beq.n	8000fd2 <HAL_DFSDM_FilterRegularStop_DMA+0x26>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG_INJ))
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 8000fc8:	2b04      	cmp	r3, #4
 8000fca:	d002      	beq.n	8000fd2 <HAL_DFSDM_FilterRegularStop_DMA+0x26>
  {
    /* Return error status */
    status = HAL_ERROR;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	73fb      	strb	r3, [r7, #15]
 8000fd0:	e007      	b.n	8000fe2 <HAL_DFSDM_FilterRegularStop_DMA+0x36>
  else
  {
    /* Stop current DMA transfer */
    /* No need to check the returned value of HAL_DMA_Abort. */
    /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for DFSDM. */
    (void) HAL_DMA_Abort(hdfsdm_filter->hdmaReg);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f000 fa52 	bl	8001480 <HAL_DMA_Abort>

    /* Stop regular conversion */
    DFSDM_RegConvStop(hdfsdm_filter);
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f000 f8e9 	bl	80011b4 <DFSDM_RegConvStop>
  }
  /* Return function status */
  return status;
 8000fe2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3710      	adds	r7, #16
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}

08000fec <HAL_DFSDM_FilterRegConvHalfCpltCallback>:
  * @brief  Half regular conversion complete callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterRegConvHalfCpltCallback could be implemented in the user file.
   */
}
 8000ff4:	bf00      	nop
 8000ff6:	370c      	adds	r7, #12
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr

08001000 <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 8001008:	bf00      	nop
 800100a:	370c      	adds	r7, #12
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr

08001014 <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001020:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 8001022:	68f8      	ldr	r0, [r7, #12]
 8001024:	f7ff ffe2 	bl	8000fec <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 8001028:	bf00      	nop
 800102a:	3710      	adds	r7, #16
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}

08001030 <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800103c:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 800103e:	68f8      	ldr	r0, [r7, #12]
 8001040:	f002 feac 	bl	8003d9c <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 8001044:	bf00      	nop
 8001046:	3710      	adds	r7, #16
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}

0800104c <DFSDM_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001058:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	2203      	movs	r2, #3
 800105e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8001060:	68f8      	ldr	r0, [r7, #12]
 8001062:	f7ff ffcd 	bl	8001000 <HAL_DFSDM_FilterErrorCallback>
#endif
}
 8001066:	bf00      	nop
 8001068:	3710      	adds	r7, #16
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
	...

08001070 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8001070:	b480      	push	{r7}
 8001072:	b085      	sub	sp, #20
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	4a1c      	ldr	r2, [pc, #112]	; (80010ec <DFSDM_GetChannelFromInstance+0x7c>)
 800107c:	4293      	cmp	r3, r2
 800107e:	d102      	bne.n	8001086 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8001080:	2300      	movs	r3, #0
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	e02b      	b.n	80010de <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4a19      	ldr	r2, [pc, #100]	; (80010f0 <DFSDM_GetChannelFromInstance+0x80>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d102      	bne.n	8001094 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 800108e:	2301      	movs	r3, #1
 8001090:	60fb      	str	r3, [r7, #12]
 8001092:	e024      	b.n	80010de <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	4a17      	ldr	r2, [pc, #92]	; (80010f4 <DFSDM_GetChannelFromInstance+0x84>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d102      	bne.n	80010a2 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 800109c:	2302      	movs	r3, #2
 800109e:	60fb      	str	r3, [r7, #12]
 80010a0:	e01d      	b.n	80010de <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4a14      	ldr	r2, [pc, #80]	; (80010f8 <DFSDM_GetChannelFromInstance+0x88>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d102      	bne.n	80010b0 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 80010aa:	2304      	movs	r3, #4
 80010ac:	60fb      	str	r3, [r7, #12]
 80010ae:	e016      	b.n	80010de <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	4a12      	ldr	r2, [pc, #72]	; (80010fc <DFSDM_GetChannelFromInstance+0x8c>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d102      	bne.n	80010be <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 80010b8:	2305      	movs	r3, #5
 80010ba:	60fb      	str	r3, [r7, #12]
 80010bc:	e00f      	b.n	80010de <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a0f      	ldr	r2, [pc, #60]	; (8001100 <DFSDM_GetChannelFromInstance+0x90>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d102      	bne.n	80010cc <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 80010c6:	2306      	movs	r3, #6
 80010c8:	60fb      	str	r3, [r7, #12]
 80010ca:	e008      	b.n	80010de <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	4a0d      	ldr	r2, [pc, #52]	; (8001104 <DFSDM_GetChannelFromInstance+0x94>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d102      	bne.n	80010da <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 80010d4:	2307      	movs	r3, #7
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	e001      	b.n	80010de <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 80010da:	2303      	movs	r3, #3
 80010dc:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80010de:	68fb      	ldr	r3, [r7, #12]
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3714      	adds	r7, #20
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr
 80010ec:	40016000 	.word	0x40016000
 80010f0:	40016020 	.word	0x40016020
 80010f4:	40016040 	.word	0x40016040
 80010f8:	40016080 	.word	0x40016080
 80010fc:	400160a0 	.word	0x400160a0
 8001100:	400160c0 	.word	0x400160c0
 8001104:	400160e0 	.word	0x400160e0

08001108 <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001114:	2b00      	cmp	r3, #0
 8001116:	d108      	bne.n	800112a <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001126:	601a      	str	r2, [r3, #0]
 8001128:	e033      	b.n	8001192 <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f022 0201 	bic.w	r2, r2, #1
 8001138:	601a      	str	r2, [r3, #0]

    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001148:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f042 0201 	orr.w	r2, r2, #1
 8001158:	601a      	str	r2, [r3, #0]

    /* If injected conversion was in progress, restart it */
    if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001160:	2b03      	cmp	r3, #3
 8001162:	d116      	bne.n	8001192 <DFSDM_RegConvStart+0x8a>
    {
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001168:	2b00      	cmp	r3, #0
 800116a:	d107      	bne.n	800117c <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f042 0202 	orr.w	r2, r2, #2
 800117a:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 8001182:	2b01      	cmp	r3, #1
 8001184:	d102      	bne.n	800118c <DFSDM_RegConvStart+0x84>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800118a:	e000      	b.n	800118e <DFSDM_RegConvStart+0x86>
 800118c:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 800118e:	687a      	ldr	r2, [r7, #4]
 8001190:	6493      	str	r3, [r2, #72]	; 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8001198:	2b01      	cmp	r3, #1
 800119a:	d101      	bne.n	80011a0 <DFSDM_RegConvStart+0x98>
 800119c:	2202      	movs	r2, #2
 800119e:	e000      	b.n	80011a2 <DFSDM_RegConvStart+0x9a>
 80011a0:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 80011a8:	bf00      	nop
 80011aa:	370c      	adds	r7, #12
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr

080011b4 <DFSDM_RegConvStop>:
  * @brief  This function allows to really stop regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStop(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  /* Disable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f022 0201 	bic.w	r2, r2, #1
 80011ca:	601a      	str	r2, [r3, #0]

  /* If regular trigger was synchronous, reset RSYNC bit in DFSDM_FLTCR1 register */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SYNC_TRIGGER)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011d0:	2b01      	cmp	r3, #1
 80011d2:	d107      	bne.n	80011e4 <DFSDM_RegConvStop+0x30>
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 80011e2:	601a      	str	r2, [r3, #0]
  }

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f042 0201 	orr.w	r2, r2, #1
 80011f2:	601a      	str	r2, [r3, #0]

  /* If injected conversion was in progress, restart it */
  if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG_INJ)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80011fa:	2b04      	cmp	r3, #4
 80011fc:	d116      	bne.n	800122c <DFSDM_RegConvStop+0x78>
  {
    if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001202:	2b00      	cmp	r3, #0
 8001204:	d107      	bne.n	8001216 <DFSDM_RegConvStop+0x62>
    {
      hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f042 0202 	orr.w	r2, r2, #2
 8001214:	601a      	str	r2, [r3, #0]
    }
    /* Update remaining injected conversions */
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                      hdfsdm_filter->InjectedChannelsNbr : 1U;
 800121c:	2b01      	cmp	r3, #1
 800121e:	d102      	bne.n	8001226 <DFSDM_RegConvStop+0x72>
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001224:	e000      	b.n	8001228 <DFSDM_RegConvStop+0x74>
 8001226:	2301      	movs	r3, #1
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8001228:	687a      	ldr	r2, [r7, #4]
 800122a:	6493      	str	r3, [r2, #72]	; 0x48
  }

  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                         HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_INJ;
 8001232:	2b02      	cmp	r3, #2
 8001234:	d101      	bne.n	800123a <DFSDM_RegConvStop+0x86>
 8001236:	2201      	movs	r2, #1
 8001238:	e000      	b.n	800123c <DFSDM_RegConvStop+0x88>
 800123a:	2203      	movs	r2, #3
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 8001242:	bf00      	nop
 8001244:	370c      	adds	r7, #12
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
	...

08001250 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001250:	b480      	push	{r7}
 8001252:	b085      	sub	sp, #20
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d101      	bne.n	8001262 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e098      	b.n	8001394 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	461a      	mov	r2, r3
 8001268:	4b4d      	ldr	r3, [pc, #308]	; (80013a0 <HAL_DMA_Init+0x150>)
 800126a:	429a      	cmp	r2, r3
 800126c:	d80f      	bhi.n	800128e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	461a      	mov	r2, r3
 8001274:	4b4b      	ldr	r3, [pc, #300]	; (80013a4 <HAL_DMA_Init+0x154>)
 8001276:	4413      	add	r3, r2
 8001278:	4a4b      	ldr	r2, [pc, #300]	; (80013a8 <HAL_DMA_Init+0x158>)
 800127a:	fba2 2303 	umull	r2, r3, r2, r3
 800127e:	091b      	lsrs	r3, r3, #4
 8001280:	009a      	lsls	r2, r3, #2
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4a48      	ldr	r2, [pc, #288]	; (80013ac <HAL_DMA_Init+0x15c>)
 800128a:	641a      	str	r2, [r3, #64]	; 0x40
 800128c:	e00e      	b.n	80012ac <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	461a      	mov	r2, r3
 8001294:	4b46      	ldr	r3, [pc, #280]	; (80013b0 <HAL_DMA_Init+0x160>)
 8001296:	4413      	add	r3, r2
 8001298:	4a43      	ldr	r2, [pc, #268]	; (80013a8 <HAL_DMA_Init+0x158>)
 800129a:	fba2 2303 	umull	r2, r3, r2, r3
 800129e:	091b      	lsrs	r3, r3, #4
 80012a0:	009a      	lsls	r2, r3, #2
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4a42      	ldr	r2, [pc, #264]	; (80013b4 <HAL_DMA_Init+0x164>)
 80012aa:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2202      	movs	r2, #2
 80012b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80012c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80012c6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80012d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	691b      	ldr	r3, [r3, #16]
 80012d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	699b      	ldr	r3, [r3, #24]
 80012e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6a1b      	ldr	r3, [r3, #32]
 80012ee:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80012f0:	68fa      	ldr	r2, [r7, #12]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	68fa      	ldr	r2, [r7, #12]
 80012fc:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001306:	d039      	beq.n	800137c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130c:	4a27      	ldr	r2, [pc, #156]	; (80013ac <HAL_DMA_Init+0x15c>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d11a      	bne.n	8001348 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001312:	4b29      	ldr	r3, [pc, #164]	; (80013b8 <HAL_DMA_Init+0x168>)
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131a:	f003 031c 	and.w	r3, r3, #28
 800131e:	210f      	movs	r1, #15
 8001320:	fa01 f303 	lsl.w	r3, r1, r3
 8001324:	43db      	mvns	r3, r3
 8001326:	4924      	ldr	r1, [pc, #144]	; (80013b8 <HAL_DMA_Init+0x168>)
 8001328:	4013      	ands	r3, r2
 800132a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800132c:	4b22      	ldr	r3, [pc, #136]	; (80013b8 <HAL_DMA_Init+0x168>)
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6859      	ldr	r1, [r3, #4]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001338:	f003 031c 	and.w	r3, r3, #28
 800133c:	fa01 f303 	lsl.w	r3, r1, r3
 8001340:	491d      	ldr	r1, [pc, #116]	; (80013b8 <HAL_DMA_Init+0x168>)
 8001342:	4313      	orrs	r3, r2
 8001344:	600b      	str	r3, [r1, #0]
 8001346:	e019      	b.n	800137c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001348:	4b1c      	ldr	r3, [pc, #112]	; (80013bc <HAL_DMA_Init+0x16c>)
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001350:	f003 031c 	and.w	r3, r3, #28
 8001354:	210f      	movs	r1, #15
 8001356:	fa01 f303 	lsl.w	r3, r1, r3
 800135a:	43db      	mvns	r3, r3
 800135c:	4917      	ldr	r1, [pc, #92]	; (80013bc <HAL_DMA_Init+0x16c>)
 800135e:	4013      	ands	r3, r2
 8001360:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001362:	4b16      	ldr	r3, [pc, #88]	; (80013bc <HAL_DMA_Init+0x16c>)
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6859      	ldr	r1, [r3, #4]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800136e:	f003 031c 	and.w	r3, r3, #28
 8001372:	fa01 f303 	lsl.w	r3, r1, r3
 8001376:	4911      	ldr	r1, [pc, #68]	; (80013bc <HAL_DMA_Init+0x16c>)
 8001378:	4313      	orrs	r3, r2
 800137a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2200      	movs	r2, #0
 8001380:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2201      	movs	r2, #1
 8001386:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2200      	movs	r2, #0
 800138e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001392:	2300      	movs	r3, #0
}
 8001394:	4618      	mov	r0, r3
 8001396:	3714      	adds	r7, #20
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr
 80013a0:	40020407 	.word	0x40020407
 80013a4:	bffdfff8 	.word	0xbffdfff8
 80013a8:	cccccccd 	.word	0xcccccccd
 80013ac:	40020000 	.word	0x40020000
 80013b0:	bffdfbf8 	.word	0xbffdfbf8
 80013b4:	40020400 	.word	0x40020400
 80013b8:	400200a8 	.word	0x400200a8
 80013bc:	400204a8 	.word	0x400204a8

080013c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b086      	sub	sp, #24
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	60f8      	str	r0, [r7, #12]
 80013c8:	60b9      	str	r1, [r7, #8]
 80013ca:	607a      	str	r2, [r7, #4]
 80013cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80013ce:	2300      	movs	r3, #0
 80013d0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d101      	bne.n	80013e0 <HAL_DMA_Start_IT+0x20>
 80013dc:	2302      	movs	r3, #2
 80013de:	e04b      	b.n	8001478 <HAL_DMA_Start_IT+0xb8>
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	2201      	movs	r2, #1
 80013e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d13a      	bne.n	800146a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	2202      	movs	r2, #2
 80013f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	2200      	movs	r2, #0
 8001400:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f022 0201 	bic.w	r2, r2, #1
 8001410:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	687a      	ldr	r2, [r7, #4]
 8001416:	68b9      	ldr	r1, [r7, #8]
 8001418:	68f8      	ldr	r0, [r7, #12]
 800141a:	f000 f91e 	bl	800165a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	2b00      	cmp	r3, #0
 8001424:	d008      	beq.n	8001438 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f042 020e 	orr.w	r2, r2, #14
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	e00f      	b.n	8001458 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f022 0204 	bic.w	r2, r2, #4
 8001446:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f042 020a 	orr.w	r2, r2, #10
 8001456:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f042 0201 	orr.w	r2, r2, #1
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	e005      	b.n	8001476 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	2200      	movs	r2, #0
 800146e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001472:	2302      	movs	r3, #2
 8001474:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001476:	7dfb      	ldrb	r3, [r7, #23]
}
 8001478:	4618      	mov	r0, r3
 800147a:	3718      	adds	r7, #24
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}

08001480 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001480:	b480      	push	{r7}
 8001482:	b085      	sub	sp, #20
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001488:	2300      	movs	r3, #0
 800148a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001492:	b2db      	uxtb	r3, r3
 8001494:	2b02      	cmp	r3, #2
 8001496:	d008      	beq.n	80014aa <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2204      	movs	r2, #4
 800149c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2200      	movs	r2, #0
 80014a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e022      	b.n	80014f0 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f022 020e 	bic.w	r2, r2, #14
 80014b8:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f022 0201 	bic.w	r2, r2, #1
 80014c8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ce:	f003 021c 	and.w	r2, r3, #28
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d6:	2101      	movs	r1, #1
 80014d8:	fa01 f202 	lsl.w	r2, r1, r2
 80014dc:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2201      	movs	r2, #1
 80014e2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2200      	movs	r2, #0
 80014ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80014ee:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3714      	adds	r7, #20
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr

080014fc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001518:	f003 031c 	and.w	r3, r3, #28
 800151c:	2204      	movs	r2, #4
 800151e:	409a      	lsls	r2, r3
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	4013      	ands	r3, r2
 8001524:	2b00      	cmp	r3, #0
 8001526:	d026      	beq.n	8001576 <HAL_DMA_IRQHandler+0x7a>
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	f003 0304 	and.w	r3, r3, #4
 800152e:	2b00      	cmp	r3, #0
 8001530:	d021      	beq.n	8001576 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f003 0320 	and.w	r3, r3, #32
 800153c:	2b00      	cmp	r3, #0
 800153e:	d107      	bne.n	8001550 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f022 0204 	bic.w	r2, r2, #4
 800154e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001554:	f003 021c 	and.w	r2, r3, #28
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155c:	2104      	movs	r1, #4
 800155e:	fa01 f202 	lsl.w	r2, r1, r2
 8001562:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001568:	2b00      	cmp	r3, #0
 800156a:	d071      	beq.n	8001650 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001574:	e06c      	b.n	8001650 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800157a:	f003 031c 	and.w	r3, r3, #28
 800157e:	2202      	movs	r2, #2
 8001580:	409a      	lsls	r2, r3
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	4013      	ands	r3, r2
 8001586:	2b00      	cmp	r3, #0
 8001588:	d02e      	beq.n	80015e8 <HAL_DMA_IRQHandler+0xec>
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	f003 0302 	and.w	r3, r3, #2
 8001590:	2b00      	cmp	r3, #0
 8001592:	d029      	beq.n	80015e8 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 0320 	and.w	r3, r3, #32
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d10b      	bne.n	80015ba <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f022 020a 	bic.w	r2, r2, #10
 80015b0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2201      	movs	r2, #1
 80015b6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015be:	f003 021c 	and.w	r2, r3, #28
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c6:	2102      	movs	r1, #2
 80015c8:	fa01 f202 	lsl.w	r2, r1, r2
 80015cc:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2200      	movs	r2, #0
 80015d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d038      	beq.n	8001650 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80015e6:	e033      	b.n	8001650 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ec:	f003 031c 	and.w	r3, r3, #28
 80015f0:	2208      	movs	r2, #8
 80015f2:	409a      	lsls	r2, r3
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	4013      	ands	r3, r2
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d02a      	beq.n	8001652 <HAL_DMA_IRQHandler+0x156>
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	f003 0308 	and.w	r3, r3, #8
 8001602:	2b00      	cmp	r3, #0
 8001604:	d025      	beq.n	8001652 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f022 020e 	bic.w	r2, r2, #14
 8001614:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800161a:	f003 021c 	and.w	r2, r3, #28
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001622:	2101      	movs	r1, #1
 8001624:	fa01 f202 	lsl.w	r2, r1, r2
 8001628:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2201      	movs	r2, #1
 800162e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2201      	movs	r2, #1
 8001634:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2200      	movs	r2, #0
 800163c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001644:	2b00      	cmp	r3, #0
 8001646:	d004      	beq.n	8001652 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001650:	bf00      	nop
 8001652:	bf00      	nop
}
 8001654:	3710      	adds	r7, #16
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}

0800165a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800165a:	b480      	push	{r7}
 800165c:	b085      	sub	sp, #20
 800165e:	af00      	add	r7, sp, #0
 8001660:	60f8      	str	r0, [r7, #12]
 8001662:	60b9      	str	r1, [r7, #8]
 8001664:	607a      	str	r2, [r7, #4]
 8001666:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800166c:	f003 021c 	and.w	r2, r3, #28
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001674:	2101      	movs	r1, #1
 8001676:	fa01 f202 	lsl.w	r2, r1, r2
 800167a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	683a      	ldr	r2, [r7, #0]
 8001682:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	2b10      	cmp	r3, #16
 800168a:	d108      	bne.n	800169e <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	687a      	ldr	r2, [r7, #4]
 8001692:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	68ba      	ldr	r2, [r7, #8]
 800169a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800169c:	e007      	b.n	80016ae <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	68ba      	ldr	r2, [r7, #8]
 80016a4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	60da      	str	r2, [r3, #12]
}
 80016ae:	bf00      	nop
 80016b0:	3714      	adds	r7, #20
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
	...

080016bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016bc:	b480      	push	{r7}
 80016be:	b087      	sub	sp, #28
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016c6:	2300      	movs	r3, #0
 80016c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016ca:	e17f      	b.n	80019cc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	2101      	movs	r1, #1
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	fa01 f303 	lsl.w	r3, r1, r3
 80016d8:	4013      	ands	r3, r2
 80016da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	f000 8171 	beq.w	80019c6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d00b      	beq.n	8001704 <HAL_GPIO_Init+0x48>
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	d007      	beq.n	8001704 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016f8:	2b11      	cmp	r3, #17
 80016fa:	d003      	beq.n	8001704 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	2b12      	cmp	r3, #18
 8001702:	d130      	bne.n	8001766 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	005b      	lsls	r3, r3, #1
 800170e:	2203      	movs	r2, #3
 8001710:	fa02 f303 	lsl.w	r3, r2, r3
 8001714:	43db      	mvns	r3, r3
 8001716:	693a      	ldr	r2, [r7, #16]
 8001718:	4013      	ands	r3, r2
 800171a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	68da      	ldr	r2, [r3, #12]
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	005b      	lsls	r3, r3, #1
 8001724:	fa02 f303 	lsl.w	r3, r2, r3
 8001728:	693a      	ldr	r2, [r7, #16]
 800172a:	4313      	orrs	r3, r2
 800172c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	693a      	ldr	r2, [r7, #16]
 8001732:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800173a:	2201      	movs	r2, #1
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	fa02 f303 	lsl.w	r3, r2, r3
 8001742:	43db      	mvns	r3, r3
 8001744:	693a      	ldr	r2, [r7, #16]
 8001746:	4013      	ands	r3, r2
 8001748:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	091b      	lsrs	r3, r3, #4
 8001750:	f003 0201 	and.w	r2, r3, #1
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	fa02 f303 	lsl.w	r3, r2, r3
 800175a:	693a      	ldr	r2, [r7, #16]
 800175c:	4313      	orrs	r3, r2
 800175e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	693a      	ldr	r2, [r7, #16]
 8001764:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f003 0303 	and.w	r3, r3, #3
 800176e:	2b03      	cmp	r3, #3
 8001770:	d118      	bne.n	80017a4 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001776:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001778:	2201      	movs	r2, #1
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	fa02 f303 	lsl.w	r3, r2, r3
 8001780:	43db      	mvns	r3, r3
 8001782:	693a      	ldr	r2, [r7, #16]
 8001784:	4013      	ands	r3, r2
 8001786:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	08db      	lsrs	r3, r3, #3
 800178e:	f003 0201 	and.w	r2, r3, #1
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	fa02 f303 	lsl.w	r3, r2, r3
 8001798:	693a      	ldr	r2, [r7, #16]
 800179a:	4313      	orrs	r3, r2
 800179c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	693a      	ldr	r2, [r7, #16]
 80017a2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	005b      	lsls	r3, r3, #1
 80017ae:	2203      	movs	r2, #3
 80017b0:	fa02 f303 	lsl.w	r3, r2, r3
 80017b4:	43db      	mvns	r3, r3
 80017b6:	693a      	ldr	r2, [r7, #16]
 80017b8:	4013      	ands	r3, r2
 80017ba:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	689a      	ldr	r2, [r3, #8]
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	005b      	lsls	r3, r3, #1
 80017c4:	fa02 f303 	lsl.w	r3, r2, r3
 80017c8:	693a      	ldr	r2, [r7, #16]
 80017ca:	4313      	orrs	r3, r2
 80017cc:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	693a      	ldr	r2, [r7, #16]
 80017d2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d003      	beq.n	80017e4 <HAL_GPIO_Init+0x128>
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	2b12      	cmp	r3, #18
 80017e2:	d123      	bne.n	800182c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	08da      	lsrs	r2, r3, #3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	3208      	adds	r2, #8
 80017ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	f003 0307 	and.w	r3, r3, #7
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	220f      	movs	r2, #15
 80017fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001800:	43db      	mvns	r3, r3
 8001802:	693a      	ldr	r2, [r7, #16]
 8001804:	4013      	ands	r3, r2
 8001806:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	691a      	ldr	r2, [r3, #16]
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	f003 0307 	and.w	r3, r3, #7
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	fa02 f303 	lsl.w	r3, r2, r3
 8001818:	693a      	ldr	r2, [r7, #16]
 800181a:	4313      	orrs	r3, r2
 800181c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	08da      	lsrs	r2, r3, #3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	3208      	adds	r2, #8
 8001826:	6939      	ldr	r1, [r7, #16]
 8001828:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	005b      	lsls	r3, r3, #1
 8001836:	2203      	movs	r2, #3
 8001838:	fa02 f303 	lsl.w	r3, r2, r3
 800183c:	43db      	mvns	r3, r3
 800183e:	693a      	ldr	r2, [r7, #16]
 8001840:	4013      	ands	r3, r2
 8001842:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f003 0203 	and.w	r2, r3, #3
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	005b      	lsls	r3, r3, #1
 8001850:	fa02 f303 	lsl.w	r3, r2, r3
 8001854:	693a      	ldr	r2, [r7, #16]
 8001856:	4313      	orrs	r3, r2
 8001858:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	693a      	ldr	r2, [r7, #16]
 800185e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001868:	2b00      	cmp	r3, #0
 800186a:	f000 80ac 	beq.w	80019c6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800186e:	4b5e      	ldr	r3, [pc, #376]	; (80019e8 <HAL_GPIO_Init+0x32c>)
 8001870:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001872:	4a5d      	ldr	r2, [pc, #372]	; (80019e8 <HAL_GPIO_Init+0x32c>)
 8001874:	f043 0301 	orr.w	r3, r3, #1
 8001878:	6613      	str	r3, [r2, #96]	; 0x60
 800187a:	4b5b      	ldr	r3, [pc, #364]	; (80019e8 <HAL_GPIO_Init+0x32c>)
 800187c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800187e:	f003 0301 	and.w	r3, r3, #1
 8001882:	60bb      	str	r3, [r7, #8]
 8001884:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001886:	4a59      	ldr	r2, [pc, #356]	; (80019ec <HAL_GPIO_Init+0x330>)
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	089b      	lsrs	r3, r3, #2
 800188c:	3302      	adds	r3, #2
 800188e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001892:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	f003 0303 	and.w	r3, r3, #3
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	220f      	movs	r2, #15
 800189e:	fa02 f303 	lsl.w	r3, r2, r3
 80018a2:	43db      	mvns	r3, r3
 80018a4:	693a      	ldr	r2, [r7, #16]
 80018a6:	4013      	ands	r3, r2
 80018a8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80018b0:	d025      	beq.n	80018fe <HAL_GPIO_Init+0x242>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4a4e      	ldr	r2, [pc, #312]	; (80019f0 <HAL_GPIO_Init+0x334>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d01f      	beq.n	80018fa <HAL_GPIO_Init+0x23e>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4a4d      	ldr	r2, [pc, #308]	; (80019f4 <HAL_GPIO_Init+0x338>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d019      	beq.n	80018f6 <HAL_GPIO_Init+0x23a>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4a4c      	ldr	r2, [pc, #304]	; (80019f8 <HAL_GPIO_Init+0x33c>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d013      	beq.n	80018f2 <HAL_GPIO_Init+0x236>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4a4b      	ldr	r2, [pc, #300]	; (80019fc <HAL_GPIO_Init+0x340>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d00d      	beq.n	80018ee <HAL_GPIO_Init+0x232>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4a4a      	ldr	r2, [pc, #296]	; (8001a00 <HAL_GPIO_Init+0x344>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d007      	beq.n	80018ea <HAL_GPIO_Init+0x22e>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4a49      	ldr	r2, [pc, #292]	; (8001a04 <HAL_GPIO_Init+0x348>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d101      	bne.n	80018e6 <HAL_GPIO_Init+0x22a>
 80018e2:	2306      	movs	r3, #6
 80018e4:	e00c      	b.n	8001900 <HAL_GPIO_Init+0x244>
 80018e6:	2307      	movs	r3, #7
 80018e8:	e00a      	b.n	8001900 <HAL_GPIO_Init+0x244>
 80018ea:	2305      	movs	r3, #5
 80018ec:	e008      	b.n	8001900 <HAL_GPIO_Init+0x244>
 80018ee:	2304      	movs	r3, #4
 80018f0:	e006      	b.n	8001900 <HAL_GPIO_Init+0x244>
 80018f2:	2303      	movs	r3, #3
 80018f4:	e004      	b.n	8001900 <HAL_GPIO_Init+0x244>
 80018f6:	2302      	movs	r3, #2
 80018f8:	e002      	b.n	8001900 <HAL_GPIO_Init+0x244>
 80018fa:	2301      	movs	r3, #1
 80018fc:	e000      	b.n	8001900 <HAL_GPIO_Init+0x244>
 80018fe:	2300      	movs	r3, #0
 8001900:	697a      	ldr	r2, [r7, #20]
 8001902:	f002 0203 	and.w	r2, r2, #3
 8001906:	0092      	lsls	r2, r2, #2
 8001908:	4093      	lsls	r3, r2
 800190a:	693a      	ldr	r2, [r7, #16]
 800190c:	4313      	orrs	r3, r2
 800190e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001910:	4936      	ldr	r1, [pc, #216]	; (80019ec <HAL_GPIO_Init+0x330>)
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	089b      	lsrs	r3, r3, #2
 8001916:	3302      	adds	r3, #2
 8001918:	693a      	ldr	r2, [r7, #16]
 800191a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800191e:	4b3a      	ldr	r3, [pc, #232]	; (8001a08 <HAL_GPIO_Init+0x34c>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	43db      	mvns	r3, r3
 8001928:	693a      	ldr	r2, [r7, #16]
 800192a:	4013      	ands	r3, r2
 800192c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d003      	beq.n	8001942 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	4313      	orrs	r3, r2
 8001940:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001942:	4a31      	ldr	r2, [pc, #196]	; (8001a08 <HAL_GPIO_Init+0x34c>)
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001948:	4b2f      	ldr	r3, [pc, #188]	; (8001a08 <HAL_GPIO_Init+0x34c>)
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	43db      	mvns	r3, r3
 8001952:	693a      	ldr	r2, [r7, #16]
 8001954:	4013      	ands	r3, r2
 8001956:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001960:	2b00      	cmp	r3, #0
 8001962:	d003      	beq.n	800196c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001964:	693a      	ldr	r2, [r7, #16]
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	4313      	orrs	r3, r2
 800196a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800196c:	4a26      	ldr	r2, [pc, #152]	; (8001a08 <HAL_GPIO_Init+0x34c>)
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001972:	4b25      	ldr	r3, [pc, #148]	; (8001a08 <HAL_GPIO_Init+0x34c>)
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	43db      	mvns	r3, r3
 800197c:	693a      	ldr	r2, [r7, #16]
 800197e:	4013      	ands	r3, r2
 8001980:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d003      	beq.n	8001996 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800198e:	693a      	ldr	r2, [r7, #16]
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	4313      	orrs	r3, r2
 8001994:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001996:	4a1c      	ldr	r2, [pc, #112]	; (8001a08 <HAL_GPIO_Init+0x34c>)
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800199c:	4b1a      	ldr	r3, [pc, #104]	; (8001a08 <HAL_GPIO_Init+0x34c>)
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	43db      	mvns	r3, r3
 80019a6:	693a      	ldr	r2, [r7, #16]
 80019a8:	4013      	ands	r3, r2
 80019aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d003      	beq.n	80019c0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80019b8:	693a      	ldr	r2, [r7, #16]
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	4313      	orrs	r3, r2
 80019be:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80019c0:	4a11      	ldr	r2, [pc, #68]	; (8001a08 <HAL_GPIO_Init+0x34c>)
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	3301      	adds	r3, #1
 80019ca:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	fa22 f303 	lsr.w	r3, r2, r3
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	f47f ae78 	bne.w	80016cc <HAL_GPIO_Init+0x10>
  }
}
 80019dc:	bf00      	nop
 80019de:	371c      	adds	r7, #28
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr
 80019e8:	40021000 	.word	0x40021000
 80019ec:	40010000 	.word	0x40010000
 80019f0:	48000400 	.word	0x48000400
 80019f4:	48000800 	.word	0x48000800
 80019f8:	48000c00 	.word	0x48000c00
 80019fc:	48001000 	.word	0x48001000
 8001a00:	48001400 	.word	0x48001400
 8001a04:	48001800 	.word	0x48001800
 8001a08:	40010400 	.word	0x40010400

08001a0c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b085      	sub	sp, #20
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	460b      	mov	r3, r1
 8001a16:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	691a      	ldr	r2, [r3, #16]
 8001a1c:	887b      	ldrh	r3, [r7, #2]
 8001a1e:	4013      	ands	r3, r2
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d002      	beq.n	8001a2a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a24:	2301      	movs	r3, #1
 8001a26:	73fb      	strb	r3, [r7, #15]
 8001a28:	e001      	b.n	8001a2e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3714      	adds	r7, #20
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr

08001a3c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	4603      	mov	r3, r0
 8001a44:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001a46:	4b08      	ldr	r3, [pc, #32]	; (8001a68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a48:	695a      	ldr	r2, [r3, #20]
 8001a4a:	88fb      	ldrh	r3, [r7, #6]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d006      	beq.n	8001a60 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a52:	4a05      	ldr	r2, [pc, #20]	; (8001a68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a54:	88fb      	ldrh	r3, [r7, #6]
 8001a56:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a58:	88fb      	ldrh	r3, [r7, #6]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f002 f97a 	bl	8003d54 <HAL_GPIO_EXTI_Callback>
  }
}
 8001a60:	bf00      	nop
 8001a62:	3708      	adds	r7, #8
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	40010400 	.word	0x40010400

08001a6c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001a70:	4b04      	ldr	r3, [pc, #16]	; (8001a84 <HAL_PWREx_GetVoltageRange+0x18>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	40007000 	.word	0x40007000

08001a88 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a96:	d130      	bne.n	8001afa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a98:	4b23      	ldr	r3, [pc, #140]	; (8001b28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001aa0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001aa4:	d038      	beq.n	8001b18 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001aa6:	4b20      	ldr	r3, [pc, #128]	; (8001b28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001aae:	4a1e      	ldr	r2, [pc, #120]	; (8001b28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ab0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ab4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001ab6:	4b1d      	ldr	r3, [pc, #116]	; (8001b2c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	2232      	movs	r2, #50	; 0x32
 8001abc:	fb02 f303 	mul.w	r3, r2, r3
 8001ac0:	4a1b      	ldr	r2, [pc, #108]	; (8001b30 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ac6:	0c9b      	lsrs	r3, r3, #18
 8001ac8:	3301      	adds	r3, #1
 8001aca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001acc:	e002      	b.n	8001ad4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	3b01      	subs	r3, #1
 8001ad2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ad4:	4b14      	ldr	r3, [pc, #80]	; (8001b28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ad6:	695b      	ldr	r3, [r3, #20]
 8001ad8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001adc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ae0:	d102      	bne.n	8001ae8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d1f2      	bne.n	8001ace <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ae8:	4b0f      	ldr	r3, [pc, #60]	; (8001b28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001aea:	695b      	ldr	r3, [r3, #20]
 8001aec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001af0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001af4:	d110      	bne.n	8001b18 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e00f      	b.n	8001b1a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001afa:	4b0b      	ldr	r3, [pc, #44]	; (8001b28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b06:	d007      	beq.n	8001b18 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b08:	4b07      	ldr	r3, [pc, #28]	; (8001b28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b10:	4a05      	ldr	r2, [pc, #20]	; (8001b28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b16:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001b18:	2300      	movs	r3, #0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3714      	adds	r7, #20
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	40007000 	.word	0x40007000
 8001b2c:	20000008 	.word	0x20000008
 8001b30:	431bde83 	.word	0x431bde83

08001b34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b088      	sub	sp, #32
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d101      	bne.n	8001b46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e3d4      	b.n	80022f0 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b46:	4ba1      	ldr	r3, [pc, #644]	; (8001dcc <HAL_RCC_OscConfig+0x298>)
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	f003 030c 	and.w	r3, r3, #12
 8001b4e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b50:	4b9e      	ldr	r3, [pc, #632]	; (8001dcc <HAL_RCC_OscConfig+0x298>)
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	f003 0303 	and.w	r3, r3, #3
 8001b58:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0310 	and.w	r3, r3, #16
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	f000 80e4 	beq.w	8001d30 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d007      	beq.n	8001b7e <HAL_RCC_OscConfig+0x4a>
 8001b6e:	69bb      	ldr	r3, [r7, #24]
 8001b70:	2b0c      	cmp	r3, #12
 8001b72:	f040 808b 	bne.w	8001c8c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	f040 8087 	bne.w	8001c8c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b7e:	4b93      	ldr	r3, [pc, #588]	; (8001dcc <HAL_RCC_OscConfig+0x298>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0302 	and.w	r3, r3, #2
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d005      	beq.n	8001b96 <HAL_RCC_OscConfig+0x62>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	699b      	ldr	r3, [r3, #24]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d101      	bne.n	8001b96 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e3ac      	b.n	80022f0 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6a1a      	ldr	r2, [r3, #32]
 8001b9a:	4b8c      	ldr	r3, [pc, #560]	; (8001dcc <HAL_RCC_OscConfig+0x298>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0308 	and.w	r3, r3, #8
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d004      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x7c>
 8001ba6:	4b89      	ldr	r3, [pc, #548]	; (8001dcc <HAL_RCC_OscConfig+0x298>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bae:	e005      	b.n	8001bbc <HAL_RCC_OscConfig+0x88>
 8001bb0:	4b86      	ldr	r3, [pc, #536]	; (8001dcc <HAL_RCC_OscConfig+0x298>)
 8001bb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bb6:	091b      	lsrs	r3, r3, #4
 8001bb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d223      	bcs.n	8001c08 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6a1b      	ldr	r3, [r3, #32]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f000 fd07 	bl	80025d8 <RCC_SetFlashLatencyFromMSIRange>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e38d      	b.n	80022f0 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001bd4:	4b7d      	ldr	r3, [pc, #500]	; (8001dcc <HAL_RCC_OscConfig+0x298>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a7c      	ldr	r2, [pc, #496]	; (8001dcc <HAL_RCC_OscConfig+0x298>)
 8001bda:	f043 0308 	orr.w	r3, r3, #8
 8001bde:	6013      	str	r3, [r2, #0]
 8001be0:	4b7a      	ldr	r3, [pc, #488]	; (8001dcc <HAL_RCC_OscConfig+0x298>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6a1b      	ldr	r3, [r3, #32]
 8001bec:	4977      	ldr	r1, [pc, #476]	; (8001dcc <HAL_RCC_OscConfig+0x298>)
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001bf2:	4b76      	ldr	r3, [pc, #472]	; (8001dcc <HAL_RCC_OscConfig+0x298>)
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	69db      	ldr	r3, [r3, #28]
 8001bfe:	021b      	lsls	r3, r3, #8
 8001c00:	4972      	ldr	r1, [pc, #456]	; (8001dcc <HAL_RCC_OscConfig+0x298>)
 8001c02:	4313      	orrs	r3, r2
 8001c04:	604b      	str	r3, [r1, #4]
 8001c06:	e025      	b.n	8001c54 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c08:	4b70      	ldr	r3, [pc, #448]	; (8001dcc <HAL_RCC_OscConfig+0x298>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a6f      	ldr	r2, [pc, #444]	; (8001dcc <HAL_RCC_OscConfig+0x298>)
 8001c0e:	f043 0308 	orr.w	r3, r3, #8
 8001c12:	6013      	str	r3, [r2, #0]
 8001c14:	4b6d      	ldr	r3, [pc, #436]	; (8001dcc <HAL_RCC_OscConfig+0x298>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6a1b      	ldr	r3, [r3, #32]
 8001c20:	496a      	ldr	r1, [pc, #424]	; (8001dcc <HAL_RCC_OscConfig+0x298>)
 8001c22:	4313      	orrs	r3, r2
 8001c24:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c26:	4b69      	ldr	r3, [pc, #420]	; (8001dcc <HAL_RCC_OscConfig+0x298>)
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	69db      	ldr	r3, [r3, #28]
 8001c32:	021b      	lsls	r3, r3, #8
 8001c34:	4965      	ldr	r1, [pc, #404]	; (8001dcc <HAL_RCC_OscConfig+0x298>)
 8001c36:	4313      	orrs	r3, r2
 8001c38:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c3a:	69bb      	ldr	r3, [r7, #24]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d109      	bne.n	8001c54 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6a1b      	ldr	r3, [r3, #32]
 8001c44:	4618      	mov	r0, r3
 8001c46:	f000 fcc7 	bl	80025d8 <RCC_SetFlashLatencyFromMSIRange>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d001      	beq.n	8001c54 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e34d      	b.n	80022f0 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c54:	f000 fc36 	bl	80024c4 <HAL_RCC_GetSysClockFreq>
 8001c58:	4601      	mov	r1, r0
 8001c5a:	4b5c      	ldr	r3, [pc, #368]	; (8001dcc <HAL_RCC_OscConfig+0x298>)
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	091b      	lsrs	r3, r3, #4
 8001c60:	f003 030f 	and.w	r3, r3, #15
 8001c64:	4a5a      	ldr	r2, [pc, #360]	; (8001dd0 <HAL_RCC_OscConfig+0x29c>)
 8001c66:	5cd3      	ldrb	r3, [r2, r3]
 8001c68:	f003 031f 	and.w	r3, r3, #31
 8001c6c:	fa21 f303 	lsr.w	r3, r1, r3
 8001c70:	4a58      	ldr	r2, [pc, #352]	; (8001dd4 <HAL_RCC_OscConfig+0x2a0>)
 8001c72:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001c74:	4b58      	ldr	r3, [pc, #352]	; (8001dd8 <HAL_RCC_OscConfig+0x2a4>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7fe fabd 	bl	80001f8 <HAL_InitTick>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001c82:	7bfb      	ldrb	r3, [r7, #15]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d052      	beq.n	8001d2e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001c88:	7bfb      	ldrb	r3, [r7, #15]
 8001c8a:	e331      	b.n	80022f0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	699b      	ldr	r3, [r3, #24]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d032      	beq.n	8001cfa <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001c94:	4b4d      	ldr	r3, [pc, #308]	; (8001dcc <HAL_RCC_OscConfig+0x298>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a4c      	ldr	r2, [pc, #304]	; (8001dcc <HAL_RCC_OscConfig+0x298>)
 8001c9a:	f043 0301 	orr.w	r3, r3, #1
 8001c9e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ca0:	f7fe fafa 	bl	8000298 <HAL_GetTick>
 8001ca4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ca6:	e008      	b.n	8001cba <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ca8:	f7fe faf6 	bl	8000298 <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d901      	bls.n	8001cba <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e31a      	b.n	80022f0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001cba:	4b44      	ldr	r3, [pc, #272]	; (8001dcc <HAL_RCC_OscConfig+0x298>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0302 	and.w	r3, r3, #2
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d0f0      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cc6:	4b41      	ldr	r3, [pc, #260]	; (8001dcc <HAL_RCC_OscConfig+0x298>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a40      	ldr	r2, [pc, #256]	; (8001dcc <HAL_RCC_OscConfig+0x298>)
 8001ccc:	f043 0308 	orr.w	r3, r3, #8
 8001cd0:	6013      	str	r3, [r2, #0]
 8001cd2:	4b3e      	ldr	r3, [pc, #248]	; (8001dcc <HAL_RCC_OscConfig+0x298>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6a1b      	ldr	r3, [r3, #32]
 8001cde:	493b      	ldr	r1, [pc, #236]	; (8001dcc <HAL_RCC_OscConfig+0x298>)
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ce4:	4b39      	ldr	r3, [pc, #228]	; (8001dcc <HAL_RCC_OscConfig+0x298>)
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	69db      	ldr	r3, [r3, #28]
 8001cf0:	021b      	lsls	r3, r3, #8
 8001cf2:	4936      	ldr	r1, [pc, #216]	; (8001dcc <HAL_RCC_OscConfig+0x298>)
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	604b      	str	r3, [r1, #4]
 8001cf8:	e01a      	b.n	8001d30 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001cfa:	4b34      	ldr	r3, [pc, #208]	; (8001dcc <HAL_RCC_OscConfig+0x298>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a33      	ldr	r2, [pc, #204]	; (8001dcc <HAL_RCC_OscConfig+0x298>)
 8001d00:	f023 0301 	bic.w	r3, r3, #1
 8001d04:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d06:	f7fe fac7 	bl	8000298 <HAL_GetTick>
 8001d0a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d0c:	e008      	b.n	8001d20 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d0e:	f7fe fac3 	bl	8000298 <HAL_GetTick>
 8001d12:	4602      	mov	r2, r0
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	d901      	bls.n	8001d20 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	e2e7      	b.n	80022f0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d20:	4b2a      	ldr	r3, [pc, #168]	; (8001dcc <HAL_RCC_OscConfig+0x298>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0302 	and.w	r3, r3, #2
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d1f0      	bne.n	8001d0e <HAL_RCC_OscConfig+0x1da>
 8001d2c:	e000      	b.n	8001d30 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d2e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 0301 	and.w	r3, r3, #1
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d074      	beq.n	8001e26 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	2b08      	cmp	r3, #8
 8001d40:	d005      	beq.n	8001d4e <HAL_RCC_OscConfig+0x21a>
 8001d42:	69bb      	ldr	r3, [r7, #24]
 8001d44:	2b0c      	cmp	r3, #12
 8001d46:	d10e      	bne.n	8001d66 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	2b03      	cmp	r3, #3
 8001d4c:	d10b      	bne.n	8001d66 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d4e:	4b1f      	ldr	r3, [pc, #124]	; (8001dcc <HAL_RCC_OscConfig+0x298>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d064      	beq.n	8001e24 <HAL_RCC_OscConfig+0x2f0>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d160      	bne.n	8001e24 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e2c4      	b.n	80022f0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d6e:	d106      	bne.n	8001d7e <HAL_RCC_OscConfig+0x24a>
 8001d70:	4b16      	ldr	r3, [pc, #88]	; (8001dcc <HAL_RCC_OscConfig+0x298>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a15      	ldr	r2, [pc, #84]	; (8001dcc <HAL_RCC_OscConfig+0x298>)
 8001d76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d7a:	6013      	str	r3, [r2, #0]
 8001d7c:	e01d      	b.n	8001dba <HAL_RCC_OscConfig+0x286>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d86:	d10c      	bne.n	8001da2 <HAL_RCC_OscConfig+0x26e>
 8001d88:	4b10      	ldr	r3, [pc, #64]	; (8001dcc <HAL_RCC_OscConfig+0x298>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a0f      	ldr	r2, [pc, #60]	; (8001dcc <HAL_RCC_OscConfig+0x298>)
 8001d8e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d92:	6013      	str	r3, [r2, #0]
 8001d94:	4b0d      	ldr	r3, [pc, #52]	; (8001dcc <HAL_RCC_OscConfig+0x298>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a0c      	ldr	r2, [pc, #48]	; (8001dcc <HAL_RCC_OscConfig+0x298>)
 8001d9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d9e:	6013      	str	r3, [r2, #0]
 8001da0:	e00b      	b.n	8001dba <HAL_RCC_OscConfig+0x286>
 8001da2:	4b0a      	ldr	r3, [pc, #40]	; (8001dcc <HAL_RCC_OscConfig+0x298>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a09      	ldr	r2, [pc, #36]	; (8001dcc <HAL_RCC_OscConfig+0x298>)
 8001da8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dac:	6013      	str	r3, [r2, #0]
 8001dae:	4b07      	ldr	r3, [pc, #28]	; (8001dcc <HAL_RCC_OscConfig+0x298>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a06      	ldr	r2, [pc, #24]	; (8001dcc <HAL_RCC_OscConfig+0x298>)
 8001db4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001db8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d01c      	beq.n	8001dfc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc2:	f7fe fa69 	bl	8000298 <HAL_GetTick>
 8001dc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001dc8:	e011      	b.n	8001dee <HAL_RCC_OscConfig+0x2ba>
 8001dca:	bf00      	nop
 8001dcc:	40021000 	.word	0x40021000
 8001dd0:	080042d4 	.word	0x080042d4
 8001dd4:	20000008 	.word	0x20000008
 8001dd8:	20000000 	.word	0x20000000
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ddc:	f7fe fa5c 	bl	8000298 <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	2b64      	cmp	r3, #100	; 0x64
 8001de8:	d901      	bls.n	8001dee <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e280      	b.n	80022f0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001dee:	4baf      	ldr	r3, [pc, #700]	; (80020ac <HAL_RCC_OscConfig+0x578>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d0f0      	beq.n	8001ddc <HAL_RCC_OscConfig+0x2a8>
 8001dfa:	e014      	b.n	8001e26 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dfc:	f7fe fa4c 	bl	8000298 <HAL_GetTick>
 8001e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e02:	e008      	b.n	8001e16 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e04:	f7fe fa48 	bl	8000298 <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	2b64      	cmp	r3, #100	; 0x64
 8001e10:	d901      	bls.n	8001e16 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e26c      	b.n	80022f0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e16:	4ba5      	ldr	r3, [pc, #660]	; (80020ac <HAL_RCC_OscConfig+0x578>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d1f0      	bne.n	8001e04 <HAL_RCC_OscConfig+0x2d0>
 8001e22:	e000      	b.n	8001e26 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0302 	and.w	r3, r3, #2
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d060      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001e32:	69bb      	ldr	r3, [r7, #24]
 8001e34:	2b04      	cmp	r3, #4
 8001e36:	d005      	beq.n	8001e44 <HAL_RCC_OscConfig+0x310>
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	2b0c      	cmp	r3, #12
 8001e3c:	d119      	bne.n	8001e72 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d116      	bne.n	8001e72 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e44:	4b99      	ldr	r3, [pc, #612]	; (80020ac <HAL_RCC_OscConfig+0x578>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d005      	beq.n	8001e5c <HAL_RCC_OscConfig+0x328>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d101      	bne.n	8001e5c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e249      	b.n	80022f0 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e5c:	4b93      	ldr	r3, [pc, #588]	; (80020ac <HAL_RCC_OscConfig+0x578>)
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	691b      	ldr	r3, [r3, #16]
 8001e68:	061b      	lsls	r3, r3, #24
 8001e6a:	4990      	ldr	r1, [pc, #576]	; (80020ac <HAL_RCC_OscConfig+0x578>)
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e70:	e040      	b.n	8001ef4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d023      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e7a:	4b8c      	ldr	r3, [pc, #560]	; (80020ac <HAL_RCC_OscConfig+0x578>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a8b      	ldr	r2, [pc, #556]	; (80020ac <HAL_RCC_OscConfig+0x578>)
 8001e80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e86:	f7fe fa07 	bl	8000298 <HAL_GetTick>
 8001e8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e8c:	e008      	b.n	8001ea0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e8e:	f7fe fa03 	bl	8000298 <HAL_GetTick>
 8001e92:	4602      	mov	r2, r0
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	d901      	bls.n	8001ea0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	e227      	b.n	80022f0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ea0:	4b82      	ldr	r3, [pc, #520]	; (80020ac <HAL_RCC_OscConfig+0x578>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d0f0      	beq.n	8001e8e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eac:	4b7f      	ldr	r3, [pc, #508]	; (80020ac <HAL_RCC_OscConfig+0x578>)
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	691b      	ldr	r3, [r3, #16]
 8001eb8:	061b      	lsls	r3, r3, #24
 8001eba:	497c      	ldr	r1, [pc, #496]	; (80020ac <HAL_RCC_OscConfig+0x578>)
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	604b      	str	r3, [r1, #4]
 8001ec0:	e018      	b.n	8001ef4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ec2:	4b7a      	ldr	r3, [pc, #488]	; (80020ac <HAL_RCC_OscConfig+0x578>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a79      	ldr	r2, [pc, #484]	; (80020ac <HAL_RCC_OscConfig+0x578>)
 8001ec8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ecc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ece:	f7fe f9e3 	bl	8000298 <HAL_GetTick>
 8001ed2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ed4:	e008      	b.n	8001ee8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ed6:	f7fe f9df 	bl	8000298 <HAL_GetTick>
 8001eda:	4602      	mov	r2, r0
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	1ad3      	subs	r3, r2, r3
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d901      	bls.n	8001ee8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	e203      	b.n	80022f0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ee8:	4b70      	ldr	r3, [pc, #448]	; (80020ac <HAL_RCC_OscConfig+0x578>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d1f0      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 0308 	and.w	r3, r3, #8
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d03c      	beq.n	8001f7a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	695b      	ldr	r3, [r3, #20]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d01c      	beq.n	8001f42 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f08:	4b68      	ldr	r3, [pc, #416]	; (80020ac <HAL_RCC_OscConfig+0x578>)
 8001f0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f0e:	4a67      	ldr	r2, [pc, #412]	; (80020ac <HAL_RCC_OscConfig+0x578>)
 8001f10:	f043 0301 	orr.w	r3, r3, #1
 8001f14:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f18:	f7fe f9be 	bl	8000298 <HAL_GetTick>
 8001f1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f1e:	e008      	b.n	8001f32 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f20:	f7fe f9ba 	bl	8000298 <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d901      	bls.n	8001f32 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	e1de      	b.n	80022f0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f32:	4b5e      	ldr	r3, [pc, #376]	; (80020ac <HAL_RCC_OscConfig+0x578>)
 8001f34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f38:	f003 0302 	and.w	r3, r3, #2
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d0ef      	beq.n	8001f20 <HAL_RCC_OscConfig+0x3ec>
 8001f40:	e01b      	b.n	8001f7a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f42:	4b5a      	ldr	r3, [pc, #360]	; (80020ac <HAL_RCC_OscConfig+0x578>)
 8001f44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f48:	4a58      	ldr	r2, [pc, #352]	; (80020ac <HAL_RCC_OscConfig+0x578>)
 8001f4a:	f023 0301 	bic.w	r3, r3, #1
 8001f4e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f52:	f7fe f9a1 	bl	8000298 <HAL_GetTick>
 8001f56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f58:	e008      	b.n	8001f6c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f5a:	f7fe f99d 	bl	8000298 <HAL_GetTick>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d901      	bls.n	8001f6c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	e1c1      	b.n	80022f0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f6c:	4b4f      	ldr	r3, [pc, #316]	; (80020ac <HAL_RCC_OscConfig+0x578>)
 8001f6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f72:	f003 0302 	and.w	r3, r3, #2
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d1ef      	bne.n	8001f5a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0304 	and.w	r3, r3, #4
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	f000 80a6 	beq.w	80020d4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001f8c:	4b47      	ldr	r3, [pc, #284]	; (80020ac <HAL_RCC_OscConfig+0x578>)
 8001f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d10d      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f98:	4b44      	ldr	r3, [pc, #272]	; (80020ac <HAL_RCC_OscConfig+0x578>)
 8001f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f9c:	4a43      	ldr	r2, [pc, #268]	; (80020ac <HAL_RCC_OscConfig+0x578>)
 8001f9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fa2:	6593      	str	r3, [r2, #88]	; 0x58
 8001fa4:	4b41      	ldr	r3, [pc, #260]	; (80020ac <HAL_RCC_OscConfig+0x578>)
 8001fa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fac:	60bb      	str	r3, [r7, #8]
 8001fae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fb4:	4b3e      	ldr	r3, [pc, #248]	; (80020b0 <HAL_RCC_OscConfig+0x57c>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d118      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fc0:	4b3b      	ldr	r3, [pc, #236]	; (80020b0 <HAL_RCC_OscConfig+0x57c>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a3a      	ldr	r2, [pc, #232]	; (80020b0 <HAL_RCC_OscConfig+0x57c>)
 8001fc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fcc:	f7fe f964 	bl	8000298 <HAL_GetTick>
 8001fd0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fd2:	e008      	b.n	8001fe6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fd4:	f7fe f960 	bl	8000298 <HAL_GetTick>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d901      	bls.n	8001fe6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e184      	b.n	80022f0 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fe6:	4b32      	ldr	r3, [pc, #200]	; (80020b0 <HAL_RCC_OscConfig+0x57c>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d0f0      	beq.n	8001fd4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d108      	bne.n	800200c <HAL_RCC_OscConfig+0x4d8>
 8001ffa:	4b2c      	ldr	r3, [pc, #176]	; (80020ac <HAL_RCC_OscConfig+0x578>)
 8001ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002000:	4a2a      	ldr	r2, [pc, #168]	; (80020ac <HAL_RCC_OscConfig+0x578>)
 8002002:	f043 0301 	orr.w	r3, r3, #1
 8002006:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800200a:	e024      	b.n	8002056 <HAL_RCC_OscConfig+0x522>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	2b05      	cmp	r3, #5
 8002012:	d110      	bne.n	8002036 <HAL_RCC_OscConfig+0x502>
 8002014:	4b25      	ldr	r3, [pc, #148]	; (80020ac <HAL_RCC_OscConfig+0x578>)
 8002016:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800201a:	4a24      	ldr	r2, [pc, #144]	; (80020ac <HAL_RCC_OscConfig+0x578>)
 800201c:	f043 0304 	orr.w	r3, r3, #4
 8002020:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002024:	4b21      	ldr	r3, [pc, #132]	; (80020ac <HAL_RCC_OscConfig+0x578>)
 8002026:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800202a:	4a20      	ldr	r2, [pc, #128]	; (80020ac <HAL_RCC_OscConfig+0x578>)
 800202c:	f043 0301 	orr.w	r3, r3, #1
 8002030:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002034:	e00f      	b.n	8002056 <HAL_RCC_OscConfig+0x522>
 8002036:	4b1d      	ldr	r3, [pc, #116]	; (80020ac <HAL_RCC_OscConfig+0x578>)
 8002038:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800203c:	4a1b      	ldr	r2, [pc, #108]	; (80020ac <HAL_RCC_OscConfig+0x578>)
 800203e:	f023 0301 	bic.w	r3, r3, #1
 8002042:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002046:	4b19      	ldr	r3, [pc, #100]	; (80020ac <HAL_RCC_OscConfig+0x578>)
 8002048:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800204c:	4a17      	ldr	r2, [pc, #92]	; (80020ac <HAL_RCC_OscConfig+0x578>)
 800204e:	f023 0304 	bic.w	r3, r3, #4
 8002052:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d016      	beq.n	800208c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800205e:	f7fe f91b 	bl	8000298 <HAL_GetTick>
 8002062:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002064:	e00a      	b.n	800207c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002066:	f7fe f917 	bl	8000298 <HAL_GetTick>
 800206a:	4602      	mov	r2, r0
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	1ad3      	subs	r3, r2, r3
 8002070:	f241 3288 	movw	r2, #5000	; 0x1388
 8002074:	4293      	cmp	r3, r2
 8002076:	d901      	bls.n	800207c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002078:	2303      	movs	r3, #3
 800207a:	e139      	b.n	80022f0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800207c:	4b0b      	ldr	r3, [pc, #44]	; (80020ac <HAL_RCC_OscConfig+0x578>)
 800207e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002082:	f003 0302 	and.w	r3, r3, #2
 8002086:	2b00      	cmp	r3, #0
 8002088:	d0ed      	beq.n	8002066 <HAL_RCC_OscConfig+0x532>
 800208a:	e01a      	b.n	80020c2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800208c:	f7fe f904 	bl	8000298 <HAL_GetTick>
 8002090:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002092:	e00f      	b.n	80020b4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002094:	f7fe f900 	bl	8000298 <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	f241 3288 	movw	r2, #5000	; 0x1388
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d906      	bls.n	80020b4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e122      	b.n	80022f0 <HAL_RCC_OscConfig+0x7bc>
 80020aa:	bf00      	nop
 80020ac:	40021000 	.word	0x40021000
 80020b0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020b4:	4b90      	ldr	r3, [pc, #576]	; (80022f8 <HAL_RCC_OscConfig+0x7c4>)
 80020b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ba:	f003 0302 	and.w	r3, r3, #2
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d1e8      	bne.n	8002094 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020c2:	7ffb      	ldrb	r3, [r7, #31]
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d105      	bne.n	80020d4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020c8:	4b8b      	ldr	r3, [pc, #556]	; (80022f8 <HAL_RCC_OscConfig+0x7c4>)
 80020ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020cc:	4a8a      	ldr	r2, [pc, #552]	; (80022f8 <HAL_RCC_OscConfig+0x7c4>)
 80020ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020d2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d8:	2b00      	cmp	r3, #0
 80020da:	f000 8108 	beq.w	80022ee <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	f040 80d0 	bne.w	8002288 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80020e8:	4b83      	ldr	r3, [pc, #524]	; (80022f8 <HAL_RCC_OscConfig+0x7c4>)
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	f003 0203 	and.w	r2, r3, #3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d130      	bne.n	800215e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002106:	3b01      	subs	r3, #1
 8002108:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800210a:	429a      	cmp	r2, r3
 800210c:	d127      	bne.n	800215e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002118:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800211a:	429a      	cmp	r2, r3
 800211c:	d11f      	bne.n	800215e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002128:	2a07      	cmp	r2, #7
 800212a:	bf14      	ite	ne
 800212c:	2201      	movne	r2, #1
 800212e:	2200      	moveq	r2, #0
 8002130:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002132:	4293      	cmp	r3, r2
 8002134:	d113      	bne.n	800215e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002140:	085b      	lsrs	r3, r3, #1
 8002142:	3b01      	subs	r3, #1
 8002144:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002146:	429a      	cmp	r2, r3
 8002148:	d109      	bne.n	800215e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002154:	085b      	lsrs	r3, r3, #1
 8002156:	3b01      	subs	r3, #1
 8002158:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800215a:	429a      	cmp	r2, r3
 800215c:	d06e      	beq.n	800223c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800215e:	69bb      	ldr	r3, [r7, #24]
 8002160:	2b0c      	cmp	r3, #12
 8002162:	d069      	beq.n	8002238 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002164:	4b64      	ldr	r3, [pc, #400]	; (80022f8 <HAL_RCC_OscConfig+0x7c4>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800216c:	2b00      	cmp	r3, #0
 800216e:	d105      	bne.n	800217c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002170:	4b61      	ldr	r3, [pc, #388]	; (80022f8 <HAL_RCC_OscConfig+0x7c4>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d001      	beq.n	8002180 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e0b7      	b.n	80022f0 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002180:	4b5d      	ldr	r3, [pc, #372]	; (80022f8 <HAL_RCC_OscConfig+0x7c4>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a5c      	ldr	r2, [pc, #368]	; (80022f8 <HAL_RCC_OscConfig+0x7c4>)
 8002186:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800218a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800218c:	f7fe f884 	bl	8000298 <HAL_GetTick>
 8002190:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002192:	e008      	b.n	80021a6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002194:	f7fe f880 	bl	8000298 <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d901      	bls.n	80021a6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e0a4      	b.n	80022f0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021a6:	4b54      	ldr	r3, [pc, #336]	; (80022f8 <HAL_RCC_OscConfig+0x7c4>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d1f0      	bne.n	8002194 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021b2:	4b51      	ldr	r3, [pc, #324]	; (80022f8 <HAL_RCC_OscConfig+0x7c4>)
 80021b4:	68da      	ldr	r2, [r3, #12]
 80021b6:	4b51      	ldr	r3, [pc, #324]	; (80022fc <HAL_RCC_OscConfig+0x7c8>)
 80021b8:	4013      	ands	r3, r2
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80021c2:	3a01      	subs	r2, #1
 80021c4:	0112      	lsls	r2, r2, #4
 80021c6:	4311      	orrs	r1, r2
 80021c8:	687a      	ldr	r2, [r7, #4]
 80021ca:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80021cc:	0212      	lsls	r2, r2, #8
 80021ce:	4311      	orrs	r1, r2
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80021d4:	0852      	lsrs	r2, r2, #1
 80021d6:	3a01      	subs	r2, #1
 80021d8:	0552      	lsls	r2, r2, #21
 80021da:	4311      	orrs	r1, r2
 80021dc:	687a      	ldr	r2, [r7, #4]
 80021de:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80021e0:	0852      	lsrs	r2, r2, #1
 80021e2:	3a01      	subs	r2, #1
 80021e4:	0652      	lsls	r2, r2, #25
 80021e6:	4311      	orrs	r1, r2
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80021ec:	0912      	lsrs	r2, r2, #4
 80021ee:	0452      	lsls	r2, r2, #17
 80021f0:	430a      	orrs	r2, r1
 80021f2:	4941      	ldr	r1, [pc, #260]	; (80022f8 <HAL_RCC_OscConfig+0x7c4>)
 80021f4:	4313      	orrs	r3, r2
 80021f6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80021f8:	4b3f      	ldr	r3, [pc, #252]	; (80022f8 <HAL_RCC_OscConfig+0x7c4>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a3e      	ldr	r2, [pc, #248]	; (80022f8 <HAL_RCC_OscConfig+0x7c4>)
 80021fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002202:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002204:	4b3c      	ldr	r3, [pc, #240]	; (80022f8 <HAL_RCC_OscConfig+0x7c4>)
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	4a3b      	ldr	r2, [pc, #236]	; (80022f8 <HAL_RCC_OscConfig+0x7c4>)
 800220a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800220e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002210:	f7fe f842 	bl	8000298 <HAL_GetTick>
 8002214:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002216:	e008      	b.n	800222a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002218:	f7fe f83e 	bl	8000298 <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	2b02      	cmp	r3, #2
 8002224:	d901      	bls.n	800222a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e062      	b.n	80022f0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800222a:	4b33      	ldr	r3, [pc, #204]	; (80022f8 <HAL_RCC_OscConfig+0x7c4>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d0f0      	beq.n	8002218 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002236:	e05a      	b.n	80022ee <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e059      	b.n	80022f0 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800223c:	4b2e      	ldr	r3, [pc, #184]	; (80022f8 <HAL_RCC_OscConfig+0x7c4>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d152      	bne.n	80022ee <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002248:	4b2b      	ldr	r3, [pc, #172]	; (80022f8 <HAL_RCC_OscConfig+0x7c4>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a2a      	ldr	r2, [pc, #168]	; (80022f8 <HAL_RCC_OscConfig+0x7c4>)
 800224e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002252:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002254:	4b28      	ldr	r3, [pc, #160]	; (80022f8 <HAL_RCC_OscConfig+0x7c4>)
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	4a27      	ldr	r2, [pc, #156]	; (80022f8 <HAL_RCC_OscConfig+0x7c4>)
 800225a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800225e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002260:	f7fe f81a 	bl	8000298 <HAL_GetTick>
 8002264:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002266:	e008      	b.n	800227a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002268:	f7fe f816 	bl	8000298 <HAL_GetTick>
 800226c:	4602      	mov	r2, r0
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	2b02      	cmp	r3, #2
 8002274:	d901      	bls.n	800227a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002276:	2303      	movs	r3, #3
 8002278:	e03a      	b.n	80022f0 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800227a:	4b1f      	ldr	r3, [pc, #124]	; (80022f8 <HAL_RCC_OscConfig+0x7c4>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d0f0      	beq.n	8002268 <HAL_RCC_OscConfig+0x734>
 8002286:	e032      	b.n	80022ee <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002288:	69bb      	ldr	r3, [r7, #24]
 800228a:	2b0c      	cmp	r3, #12
 800228c:	d02d      	beq.n	80022ea <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800228e:	4b1a      	ldr	r3, [pc, #104]	; (80022f8 <HAL_RCC_OscConfig+0x7c4>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a19      	ldr	r2, [pc, #100]	; (80022f8 <HAL_RCC_OscConfig+0x7c4>)
 8002294:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002298:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800229a:	4b17      	ldr	r3, [pc, #92]	; (80022f8 <HAL_RCC_OscConfig+0x7c4>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d105      	bne.n	80022b2 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80022a6:	4b14      	ldr	r3, [pc, #80]	; (80022f8 <HAL_RCC_OscConfig+0x7c4>)
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	4a13      	ldr	r2, [pc, #76]	; (80022f8 <HAL_RCC_OscConfig+0x7c4>)
 80022ac:	f023 0303 	bic.w	r3, r3, #3
 80022b0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80022b2:	4b11      	ldr	r3, [pc, #68]	; (80022f8 <HAL_RCC_OscConfig+0x7c4>)
 80022b4:	68db      	ldr	r3, [r3, #12]
 80022b6:	4a10      	ldr	r2, [pc, #64]	; (80022f8 <HAL_RCC_OscConfig+0x7c4>)
 80022b8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80022bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022c0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c2:	f7fd ffe9 	bl	8000298 <HAL_GetTick>
 80022c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022c8:	e008      	b.n	80022dc <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022ca:	f7fd ffe5 	bl	8000298 <HAL_GetTick>
 80022ce:	4602      	mov	r2, r0
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	d901      	bls.n	80022dc <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80022d8:	2303      	movs	r3, #3
 80022da:	e009      	b.n	80022f0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022dc:	4b06      	ldr	r3, [pc, #24]	; (80022f8 <HAL_RCC_OscConfig+0x7c4>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d1f0      	bne.n	80022ca <HAL_RCC_OscConfig+0x796>
 80022e8:	e001      	b.n	80022ee <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e000      	b.n	80022f0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80022ee:	2300      	movs	r3, #0
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3720      	adds	r7, #32
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	40021000 	.word	0x40021000
 80022fc:	f99d808c 	.word	0xf99d808c

08002300 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d101      	bne.n	8002314 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e0c8      	b.n	80024a6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002314:	4b66      	ldr	r3, [pc, #408]	; (80024b0 <HAL_RCC_ClockConfig+0x1b0>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0307 	and.w	r3, r3, #7
 800231c:	683a      	ldr	r2, [r7, #0]
 800231e:	429a      	cmp	r2, r3
 8002320:	d910      	bls.n	8002344 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002322:	4b63      	ldr	r3, [pc, #396]	; (80024b0 <HAL_RCC_ClockConfig+0x1b0>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f023 0207 	bic.w	r2, r3, #7
 800232a:	4961      	ldr	r1, [pc, #388]	; (80024b0 <HAL_RCC_ClockConfig+0x1b0>)
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	4313      	orrs	r3, r2
 8002330:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002332:	4b5f      	ldr	r3, [pc, #380]	; (80024b0 <HAL_RCC_ClockConfig+0x1b0>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0307 	and.w	r3, r3, #7
 800233a:	683a      	ldr	r2, [r7, #0]
 800233c:	429a      	cmp	r2, r3
 800233e:	d001      	beq.n	8002344 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e0b0      	b.n	80024a6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 0301 	and.w	r3, r3, #1
 800234c:	2b00      	cmp	r3, #0
 800234e:	d04c      	beq.n	80023ea <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	2b03      	cmp	r3, #3
 8002356:	d107      	bne.n	8002368 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002358:	4b56      	ldr	r3, [pc, #344]	; (80024b4 <HAL_RCC_ClockConfig+0x1b4>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002360:	2b00      	cmp	r3, #0
 8002362:	d121      	bne.n	80023a8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e09e      	b.n	80024a6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	2b02      	cmp	r3, #2
 800236e:	d107      	bne.n	8002380 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002370:	4b50      	ldr	r3, [pc, #320]	; (80024b4 <HAL_RCC_ClockConfig+0x1b4>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d115      	bne.n	80023a8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e092      	b.n	80024a6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d107      	bne.n	8002398 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002388:	4b4a      	ldr	r3, [pc, #296]	; (80024b4 <HAL_RCC_ClockConfig+0x1b4>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0302 	and.w	r3, r3, #2
 8002390:	2b00      	cmp	r3, #0
 8002392:	d109      	bne.n	80023a8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e086      	b.n	80024a6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002398:	4b46      	ldr	r3, [pc, #280]	; (80024b4 <HAL_RCC_ClockConfig+0x1b4>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d101      	bne.n	80023a8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e07e      	b.n	80024a6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80023a8:	4b42      	ldr	r3, [pc, #264]	; (80024b4 <HAL_RCC_ClockConfig+0x1b4>)
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	f023 0203 	bic.w	r2, r3, #3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	493f      	ldr	r1, [pc, #252]	; (80024b4 <HAL_RCC_ClockConfig+0x1b4>)
 80023b6:	4313      	orrs	r3, r2
 80023b8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023ba:	f7fd ff6d 	bl	8000298 <HAL_GetTick>
 80023be:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023c0:	e00a      	b.n	80023d8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023c2:	f7fd ff69 	bl	8000298 <HAL_GetTick>
 80023c6:	4602      	mov	r2, r0
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d901      	bls.n	80023d8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80023d4:	2303      	movs	r3, #3
 80023d6:	e066      	b.n	80024a6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023d8:	4b36      	ldr	r3, [pc, #216]	; (80024b4 <HAL_RCC_ClockConfig+0x1b4>)
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	f003 020c 	and.w	r2, r3, #12
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d1eb      	bne.n	80023c2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0302 	and.w	r3, r3, #2
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d008      	beq.n	8002408 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023f6:	4b2f      	ldr	r3, [pc, #188]	; (80024b4 <HAL_RCC_ClockConfig+0x1b4>)
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	492c      	ldr	r1, [pc, #176]	; (80024b4 <HAL_RCC_ClockConfig+0x1b4>)
 8002404:	4313      	orrs	r3, r2
 8002406:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002408:	4b29      	ldr	r3, [pc, #164]	; (80024b0 <HAL_RCC_ClockConfig+0x1b0>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0307 	and.w	r3, r3, #7
 8002410:	683a      	ldr	r2, [r7, #0]
 8002412:	429a      	cmp	r2, r3
 8002414:	d210      	bcs.n	8002438 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002416:	4b26      	ldr	r3, [pc, #152]	; (80024b0 <HAL_RCC_ClockConfig+0x1b0>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f023 0207 	bic.w	r2, r3, #7
 800241e:	4924      	ldr	r1, [pc, #144]	; (80024b0 <HAL_RCC_ClockConfig+0x1b0>)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	4313      	orrs	r3, r2
 8002424:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002426:	4b22      	ldr	r3, [pc, #136]	; (80024b0 <HAL_RCC_ClockConfig+0x1b0>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0307 	and.w	r3, r3, #7
 800242e:	683a      	ldr	r2, [r7, #0]
 8002430:	429a      	cmp	r2, r3
 8002432:	d001      	beq.n	8002438 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e036      	b.n	80024a6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0304 	and.w	r3, r3, #4
 8002440:	2b00      	cmp	r3, #0
 8002442:	d008      	beq.n	8002456 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002444:	4b1b      	ldr	r3, [pc, #108]	; (80024b4 <HAL_RCC_ClockConfig+0x1b4>)
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	4918      	ldr	r1, [pc, #96]	; (80024b4 <HAL_RCC_ClockConfig+0x1b4>)
 8002452:	4313      	orrs	r3, r2
 8002454:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0308 	and.w	r3, r3, #8
 800245e:	2b00      	cmp	r3, #0
 8002460:	d009      	beq.n	8002476 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002462:	4b14      	ldr	r3, [pc, #80]	; (80024b4 <HAL_RCC_ClockConfig+0x1b4>)
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	691b      	ldr	r3, [r3, #16]
 800246e:	00db      	lsls	r3, r3, #3
 8002470:	4910      	ldr	r1, [pc, #64]	; (80024b4 <HAL_RCC_ClockConfig+0x1b4>)
 8002472:	4313      	orrs	r3, r2
 8002474:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002476:	f000 f825 	bl	80024c4 <HAL_RCC_GetSysClockFreq>
 800247a:	4601      	mov	r1, r0
 800247c:	4b0d      	ldr	r3, [pc, #52]	; (80024b4 <HAL_RCC_ClockConfig+0x1b4>)
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	091b      	lsrs	r3, r3, #4
 8002482:	f003 030f 	and.w	r3, r3, #15
 8002486:	4a0c      	ldr	r2, [pc, #48]	; (80024b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002488:	5cd3      	ldrb	r3, [r2, r3]
 800248a:	f003 031f 	and.w	r3, r3, #31
 800248e:	fa21 f303 	lsr.w	r3, r1, r3
 8002492:	4a0a      	ldr	r2, [pc, #40]	; (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 8002494:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002496:	4b0a      	ldr	r3, [pc, #40]	; (80024c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4618      	mov	r0, r3
 800249c:	f7fd feac 	bl	80001f8 <HAL_InitTick>
 80024a0:	4603      	mov	r3, r0
 80024a2:	72fb      	strb	r3, [r7, #11]

  return status;
 80024a4:	7afb      	ldrb	r3, [r7, #11]
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3710      	adds	r7, #16
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	40022000 	.word	0x40022000
 80024b4:	40021000 	.word	0x40021000
 80024b8:	080042d4 	.word	0x080042d4
 80024bc:	20000008 	.word	0x20000008
 80024c0:	20000000 	.word	0x20000000

080024c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b089      	sub	sp, #36	; 0x24
 80024c8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80024ca:	2300      	movs	r3, #0
 80024cc:	61fb      	str	r3, [r7, #28]
 80024ce:	2300      	movs	r3, #0
 80024d0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024d2:	4b3d      	ldr	r3, [pc, #244]	; (80025c8 <HAL_RCC_GetSysClockFreq+0x104>)
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	f003 030c 	and.w	r3, r3, #12
 80024da:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024dc:	4b3a      	ldr	r3, [pc, #232]	; (80025c8 <HAL_RCC_GetSysClockFreq+0x104>)
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	f003 0303 	and.w	r3, r3, #3
 80024e4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d005      	beq.n	80024f8 <HAL_RCC_GetSysClockFreq+0x34>
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	2b0c      	cmp	r3, #12
 80024f0:	d121      	bne.n	8002536 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d11e      	bne.n	8002536 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80024f8:	4b33      	ldr	r3, [pc, #204]	; (80025c8 <HAL_RCC_GetSysClockFreq+0x104>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0308 	and.w	r3, r3, #8
 8002500:	2b00      	cmp	r3, #0
 8002502:	d107      	bne.n	8002514 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002504:	4b30      	ldr	r3, [pc, #192]	; (80025c8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002506:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800250a:	0a1b      	lsrs	r3, r3, #8
 800250c:	f003 030f 	and.w	r3, r3, #15
 8002510:	61fb      	str	r3, [r7, #28]
 8002512:	e005      	b.n	8002520 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002514:	4b2c      	ldr	r3, [pc, #176]	; (80025c8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	091b      	lsrs	r3, r3, #4
 800251a:	f003 030f 	and.w	r3, r3, #15
 800251e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002520:	4a2a      	ldr	r2, [pc, #168]	; (80025cc <HAL_RCC_GetSysClockFreq+0x108>)
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002528:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d10d      	bne.n	800254c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002534:	e00a      	b.n	800254c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	2b04      	cmp	r3, #4
 800253a:	d102      	bne.n	8002542 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800253c:	4b24      	ldr	r3, [pc, #144]	; (80025d0 <HAL_RCC_GetSysClockFreq+0x10c>)
 800253e:	61bb      	str	r3, [r7, #24]
 8002540:	e004      	b.n	800254c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	2b08      	cmp	r3, #8
 8002546:	d101      	bne.n	800254c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002548:	4b22      	ldr	r3, [pc, #136]	; (80025d4 <HAL_RCC_GetSysClockFreq+0x110>)
 800254a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	2b0c      	cmp	r3, #12
 8002550:	d133      	bne.n	80025ba <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002552:	4b1d      	ldr	r3, [pc, #116]	; (80025c8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	f003 0303 	and.w	r3, r3, #3
 800255a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	2b02      	cmp	r3, #2
 8002560:	d002      	beq.n	8002568 <HAL_RCC_GetSysClockFreq+0xa4>
 8002562:	2b03      	cmp	r3, #3
 8002564:	d003      	beq.n	800256e <HAL_RCC_GetSysClockFreq+0xaa>
 8002566:	e005      	b.n	8002574 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002568:	4b19      	ldr	r3, [pc, #100]	; (80025d0 <HAL_RCC_GetSysClockFreq+0x10c>)
 800256a:	617b      	str	r3, [r7, #20]
      break;
 800256c:	e005      	b.n	800257a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800256e:	4b19      	ldr	r3, [pc, #100]	; (80025d4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002570:	617b      	str	r3, [r7, #20]
      break;
 8002572:	e002      	b.n	800257a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	617b      	str	r3, [r7, #20]
      break;
 8002578:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800257a:	4b13      	ldr	r3, [pc, #76]	; (80025c8 <HAL_RCC_GetSysClockFreq+0x104>)
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	091b      	lsrs	r3, r3, #4
 8002580:	f003 0307 	and.w	r3, r3, #7
 8002584:	3301      	adds	r3, #1
 8002586:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002588:	4b0f      	ldr	r3, [pc, #60]	; (80025c8 <HAL_RCC_GetSysClockFreq+0x104>)
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	0a1b      	lsrs	r3, r3, #8
 800258e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002592:	697a      	ldr	r2, [r7, #20]
 8002594:	fb02 f203 	mul.w	r2, r2, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	fbb2 f3f3 	udiv	r3, r2, r3
 800259e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80025a0:	4b09      	ldr	r3, [pc, #36]	; (80025c8 <HAL_RCC_GetSysClockFreq+0x104>)
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	0e5b      	lsrs	r3, r3, #25
 80025a6:	f003 0303 	and.w	r3, r3, #3
 80025aa:	3301      	adds	r3, #1
 80025ac:	005b      	lsls	r3, r3, #1
 80025ae:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80025b0:	697a      	ldr	r2, [r7, #20]
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80025b8:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80025ba:	69bb      	ldr	r3, [r7, #24]
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3724      	adds	r7, #36	; 0x24
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr
 80025c8:	40021000 	.word	0x40021000
 80025cc:	080042e4 	.word	0x080042e4
 80025d0:	00f42400 	.word	0x00f42400
 80025d4:	007a1200 	.word	0x007a1200

080025d8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b086      	sub	sp, #24
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80025e0:	2300      	movs	r3, #0
 80025e2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80025e4:	4b2a      	ldr	r3, [pc, #168]	; (8002690 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d003      	beq.n	80025f8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80025f0:	f7ff fa3c 	bl	8001a6c <HAL_PWREx_GetVoltageRange>
 80025f4:	6178      	str	r0, [r7, #20]
 80025f6:	e014      	b.n	8002622 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80025f8:	4b25      	ldr	r3, [pc, #148]	; (8002690 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025fc:	4a24      	ldr	r2, [pc, #144]	; (8002690 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002602:	6593      	str	r3, [r2, #88]	; 0x58
 8002604:	4b22      	ldr	r3, [pc, #136]	; (8002690 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002606:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002608:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800260c:	60fb      	str	r3, [r7, #12]
 800260e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002610:	f7ff fa2c 	bl	8001a6c <HAL_PWREx_GetVoltageRange>
 8002614:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002616:	4b1e      	ldr	r3, [pc, #120]	; (8002690 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800261a:	4a1d      	ldr	r2, [pc, #116]	; (8002690 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800261c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002620:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002628:	d10b      	bne.n	8002642 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2b80      	cmp	r3, #128	; 0x80
 800262e:	d919      	bls.n	8002664 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2ba0      	cmp	r3, #160	; 0xa0
 8002634:	d902      	bls.n	800263c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002636:	2302      	movs	r3, #2
 8002638:	613b      	str	r3, [r7, #16]
 800263a:	e013      	b.n	8002664 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800263c:	2301      	movs	r3, #1
 800263e:	613b      	str	r3, [r7, #16]
 8002640:	e010      	b.n	8002664 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2b80      	cmp	r3, #128	; 0x80
 8002646:	d902      	bls.n	800264e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002648:	2303      	movs	r3, #3
 800264a:	613b      	str	r3, [r7, #16]
 800264c:	e00a      	b.n	8002664 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2b80      	cmp	r3, #128	; 0x80
 8002652:	d102      	bne.n	800265a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002654:	2302      	movs	r3, #2
 8002656:	613b      	str	r3, [r7, #16]
 8002658:	e004      	b.n	8002664 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2b70      	cmp	r3, #112	; 0x70
 800265e:	d101      	bne.n	8002664 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002660:	2301      	movs	r3, #1
 8002662:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002664:	4b0b      	ldr	r3, [pc, #44]	; (8002694 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f023 0207 	bic.w	r2, r3, #7
 800266c:	4909      	ldr	r1, [pc, #36]	; (8002694 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	4313      	orrs	r3, r2
 8002672:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002674:	4b07      	ldr	r3, [pc, #28]	; (8002694 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0307 	and.w	r3, r3, #7
 800267c:	693a      	ldr	r2, [r7, #16]
 800267e:	429a      	cmp	r2, r3
 8002680:	d001      	beq.n	8002686 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e000      	b.n	8002688 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002686:	2300      	movs	r3, #0
}
 8002688:	4618      	mov	r0, r3
 800268a:	3718      	adds	r7, #24
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	40021000 	.word	0x40021000
 8002694:	40022000 	.word	0x40022000

08002698 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b086      	sub	sp, #24
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80026a0:	2300      	movs	r3, #0
 80026a2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80026a4:	2300      	movs	r3, #0
 80026a6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d03f      	beq.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026bc:	d01c      	beq.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80026be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026c2:	d802      	bhi.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x32>
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d00e      	beq.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80026c8:	e01f      	b.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x72>
 80026ca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80026ce:	d003      	beq.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80026d0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80026d4:	d01c      	beq.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80026d6:	e018      	b.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80026d8:	4b85      	ldr	r3, [pc, #532]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	4a84      	ldr	r2, [pc, #528]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80026de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026e2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80026e4:	e015      	b.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	3304      	adds	r3, #4
 80026ea:	2100      	movs	r1, #0
 80026ec:	4618      	mov	r0, r3
 80026ee:	f000 fab9 	bl	8002c64 <RCCEx_PLLSAI1_Config>
 80026f2:	4603      	mov	r3, r0
 80026f4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80026f6:	e00c      	b.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	3320      	adds	r3, #32
 80026fc:	2100      	movs	r1, #0
 80026fe:	4618      	mov	r0, r3
 8002700:	f000 fba0 	bl	8002e44 <RCCEx_PLLSAI2_Config>
 8002704:	4603      	mov	r3, r0
 8002706:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002708:	e003      	b.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	74fb      	strb	r3, [r7, #19]
      break;
 800270e:	e000      	b.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8002710:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002712:	7cfb      	ldrb	r3, [r7, #19]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d10b      	bne.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002718:	4b75      	ldr	r3, [pc, #468]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800271a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800271e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002726:	4972      	ldr	r1, [pc, #456]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002728:	4313      	orrs	r3, r2
 800272a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800272e:	e001      	b.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002730:	7cfb      	ldrb	r3, [r7, #19]
 8002732:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800273c:	2b00      	cmp	r3, #0
 800273e:	d03f      	beq.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002744:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002748:	d01c      	beq.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800274a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800274e:	d802      	bhi.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8002750:	2b00      	cmp	r3, #0
 8002752:	d00e      	beq.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8002754:	e01f      	b.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002756:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800275a:	d003      	beq.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 800275c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002760:	d01c      	beq.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x104>
 8002762:	e018      	b.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002764:	4b62      	ldr	r3, [pc, #392]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	4a61      	ldr	r2, [pc, #388]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800276a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800276e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002770:	e015      	b.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	3304      	adds	r3, #4
 8002776:	2100      	movs	r1, #0
 8002778:	4618      	mov	r0, r3
 800277a:	f000 fa73 	bl	8002c64 <RCCEx_PLLSAI1_Config>
 800277e:	4603      	mov	r3, r0
 8002780:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002782:	e00c      	b.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	3320      	adds	r3, #32
 8002788:	2100      	movs	r1, #0
 800278a:	4618      	mov	r0, r3
 800278c:	f000 fb5a 	bl	8002e44 <RCCEx_PLLSAI2_Config>
 8002790:	4603      	mov	r3, r0
 8002792:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002794:	e003      	b.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	74fb      	strb	r3, [r7, #19]
      break;
 800279a:	e000      	b.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800279c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800279e:	7cfb      	ldrb	r3, [r7, #19]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d10b      	bne.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80027a4:	4b52      	ldr	r3, [pc, #328]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80027a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027aa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027b2:	494f      	ldr	r1, [pc, #316]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80027b4:	4313      	orrs	r3, r2
 80027b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80027ba:	e001      	b.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027bc:	7cfb      	ldrb	r3, [r7, #19]
 80027be:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	f000 80a0 	beq.w	800290e <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027ce:	2300      	movs	r3, #0
 80027d0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80027d2:	4b47      	ldr	r3, [pc, #284]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80027d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d101      	bne.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80027de:	2301      	movs	r3, #1
 80027e0:	e000      	b.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80027e2:	2300      	movs	r3, #0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d00d      	beq.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027e8:	4b41      	ldr	r3, [pc, #260]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80027ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ec:	4a40      	ldr	r2, [pc, #256]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80027ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027f2:	6593      	str	r3, [r2, #88]	; 0x58
 80027f4:	4b3e      	ldr	r3, [pc, #248]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80027f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027fc:	60bb      	str	r3, [r7, #8]
 80027fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002800:	2301      	movs	r3, #1
 8002802:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002804:	4b3b      	ldr	r3, [pc, #236]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a3a      	ldr	r2, [pc, #232]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800280a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800280e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002810:	f7fd fd42 	bl	8000298 <HAL_GetTick>
 8002814:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002816:	e009      	b.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002818:	f7fd fd3e 	bl	8000298 <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	2b02      	cmp	r3, #2
 8002824:	d902      	bls.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	74fb      	strb	r3, [r7, #19]
        break;
 800282a:	e005      	b.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800282c:	4b31      	ldr	r3, [pc, #196]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002834:	2b00      	cmp	r3, #0
 8002836:	d0ef      	beq.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8002838:	7cfb      	ldrb	r3, [r7, #19]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d15c      	bne.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800283e:	4b2c      	ldr	r3, [pc, #176]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002840:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002844:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002848:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d01f      	beq.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002856:	697a      	ldr	r2, [r7, #20]
 8002858:	429a      	cmp	r2, r3
 800285a:	d019      	beq.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800285c:	4b24      	ldr	r3, [pc, #144]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800285e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002862:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002866:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002868:	4b21      	ldr	r3, [pc, #132]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800286a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800286e:	4a20      	ldr	r2, [pc, #128]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002870:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002874:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002878:	4b1d      	ldr	r3, [pc, #116]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800287a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800287e:	4a1c      	ldr	r2, [pc, #112]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002880:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002884:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002888:	4a19      	ldr	r2, [pc, #100]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	f003 0301 	and.w	r3, r3, #1
 8002896:	2b00      	cmp	r3, #0
 8002898:	d016      	beq.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800289a:	f7fd fcfd 	bl	8000298 <HAL_GetTick>
 800289e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028a0:	e00b      	b.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028a2:	f7fd fcf9 	bl	8000298 <HAL_GetTick>
 80028a6:	4602      	mov	r2, r0
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d902      	bls.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 80028b4:	2303      	movs	r3, #3
 80028b6:	74fb      	strb	r3, [r7, #19]
            break;
 80028b8:	e006      	b.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028ba:	4b0d      	ldr	r3, [pc, #52]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80028bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028c0:	f003 0302 	and.w	r3, r3, #2
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d0ec      	beq.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 80028c8:	7cfb      	ldrb	r3, [r7, #19]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d10c      	bne.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028ce:	4b08      	ldr	r3, [pc, #32]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80028d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028de:	4904      	ldr	r1, [pc, #16]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80028e0:	4313      	orrs	r3, r2
 80028e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80028e6:	e009      	b.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80028e8:	7cfb      	ldrb	r3, [r7, #19]
 80028ea:	74bb      	strb	r3, [r7, #18]
 80028ec:	e006      	b.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x264>
 80028ee:	bf00      	nop
 80028f0:	40021000 	.word	0x40021000
 80028f4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028f8:	7cfb      	ldrb	r3, [r7, #19]
 80028fa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028fc:	7c7b      	ldrb	r3, [r7, #17]
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d105      	bne.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002902:	4b9e      	ldr	r3, [pc, #632]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002906:	4a9d      	ldr	r2, [pc, #628]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002908:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800290c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0301 	and.w	r3, r3, #1
 8002916:	2b00      	cmp	r3, #0
 8002918:	d00a      	beq.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800291a:	4b98      	ldr	r3, [pc, #608]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800291c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002920:	f023 0203 	bic.w	r2, r3, #3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002928:	4994      	ldr	r1, [pc, #592]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800292a:	4313      	orrs	r3, r2
 800292c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0302 	and.w	r3, r3, #2
 8002938:	2b00      	cmp	r3, #0
 800293a:	d00a      	beq.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800293c:	4b8f      	ldr	r3, [pc, #572]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800293e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002942:	f023 020c 	bic.w	r2, r3, #12
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800294a:	498c      	ldr	r1, [pc, #560]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800294c:	4313      	orrs	r3, r2
 800294e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0304 	and.w	r3, r3, #4
 800295a:	2b00      	cmp	r3, #0
 800295c:	d00a      	beq.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800295e:	4b87      	ldr	r3, [pc, #540]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002960:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002964:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296c:	4983      	ldr	r1, [pc, #524]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800296e:	4313      	orrs	r3, r2
 8002970:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0308 	and.w	r3, r3, #8
 800297c:	2b00      	cmp	r3, #0
 800297e:	d00a      	beq.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002980:	4b7e      	ldr	r3, [pc, #504]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002986:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800298e:	497b      	ldr	r1, [pc, #492]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002990:	4313      	orrs	r3, r2
 8002992:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0310 	and.w	r3, r3, #16
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d00a      	beq.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80029a2:	4b76      	ldr	r3, [pc, #472]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029b0:	4972      	ldr	r1, [pc, #456]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029b2:	4313      	orrs	r3, r2
 80029b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0320 	and.w	r3, r3, #32
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d00a      	beq.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80029c4:	4b6d      	ldr	r3, [pc, #436]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ca:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029d2:	496a      	ldr	r1, [pc, #424]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029d4:	4313      	orrs	r3, r2
 80029d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d00a      	beq.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80029e6:	4b65      	ldr	r3, [pc, #404]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029f4:	4961      	ldr	r1, [pc, #388]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029f6:	4313      	orrs	r3, r2
 80029f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d00a      	beq.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002a08:	4b5c      	ldr	r3, [pc, #368]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a0e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a16:	4959      	ldr	r1, [pc, #356]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d00a      	beq.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a2a:	4b54      	ldr	r3, [pc, #336]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a30:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a38:	4950      	ldr	r1, [pc, #320]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d00a      	beq.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a4c:	4b4b      	ldr	r3, [pc, #300]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a52:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a5a:	4948      	ldr	r1, [pc, #288]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d00a      	beq.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a6e:	4b43      	ldr	r3, [pc, #268]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a74:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a7c:	493f      	ldr	r1, [pc, #252]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d028      	beq.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a90:	4b3a      	ldr	r3, [pc, #232]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a96:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a9e:	4937      	ldr	r1, [pc, #220]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002aaa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002aae:	d106      	bne.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ab0:	4b32      	ldr	r3, [pc, #200]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	4a31      	ldr	r2, [pc, #196]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ab6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002aba:	60d3      	str	r3, [r2, #12]
 8002abc:	e011      	b.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ac2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ac6:	d10c      	bne.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	3304      	adds	r3, #4
 8002acc:	2101      	movs	r1, #1
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f000 f8c8 	bl	8002c64 <RCCEx_PLLSAI1_Config>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002ad8:	7cfb      	ldrb	r3, [r7, #19]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d001      	beq.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8002ade:	7cfb      	ldrb	r3, [r7, #19]
 8002ae0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d028      	beq.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002aee:	4b23      	ldr	r3, [pc, #140]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002af0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002af4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002afc:	491f      	ldr	r1, [pc, #124]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002afe:	4313      	orrs	r3, r2
 8002b00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b08:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b0c:	d106      	bne.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b0e:	4b1b      	ldr	r3, [pc, #108]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	4a1a      	ldr	r2, [pc, #104]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b14:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b18:	60d3      	str	r3, [r2, #12]
 8002b1a:	e011      	b.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b20:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b24:	d10c      	bne.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	3304      	adds	r3, #4
 8002b2a:	2101      	movs	r1, #1
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f000 f899 	bl	8002c64 <RCCEx_PLLSAI1_Config>
 8002b32:	4603      	mov	r3, r0
 8002b34:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b36:	7cfb      	ldrb	r3, [r7, #19]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d001      	beq.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8002b3c:	7cfb      	ldrb	r3, [r7, #19]
 8002b3e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d02b      	beq.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002b4c:	4b0b      	ldr	r3, [pc, #44]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b52:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b5a:	4908      	ldr	r1, [pc, #32]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b6a:	d109      	bne.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b6c:	4b03      	ldr	r3, [pc, #12]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	4a02      	ldr	r2, [pc, #8]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b76:	60d3      	str	r3, [r2, #12]
 8002b78:	e014      	b.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8002b7a:	bf00      	nop
 8002b7c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b84:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b88:	d10c      	bne.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	3304      	adds	r3, #4
 8002b8e:	2101      	movs	r1, #1
 8002b90:	4618      	mov	r0, r3
 8002b92:	f000 f867 	bl	8002c64 <RCCEx_PLLSAI1_Config>
 8002b96:	4603      	mov	r3, r0
 8002b98:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b9a:	7cfb      	ldrb	r3, [r7, #19]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d001      	beq.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8002ba0:	7cfb      	ldrb	r3, [r7, #19]
 8002ba2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d02f      	beq.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002bb0:	4b2b      	ldr	r3, [pc, #172]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bb6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bbe:	4928      	ldr	r1, [pc, #160]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002bce:	d10d      	bne.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	3304      	adds	r3, #4
 8002bd4:	2102      	movs	r1, #2
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f000 f844 	bl	8002c64 <RCCEx_PLLSAI1_Config>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002be0:	7cfb      	ldrb	r3, [r7, #19]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d014      	beq.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002be6:	7cfb      	ldrb	r3, [r7, #19]
 8002be8:	74bb      	strb	r3, [r7, #18]
 8002bea:	e011      	b.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bf0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002bf4:	d10c      	bne.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	3320      	adds	r3, #32
 8002bfa:	2102      	movs	r1, #2
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f000 f921 	bl	8002e44 <RCCEx_PLLSAI2_Config>
 8002c02:	4603      	mov	r3, r0
 8002c04:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c06:	7cfb      	ldrb	r3, [r7, #19]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d001      	beq.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002c0c:	7cfb      	ldrb	r3, [r7, #19]
 8002c0e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d00a      	beq.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002c1c:	4b10      	ldr	r3, [pc, #64]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c22:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c2a:	490d      	ldr	r1, [pc, #52]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d00b      	beq.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002c3e:	4b08      	ldr	r3, [pc, #32]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c44:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c4e:	4904      	ldr	r1, [pc, #16]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c50:	4313      	orrs	r3, r2
 8002c52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002c56:	7cbb      	ldrb	r3, [r7, #18]
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3718      	adds	r7, #24
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	40021000 	.word	0x40021000

08002c64 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002c72:	4b73      	ldr	r3, [pc, #460]	; (8002e40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	f003 0303 	and.w	r3, r3, #3
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d018      	beq.n	8002cb0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002c7e:	4b70      	ldr	r3, [pc, #448]	; (8002e40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	f003 0203 	and.w	r2, r3, #3
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d10d      	bne.n	8002caa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
       ||
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d009      	beq.n	8002caa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002c96:	4b6a      	ldr	r3, [pc, #424]	; (8002e40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	091b      	lsrs	r3, r3, #4
 8002c9c:	f003 0307 	and.w	r3, r3, #7
 8002ca0:	1c5a      	adds	r2, r3, #1
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
       ||
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d044      	beq.n	8002d34 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	73fb      	strb	r3, [r7, #15]
 8002cae:	e041      	b.n	8002d34 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	d00c      	beq.n	8002cd2 <RCCEx_PLLSAI1_Config+0x6e>
 8002cb8:	2b03      	cmp	r3, #3
 8002cba:	d013      	beq.n	8002ce4 <RCCEx_PLLSAI1_Config+0x80>
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d120      	bne.n	8002d02 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002cc0:	4b5f      	ldr	r3, [pc, #380]	; (8002e40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 0302 	and.w	r3, r3, #2
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d11d      	bne.n	8002d08 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cd0:	e01a      	b.n	8002d08 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002cd2:	4b5b      	ldr	r3, [pc, #364]	; (8002e40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d116      	bne.n	8002d0c <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ce2:	e013      	b.n	8002d0c <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002ce4:	4b56      	ldr	r3, [pc, #344]	; (8002e40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d10f      	bne.n	8002d10 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002cf0:	4b53      	ldr	r3, [pc, #332]	; (8002e40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d109      	bne.n	8002d10 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002d00:	e006      	b.n	8002d10 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	73fb      	strb	r3, [r7, #15]
      break;
 8002d06:	e004      	b.n	8002d12 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002d08:	bf00      	nop
 8002d0a:	e002      	b.n	8002d12 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002d0c:	bf00      	nop
 8002d0e:	e000      	b.n	8002d12 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002d10:	bf00      	nop
    }

    if(status == HAL_OK)
 8002d12:	7bfb      	ldrb	r3, [r7, #15]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d10d      	bne.n	8002d34 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002d18:	4b49      	ldr	r3, [pc, #292]	; (8002e40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6819      	ldr	r1, [r3, #0]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	3b01      	subs	r3, #1
 8002d2a:	011b      	lsls	r3, r3, #4
 8002d2c:	430b      	orrs	r3, r1
 8002d2e:	4944      	ldr	r1, [pc, #272]	; (8002e40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d30:	4313      	orrs	r3, r2
 8002d32:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002d34:	7bfb      	ldrb	r3, [r7, #15]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d17d      	bne.n	8002e36 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002d3a:	4b41      	ldr	r3, [pc, #260]	; (8002e40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a40      	ldr	r2, [pc, #256]	; (8002e40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d40:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002d44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d46:	f7fd faa7 	bl	8000298 <HAL_GetTick>
 8002d4a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002d4c:	e009      	b.n	8002d62 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d4e:	f7fd faa3 	bl	8000298 <HAL_GetTick>
 8002d52:	4602      	mov	r2, r0
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d902      	bls.n	8002d62 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	73fb      	strb	r3, [r7, #15]
        break;
 8002d60:	e005      	b.n	8002d6e <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002d62:	4b37      	ldr	r3, [pc, #220]	; (8002e40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d1ef      	bne.n	8002d4e <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002d6e:	7bfb      	ldrb	r3, [r7, #15]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d160      	bne.n	8002e36 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d111      	bne.n	8002d9e <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d7a:	4b31      	ldr	r3, [pc, #196]	; (8002e40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d7c:	691b      	ldr	r3, [r3, #16]
 8002d7e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002d82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	6892      	ldr	r2, [r2, #8]
 8002d8a:	0211      	lsls	r1, r2, #8
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	68d2      	ldr	r2, [r2, #12]
 8002d90:	0912      	lsrs	r2, r2, #4
 8002d92:	0452      	lsls	r2, r2, #17
 8002d94:	430a      	orrs	r2, r1
 8002d96:	492a      	ldr	r1, [pc, #168]	; (8002e40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	610b      	str	r3, [r1, #16]
 8002d9c:	e027      	b.n	8002dee <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d112      	bne.n	8002dca <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002da4:	4b26      	ldr	r3, [pc, #152]	; (8002e40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002da6:	691b      	ldr	r3, [r3, #16]
 8002da8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002dac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	6892      	ldr	r2, [r2, #8]
 8002db4:	0211      	lsls	r1, r2, #8
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	6912      	ldr	r2, [r2, #16]
 8002dba:	0852      	lsrs	r2, r2, #1
 8002dbc:	3a01      	subs	r2, #1
 8002dbe:	0552      	lsls	r2, r2, #21
 8002dc0:	430a      	orrs	r2, r1
 8002dc2:	491f      	ldr	r1, [pc, #124]	; (8002e40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	610b      	str	r3, [r1, #16]
 8002dc8:	e011      	b.n	8002dee <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002dca:	4b1d      	ldr	r3, [pc, #116]	; (8002e40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002dcc:	691b      	ldr	r3, [r3, #16]
 8002dce:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002dd2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	6892      	ldr	r2, [r2, #8]
 8002dda:	0211      	lsls	r1, r2, #8
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	6952      	ldr	r2, [r2, #20]
 8002de0:	0852      	lsrs	r2, r2, #1
 8002de2:	3a01      	subs	r2, #1
 8002de4:	0652      	lsls	r2, r2, #25
 8002de6:	430a      	orrs	r2, r1
 8002de8:	4915      	ldr	r1, [pc, #84]	; (8002e40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002dee:	4b14      	ldr	r3, [pc, #80]	; (8002e40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a13      	ldr	r2, [pc, #76]	; (8002e40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002df4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002df8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dfa:	f7fd fa4d 	bl	8000298 <HAL_GetTick>
 8002dfe:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e00:	e009      	b.n	8002e16 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e02:	f7fd fa49 	bl	8000298 <HAL_GetTick>
 8002e06:	4602      	mov	r2, r0
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	d902      	bls.n	8002e16 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8002e10:	2303      	movs	r3, #3
 8002e12:	73fb      	strb	r3, [r7, #15]
          break;
 8002e14:	e005      	b.n	8002e22 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e16:	4b0a      	ldr	r3, [pc, #40]	; (8002e40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d0ef      	beq.n	8002e02 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8002e22:	7bfb      	ldrb	r3, [r7, #15]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d106      	bne.n	8002e36 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002e28:	4b05      	ldr	r3, [pc, #20]	; (8002e40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e2a:	691a      	ldr	r2, [r3, #16]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	699b      	ldr	r3, [r3, #24]
 8002e30:	4903      	ldr	r1, [pc, #12]	; (8002e40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e32:	4313      	orrs	r3, r2
 8002e34:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002e36:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3710      	adds	r7, #16
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	40021000 	.word	0x40021000

08002e44 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002e52:	4b68      	ldr	r3, [pc, #416]	; (8002ff4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	f003 0303 	and.w	r3, r3, #3
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d018      	beq.n	8002e90 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002e5e:	4b65      	ldr	r3, [pc, #404]	; (8002ff4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e60:	68db      	ldr	r3, [r3, #12]
 8002e62:	f003 0203 	and.w	r2, r3, #3
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d10d      	bne.n	8002e8a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
       ||
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d009      	beq.n	8002e8a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002e76:	4b5f      	ldr	r3, [pc, #380]	; (8002ff4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	091b      	lsrs	r3, r3, #4
 8002e7c:	f003 0307 	and.w	r3, r3, #7
 8002e80:	1c5a      	adds	r2, r3, #1
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	685b      	ldr	r3, [r3, #4]
       ||
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d044      	beq.n	8002f14 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	73fb      	strb	r3, [r7, #15]
 8002e8e:	e041      	b.n	8002f14 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	2b02      	cmp	r3, #2
 8002e96:	d00c      	beq.n	8002eb2 <RCCEx_PLLSAI2_Config+0x6e>
 8002e98:	2b03      	cmp	r3, #3
 8002e9a:	d013      	beq.n	8002ec4 <RCCEx_PLLSAI2_Config+0x80>
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d120      	bne.n	8002ee2 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002ea0:	4b54      	ldr	r3, [pc, #336]	; (8002ff4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0302 	and.w	r3, r3, #2
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d11d      	bne.n	8002ee8 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002eb0:	e01a      	b.n	8002ee8 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002eb2:	4b50      	ldr	r3, [pc, #320]	; (8002ff4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d116      	bne.n	8002eec <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ec2:	e013      	b.n	8002eec <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002ec4:	4b4b      	ldr	r3, [pc, #300]	; (8002ff4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d10f      	bne.n	8002ef0 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002ed0:	4b48      	ldr	r3, [pc, #288]	; (8002ff4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d109      	bne.n	8002ef0 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002ee0:	e006      	b.n	8002ef0 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	73fb      	strb	r3, [r7, #15]
      break;
 8002ee6:	e004      	b.n	8002ef2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002ee8:	bf00      	nop
 8002eea:	e002      	b.n	8002ef2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002eec:	bf00      	nop
 8002eee:	e000      	b.n	8002ef2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002ef0:	bf00      	nop
    }

    if(status == HAL_OK)
 8002ef2:	7bfb      	ldrb	r3, [r7, #15]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d10d      	bne.n	8002f14 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002ef8:	4b3e      	ldr	r3, [pc, #248]	; (8002ff4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6819      	ldr	r1, [r3, #0]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	3b01      	subs	r3, #1
 8002f0a:	011b      	lsls	r3, r3, #4
 8002f0c:	430b      	orrs	r3, r1
 8002f0e:	4939      	ldr	r1, [pc, #228]	; (8002ff4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f10:	4313      	orrs	r3, r2
 8002f12:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002f14:	7bfb      	ldrb	r3, [r7, #15]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d167      	bne.n	8002fea <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002f1a:	4b36      	ldr	r3, [pc, #216]	; (8002ff4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a35      	ldr	r2, [pc, #212]	; (8002ff4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f26:	f7fd f9b7 	bl	8000298 <HAL_GetTick>
 8002f2a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002f2c:	e009      	b.n	8002f42 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002f2e:	f7fd f9b3 	bl	8000298 <HAL_GetTick>
 8002f32:	4602      	mov	r2, r0
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d902      	bls.n	8002f42 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	73fb      	strb	r3, [r7, #15]
        break;
 8002f40:	e005      	b.n	8002f4e <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002f42:	4b2c      	ldr	r3, [pc, #176]	; (8002ff4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d1ef      	bne.n	8002f2e <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002f4e:	7bfb      	ldrb	r3, [r7, #15]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d14a      	bne.n	8002fea <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d111      	bne.n	8002f7e <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002f5a:	4b26      	ldr	r3, [pc, #152]	; (8002ff4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f5c:	695b      	ldr	r3, [r3, #20]
 8002f5e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002f62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	6892      	ldr	r2, [r2, #8]
 8002f6a:	0211      	lsls	r1, r2, #8
 8002f6c:	687a      	ldr	r2, [r7, #4]
 8002f6e:	68d2      	ldr	r2, [r2, #12]
 8002f70:	0912      	lsrs	r2, r2, #4
 8002f72:	0452      	lsls	r2, r2, #17
 8002f74:	430a      	orrs	r2, r1
 8002f76:	491f      	ldr	r1, [pc, #124]	; (8002ff4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	614b      	str	r3, [r1, #20]
 8002f7c:	e011      	b.n	8002fa2 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002f7e:	4b1d      	ldr	r3, [pc, #116]	; (8002ff4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f80:	695b      	ldr	r3, [r3, #20]
 8002f82:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002f86:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	6892      	ldr	r2, [r2, #8]
 8002f8e:	0211      	lsls	r1, r2, #8
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	6912      	ldr	r2, [r2, #16]
 8002f94:	0852      	lsrs	r2, r2, #1
 8002f96:	3a01      	subs	r2, #1
 8002f98:	0652      	lsls	r2, r2, #25
 8002f9a:	430a      	orrs	r2, r1
 8002f9c:	4915      	ldr	r1, [pc, #84]	; (8002ff4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002fa2:	4b14      	ldr	r3, [pc, #80]	; (8002ff4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a13      	ldr	r2, [pc, #76]	; (8002ff4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002fa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fac:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fae:	f7fd f973 	bl	8000298 <HAL_GetTick>
 8002fb2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002fb4:	e009      	b.n	8002fca <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002fb6:	f7fd f96f 	bl	8000298 <HAL_GetTick>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	d902      	bls.n	8002fca <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	73fb      	strb	r3, [r7, #15]
          break;
 8002fc8:	e005      	b.n	8002fd6 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002fca:	4b0a      	ldr	r3, [pc, #40]	; (8002ff4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d0ef      	beq.n	8002fb6 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8002fd6:	7bfb      	ldrb	r3, [r7, #15]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d106      	bne.n	8002fea <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002fdc:	4b05      	ldr	r3, [pc, #20]	; (8002ff4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002fde:	695a      	ldr	r2, [r3, #20]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	695b      	ldr	r3, [r3, #20]
 8002fe4:	4903      	ldr	r1, [pc, #12]	; (8002ff4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002fea:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3710      	adds	r7, #16
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	40021000 	.word	0x40021000

08002ff8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d101      	bne.n	800300a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e049      	b.n	800309e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003010:	b2db      	uxtb	r3, r3
 8003012:	2b00      	cmp	r3, #0
 8003014:	d106      	bne.n	8003024 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f001 f848 	bl	80040b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2202      	movs	r2, #2
 8003028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	3304      	adds	r3, #4
 8003034:	4619      	mov	r1, r3
 8003036:	4610      	mov	r0, r2
 8003038:	f000 faa8 	bl	800358c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2201      	movs	r2, #1
 8003040:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2201      	movs	r2, #1
 8003048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2201      	movs	r2, #1
 8003058:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2201      	movs	r2, #1
 8003060:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2201      	movs	r2, #1
 8003070:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800309c:	2300      	movs	r3, #0
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3708      	adds	r7, #8
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
	...

080030a8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b085      	sub	sp, #20
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d001      	beq.n	80030c0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e047      	b.n	8003150 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2202      	movs	r2, #2
 80030c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a23      	ldr	r2, [pc, #140]	; (800315c <HAL_TIM_Base_Start+0xb4>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d01d      	beq.n	800310e <HAL_TIM_Base_Start+0x66>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030da:	d018      	beq.n	800310e <HAL_TIM_Base_Start+0x66>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a1f      	ldr	r2, [pc, #124]	; (8003160 <HAL_TIM_Base_Start+0xb8>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d013      	beq.n	800310e <HAL_TIM_Base_Start+0x66>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a1e      	ldr	r2, [pc, #120]	; (8003164 <HAL_TIM_Base_Start+0xbc>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d00e      	beq.n	800310e <HAL_TIM_Base_Start+0x66>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a1c      	ldr	r2, [pc, #112]	; (8003168 <HAL_TIM_Base_Start+0xc0>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d009      	beq.n	800310e <HAL_TIM_Base_Start+0x66>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a1b      	ldr	r2, [pc, #108]	; (800316c <HAL_TIM_Base_Start+0xc4>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d004      	beq.n	800310e <HAL_TIM_Base_Start+0x66>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a19      	ldr	r2, [pc, #100]	; (8003170 <HAL_TIM_Base_Start+0xc8>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d115      	bne.n	800313a <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	689a      	ldr	r2, [r3, #8]
 8003114:	4b17      	ldr	r3, [pc, #92]	; (8003174 <HAL_TIM_Base_Start+0xcc>)
 8003116:	4013      	ands	r3, r2
 8003118:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2b06      	cmp	r3, #6
 800311e:	d015      	beq.n	800314c <HAL_TIM_Base_Start+0xa4>
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003126:	d011      	beq.n	800314c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f042 0201 	orr.w	r2, r2, #1
 8003136:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003138:	e008      	b.n	800314c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f042 0201 	orr.w	r2, r2, #1
 8003148:	601a      	str	r2, [r3, #0]
 800314a:	e000      	b.n	800314e <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800314c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800314e:	2300      	movs	r3, #0
}
 8003150:	4618      	mov	r0, r3
 8003152:	3714      	adds	r7, #20
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr
 800315c:	40012c00 	.word	0x40012c00
 8003160:	40000400 	.word	0x40000400
 8003164:	40000800 	.word	0x40000800
 8003168:	40000c00 	.word	0x40000c00
 800316c:	40013400 	.word	0x40013400
 8003170:	40014000 	.word	0x40014000
 8003174:	00010007 	.word	0x00010007

08003178 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	691b      	ldr	r3, [r3, #16]
 8003186:	f003 0302 	and.w	r3, r3, #2
 800318a:	2b02      	cmp	r3, #2
 800318c:	d122      	bne.n	80031d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	f003 0302 	and.w	r3, r3, #2
 8003198:	2b02      	cmp	r3, #2
 800319a:	d11b      	bne.n	80031d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f06f 0202 	mvn.w	r2, #2
 80031a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2201      	movs	r2, #1
 80031aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	699b      	ldr	r3, [r3, #24]
 80031b2:	f003 0303 	and.w	r3, r3, #3
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d003      	beq.n	80031c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f000 f9c8 	bl	8003550 <HAL_TIM_IC_CaptureCallback>
 80031c0:	e005      	b.n	80031ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f000 f9ba 	bl	800353c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f000 f9cb 	bl	8003564 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	691b      	ldr	r3, [r3, #16]
 80031da:	f003 0304 	and.w	r3, r3, #4
 80031de:	2b04      	cmp	r3, #4
 80031e0:	d122      	bne.n	8003228 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	f003 0304 	and.w	r3, r3, #4
 80031ec:	2b04      	cmp	r3, #4
 80031ee:	d11b      	bne.n	8003228 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f06f 0204 	mvn.w	r2, #4
 80031f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2202      	movs	r2, #2
 80031fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	699b      	ldr	r3, [r3, #24]
 8003206:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800320a:	2b00      	cmp	r3, #0
 800320c:	d003      	beq.n	8003216 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f000 f99e 	bl	8003550 <HAL_TIM_IC_CaptureCallback>
 8003214:	e005      	b.n	8003222 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f000 f990 	bl	800353c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f000 f9a1 	bl	8003564 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	691b      	ldr	r3, [r3, #16]
 800322e:	f003 0308 	and.w	r3, r3, #8
 8003232:	2b08      	cmp	r3, #8
 8003234:	d122      	bne.n	800327c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	f003 0308 	and.w	r3, r3, #8
 8003240:	2b08      	cmp	r3, #8
 8003242:	d11b      	bne.n	800327c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f06f 0208 	mvn.w	r2, #8
 800324c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2204      	movs	r2, #4
 8003252:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	69db      	ldr	r3, [r3, #28]
 800325a:	f003 0303 	and.w	r3, r3, #3
 800325e:	2b00      	cmp	r3, #0
 8003260:	d003      	beq.n	800326a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f000 f974 	bl	8003550 <HAL_TIM_IC_CaptureCallback>
 8003268:	e005      	b.n	8003276 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f000 f966 	bl	800353c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f000 f977 	bl	8003564 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	691b      	ldr	r3, [r3, #16]
 8003282:	f003 0310 	and.w	r3, r3, #16
 8003286:	2b10      	cmp	r3, #16
 8003288:	d122      	bne.n	80032d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	f003 0310 	and.w	r3, r3, #16
 8003294:	2b10      	cmp	r3, #16
 8003296:	d11b      	bne.n	80032d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f06f 0210 	mvn.w	r2, #16
 80032a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2208      	movs	r2, #8
 80032a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	69db      	ldr	r3, [r3, #28]
 80032ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d003      	beq.n	80032be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f000 f94a 	bl	8003550 <HAL_TIM_IC_CaptureCallback>
 80032bc:	e005      	b.n	80032ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f000 f93c 	bl	800353c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	f000 f94d 	bl	8003564 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	691b      	ldr	r3, [r3, #16]
 80032d6:	f003 0301 	and.w	r3, r3, #1
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d10e      	bne.n	80032fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	f003 0301 	and.w	r3, r3, #1
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d107      	bne.n	80032fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f06f 0201 	mvn.w	r2, #1
 80032f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f000 f916 	bl	8003528 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	691b      	ldr	r3, [r3, #16]
 8003302:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003306:	2b80      	cmp	r3, #128	; 0x80
 8003308:	d10e      	bne.n	8003328 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003314:	2b80      	cmp	r3, #128	; 0x80
 8003316:	d107      	bne.n	8003328 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003320:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f000 faf8 	bl	8003918 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	691b      	ldr	r3, [r3, #16]
 800332e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003332:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003336:	d10e      	bne.n	8003356 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003342:	2b80      	cmp	r3, #128	; 0x80
 8003344:	d107      	bne.n	8003356 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800334e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	f000 faeb 	bl	800392c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	691b      	ldr	r3, [r3, #16]
 800335c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003360:	2b40      	cmp	r3, #64	; 0x40
 8003362:	d10e      	bne.n	8003382 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800336e:	2b40      	cmp	r3, #64	; 0x40
 8003370:	d107      	bne.n	8003382 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800337a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f000 f8fb 	bl	8003578 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	691b      	ldr	r3, [r3, #16]
 8003388:	f003 0320 	and.w	r3, r3, #32
 800338c:	2b20      	cmp	r3, #32
 800338e:	d10e      	bne.n	80033ae <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	f003 0320 	and.w	r3, r3, #32
 800339a:	2b20      	cmp	r3, #32
 800339c:	d107      	bne.n	80033ae <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f06f 0220 	mvn.w	r2, #32
 80033a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f000 faab 	bl	8003904 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80033ae:	bf00      	nop
 80033b0:	3708      	adds	r7, #8
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}

080033b6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80033b6:	b580      	push	{r7, lr}
 80033b8:	b084      	sub	sp, #16
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	6078      	str	r0, [r7, #4]
 80033be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d101      	bne.n	80033ce <HAL_TIM_ConfigClockSource+0x18>
 80033ca:	2302      	movs	r3, #2
 80033cc:	e0a8      	b.n	8003520 <HAL_TIM_ConfigClockSource+0x16a>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2201      	movs	r2, #1
 80033d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2202      	movs	r2, #2
 80033da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033ec:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80033f0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033f8:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	68fa      	ldr	r2, [r7, #12]
 8003400:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	2b40      	cmp	r3, #64	; 0x40
 8003408:	d067      	beq.n	80034da <HAL_TIM_ConfigClockSource+0x124>
 800340a:	2b40      	cmp	r3, #64	; 0x40
 800340c:	d80b      	bhi.n	8003426 <HAL_TIM_ConfigClockSource+0x70>
 800340e:	2b10      	cmp	r3, #16
 8003410:	d073      	beq.n	80034fa <HAL_TIM_ConfigClockSource+0x144>
 8003412:	2b10      	cmp	r3, #16
 8003414:	d802      	bhi.n	800341c <HAL_TIM_ConfigClockSource+0x66>
 8003416:	2b00      	cmp	r3, #0
 8003418:	d06f      	beq.n	80034fa <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800341a:	e078      	b.n	800350e <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800341c:	2b20      	cmp	r3, #32
 800341e:	d06c      	beq.n	80034fa <HAL_TIM_ConfigClockSource+0x144>
 8003420:	2b30      	cmp	r3, #48	; 0x30
 8003422:	d06a      	beq.n	80034fa <HAL_TIM_ConfigClockSource+0x144>
      break;
 8003424:	e073      	b.n	800350e <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003426:	2b70      	cmp	r3, #112	; 0x70
 8003428:	d00d      	beq.n	8003446 <HAL_TIM_ConfigClockSource+0x90>
 800342a:	2b70      	cmp	r3, #112	; 0x70
 800342c:	d804      	bhi.n	8003438 <HAL_TIM_ConfigClockSource+0x82>
 800342e:	2b50      	cmp	r3, #80	; 0x50
 8003430:	d033      	beq.n	800349a <HAL_TIM_ConfigClockSource+0xe4>
 8003432:	2b60      	cmp	r3, #96	; 0x60
 8003434:	d041      	beq.n	80034ba <HAL_TIM_ConfigClockSource+0x104>
      break;
 8003436:	e06a      	b.n	800350e <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003438:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800343c:	d066      	beq.n	800350c <HAL_TIM_ConfigClockSource+0x156>
 800343e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003442:	d017      	beq.n	8003474 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8003444:	e063      	b.n	800350e <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6818      	ldr	r0, [r3, #0]
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	6899      	ldr	r1, [r3, #8]
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	685a      	ldr	r2, [r3, #4]
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	f000 f9ad 	bl	80037b4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003468:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	68fa      	ldr	r2, [r7, #12]
 8003470:	609a      	str	r2, [r3, #8]
      break;
 8003472:	e04c      	b.n	800350e <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6818      	ldr	r0, [r3, #0]
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	6899      	ldr	r1, [r3, #8]
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	685a      	ldr	r2, [r3, #4]
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	f000 f996 	bl	80037b4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	689a      	ldr	r2, [r3, #8]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003496:	609a      	str	r2, [r3, #8]
      break;
 8003498:	e039      	b.n	800350e <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6818      	ldr	r0, [r3, #0]
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	6859      	ldr	r1, [r3, #4]
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	461a      	mov	r2, r3
 80034a8:	f000 f90a 	bl	80036c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	2150      	movs	r1, #80	; 0x50
 80034b2:	4618      	mov	r0, r3
 80034b4:	f000 f963 	bl	800377e <TIM_ITRx_SetConfig>
      break;
 80034b8:	e029      	b.n	800350e <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6818      	ldr	r0, [r3, #0]
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	6859      	ldr	r1, [r3, #4]
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	461a      	mov	r2, r3
 80034c8:	f000 f929 	bl	800371e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	2160      	movs	r1, #96	; 0x60
 80034d2:	4618      	mov	r0, r3
 80034d4:	f000 f953 	bl	800377e <TIM_ITRx_SetConfig>
      break;
 80034d8:	e019      	b.n	800350e <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6818      	ldr	r0, [r3, #0]
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	6859      	ldr	r1, [r3, #4]
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	461a      	mov	r2, r3
 80034e8:	f000 f8ea 	bl	80036c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	2140      	movs	r1, #64	; 0x40
 80034f2:	4618      	mov	r0, r3
 80034f4:	f000 f943 	bl	800377e <TIM_ITRx_SetConfig>
      break;
 80034f8:	e009      	b.n	800350e <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4619      	mov	r1, r3
 8003504:	4610      	mov	r0, r2
 8003506:	f000 f93a 	bl	800377e <TIM_ITRx_SetConfig>
        break;
 800350a:	e000      	b.n	800350e <HAL_TIM_ConfigClockSource+0x158>
      break;
 800350c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2201      	movs	r2, #1
 8003512:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800351e:	2300      	movs	r3, #0
}
 8003520:	4618      	mov	r0, r3
 8003522:	3710      	adds	r7, #16
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}

08003528 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003530:	bf00      	nop
 8003532:	370c      	adds	r7, #12
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr

0800353c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800353c:	b480      	push	{r7}
 800353e:	b083      	sub	sp, #12
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003544:	bf00      	nop
 8003546:	370c      	adds	r7, #12
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr

08003550 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003558:	bf00      	nop
 800355a:	370c      	adds	r7, #12
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr

08003564 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003564:	b480      	push	{r7}
 8003566:	b083      	sub	sp, #12
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800356c:	bf00      	nop
 800356e:	370c      	adds	r7, #12
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr

08003578 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003578:	b480      	push	{r7}
 800357a:	b083      	sub	sp, #12
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003580:	bf00      	nop
 8003582:	370c      	adds	r7, #12
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr

0800358c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800358c:	b480      	push	{r7}
 800358e:	b085      	sub	sp, #20
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	4a40      	ldr	r2, [pc, #256]	; (80036a0 <TIM_Base_SetConfig+0x114>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d013      	beq.n	80035cc <TIM_Base_SetConfig+0x40>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035aa:	d00f      	beq.n	80035cc <TIM_Base_SetConfig+0x40>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	4a3d      	ldr	r2, [pc, #244]	; (80036a4 <TIM_Base_SetConfig+0x118>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d00b      	beq.n	80035cc <TIM_Base_SetConfig+0x40>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	4a3c      	ldr	r2, [pc, #240]	; (80036a8 <TIM_Base_SetConfig+0x11c>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d007      	beq.n	80035cc <TIM_Base_SetConfig+0x40>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	4a3b      	ldr	r2, [pc, #236]	; (80036ac <TIM_Base_SetConfig+0x120>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d003      	beq.n	80035cc <TIM_Base_SetConfig+0x40>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	4a3a      	ldr	r2, [pc, #232]	; (80036b0 <TIM_Base_SetConfig+0x124>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d108      	bne.n	80035de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	68fa      	ldr	r2, [r7, #12]
 80035da:	4313      	orrs	r3, r2
 80035dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a2f      	ldr	r2, [pc, #188]	; (80036a0 <TIM_Base_SetConfig+0x114>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d01f      	beq.n	8003626 <TIM_Base_SetConfig+0x9a>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035ec:	d01b      	beq.n	8003626 <TIM_Base_SetConfig+0x9a>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a2c      	ldr	r2, [pc, #176]	; (80036a4 <TIM_Base_SetConfig+0x118>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d017      	beq.n	8003626 <TIM_Base_SetConfig+0x9a>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a2b      	ldr	r2, [pc, #172]	; (80036a8 <TIM_Base_SetConfig+0x11c>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d013      	beq.n	8003626 <TIM_Base_SetConfig+0x9a>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a2a      	ldr	r2, [pc, #168]	; (80036ac <TIM_Base_SetConfig+0x120>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d00f      	beq.n	8003626 <TIM_Base_SetConfig+0x9a>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4a29      	ldr	r2, [pc, #164]	; (80036b0 <TIM_Base_SetConfig+0x124>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d00b      	beq.n	8003626 <TIM_Base_SetConfig+0x9a>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a28      	ldr	r2, [pc, #160]	; (80036b4 <TIM_Base_SetConfig+0x128>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d007      	beq.n	8003626 <TIM_Base_SetConfig+0x9a>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4a27      	ldr	r2, [pc, #156]	; (80036b8 <TIM_Base_SetConfig+0x12c>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d003      	beq.n	8003626 <TIM_Base_SetConfig+0x9a>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4a26      	ldr	r2, [pc, #152]	; (80036bc <TIM_Base_SetConfig+0x130>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d108      	bne.n	8003638 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800362c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	68fa      	ldr	r2, [r7, #12]
 8003634:	4313      	orrs	r3, r2
 8003636:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	695b      	ldr	r3, [r3, #20]
 8003642:	4313      	orrs	r3, r2
 8003644:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	68fa      	ldr	r2, [r7, #12]
 800364a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	689a      	ldr	r2, [r3, #8]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	4a10      	ldr	r2, [pc, #64]	; (80036a0 <TIM_Base_SetConfig+0x114>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d00f      	beq.n	8003684 <TIM_Base_SetConfig+0xf8>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	4a12      	ldr	r2, [pc, #72]	; (80036b0 <TIM_Base_SetConfig+0x124>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d00b      	beq.n	8003684 <TIM_Base_SetConfig+0xf8>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	4a11      	ldr	r2, [pc, #68]	; (80036b4 <TIM_Base_SetConfig+0x128>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d007      	beq.n	8003684 <TIM_Base_SetConfig+0xf8>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	4a10      	ldr	r2, [pc, #64]	; (80036b8 <TIM_Base_SetConfig+0x12c>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d003      	beq.n	8003684 <TIM_Base_SetConfig+0xf8>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	4a0f      	ldr	r2, [pc, #60]	; (80036bc <TIM_Base_SetConfig+0x130>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d103      	bne.n	800368c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	691a      	ldr	r2, [r3, #16]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2201      	movs	r2, #1
 8003690:	615a      	str	r2, [r3, #20]
}
 8003692:	bf00      	nop
 8003694:	3714      	adds	r7, #20
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr
 800369e:	bf00      	nop
 80036a0:	40012c00 	.word	0x40012c00
 80036a4:	40000400 	.word	0x40000400
 80036a8:	40000800 	.word	0x40000800
 80036ac:	40000c00 	.word	0x40000c00
 80036b0:	40013400 	.word	0x40013400
 80036b4:	40014000 	.word	0x40014000
 80036b8:	40014400 	.word	0x40014400
 80036bc:	40014800 	.word	0x40014800

080036c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b087      	sub	sp, #28
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6a1b      	ldr	r3, [r3, #32]
 80036d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	6a1b      	ldr	r3, [r3, #32]
 80036d6:	f023 0201 	bic.w	r2, r3, #1
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	699b      	ldr	r3, [r3, #24]
 80036e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	011b      	lsls	r3, r3, #4
 80036f0:	693a      	ldr	r2, [r7, #16]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	f023 030a 	bic.w	r3, r3, #10
 80036fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80036fe:	697a      	ldr	r2, [r7, #20]
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	4313      	orrs	r3, r2
 8003704:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	693a      	ldr	r2, [r7, #16]
 800370a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	697a      	ldr	r2, [r7, #20]
 8003710:	621a      	str	r2, [r3, #32]
}
 8003712:	bf00      	nop
 8003714:	371c      	adds	r7, #28
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr

0800371e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800371e:	b480      	push	{r7}
 8003720:	b087      	sub	sp, #28
 8003722:	af00      	add	r7, sp, #0
 8003724:	60f8      	str	r0, [r7, #12]
 8003726:	60b9      	str	r1, [r7, #8]
 8003728:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	6a1b      	ldr	r3, [r3, #32]
 800372e:	f023 0210 	bic.w	r2, r3, #16
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	699b      	ldr	r3, [r3, #24]
 800373a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	6a1b      	ldr	r3, [r3, #32]
 8003740:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003748:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	031b      	lsls	r3, r3, #12
 800374e:	697a      	ldr	r2, [r7, #20]
 8003750:	4313      	orrs	r3, r2
 8003752:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800375a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	011b      	lsls	r3, r3, #4
 8003760:	693a      	ldr	r2, [r7, #16]
 8003762:	4313      	orrs	r3, r2
 8003764:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	697a      	ldr	r2, [r7, #20]
 800376a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	693a      	ldr	r2, [r7, #16]
 8003770:	621a      	str	r2, [r3, #32]
}
 8003772:	bf00      	nop
 8003774:	371c      	adds	r7, #28
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr

0800377e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800377e:	b480      	push	{r7}
 8003780:	b085      	sub	sp, #20
 8003782:	af00      	add	r7, sp, #0
 8003784:	6078      	str	r0, [r7, #4]
 8003786:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003794:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003796:	683a      	ldr	r2, [r7, #0]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	4313      	orrs	r3, r2
 800379c:	f043 0307 	orr.w	r3, r3, #7
 80037a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	68fa      	ldr	r2, [r7, #12]
 80037a6:	609a      	str	r2, [r3, #8]
}
 80037a8:	bf00      	nop
 80037aa:	3714      	adds	r7, #20
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr

080037b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b087      	sub	sp, #28
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	60f8      	str	r0, [r7, #12]
 80037bc:	60b9      	str	r1, [r7, #8]
 80037be:	607a      	str	r2, [r7, #4]
 80037c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	021a      	lsls	r2, r3, #8
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	431a      	orrs	r2, r3
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	4313      	orrs	r3, r2
 80037dc:	697a      	ldr	r2, [r7, #20]
 80037de:	4313      	orrs	r3, r2
 80037e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	697a      	ldr	r2, [r7, #20]
 80037e6:	609a      	str	r2, [r3, #8]
}
 80037e8:	bf00      	nop
 80037ea:	371c      	adds	r7, #28
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr

080037f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b085      	sub	sp, #20
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003804:	2b01      	cmp	r3, #1
 8003806:	d101      	bne.n	800380c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003808:	2302      	movs	r3, #2
 800380a:	e068      	b.n	80038de <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2201      	movs	r2, #1
 8003810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2202      	movs	r2, #2
 8003818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a2e      	ldr	r2, [pc, #184]	; (80038ec <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d004      	beq.n	8003840 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a2d      	ldr	r2, [pc, #180]	; (80038f0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d108      	bne.n	8003852 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003846:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	68fa      	ldr	r2, [r7, #12]
 800384e:	4313      	orrs	r3, r2
 8003850:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003858:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	68fa      	ldr	r2, [r7, #12]
 8003860:	4313      	orrs	r3, r2
 8003862:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	68fa      	ldr	r2, [r7, #12]
 800386a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a1e      	ldr	r2, [pc, #120]	; (80038ec <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d01d      	beq.n	80038b2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800387e:	d018      	beq.n	80038b2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a1b      	ldr	r2, [pc, #108]	; (80038f4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d013      	beq.n	80038b2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a1a      	ldr	r2, [pc, #104]	; (80038f8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d00e      	beq.n	80038b2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a18      	ldr	r2, [pc, #96]	; (80038fc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d009      	beq.n	80038b2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a13      	ldr	r2, [pc, #76]	; (80038f0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d004      	beq.n	80038b2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a14      	ldr	r2, [pc, #80]	; (8003900 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d10c      	bne.n	80038cc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	68ba      	ldr	r2, [r7, #8]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	68ba      	ldr	r2, [r7, #8]
 80038ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038dc:	2300      	movs	r3, #0
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3714      	adds	r7, #20
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr
 80038ea:	bf00      	nop
 80038ec:	40012c00 	.word	0x40012c00
 80038f0:	40013400 	.word	0x40013400
 80038f4:	40000400 	.word	0x40000400
 80038f8:	40000800 	.word	0x40000800
 80038fc:	40000c00 	.word	0x40000c00
 8003900:	40014000 	.word	0x40014000

08003904 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800390c:	bf00      	nop
 800390e:	370c      	adds	r7, #12
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr

08003918 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003920:	bf00      	nop
 8003922:	370c      	adds	r7, #12
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr

0800392c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003934:	bf00      	nop
 8003936:	370c      	adds	r7, #12
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr

08003940 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003946:	f7fc fc3f 	bl	80001c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800394a:	f000 f823 	bl	8003994 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800394e:	f000 f9a7 	bl	8003ca0 <MX_GPIO_Init>
  MX_DMA_Init();
 8003952:	f000 f97f 	bl	8003c54 <MX_DMA_Init>
  MX_DAC1_Init();
 8003956:	f000 f897 	bl	8003a88 <MX_DAC1_Init>
  MX_TIM2_Init();
 800395a:	f000 f92d 	bl	8003bb8 <MX_TIM2_Init>
  MX_DFSDM1_Init();
 800395e:	f000 f8c5 	bl	8003aec <MX_DFSDM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 8003962:	480a      	ldr	r0, [pc, #40]	; (800398c <main+0x4c>)
 8003964:	f7ff fba0 	bl	80030a8 <HAL_TIM_Base_Start>
  for(int i = 0 ; i<18000 ; i++){
 8003968:	2300      	movs	r3, #0
 800396a:	607b      	str	r3, [r7, #4]
 800396c:	e007      	b.n	800397e <main+0x3e>
	  audioBuffer[i] = 0;
 800396e:	4a08      	ldr	r2, [pc, #32]	; (8003990 <main+0x50>)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2100      	movs	r1, #0
 8003974:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for(int i = 0 ; i<18000 ; i++){
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	3301      	adds	r3, #1
 800397c:	607b      	str	r3, [r7, #4]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	f244 624f 	movw	r2, #17999	; 0x464f
 8003984:	4293      	cmp	r3, r2
 8003986:	ddf2      	ble.n	800396e <main+0x2e>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003988:	e7fe      	b.n	8003988 <main+0x48>
 800398a:	bf00      	nop
 800398c:	20000150 	.word	0x20000150
 8003990:	200001d4 	.word	0x200001d4

08003994 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b0b8      	sub	sp, #224	; 0xe0
 8003998:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800399a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800399e:	2244      	movs	r2, #68	; 0x44
 80039a0:	2100      	movs	r1, #0
 80039a2:	4618      	mov	r0, r3
 80039a4:	f000 fc82 	bl	80042ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80039a8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80039ac:	2200      	movs	r2, #0
 80039ae:	601a      	str	r2, [r3, #0]
 80039b0:	605a      	str	r2, [r3, #4]
 80039b2:	609a      	str	r2, [r3, #8]
 80039b4:	60da      	str	r2, [r3, #12]
 80039b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80039b8:	463b      	mov	r3, r7
 80039ba:	2288      	movs	r2, #136	; 0x88
 80039bc:	2100      	movs	r1, #0
 80039be:	4618      	mov	r0, r3
 80039c0:	f000 fc74 	bl	80042ac <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80039c4:	2310      	movs	r3, #16
 80039c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80039ca:	2301      	movs	r3, #1
 80039cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80039d0:	2300      	movs	r3, #0
 80039d2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80039d6:	2360      	movs	r3, #96	; 0x60
 80039d8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80039dc:	2302      	movs	r3, #2
 80039de:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80039e2:	2301      	movs	r3, #1
 80039e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80039e8:	2301      	movs	r3, #1
 80039ea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 80039ee:	2328      	movs	r3, #40	; 0x28
 80039f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80039f4:	2307      	movs	r3, #7
 80039f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80039fa:	2302      	movs	r3, #2
 80039fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003a00:	2302      	movs	r3, #2
 8003a02:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003a06:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f7fe f892 	bl	8001b34 <HAL_RCC_OscConfig>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d001      	beq.n	8003a1a <SystemClock_Config+0x86>
  {
    Error_Handler();
 8003a16:	f000 f9db 	bl	8003dd0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003a1a:	230f      	movs	r3, #15
 8003a1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003a20:	2303      	movs	r3, #3
 8003a22:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003a26:	2300      	movs	r3, #0
 8003a28:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003a32:	2300      	movs	r3, #0
 8003a34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003a38:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8003a3c:	2104      	movs	r1, #4
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f7fe fc5e 	bl	8002300 <HAL_RCC_ClockConfig>
 8003a44:	4603      	mov	r3, r0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d001      	beq.n	8003a4e <SystemClock_Config+0xba>
  {
    Error_Handler();
 8003a4a:	f000 f9c1 	bl	8003dd0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8003a4e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a52:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8003a54:	2300      	movs	r3, #0
 8003a56:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003a5a:	463b      	mov	r3, r7
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f7fe fe1b 	bl	8002698 <HAL_RCCEx_PeriphCLKConfig>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d001      	beq.n	8003a6c <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8003a68:	f000 f9b2 	bl	8003dd0 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8003a6c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003a70:	f7fe f80a 	bl	8001a88 <HAL_PWREx_ControlVoltageScaling>
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d001      	beq.n	8003a7e <SystemClock_Config+0xea>
  {
    Error_Handler();
 8003a7a:	f000 f9a9 	bl	8003dd0 <Error_Handler>
  }
}
 8003a7e:	bf00      	nop
 8003a80:	37e0      	adds	r7, #224	; 0xe0
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
	...

08003a88 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b08a      	sub	sp, #40	; 0x28
 8003a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8003a8e:	1d3b      	adds	r3, r7, #4
 8003a90:	2224      	movs	r2, #36	; 0x24
 8003a92:	2100      	movs	r1, #0
 8003a94:	4618      	mov	r0, r3
 8003a96:	f000 fc09 	bl	80042ac <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8003a9a:	4b12      	ldr	r3, [pc, #72]	; (8003ae4 <MX_DAC1_Init+0x5c>)
 8003a9c:	4a12      	ldr	r2, [pc, #72]	; (8003ae8 <MX_DAC1_Init+0x60>)
 8003a9e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8003aa0:	4810      	ldr	r0, [pc, #64]	; (8003ae4 <MX_DAC1_Init+0x5c>)
 8003aa2:	f7fc fd38 	bl	8000516 <HAL_DAC_Init>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d001      	beq.n	8003ab0 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8003aac:	f000 f990 	bl	8003dd0 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8003ab4:	2324      	movs	r3, #36	; 0x24
 8003ab6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8003abc:	2300      	movs	r3, #0
 8003abe:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8003ac4:	1d3b      	adds	r3, r7, #4
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	4619      	mov	r1, r3
 8003aca:	4806      	ldr	r0, [pc, #24]	; (8003ae4 <MX_DAC1_Init+0x5c>)
 8003acc:	f7fc fe67 	bl	800079e <HAL_DAC_ConfigChannel>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d001      	beq.n	8003ada <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8003ad6:	f000 f97b 	bl	8003dd0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8003ada:	bf00      	nop
 8003adc:	3728      	adds	r7, #40	; 0x28
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	20000058 	.word	0x20000058
 8003ae8:	40007400 	.word	0x40007400

08003aec <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8003af0:	4b2c      	ldr	r3, [pc, #176]	; (8003ba4 <MX_DFSDM1_Init+0xb8>)
 8003af2:	4a2d      	ldr	r2, [pc, #180]	; (8003ba8 <MX_DFSDM1_Init+0xbc>)
 8003af4:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8003af6:	4b2b      	ldr	r3, [pc, #172]	; (8003ba4 <MX_DFSDM1_Init+0xb8>)
 8003af8:	2200      	movs	r2, #0
 8003afa:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 8003afc:	4b29      	ldr	r3, [pc, #164]	; (8003ba4 <MX_DFSDM1_Init+0xb8>)
 8003afe:	2201      	movs	r2, #1
 8003b00:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 8003b02:	4b28      	ldr	r3, [pc, #160]	; (8003ba4 <MX_DFSDM1_Init+0xb8>)
 8003b04:	2201      	movs	r2, #1
 8003b06:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 8003b08:	4b26      	ldr	r3, [pc, #152]	; (8003ba4 <MX_DFSDM1_Init+0xb8>)
 8003b0a:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8003b0e:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 100;
 8003b10:	4b24      	ldr	r3, [pc, #144]	; (8003ba4 <MX_DFSDM1_Init+0xb8>)
 8003b12:	2264      	movs	r2, #100	; 0x64
 8003b14:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 8003b16:	4b23      	ldr	r3, [pc, #140]	; (8003ba4 <MX_DFSDM1_Init+0xb8>)
 8003b18:	2201      	movs	r2, #1
 8003b1a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 8003b1c:	4821      	ldr	r0, [pc, #132]	; (8003ba4 <MX_DFSDM1_Init+0xb8>)
 8003b1e:	f7fd f8a3 	bl	8000c68 <HAL_DFSDM_FilterInit>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d001      	beq.n	8003b2c <MX_DFSDM1_Init+0x40>
  {
    Error_Handler();
 8003b28:	f000 f952 	bl	8003dd0 <Error_Handler>
  }
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 8003b2c:	4b1f      	ldr	r3, [pc, #124]	; (8003bac <MX_DFSDM1_Init+0xc0>)
 8003b2e:	4a20      	ldr	r2, [pc, #128]	; (8003bb0 <MX_DFSDM1_Init+0xc4>)
 8003b30:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 8003b32:	4b1e      	ldr	r3, [pc, #120]	; (8003bac <MX_DFSDM1_Init+0xc0>)
 8003b34:	2201      	movs	r2, #1
 8003b36:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8003b38:	4b1c      	ldr	r3, [pc, #112]	; (8003bac <MX_DFSDM1_Init+0xc0>)
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 40;
 8003b3e:	4b1b      	ldr	r3, [pc, #108]	; (8003bac <MX_DFSDM1_Init+0xc0>)
 8003b40:	2228      	movs	r2, #40	; 0x28
 8003b42:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8003b44:	4b19      	ldr	r3, [pc, #100]	; (8003bac <MX_DFSDM1_Init+0xc0>)
 8003b46:	2200      	movs	r2, #0
 8003b48:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8003b4a:	4b18      	ldr	r3, [pc, #96]	; (8003bac <MX_DFSDM1_Init+0xc0>)
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8003b50:	4b16      	ldr	r3, [pc, #88]	; (8003bac <MX_DFSDM1_Init+0xc0>)
 8003b52:	2200      	movs	r2, #0
 8003b54:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8003b56:	4b15      	ldr	r3, [pc, #84]	; (8003bac <MX_DFSDM1_Init+0xc0>)
 8003b58:	2200      	movs	r2, #0
 8003b5a:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8003b5c:	4b13      	ldr	r3, [pc, #76]	; (8003bac <MX_DFSDM1_Init+0xc0>)
 8003b5e:	2204      	movs	r2, #4
 8003b60:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8003b62:	4b12      	ldr	r3, [pc, #72]	; (8003bac <MX_DFSDM1_Init+0xc0>)
 8003b64:	2200      	movs	r2, #0
 8003b66:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 8003b68:	4b10      	ldr	r3, [pc, #64]	; (8003bac <MX_DFSDM1_Init+0xc0>)
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 8003b6e:	4b0f      	ldr	r3, [pc, #60]	; (8003bac <MX_DFSDM1_Init+0xc0>)
 8003b70:	2200      	movs	r2, #0
 8003b72:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 8003b74:	4b0d      	ldr	r3, [pc, #52]	; (8003bac <MX_DFSDM1_Init+0xc0>)
 8003b76:	2200      	movs	r2, #0
 8003b78:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 8003b7a:	480c      	ldr	r0, [pc, #48]	; (8003bac <MX_DFSDM1_Init+0xc0>)
 8003b7c:	f7fc ffb4 	bl	8000ae8 <HAL_DFSDM_ChannelInit>
 8003b80:	4603      	mov	r3, r0
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d001      	beq.n	8003b8a <MX_DFSDM1_Init+0x9e>
  {
    Error_Handler();
 8003b86:	f000 f923 	bl	8003dd0 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_2, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	4909      	ldr	r1, [pc, #36]	; (8003bb4 <MX_DFSDM1_Init+0xc8>)
 8003b8e:	4805      	ldr	r0, [pc, #20]	; (8003ba4 <MX_DFSDM1_Init+0xb8>)
 8003b90:	f7fd f944 	bl	8000e1c <HAL_DFSDM_FilterConfigRegChannel>
 8003b94:	4603      	mov	r3, r0
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d001      	beq.n	8003b9e <MX_DFSDM1_Init+0xb2>
  {
    Error_Handler();
 8003b9a:	f000 f919 	bl	8003dd0 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8003b9e:	bf00      	nop
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	2000006c 	.word	0x2000006c
 8003ba8:	40016100 	.word	0x40016100
 8003bac:	2000019c 	.word	0x2000019c
 8003bb0:	40016040 	.word	0x40016040
 8003bb4:	00020004 	.word	0x00020004

08003bb8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b088      	sub	sp, #32
 8003bbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003bbe:	f107 0310 	add.w	r3, r7, #16
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	601a      	str	r2, [r3, #0]
 8003bc6:	605a      	str	r2, [r3, #4]
 8003bc8:	609a      	str	r2, [r3, #8]
 8003bca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003bcc:	1d3b      	adds	r3, r7, #4
 8003bce:	2200      	movs	r2, #0
 8003bd0:	601a      	str	r2, [r3, #0]
 8003bd2:	605a      	str	r2, [r3, #4]
 8003bd4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003bd6:	4b1e      	ldr	r3, [pc, #120]	; (8003c50 <MX_TIM2_Init+0x98>)
 8003bd8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003bdc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003bde:	4b1c      	ldr	r3, [pc, #112]	; (8003c50 <MX_TIM2_Init+0x98>)
 8003be0:	2200      	movs	r2, #0
 8003be2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003be4:	4b1a      	ldr	r3, [pc, #104]	; (8003c50 <MX_TIM2_Init+0x98>)
 8003be6:	2200      	movs	r2, #0
 8003be8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4000;
 8003bea:	4b19      	ldr	r3, [pc, #100]	; (8003c50 <MX_TIM2_Init+0x98>)
 8003bec:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8003bf0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003bf2:	4b17      	ldr	r3, [pc, #92]	; (8003c50 <MX_TIM2_Init+0x98>)
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003bf8:	4b15      	ldr	r3, [pc, #84]	; (8003c50 <MX_TIM2_Init+0x98>)
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003bfe:	4814      	ldr	r0, [pc, #80]	; (8003c50 <MX_TIM2_Init+0x98>)
 8003c00:	f7ff f9fa 	bl	8002ff8 <HAL_TIM_Base_Init>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d001      	beq.n	8003c0e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8003c0a:	f000 f8e1 	bl	8003dd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003c0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c12:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003c14:	f107 0310 	add.w	r3, r7, #16
 8003c18:	4619      	mov	r1, r3
 8003c1a:	480d      	ldr	r0, [pc, #52]	; (8003c50 <MX_TIM2_Init+0x98>)
 8003c1c:	f7ff fbcb 	bl	80033b6 <HAL_TIM_ConfigClockSource>
 8003c20:	4603      	mov	r3, r0
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d001      	beq.n	8003c2a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8003c26:	f000 f8d3 	bl	8003dd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003c2a:	2320      	movs	r3, #32
 8003c2c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003c32:	1d3b      	adds	r3, r7, #4
 8003c34:	4619      	mov	r1, r3
 8003c36:	4806      	ldr	r0, [pc, #24]	; (8003c50 <MX_TIM2_Init+0x98>)
 8003c38:	f7ff fddc 	bl	80037f4 <HAL_TIMEx_MasterConfigSynchronization>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d001      	beq.n	8003c46 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8003c42:	f000 f8c5 	bl	8003dd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003c46:	bf00      	nop
 8003c48:	3720      	adds	r7, #32
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	20000150 	.word	0x20000150

08003c54 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b082      	sub	sp, #8
 8003c58:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003c5a:	4b10      	ldr	r3, [pc, #64]	; (8003c9c <MX_DMA_Init+0x48>)
 8003c5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c5e:	4a0f      	ldr	r2, [pc, #60]	; (8003c9c <MX_DMA_Init+0x48>)
 8003c60:	f043 0301 	orr.w	r3, r3, #1
 8003c64:	6493      	str	r3, [r2, #72]	; 0x48
 8003c66:	4b0d      	ldr	r3, [pc, #52]	; (8003c9c <MX_DMA_Init+0x48>)
 8003c68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c6a:	f003 0301 	and.w	r3, r3, #1
 8003c6e:	607b      	str	r3, [r7, #4]
 8003c70:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8003c72:	2200      	movs	r2, #0
 8003c74:	2100      	movs	r1, #0
 8003c76:	200d      	movs	r0, #13
 8003c78:	f7fc fc17 	bl	80004aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8003c7c:	200d      	movs	r0, #13
 8003c7e:	f7fc fc30 	bl	80004e2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8003c82:	2200      	movs	r2, #0
 8003c84:	2100      	movs	r1, #0
 8003c86:	200e      	movs	r0, #14
 8003c88:	f7fc fc0f 	bl	80004aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8003c8c:	200e      	movs	r0, #14
 8003c8e:	f7fc fc28 	bl	80004e2 <HAL_NVIC_EnableIRQ>

}
 8003c92:	bf00      	nop
 8003c94:	3708      	adds	r7, #8
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	bf00      	nop
 8003c9c:	40021000 	.word	0x40021000

08003ca0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b08a      	sub	sp, #40	; 0x28
 8003ca4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ca6:	f107 0314 	add.w	r3, r7, #20
 8003caa:	2200      	movs	r2, #0
 8003cac:	601a      	str	r2, [r3, #0]
 8003cae:	605a      	str	r2, [r3, #4]
 8003cb0:	609a      	str	r2, [r3, #8]
 8003cb2:	60da      	str	r2, [r3, #12]
 8003cb4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003cb6:	4b24      	ldr	r3, [pc, #144]	; (8003d48 <MX_GPIO_Init+0xa8>)
 8003cb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cba:	4a23      	ldr	r2, [pc, #140]	; (8003d48 <MX_GPIO_Init+0xa8>)
 8003cbc:	f043 0304 	orr.w	r3, r3, #4
 8003cc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003cc2:	4b21      	ldr	r3, [pc, #132]	; (8003d48 <MX_GPIO_Init+0xa8>)
 8003cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cc6:	f003 0304 	and.w	r3, r3, #4
 8003cca:	613b      	str	r3, [r7, #16]
 8003ccc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cce:	4b1e      	ldr	r3, [pc, #120]	; (8003d48 <MX_GPIO_Init+0xa8>)
 8003cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cd2:	4a1d      	ldr	r2, [pc, #116]	; (8003d48 <MX_GPIO_Init+0xa8>)
 8003cd4:	f043 0301 	orr.w	r3, r3, #1
 8003cd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003cda:	4b1b      	ldr	r3, [pc, #108]	; (8003d48 <MX_GPIO_Init+0xa8>)
 8003cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cde:	f003 0301 	and.w	r3, r3, #1
 8003ce2:	60fb      	str	r3, [r7, #12]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003ce6:	4b18      	ldr	r3, [pc, #96]	; (8003d48 <MX_GPIO_Init+0xa8>)
 8003ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cea:	4a17      	ldr	r2, [pc, #92]	; (8003d48 <MX_GPIO_Init+0xa8>)
 8003cec:	f043 0310 	orr.w	r3, r3, #16
 8003cf0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003cf2:	4b15      	ldr	r3, [pc, #84]	; (8003d48 <MX_GPIO_Init+0xa8>)
 8003cf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cf6:	f003 0310 	and.w	r3, r3, #16
 8003cfa:	60bb      	str	r3, [r7, #8]
 8003cfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cfe:	4b12      	ldr	r3, [pc, #72]	; (8003d48 <MX_GPIO_Init+0xa8>)
 8003d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d02:	4a11      	ldr	r2, [pc, #68]	; (8003d48 <MX_GPIO_Init+0xa8>)
 8003d04:	f043 0302 	orr.w	r3, r3, #2
 8003d08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003d0a:	4b0f      	ldr	r3, [pc, #60]	; (8003d48 <MX_GPIO_Init+0xa8>)
 8003d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d0e:	f003 0302 	and.w	r3, r3, #2
 8003d12:	607b      	str	r3, [r7, #4]
 8003d14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8003d16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003d1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003d1c:	4b0b      	ldr	r3, [pc, #44]	; (8003d4c <MX_GPIO_Init+0xac>)
 8003d1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d20:	2300      	movs	r3, #0
 8003d22:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8003d24:	f107 0314 	add.w	r3, r7, #20
 8003d28:	4619      	mov	r1, r3
 8003d2a:	4809      	ldr	r0, [pc, #36]	; (8003d50 <MX_GPIO_Init+0xb0>)
 8003d2c:	f7fd fcc6 	bl	80016bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003d30:	2200      	movs	r2, #0
 8003d32:	2100      	movs	r1, #0
 8003d34:	2028      	movs	r0, #40	; 0x28
 8003d36:	f7fc fbb8 	bl	80004aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003d3a:	2028      	movs	r0, #40	; 0x28
 8003d3c:	f7fc fbd1 	bl	80004e2 <HAL_NVIC_EnableIRQ>

}
 8003d40:	bf00      	nop
 8003d42:	3728      	adds	r7, #40	; 0x28
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}
 8003d48:	40021000 	.word	0x40021000
 8003d4c:	10210000 	.word	0x10210000
 8003d50:	48000800 	.word	0x48000800

08003d54 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b082      	sub	sp, #8
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	80fb      	strh	r3, [r7, #6]
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) != GPIO_PIN_SET) {
 8003d5e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003d62:	480a      	ldr	r0, [pc, #40]	; (8003d8c <HAL_GPIO_EXTI_Callback+0x38>)
 8003d64:	f7fd fe52 	bl	8001a0c <HAL_GPIO_ReadPin>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d009      	beq.n	8003d82 <HAL_GPIO_EXTI_Callback+0x2e>
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8003d6e:	2100      	movs	r1, #0
 8003d70:	4807      	ldr	r0, [pc, #28]	; (8003d90 <HAL_GPIO_EXTI_Callback+0x3c>)
 8003d72:	f7fc fcb1 	bl	80006d8 <HAL_DAC_Stop_DMA>
		//Starting DFSDM DMA mode
		HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0, audioBuffer, BufferSize);
 8003d76:	f245 52f0 	movw	r2, #22000	; 0x55f0
 8003d7a:	4906      	ldr	r1, [pc, #24]	; (8003d94 <HAL_GPIO_EXTI_Callback+0x40>)
 8003d7c:	4806      	ldr	r0, [pc, #24]	; (8003d98 <HAL_GPIO_EXTI_Callback+0x44>)
 8003d7e:	f7fd f893 	bl	8000ea8 <HAL_DFSDM_FilterRegularStart_DMA>
	}
}
 8003d82:	bf00      	nop
 8003d84:	3708      	adds	r7, #8
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	48000800 	.word	0x48000800
 8003d90:	20000058 	.word	0x20000058
 8003d94:	200001d4 	.word	0x200001d4
 8003d98:	2000006c 	.word	0x2000006c

08003d9c <HAL_DFSDM_FilterRegConvCpltCallback>:

void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter0){
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b084      	sub	sp, #16
 8003da0:	af02      	add	r7, sp, #8
 8003da2:	6078      	str	r0, [r7, #4]
	HAL_DFSDM_FilterRegularStop_DMA(&hdfsdm1_filter0);
 8003da4:	4807      	ldr	r0, [pc, #28]	; (8003dc4 <HAL_DFSDM_FilterRegConvCpltCallback+0x28>)
 8003da6:	f7fd f901 	bl	8000fac <HAL_DFSDM_FilterRegularStop_DMA>
	HAL_DAC_Start_DMA (&hdac1, DAC_CHANNEL_1, (uint32_t *) audioBuffer, BufferSize, DAC_ALIGN_12B_R);
 8003daa:	2300      	movs	r3, #0
 8003dac:	9300      	str	r3, [sp, #0]
 8003dae:	f245 53f0 	movw	r3, #22000	; 0x55f0
 8003db2:	4a05      	ldr	r2, [pc, #20]	; (8003dc8 <HAL_DFSDM_FilterRegConvCpltCallback+0x2c>)
 8003db4:	2100      	movs	r1, #0
 8003db6:	4805      	ldr	r0, [pc, #20]	; (8003dcc <HAL_DFSDM_FilterRegConvCpltCallback+0x30>)
 8003db8:	f7fc fbd0 	bl	800055c <HAL_DAC_Start_DMA>
}
 8003dbc:	bf00      	nop
 8003dbe:	3708      	adds	r7, #8
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}
 8003dc4:	2000006c 	.word	0x2000006c
 8003dc8:	200001d4 	.word	0x200001d4
 8003dcc:	20000058 	.word	0x20000058

08003dd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003dd4:	bf00      	nop
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr
	...

08003de0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003de6:	4b0f      	ldr	r3, [pc, #60]	; (8003e24 <HAL_MspInit+0x44>)
 8003de8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dea:	4a0e      	ldr	r2, [pc, #56]	; (8003e24 <HAL_MspInit+0x44>)
 8003dec:	f043 0301 	orr.w	r3, r3, #1
 8003df0:	6613      	str	r3, [r2, #96]	; 0x60
 8003df2:	4b0c      	ldr	r3, [pc, #48]	; (8003e24 <HAL_MspInit+0x44>)
 8003df4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003df6:	f003 0301 	and.w	r3, r3, #1
 8003dfa:	607b      	str	r3, [r7, #4]
 8003dfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003dfe:	4b09      	ldr	r3, [pc, #36]	; (8003e24 <HAL_MspInit+0x44>)
 8003e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e02:	4a08      	ldr	r2, [pc, #32]	; (8003e24 <HAL_MspInit+0x44>)
 8003e04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e08:	6593      	str	r3, [r2, #88]	; 0x58
 8003e0a:	4b06      	ldr	r3, [pc, #24]	; (8003e24 <HAL_MspInit+0x44>)
 8003e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e12:	603b      	str	r3, [r7, #0]
 8003e14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003e16:	bf00      	nop
 8003e18:	370c      	adds	r7, #12
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr
 8003e22:	bf00      	nop
 8003e24:	40021000 	.word	0x40021000

08003e28 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b08a      	sub	sp, #40	; 0x28
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e30:	f107 0314 	add.w	r3, r7, #20
 8003e34:	2200      	movs	r2, #0
 8003e36:	601a      	str	r2, [r3, #0]
 8003e38:	605a      	str	r2, [r3, #4]
 8003e3a:	609a      	str	r2, [r3, #8]
 8003e3c:	60da      	str	r2, [r3, #12]
 8003e3e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a2b      	ldr	r2, [pc, #172]	; (8003ef4 <HAL_DAC_MspInit+0xcc>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d14f      	bne.n	8003eea <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8003e4a:	4b2b      	ldr	r3, [pc, #172]	; (8003ef8 <HAL_DAC_MspInit+0xd0>)
 8003e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e4e:	4a2a      	ldr	r2, [pc, #168]	; (8003ef8 <HAL_DAC_MspInit+0xd0>)
 8003e50:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003e54:	6593      	str	r3, [r2, #88]	; 0x58
 8003e56:	4b28      	ldr	r3, [pc, #160]	; (8003ef8 <HAL_DAC_MspInit+0xd0>)
 8003e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e5a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e5e:	613b      	str	r3, [r7, #16]
 8003e60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e62:	4b25      	ldr	r3, [pc, #148]	; (8003ef8 <HAL_DAC_MspInit+0xd0>)
 8003e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e66:	4a24      	ldr	r2, [pc, #144]	; (8003ef8 <HAL_DAC_MspInit+0xd0>)
 8003e68:	f043 0301 	orr.w	r3, r3, #1
 8003e6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003e6e:	4b22      	ldr	r3, [pc, #136]	; (8003ef8 <HAL_DAC_MspInit+0xd0>)
 8003e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e72:	f003 0301 	and.w	r3, r3, #1
 8003e76:	60fb      	str	r3, [r7, #12]
 8003e78:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003e7a:	2310      	movs	r3, #16
 8003e7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e82:	2300      	movs	r3, #0
 8003e84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e86:	f107 0314 	add.w	r3, r7, #20
 8003e8a:	4619      	mov	r1, r3
 8003e8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e90:	f7fd fc14 	bl	80016bc <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 8003e94:	4b19      	ldr	r3, [pc, #100]	; (8003efc <HAL_DAC_MspInit+0xd4>)
 8003e96:	4a1a      	ldr	r2, [pc, #104]	; (8003f00 <HAL_DAC_MspInit+0xd8>)
 8003e98:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 8003e9a:	4b18      	ldr	r3, [pc, #96]	; (8003efc <HAL_DAC_MspInit+0xd4>)
 8003e9c:	2206      	movs	r2, #6
 8003e9e:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003ea0:	4b16      	ldr	r3, [pc, #88]	; (8003efc <HAL_DAC_MspInit+0xd4>)
 8003ea2:	2210      	movs	r2, #16
 8003ea4:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ea6:	4b15      	ldr	r3, [pc, #84]	; (8003efc <HAL_DAC_MspInit+0xd4>)
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003eac:	4b13      	ldr	r3, [pc, #76]	; (8003efc <HAL_DAC_MspInit+0xd4>)
 8003eae:	2280      	movs	r2, #128	; 0x80
 8003eb0:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003eb2:	4b12      	ldr	r3, [pc, #72]	; (8003efc <HAL_DAC_MspInit+0xd4>)
 8003eb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003eb8:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003eba:	4b10      	ldr	r3, [pc, #64]	; (8003efc <HAL_DAC_MspInit+0xd4>)
 8003ebc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ec0:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 8003ec2:	4b0e      	ldr	r3, [pc, #56]	; (8003efc <HAL_DAC_MspInit+0xd4>)
 8003ec4:	2220      	movs	r2, #32
 8003ec6:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8003ec8:	4b0c      	ldr	r3, [pc, #48]	; (8003efc <HAL_DAC_MspInit+0xd4>)
 8003eca:	2200      	movs	r2, #0
 8003ecc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8003ece:	480b      	ldr	r0, [pc, #44]	; (8003efc <HAL_DAC_MspInit+0xd4>)
 8003ed0:	f7fd f9be 	bl	8001250 <HAL_DMA_Init>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d001      	beq.n	8003ede <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8003eda:	f7ff ff79 	bl	8003dd0 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a06      	ldr	r2, [pc, #24]	; (8003efc <HAL_DAC_MspInit+0xd4>)
 8003ee2:	609a      	str	r2, [r3, #8]
 8003ee4:	4a05      	ldr	r2, [pc, #20]	; (8003efc <HAL_DAC_MspInit+0xd4>)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8003eea:	bf00      	nop
 8003eec:	3728      	adds	r7, #40	; 0x28
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	40007400 	.word	0x40007400
 8003ef8:	40021000 	.word	0x40021000
 8003efc:	200000c0 	.word	0x200000c0
 8003f00:	40020030 	.word	0x40020030

08003f04 <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b08a      	sub	sp, #40	; 0x28
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f0c:	f107 0314 	add.w	r3, r7, #20
 8003f10:	2200      	movs	r2, #0
 8003f12:	601a      	str	r2, [r3, #0]
 8003f14:	605a      	str	r2, [r3, #4]
 8003f16:	609a      	str	r2, [r3, #8]
 8003f18:	60da      	str	r2, [r3, #12]
 8003f1a:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8003f1c:	4b37      	ldr	r3, [pc, #220]	; (8003ffc <HAL_DFSDM_FilterMspInit+0xf8>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d131      	bne.n	8003f88 <HAL_DFSDM_FilterMspInit+0x84>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8003f24:	4b36      	ldr	r3, [pc, #216]	; (8004000 <HAL_DFSDM_FilterMspInit+0xfc>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	3301      	adds	r3, #1
 8003f2a:	4a35      	ldr	r2, [pc, #212]	; (8004000 <HAL_DFSDM_FilterMspInit+0xfc>)
 8003f2c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8003f2e:	4b34      	ldr	r3, [pc, #208]	; (8004000 <HAL_DFSDM_FilterMspInit+0xfc>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d10b      	bne.n	8003f4e <HAL_DFSDM_FilterMspInit+0x4a>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8003f36:	4b33      	ldr	r3, [pc, #204]	; (8004004 <HAL_DFSDM_FilterMspInit+0x100>)
 8003f38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f3a:	4a32      	ldr	r2, [pc, #200]	; (8004004 <HAL_DFSDM_FilterMspInit+0x100>)
 8003f3c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f40:	6613      	str	r3, [r2, #96]	; 0x60
 8003f42:	4b30      	ldr	r3, [pc, #192]	; (8004004 <HAL_DFSDM_FilterMspInit+0x100>)
 8003f44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f4a:	613b      	str	r3, [r7, #16]
 8003f4c:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003f4e:	4b2d      	ldr	r3, [pc, #180]	; (8004004 <HAL_DFSDM_FilterMspInit+0x100>)
 8003f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f52:	4a2c      	ldr	r2, [pc, #176]	; (8004004 <HAL_DFSDM_FilterMspInit+0x100>)
 8003f54:	f043 0310 	orr.w	r3, r3, #16
 8003f58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f5a:	4b2a      	ldr	r3, [pc, #168]	; (8004004 <HAL_DFSDM_FilterMspInit+0x100>)
 8003f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f5e:	f003 0310 	and.w	r3, r3, #16
 8003f62:	60fb      	str	r3, [r7, #12]
 8003f64:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8003f66:	f44f 7320 	mov.w	r3, #640	; 0x280
 8003f6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f6c:	2302      	movs	r3, #2
 8003f6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f70:	2300      	movs	r3, #0
 8003f72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f74:	2300      	movs	r3, #0
 8003f76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8003f78:	2306      	movs	r3, #6
 8003f7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003f7c:	f107 0314 	add.w	r3, r7, #20
 8003f80:	4619      	mov	r1, r3
 8003f82:	4821      	ldr	r0, [pc, #132]	; (8004008 <HAL_DFSDM_FilterMspInit+0x104>)
 8003f84:	f7fd fb9a 	bl	80016bc <HAL_GPIO_Init>
  /* USER CODE END DFSDM1_MspInit 1 */
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter0){
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a1f      	ldr	r2, [pc, #124]	; (800400c <HAL_DFSDM_FilterMspInit+0x108>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d130      	bne.n	8003ff4 <HAL_DFSDM_FilterMspInit+0xf0>
    hdma_dfsdm1_flt0.Instance = DMA1_Channel4;
 8003f92:	4b1f      	ldr	r3, [pc, #124]	; (8004010 <HAL_DFSDM_FilterMspInit+0x10c>)
 8003f94:	4a1f      	ldr	r2, [pc, #124]	; (8004014 <HAL_DFSDM_FilterMspInit+0x110>)
 8003f96:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_0;
 8003f98:	4b1d      	ldr	r3, [pc, #116]	; (8004010 <HAL_DFSDM_FilterMspInit+0x10c>)
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003f9e:	4b1c      	ldr	r3, [pc, #112]	; (8004010 <HAL_DFSDM_FilterMspInit+0x10c>)
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 8003fa4:	4b1a      	ldr	r3, [pc, #104]	; (8004010 <HAL_DFSDM_FilterMspInit+0x10c>)
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 8003faa:	4b19      	ldr	r3, [pc, #100]	; (8004010 <HAL_DFSDM_FilterMspInit+0x10c>)
 8003fac:	2280      	movs	r2, #128	; 0x80
 8003fae:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003fb0:	4b17      	ldr	r3, [pc, #92]	; (8004010 <HAL_DFSDM_FilterMspInit+0x10c>)
 8003fb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fb6:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003fb8:	4b15      	ldr	r3, [pc, #84]	; (8004010 <HAL_DFSDM_FilterMspInit+0x10c>)
 8003fba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003fbe:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_NORMAL;
 8003fc0:	4b13      	ldr	r3, [pc, #76]	; (8004010 <HAL_DFSDM_FilterMspInit+0x10c>)
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_LOW;
 8003fc6:	4b12      	ldr	r3, [pc, #72]	; (8004010 <HAL_DFSDM_FilterMspInit+0x10c>)
 8003fc8:	2200      	movs	r2, #0
 8003fca:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 8003fcc:	4810      	ldr	r0, [pc, #64]	; (8004010 <HAL_DFSDM_FilterMspInit+0x10c>)
 8003fce:	f7fd f93f 	bl	8001250 <HAL_DMA_Init>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d001      	beq.n	8003fdc <HAL_DFSDM_FilterMspInit+0xd8>
    {
      Error_Handler();
 8003fd8:	f7ff fefa 	bl	8003dd0 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt0);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	4a0c      	ldr	r2, [pc, #48]	; (8004010 <HAL_DFSDM_FilterMspInit+0x10c>)
 8003fe0:	62da      	str	r2, [r3, #44]	; 0x2c
 8003fe2:	4a0b      	ldr	r2, [pc, #44]	; (8004010 <HAL_DFSDM_FilterMspInit+0x10c>)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt0);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	4a09      	ldr	r2, [pc, #36]	; (8004010 <HAL_DFSDM_FilterMspInit+0x10c>)
 8003fec:	629a      	str	r2, [r3, #40]	; 0x28
 8003fee:	4a08      	ldr	r2, [pc, #32]	; (8004010 <HAL_DFSDM_FilterMspInit+0x10c>)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6293      	str	r3, [r2, #40]	; 0x28
  }

}
 8003ff4:	bf00      	nop
 8003ff6:	3728      	adds	r7, #40	; 0x28
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}
 8003ffc:	20000050 	.word	0x20000050
 8004000:	2000004c 	.word	0x2000004c
 8004004:	40021000 	.word	0x40021000
 8004008:	48001000 	.word	0x48001000
 800400c:	40016100 	.word	0x40016100
 8004010:	20000108 	.word	0x20000108
 8004014:	40020044 	.word	0x40020044

08004018 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b08a      	sub	sp, #40	; 0x28
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004020:	f107 0314 	add.w	r3, r7, #20
 8004024:	2200      	movs	r2, #0
 8004026:	601a      	str	r2, [r3, #0]
 8004028:	605a      	str	r2, [r3, #4]
 800402a:	609a      	str	r2, [r3, #8]
 800402c:	60da      	str	r2, [r3, #12]
 800402e:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8004030:	4b1c      	ldr	r3, [pc, #112]	; (80040a4 <HAL_DFSDM_ChannelMspInit+0x8c>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d131      	bne.n	800409c <HAL_DFSDM_ChannelMspInit+0x84>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8004038:	4b1b      	ldr	r3, [pc, #108]	; (80040a8 <HAL_DFSDM_ChannelMspInit+0x90>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	3301      	adds	r3, #1
 800403e:	4a1a      	ldr	r2, [pc, #104]	; (80040a8 <HAL_DFSDM_ChannelMspInit+0x90>)
 8004040:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8004042:	4b19      	ldr	r3, [pc, #100]	; (80040a8 <HAL_DFSDM_ChannelMspInit+0x90>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	2b01      	cmp	r3, #1
 8004048:	d10b      	bne.n	8004062 <HAL_DFSDM_ChannelMspInit+0x4a>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 800404a:	4b18      	ldr	r3, [pc, #96]	; (80040ac <HAL_DFSDM_ChannelMspInit+0x94>)
 800404c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800404e:	4a17      	ldr	r2, [pc, #92]	; (80040ac <HAL_DFSDM_ChannelMspInit+0x94>)
 8004050:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004054:	6613      	str	r3, [r2, #96]	; 0x60
 8004056:	4b15      	ldr	r3, [pc, #84]	; (80040ac <HAL_DFSDM_ChannelMspInit+0x94>)
 8004058:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800405a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800405e:	613b      	str	r3, [r7, #16]
 8004060:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004062:	4b12      	ldr	r3, [pc, #72]	; (80040ac <HAL_DFSDM_ChannelMspInit+0x94>)
 8004064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004066:	4a11      	ldr	r2, [pc, #68]	; (80040ac <HAL_DFSDM_ChannelMspInit+0x94>)
 8004068:	f043 0310 	orr.w	r3, r3, #16
 800406c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800406e:	4b0f      	ldr	r3, [pc, #60]	; (80040ac <HAL_DFSDM_ChannelMspInit+0x94>)
 8004070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004072:	f003 0310 	and.w	r3, r3, #16
 8004076:	60fb      	str	r3, [r7, #12]
 8004078:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 800407a:	f44f 7320 	mov.w	r3, #640	; 0x280
 800407e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004080:	2302      	movs	r3, #2
 8004082:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004084:	2300      	movs	r3, #0
 8004086:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004088:	2300      	movs	r3, #0
 800408a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800408c:	2306      	movs	r3, #6
 800408e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004090:	f107 0314 	add.w	r3, r7, #20
 8004094:	4619      	mov	r1, r3
 8004096:	4806      	ldr	r0, [pc, #24]	; (80040b0 <HAL_DFSDM_ChannelMspInit+0x98>)
 8004098:	f7fd fb10 	bl	80016bc <HAL_GPIO_Init>
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  }

}
 800409c:	bf00      	nop
 800409e:	3728      	adds	r7, #40	; 0x28
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}
 80040a4:	20000050 	.word	0x20000050
 80040a8:	2000004c 	.word	0x2000004c
 80040ac:	40021000 	.word	0x40021000
 80040b0:	48001000 	.word	0x48001000

080040b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b084      	sub	sp, #16
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040c4:	d113      	bne.n	80040ee <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80040c6:	4b0c      	ldr	r3, [pc, #48]	; (80040f8 <HAL_TIM_Base_MspInit+0x44>)
 80040c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ca:	4a0b      	ldr	r2, [pc, #44]	; (80040f8 <HAL_TIM_Base_MspInit+0x44>)
 80040cc:	f043 0301 	orr.w	r3, r3, #1
 80040d0:	6593      	str	r3, [r2, #88]	; 0x58
 80040d2:	4b09      	ldr	r3, [pc, #36]	; (80040f8 <HAL_TIM_Base_MspInit+0x44>)
 80040d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040d6:	f003 0301 	and.w	r3, r3, #1
 80040da:	60fb      	str	r3, [r7, #12]
 80040dc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80040de:	2200      	movs	r2, #0
 80040e0:	2100      	movs	r1, #0
 80040e2:	201c      	movs	r0, #28
 80040e4:	f7fc f9e1 	bl	80004aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80040e8:	201c      	movs	r0, #28
 80040ea:	f7fc f9fa 	bl	80004e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80040ee:	bf00      	nop
 80040f0:	3710      	adds	r7, #16
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}
 80040f6:	bf00      	nop
 80040f8:	40021000 	.word	0x40021000

080040fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80040fc:	b480      	push	{r7}
 80040fe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004100:	bf00      	nop
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr

0800410a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800410a:	b480      	push	{r7}
 800410c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800410e:	e7fe      	b.n	800410e <HardFault_Handler+0x4>

08004110 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004110:	b480      	push	{r7}
 8004112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004114:	e7fe      	b.n	8004114 <MemManage_Handler+0x4>

08004116 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004116:	b480      	push	{r7}
 8004118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800411a:	e7fe      	b.n	800411a <BusFault_Handler+0x4>

0800411c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800411c:	b480      	push	{r7}
 800411e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004120:	e7fe      	b.n	8004120 <UsageFault_Handler+0x4>

08004122 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004122:	b480      	push	{r7}
 8004124:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004126:	bf00      	nop
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr

08004130 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004130:	b480      	push	{r7}
 8004132:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004134:	bf00      	nop
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr

0800413e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800413e:	b480      	push	{r7}
 8004140:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004142:	bf00      	nop
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr

0800414c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004150:	f7fc f88e 	bl	8000270 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004154:	bf00      	nop
 8004156:	bd80      	pop	{r7, pc}

08004158 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 800415c:	4802      	ldr	r0, [pc, #8]	; (8004168 <DMA1_Channel3_IRQHandler+0x10>)
 800415e:	f7fd f9cd 	bl	80014fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8004162:	bf00      	nop
 8004164:	bd80      	pop	{r7, pc}
 8004166:	bf00      	nop
 8004168:	200000c0 	.word	0x200000c0

0800416c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 8004170:	4802      	ldr	r0, [pc, #8]	; (800417c <DMA1_Channel4_IRQHandler+0x10>)
 8004172:	f7fd f9c3 	bl	80014fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8004176:	bf00      	nop
 8004178:	bd80      	pop	{r7, pc}
 800417a:	bf00      	nop
 800417c:	20000108 	.word	0x20000108

08004180 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004184:	4802      	ldr	r0, [pc, #8]	; (8004190 <TIM2_IRQHandler+0x10>)
 8004186:	f7fe fff7 	bl	8003178 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800418a:	bf00      	nop
 800418c:	bd80      	pop	{r7, pc}
 800418e:	bf00      	nop
 8004190:	20000150 	.word	0x20000150

08004194 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8004198:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800419c:	f7fd fc4e 	bl	8001a3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80041a0:	bf00      	nop
 80041a2:	bd80      	pop	{r7, pc}

080041a4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80041a4:	b480      	push	{r7}
 80041a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80041a8:	4b17      	ldr	r3, [pc, #92]	; (8004208 <SystemInit+0x64>)
 80041aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ae:	4a16      	ldr	r2, [pc, #88]	; (8004208 <SystemInit+0x64>)
 80041b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80041b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80041b8:	4b14      	ldr	r3, [pc, #80]	; (800420c <SystemInit+0x68>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a13      	ldr	r2, [pc, #76]	; (800420c <SystemInit+0x68>)
 80041be:	f043 0301 	orr.w	r3, r3, #1
 80041c2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80041c4:	4b11      	ldr	r3, [pc, #68]	; (800420c <SystemInit+0x68>)
 80041c6:	2200      	movs	r2, #0
 80041c8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80041ca:	4b10      	ldr	r3, [pc, #64]	; (800420c <SystemInit+0x68>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a0f      	ldr	r2, [pc, #60]	; (800420c <SystemInit+0x68>)
 80041d0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80041d4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80041d8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80041da:	4b0c      	ldr	r3, [pc, #48]	; (800420c <SystemInit+0x68>)
 80041dc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80041e0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80041e2:	4b0a      	ldr	r3, [pc, #40]	; (800420c <SystemInit+0x68>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a09      	ldr	r2, [pc, #36]	; (800420c <SystemInit+0x68>)
 80041e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041ec:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80041ee:	4b07      	ldr	r3, [pc, #28]	; (800420c <SystemInit+0x68>)
 80041f0:	2200      	movs	r2, #0
 80041f2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80041f4:	4b04      	ldr	r3, [pc, #16]	; (8004208 <SystemInit+0x64>)
 80041f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80041fa:	609a      	str	r2, [r3, #8]
#endif
}
 80041fc:	bf00      	nop
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr
 8004206:	bf00      	nop
 8004208:	e000ed00 	.word	0xe000ed00
 800420c:	40021000 	.word	0x40021000

08004210 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8004210:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004248 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004214:	f7ff ffc6 	bl	80041a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004218:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800421a:	e003      	b.n	8004224 <LoopCopyDataInit>

0800421c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800421c:	4b0b      	ldr	r3, [pc, #44]	; (800424c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800421e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004220:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8004222:	3104      	adds	r1, #4

08004224 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004224:	480a      	ldr	r0, [pc, #40]	; (8004250 <LoopForever+0xa>)
	ldr	r3, =_edata
 8004226:	4b0b      	ldr	r3, [pc, #44]	; (8004254 <LoopForever+0xe>)
	adds	r2, r0, r1
 8004228:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800422a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800422c:	d3f6      	bcc.n	800421c <CopyDataInit>
	ldr	r2, =_sbss
 800422e:	4a0a      	ldr	r2, [pc, #40]	; (8004258 <LoopForever+0x12>)
	b	LoopFillZerobss
 8004230:	e002      	b.n	8004238 <LoopFillZerobss>

08004232 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8004232:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004234:	f842 3b04 	str.w	r3, [r2], #4

08004238 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8004238:	4b08      	ldr	r3, [pc, #32]	; (800425c <LoopForever+0x16>)
	cmp	r2, r3
 800423a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800423c:	d3f9      	bcc.n	8004232 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800423e:	f000 f811 	bl	8004264 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004242:	f7ff fb7d 	bl	8003940 <main>

08004246 <LoopForever>:

LoopForever:
    b LoopForever
 8004246:	e7fe      	b.n	8004246 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8004248:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 800424c:	0800431c 	.word	0x0800431c
	ldr	r0, =_sdata
 8004250:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8004254:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8004258:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 800425c:	20015994 	.word	0x20015994

08004260 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004260:	e7fe      	b.n	8004260 <ADC1_2_IRQHandler>
	...

08004264 <__libc_init_array>:
 8004264:	b570      	push	{r4, r5, r6, lr}
 8004266:	4e0d      	ldr	r6, [pc, #52]	; (800429c <__libc_init_array+0x38>)
 8004268:	4c0d      	ldr	r4, [pc, #52]	; (80042a0 <__libc_init_array+0x3c>)
 800426a:	1ba4      	subs	r4, r4, r6
 800426c:	10a4      	asrs	r4, r4, #2
 800426e:	2500      	movs	r5, #0
 8004270:	42a5      	cmp	r5, r4
 8004272:	d109      	bne.n	8004288 <__libc_init_array+0x24>
 8004274:	4e0b      	ldr	r6, [pc, #44]	; (80042a4 <__libc_init_array+0x40>)
 8004276:	4c0c      	ldr	r4, [pc, #48]	; (80042a8 <__libc_init_array+0x44>)
 8004278:	f000 f820 	bl	80042bc <_init>
 800427c:	1ba4      	subs	r4, r4, r6
 800427e:	10a4      	asrs	r4, r4, #2
 8004280:	2500      	movs	r5, #0
 8004282:	42a5      	cmp	r5, r4
 8004284:	d105      	bne.n	8004292 <__libc_init_array+0x2e>
 8004286:	bd70      	pop	{r4, r5, r6, pc}
 8004288:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800428c:	4798      	blx	r3
 800428e:	3501      	adds	r5, #1
 8004290:	e7ee      	b.n	8004270 <__libc_init_array+0xc>
 8004292:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004296:	4798      	blx	r3
 8004298:	3501      	adds	r5, #1
 800429a:	e7f2      	b.n	8004282 <__libc_init_array+0x1e>
 800429c:	08004314 	.word	0x08004314
 80042a0:	08004314 	.word	0x08004314
 80042a4:	08004314 	.word	0x08004314
 80042a8:	08004318 	.word	0x08004318

080042ac <memset>:
 80042ac:	4402      	add	r2, r0
 80042ae:	4603      	mov	r3, r0
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d100      	bne.n	80042b6 <memset+0xa>
 80042b4:	4770      	bx	lr
 80042b6:	f803 1b01 	strb.w	r1, [r3], #1
 80042ba:	e7f9      	b.n	80042b0 <memset+0x4>

080042bc <_init>:
 80042bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042be:	bf00      	nop
 80042c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042c2:	bc08      	pop	{r3}
 80042c4:	469e      	mov	lr, r3
 80042c6:	4770      	bx	lr

080042c8 <_fini>:
 80042c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042ca:	bf00      	nop
 80042cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042ce:	bc08      	pop	{r3}
 80042d0:	469e      	mov	lr, r3
 80042d2:	4770      	bx	lr
