
lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004df4  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08004f80  08004f80  00014f80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005008  08005008  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08005008  08005008  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005008  08005008  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005008  08005008  00015008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800500c  0800500c  0001500c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005010  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  20000078  08005088  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000164  08005088  00020164  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aa16  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001641  00000000  00000000  0002aabe  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009c8  00000000  00000000  0002c100  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000910  00000000  00000000  0002cac8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00026690  00000000  00000000  0002d3d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000799f  00000000  00000000  00053a68  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f535e  00000000  00000000  0005b407  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00150765  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c1c  00000000  00000000  001507e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000078 	.word	0x20000078
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004f64 	.word	0x08004f64

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000007c 	.word	0x2000007c
 80001c4:	08004f64 	.word	0x08004f64

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2uiz>:
 8000aa0:	004a      	lsls	r2, r1, #1
 8000aa2:	d211      	bcs.n	8000ac8 <__aeabi_d2uiz+0x28>
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa8:	d211      	bcs.n	8000ace <__aeabi_d2uiz+0x2e>
 8000aaa:	d50d      	bpl.n	8000ac8 <__aeabi_d2uiz+0x28>
 8000aac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d40e      	bmi.n	8000ad4 <__aeabi_d2uiz+0x34>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac6:	4770      	bx	lr
 8000ac8:	f04f 0000 	mov.w	r0, #0
 8000acc:	4770      	bx	lr
 8000ace:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_d2uiz+0x3a>
 8000ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0000 	mov.w	r0, #0
 8000ade:	4770      	bx	lr

08000ae0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ae0:	b5b0      	push	{r4, r5, r7, lr}
 8000ae2:	b08c      	sub	sp, #48	; 0x30
 8000ae4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ae6:	f000 fb86 	bl	80011f6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aea:	f000 f921 	bl	8000d30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_ADC1_Init();
 8000aee:	f000 f9a7 	bl	8000e40 <MX_ADC1_Init>
  MX_ADC3_Init();
 8000af2:	f000 fa1b 	bl	8000f2c <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */
  uint16_t VREFINT_DATA = 0;
 8000af6:	2300      	movs	r3, #0
 8000af8:	85bb      	strh	r3, [r7, #44]	; 0x2c
  uint16_t TS_DATA = 0;
 8000afa:	2300      	movs	r3, #0
 8000afc:	85fb      	strh	r3, [r7, #46]	; 0x2e

  uint16_t temperature = 0;
 8000afe:	2300      	movs	r3, #0
 8000b00:	857b      	strh	r3, [r7, #42]	; 0x2a

  uint8_t RESOLUTION_V = 0;
 8000b02:	2300      	movs	r3, #0
 8000b04:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  uint8_t RESOLUTION_TS = 0;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

  double TS_CAL1_SCALED = 0;
 8000b0e:	f04f 0300 	mov.w	r3, #0
 8000b12:	f04f 0400 	mov.w	r4, #0
 8000b16:	e9c7 3408 	strd	r3, r4, [r7, #32]
  double TS_CAL2_SCALED = 0;
 8000b1a:	f04f 0300 	mov.w	r3, #0
 8000b1e:	f04f 0400 	mov.w	r4, #0
 8000b22:	e9c7 3406 	strd	r3, r4, [r7, #24]

  HAL_ADC_Start(&hadc1);
 8000b26:	4878      	ldr	r0, [pc, #480]	; (8000d08 <main+0x228>)
 8000b28:	f000 ff34 	bl	8001994 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc3);
 8000b2c:	4877      	ldr	r0, [pc, #476]	; (8000d0c <main+0x22c>)
 8000b2e:	f000 ff31 	bl	8001994 <HAL_ADC_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(100);
 8000b32:	2064      	movs	r0, #100	; 0x64
 8000b34:	f000 fbd4 	bl	80012e0 <HAL_Delay>
	  if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK && HAL_ADC_PollForConversion(&hadc3, 100) == HAL_OK) {
 8000b38:	2164      	movs	r1, #100	; 0x64
 8000b3a:	4873      	ldr	r0, [pc, #460]	; (8000d08 <main+0x228>)
 8000b3c:	f000 ffe4 	bl	8001b08 <HAL_ADC_PollForConversion>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d1f5      	bne.n	8000b32 <main+0x52>
 8000b46:	2164      	movs	r1, #100	; 0x64
 8000b48:	4870      	ldr	r0, [pc, #448]	; (8000d0c <main+0x22c>)
 8000b4a:	f000 ffdd 	bl	8001b08 <HAL_ADC_PollForConversion>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d1ee      	bne.n	8000b32 <main+0x52>

		  VREFINT_DATA = HAL_ADC_GetValue(&hadc1);
 8000b54:	486c      	ldr	r0, [pc, #432]	; (8000d08 <main+0x228>)
 8000b56:	f001 f8a7 	bl	8001ca8 <HAL_ADC_GetValue>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	85bb      	strh	r3, [r7, #44]	; 0x2c
		  TS_DATA = HAL_ADC_GetValue(&hadc3);
 8000b5e:	486b      	ldr	r0, [pc, #428]	; (8000d0c <main+0x22c>)
 8000b60:	f001 f8a2 	bl	8001ca8 <HAL_ADC_GetValue>
 8000b64:	4603      	mov	r3, r0
 8000b66:	85fb      	strh	r3, [r7, #46]	; 0x2e

		  RESOLUTION_V = hadc1.Init.Resolution;
 8000b68:	4b67      	ldr	r3, [pc, #412]	; (8000d08 <main+0x228>)
 8000b6a:	689b      	ldr	r3, [r3, #8]
 8000b6c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		  RESOLUTION_TS = hadc3.Init.Resolution;
 8000b70:	4b66      	ldr	r3, [pc, #408]	; (8000d0c <main+0x22c>)
 8000b72:	689b      	ldr	r3, [r3, #8]
 8000b74:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

		  if (RESOLUTION_V != RESOLUTION_TS) {
 8000b78:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8000b7c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000b80:	429a      	cmp	r2, r3
 8000b82:	d02c      	beq.n	8000bde <main+0xfe>
			  TS_DATA = TS_DATA * pow(2.0, ((double) (RESOLUTION_TS - RESOLUTION_V) / 4));
 8000b84:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000b86:	4618      	mov	r0, r3
 8000b88:	f7ff fc70 	bl	800046c <__aeabi_i2d>
 8000b8c:	4604      	mov	r4, r0
 8000b8e:	460d      	mov	r5, r1
 8000b90:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8000b94:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000b98:	1ad3      	subs	r3, r2, r3
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f7ff fc66 	bl	800046c <__aeabi_i2d>
 8000ba0:	f04f 0200 	mov.w	r2, #0
 8000ba4:	4b5a      	ldr	r3, [pc, #360]	; (8000d10 <main+0x230>)
 8000ba6:	f7ff fdf5 	bl	8000794 <__aeabi_ddiv>
 8000baa:	4602      	mov	r2, r0
 8000bac:	460b      	mov	r3, r1
 8000bae:	ec43 2b17 	vmov	d7, r2, r3
 8000bb2:	eeb0 1a47 	vmov.f32	s2, s14
 8000bb6:	eef0 1a67 	vmov.f32	s3, s15
 8000bba:	ed9f 0b51 	vldr	d0, [pc, #324]	; 8000d00 <main+0x220>
 8000bbe:	f003 f979 	bl	8003eb4 <pow>
 8000bc2:	ec53 2b10 	vmov	r2, r3, d0
 8000bc6:	4620      	mov	r0, r4
 8000bc8:	4629      	mov	r1, r5
 8000bca:	f7ff fcb9 	bl	8000540 <__aeabi_dmul>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	460c      	mov	r4, r1
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	4621      	mov	r1, r4
 8000bd6:	f7ff ff63 	bl	8000aa0 <__aeabi_d2uiz>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	85fb      	strh	r3, [r7, #46]	; 0x2e
		  }

		  double SCALE_1 = (double) VREFINT_DATA / (double) VREFINT;
 8000bde:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000be0:	4618      	mov	r0, r3
 8000be2:	f7ff fc33 	bl	800044c <__aeabi_ui2d>
 8000be6:	4604      	mov	r4, r0
 8000be8:	460d      	mov	r5, r1
 8000bea:	4b4a      	ldr	r3, [pc, #296]	; (8000d14 <main+0x234>)
 8000bec:	881b      	ldrh	r3, [r3, #0]
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f7ff fc2c 	bl	800044c <__aeabi_ui2d>
 8000bf4:	4602      	mov	r2, r0
 8000bf6:	460b      	mov	r3, r1
 8000bf8:	4620      	mov	r0, r4
 8000bfa:	4629      	mov	r1, r5
 8000bfc:	f7ff fdca 	bl	8000794 <__aeabi_ddiv>
 8000c00:	4603      	mov	r3, r0
 8000c02:	460c      	mov	r4, r1
 8000c04:	e9c7 3404 	strd	r3, r4, [r7, #16]
		  double SCALE_2 = (double) 3 * VREFINT_DATA / (double)  VREFINT;
 8000c08:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f7ff fc2e 	bl	800046c <__aeabi_i2d>
 8000c10:	f04f 0200 	mov.w	r2, #0
 8000c14:	4b40      	ldr	r3, [pc, #256]	; (8000d18 <main+0x238>)
 8000c16:	f7ff fc93 	bl	8000540 <__aeabi_dmul>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	460c      	mov	r4, r1
 8000c1e:	4625      	mov	r5, r4
 8000c20:	461c      	mov	r4, r3
 8000c22:	4b3c      	ldr	r3, [pc, #240]	; (8000d14 <main+0x234>)
 8000c24:	881b      	ldrh	r3, [r3, #0]
 8000c26:	4618      	mov	r0, r3
 8000c28:	f7ff fc10 	bl	800044c <__aeabi_ui2d>
 8000c2c:	4602      	mov	r2, r0
 8000c2e:	460b      	mov	r3, r1
 8000c30:	4620      	mov	r0, r4
 8000c32:	4629      	mov	r1, r5
 8000c34:	f7ff fdae 	bl	8000794 <__aeabi_ddiv>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	460c      	mov	r4, r1
 8000c3c:	e9c7 3402 	strd	r3, r4, [r7, #8]

		  TS_CAL1_SCALED = SCALE_1 * (double) TS_CAL1;
 8000c40:	4b36      	ldr	r3, [pc, #216]	; (8000d1c <main+0x23c>)
 8000c42:	881b      	ldrh	r3, [r3, #0]
 8000c44:	4618      	mov	r0, r3
 8000c46:	f7ff fc01 	bl	800044c <__aeabi_ui2d>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	460c      	mov	r4, r1
 8000c4e:	461a      	mov	r2, r3
 8000c50:	4623      	mov	r3, r4
 8000c52:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000c56:	f7ff fc73 	bl	8000540 <__aeabi_dmul>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	460c      	mov	r4, r1
 8000c5e:	e9c7 3408 	strd	r3, r4, [r7, #32]
		  TS_CAL2_SCALED = SCALE_2 * (double) TS_CAL2;
 8000c62:	4b2f      	ldr	r3, [pc, #188]	; (8000d20 <main+0x240>)
 8000c64:	881b      	ldrh	r3, [r3, #0]
 8000c66:	4618      	mov	r0, r3
 8000c68:	f7ff fbf0 	bl	800044c <__aeabi_ui2d>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	460c      	mov	r4, r1
 8000c70:	461a      	mov	r2, r3
 8000c72:	4623      	mov	r3, r4
 8000c74:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000c78:	f7ff fc62 	bl	8000540 <__aeabi_dmul>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	460c      	mov	r4, r1
 8000c80:	e9c7 3406 	strd	r3, r4, [r7, #24]

		  double factor = (double) (TS_CAL2_TEMP - TS_CAL1_TEMP) / (TS_CAL2_SCALED - TS_CAL1_SCALED);
 8000c84:	4b27      	ldr	r3, [pc, #156]	; (8000d24 <main+0x244>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	461a      	mov	r2, r3
 8000c8a:	4b27      	ldr	r3, [pc, #156]	; (8000d28 <main+0x248>)
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	1ad3      	subs	r3, r2, r3
 8000c90:	4618      	mov	r0, r3
 8000c92:	f7ff fbeb 	bl	800046c <__aeabi_i2d>
 8000c96:	4604      	mov	r4, r0
 8000c98:	460d      	mov	r5, r1
 8000c9a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000c9e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000ca2:	f7ff fa95 	bl	80001d0 <__aeabi_dsub>
 8000ca6:	4602      	mov	r2, r0
 8000ca8:	460b      	mov	r3, r1
 8000caa:	4620      	mov	r0, r4
 8000cac:	4629      	mov	r1, r5
 8000cae:	f7ff fd71 	bl	8000794 <__aeabi_ddiv>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	460c      	mov	r4, r1
 8000cb6:	e9c7 3400 	strd	r3, r4, [r7]
		  temperature = factor * (double) (TS_DATA - TS_CAL1_SCALED) + 30;
 8000cba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f7ff fbd5 	bl	800046c <__aeabi_i2d>
 8000cc2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000cc6:	f7ff fa83 	bl	80001d0 <__aeabi_dsub>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	460c      	mov	r4, r1
 8000cce:	4618      	mov	r0, r3
 8000cd0:	4621      	mov	r1, r4
 8000cd2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000cd6:	f7ff fc33 	bl	8000540 <__aeabi_dmul>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	460c      	mov	r4, r1
 8000cde:	4618      	mov	r0, r3
 8000ce0:	4621      	mov	r1, r4
 8000ce2:	f04f 0200 	mov.w	r2, #0
 8000ce6:	4b11      	ldr	r3, [pc, #68]	; (8000d2c <main+0x24c>)
 8000ce8:	f7ff fa74 	bl	80001d4 <__adddf3>
 8000cec:	4603      	mov	r3, r0
 8000cee:	460c      	mov	r4, r1
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	4621      	mov	r1, r4
 8000cf4:	f7ff fed4 	bl	8000aa0 <__aeabi_d2uiz>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	857b      	strh	r3, [r7, #42]	; 0x2a
	  HAL_Delay(100);
 8000cfc:	e719      	b.n	8000b32 <main+0x52>
 8000cfe:	bf00      	nop
 8000d00:	00000000 	.word	0x00000000
 8000d04:	40000000 	.word	0x40000000
 8000d08:	20000098 	.word	0x20000098
 8000d0c:	200000fc 	.word	0x200000fc
 8000d10:	40100000 	.word	0x40100000
 8000d14:	1fff75aa 	.word	0x1fff75aa
 8000d18:	40080000 	.word	0x40080000
 8000d1c:	1fff75a8 	.word	0x1fff75a8
 8000d20:	1fff75ca 	.word	0x1fff75ca
 8000d24:	20000001 	.word	0x20000001
 8000d28:	20000000 	.word	0x20000000
 8000d2c:	403e0000 	.word	0x403e0000

08000d30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b0b8      	sub	sp, #224	; 0xe0
 8000d34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d36:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d3a:	2244      	movs	r2, #68	; 0x44
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f003 f8b0 	bl	8003ea4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d44:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	605a      	str	r2, [r3, #4]
 8000d4e:	609a      	str	r2, [r3, #8]
 8000d50:	60da      	str	r2, [r3, #12]
 8000d52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d54:	463b      	mov	r3, r7
 8000d56:	2288      	movs	r2, #136	; 0x88
 8000d58:	2100      	movs	r1, #0
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f003 f8a2 	bl	8003ea4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000d60:	2310      	movs	r3, #16
 8000d62:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000d66:	2301      	movs	r3, #1
 8000d68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000d72:	2360      	movs	r3, #96	; 0x60
 8000d74:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d78:	2302      	movs	r3, #2
 8000d7a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000d84:	2301      	movs	r3, #1
 8000d86:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000d8a:	2328      	movs	r3, #40	; 0x28
 8000d8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000d90:	2307      	movs	r3, #7
 8000d92:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000d96:	2302      	movs	r3, #2
 8000d98:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000da2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000da6:	4618      	mov	r0, r3
 8000da8:	f001 fdf0 	bl	800298c <HAL_RCC_OscConfig>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000db2:	f000 f91f 	bl	8000ff4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000db6:	230f      	movs	r3, #15
 8000db8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dbc:	2303      	movs	r3, #3
 8000dbe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000dd4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000dd8:	2104      	movs	r1, #4
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f002 f9bc 	bl	8003158 <HAL_RCC_ClockConfig>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000de6:	f000 f905 	bl	8000ff4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000dea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000dee:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000df0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000df4:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000df6:	2301      	movs	r3, #1
 8000df8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000dfe:	2318      	movs	r3, #24
 8000e00:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000e02:	2307      	movs	r3, #7
 8000e04:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000e06:	2302      	movs	r3, #2
 8000e08:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000e0e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e12:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e14:	463b      	mov	r3, r7
 8000e16:	4618      	mov	r0, r3
 8000e18:	f002 fb6a 	bl	80034f0 <HAL_RCCEx_PeriphCLKConfig>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000e22:	f000 f8e7 	bl	8000ff4 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000e26:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000e2a:	f001 fd59 	bl	80028e0 <HAL_PWREx_ControlVoltageScaling>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <SystemClock_Config+0x108>
  {
    Error_Handler();
 8000e34:	f000 f8de 	bl	8000ff4 <Error_Handler>
  }
}
 8000e38:	bf00      	nop
 8000e3a:	37e0      	adds	r7, #224	; 0xe0
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}

08000e40 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b08a      	sub	sp, #40	; 0x28
 8000e44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000e46:	f107 031c 	add.w	r3, r7, #28
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	601a      	str	r2, [r3, #0]
 8000e4e:	605a      	str	r2, [r3, #4]
 8000e50:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e52:	1d3b      	adds	r3, r7, #4
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
 8000e5a:	609a      	str	r2, [r3, #8]
 8000e5c:	60da      	str	r2, [r3, #12]
 8000e5e:	611a      	str	r2, [r3, #16]
 8000e60:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e62:	4b2f      	ldr	r3, [pc, #188]	; (8000f20 <MX_ADC1_Init+0xe0>)
 8000e64:	4a2f      	ldr	r2, [pc, #188]	; (8000f24 <MX_ADC1_Init+0xe4>)
 8000e66:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000e68:	4b2d      	ldr	r3, [pc, #180]	; (8000f20 <MX_ADC1_Init+0xe0>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8000e6e:	4b2c      	ldr	r3, [pc, #176]	; (8000f20 <MX_ADC1_Init+0xe0>)
 8000e70:	2210      	movs	r2, #16
 8000e72:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e74:	4b2a      	ldr	r3, [pc, #168]	; (8000f20 <MX_ADC1_Init+0xe0>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e7a:	4b29      	ldr	r3, [pc, #164]	; (8000f20 <MX_ADC1_Init+0xe0>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e80:	4b27      	ldr	r3, [pc, #156]	; (8000f20 <MX_ADC1_Init+0xe0>)
 8000e82:	2204      	movs	r2, #4
 8000e84:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e86:	4b26      	ldr	r3, [pc, #152]	; (8000f20 <MX_ADC1_Init+0xe0>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e8c:	4b24      	ldr	r3, [pc, #144]	; (8000f20 <MX_ADC1_Init+0xe0>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000e92:	4b23      	ldr	r3, [pc, #140]	; (8000f20 <MX_ADC1_Init+0xe0>)
 8000e94:	2201      	movs	r2, #1
 8000e96:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e98:	4b21      	ldr	r3, [pc, #132]	; (8000f20 <MX_ADC1_Init+0xe0>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ea0:	4b1f      	ldr	r3, [pc, #124]	; (8000f20 <MX_ADC1_Init+0xe0>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ea6:	4b1e      	ldr	r3, [pc, #120]	; (8000f20 <MX_ADC1_Init+0xe0>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000eac:	4b1c      	ldr	r3, [pc, #112]	; (8000f20 <MX_ADC1_Init+0xe0>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000eb4:	4b1a      	ldr	r3, [pc, #104]	; (8000f20 <MX_ADC1_Init+0xe0>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000eba:	4b19      	ldr	r3, [pc, #100]	; (8000f20 <MX_ADC1_Init+0xe0>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ec2:	4817      	ldr	r0, [pc, #92]	; (8000f20 <MX_ADC1_Init+0xe0>)
 8000ec4:	f000 fc12 	bl	80016ec <HAL_ADC_Init>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000ece:	f000 f891 	bl	8000ff4 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000ed6:	f107 031c 	add.w	r3, r7, #28
 8000eda:	4619      	mov	r1, r3
 8000edc:	4810      	ldr	r0, [pc, #64]	; (8000f20 <MX_ADC1_Init+0xe0>)
 8000ede:	f001 fb5f 	bl	80025a0 <HAL_ADCEx_MultiModeConfigChannel>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000ee8:	f000 f884 	bl	8000ff4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000eec:	4b0e      	ldr	r3, [pc, #56]	; (8000f28 <MX_ADC1_Init+0xe8>)
 8000eee:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ef0:	2306      	movs	r3, #6
 8000ef2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8000ef4:	2304      	movs	r3, #4
 8000ef6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ef8:	237f      	movs	r3, #127	; 0x7f
 8000efa:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000efc:	2304      	movs	r3, #4
 8000efe:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000f00:	2300      	movs	r3, #0
 8000f02:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f04:	1d3b      	adds	r3, r7, #4
 8000f06:	4619      	mov	r1, r3
 8000f08:	4805      	ldr	r0, [pc, #20]	; (8000f20 <MX_ADC1_Init+0xe0>)
 8000f0a:	f000 fedb 	bl	8001cc4 <HAL_ADC_ConfigChannel>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000f14:	f000 f86e 	bl	8000ff4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f18:	bf00      	nop
 8000f1a:	3728      	adds	r7, #40	; 0x28
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	20000098 	.word	0x20000098
 8000f24:	50040000 	.word	0x50040000
 8000f28:	80000001 	.word	0x80000001

08000f2c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b086      	sub	sp, #24
 8000f30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f32:	463b      	mov	r3, r7
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]
 8000f38:	605a      	str	r2, [r3, #4]
 8000f3a:	609a      	str	r2, [r3, #8]
 8000f3c:	60da      	str	r2, [r3, #12]
 8000f3e:	611a      	str	r2, [r3, #16]
 8000f40:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 8000f42:	4b29      	ldr	r3, [pc, #164]	; (8000fe8 <MX_ADC3_Init+0xbc>)
 8000f44:	4a29      	ldr	r2, [pc, #164]	; (8000fec <MX_ADC3_Init+0xc0>)
 8000f46:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000f48:	4b27      	ldr	r3, [pc, #156]	; (8000fe8 <MX_ADC3_Init+0xbc>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000f4e:	4b26      	ldr	r3, [pc, #152]	; (8000fe8 <MX_ADC3_Init+0xbc>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f54:	4b24      	ldr	r3, [pc, #144]	; (8000fe8 <MX_ADC3_Init+0xbc>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f5a:	4b23      	ldr	r3, [pc, #140]	; (8000fe8 <MX_ADC3_Init+0xbc>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f60:	4b21      	ldr	r3, [pc, #132]	; (8000fe8 <MX_ADC3_Init+0xbc>)
 8000f62:	2204      	movs	r2, #4
 8000f64:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000f66:	4b20      	ldr	r3, [pc, #128]	; (8000fe8 <MX_ADC3_Init+0xbc>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000f6c:	4b1e      	ldr	r3, [pc, #120]	; (8000fe8 <MX_ADC3_Init+0xbc>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8000f72:	4b1d      	ldr	r3, [pc, #116]	; (8000fe8 <MX_ADC3_Init+0xbc>)
 8000f74:	2201      	movs	r2, #1
 8000f76:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000f78:	4b1b      	ldr	r3, [pc, #108]	; (8000fe8 <MX_ADC3_Init+0xbc>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f80:	4b19      	ldr	r3, [pc, #100]	; (8000fe8 <MX_ADC3_Init+0xbc>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f86:	4b18      	ldr	r3, [pc, #96]	; (8000fe8 <MX_ADC3_Init+0xbc>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000f8c:	4b16      	ldr	r3, [pc, #88]	; (8000fe8 <MX_ADC3_Init+0xbc>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f94:	4b14      	ldr	r3, [pc, #80]	; (8000fe8 <MX_ADC3_Init+0xbc>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000f9a:	4b13      	ldr	r3, [pc, #76]	; (8000fe8 <MX_ADC3_Init+0xbc>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000fa2:	4811      	ldr	r0, [pc, #68]	; (8000fe8 <MX_ADC3_Init+0xbc>)
 8000fa4:	f000 fba2 	bl	80016ec <HAL_ADC_Init>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 8000fae:	f000 f821 	bl	8000ff4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000fb2:	4b0f      	ldr	r3, [pc, #60]	; (8000ff0 <MX_ADC3_Init+0xc4>)
 8000fb4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fb6:	2306      	movs	r3, #6
 8000fb8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 8000fba:	2303      	movs	r3, #3
 8000fbc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000fbe:	237f      	movs	r3, #127	; 0x7f
 8000fc0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000fc2:	2304      	movs	r3, #4
 8000fc4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000fca:	463b      	mov	r3, r7
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4806      	ldr	r0, [pc, #24]	; (8000fe8 <MX_ADC3_Init+0xbc>)
 8000fd0:	f000 fe78 	bl	8001cc4 <HAL_ADC_ConfigChannel>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 8000fda:	f000 f80b 	bl	8000ff4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000fde:	bf00      	nop
 8000fe0:	3718      	adds	r7, #24
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	200000fc 	.word	0x200000fc
 8000fec:	50040200 	.word	0x50040200
 8000ff0:	c7520000 	.word	0xc7520000

08000ff4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000ff8:	bf00      	nop
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
	...

08001004 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800100a:	4b0f      	ldr	r3, [pc, #60]	; (8001048 <HAL_MspInit+0x44>)
 800100c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800100e:	4a0e      	ldr	r2, [pc, #56]	; (8001048 <HAL_MspInit+0x44>)
 8001010:	f043 0301 	orr.w	r3, r3, #1
 8001014:	6613      	str	r3, [r2, #96]	; 0x60
 8001016:	4b0c      	ldr	r3, [pc, #48]	; (8001048 <HAL_MspInit+0x44>)
 8001018:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800101a:	f003 0301 	and.w	r3, r3, #1
 800101e:	607b      	str	r3, [r7, #4]
 8001020:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001022:	4b09      	ldr	r3, [pc, #36]	; (8001048 <HAL_MspInit+0x44>)
 8001024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001026:	4a08      	ldr	r2, [pc, #32]	; (8001048 <HAL_MspInit+0x44>)
 8001028:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800102c:	6593      	str	r3, [r2, #88]	; 0x58
 800102e:	4b06      	ldr	r3, [pc, #24]	; (8001048 <HAL_MspInit+0x44>)
 8001030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001032:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001036:	603b      	str	r3, [r7, #0]
 8001038:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800103a:	bf00      	nop
 800103c:	370c      	adds	r7, #12
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	40021000 	.word	0x40021000

0800104c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800104c:	b480      	push	{r7}
 800104e:	b085      	sub	sp, #20
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a1c      	ldr	r2, [pc, #112]	; (80010cc <HAL_ADC_MspInit+0x80>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d115      	bne.n	800108a <HAL_ADC_MspInit+0x3e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 800105e:	4b1c      	ldr	r3, [pc, #112]	; (80010d0 <HAL_ADC_MspInit+0x84>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	3301      	adds	r3, #1
 8001064:	4a1a      	ldr	r2, [pc, #104]	; (80010d0 <HAL_ADC_MspInit+0x84>)
 8001066:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001068:	4b19      	ldr	r3, [pc, #100]	; (80010d0 <HAL_ADC_MspInit+0x84>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	2b01      	cmp	r3, #1
 800106e:	d126      	bne.n	80010be <HAL_ADC_MspInit+0x72>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001070:	4b18      	ldr	r3, [pc, #96]	; (80010d4 <HAL_ADC_MspInit+0x88>)
 8001072:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001074:	4a17      	ldr	r2, [pc, #92]	; (80010d4 <HAL_ADC_MspInit+0x88>)
 8001076:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800107a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800107c:	4b15      	ldr	r3, [pc, #84]	; (80010d4 <HAL_ADC_MspInit+0x88>)
 800107e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001080:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001084:	60fb      	str	r3, [r7, #12]
 8001086:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001088:	e019      	b.n	80010be <HAL_ADC_MspInit+0x72>
  else if(hadc->Instance==ADC3)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4a12      	ldr	r2, [pc, #72]	; (80010d8 <HAL_ADC_MspInit+0x8c>)
 8001090:	4293      	cmp	r3, r2
 8001092:	d114      	bne.n	80010be <HAL_ADC_MspInit+0x72>
    HAL_RCC_ADC_CLK_ENABLED++;
 8001094:	4b0e      	ldr	r3, [pc, #56]	; (80010d0 <HAL_ADC_MspInit+0x84>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	3301      	adds	r3, #1
 800109a:	4a0d      	ldr	r2, [pc, #52]	; (80010d0 <HAL_ADC_MspInit+0x84>)
 800109c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 800109e:	4b0c      	ldr	r3, [pc, #48]	; (80010d0 <HAL_ADC_MspInit+0x84>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d10b      	bne.n	80010be <HAL_ADC_MspInit+0x72>
      __HAL_RCC_ADC_CLK_ENABLE();
 80010a6:	4b0b      	ldr	r3, [pc, #44]	; (80010d4 <HAL_ADC_MspInit+0x88>)
 80010a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010aa:	4a0a      	ldr	r2, [pc, #40]	; (80010d4 <HAL_ADC_MspInit+0x88>)
 80010ac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80010b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010b2:	4b08      	ldr	r3, [pc, #32]	; (80010d4 <HAL_ADC_MspInit+0x88>)
 80010b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010ba:	60bb      	str	r3, [r7, #8]
 80010bc:	68bb      	ldr	r3, [r7, #8]
}
 80010be:	bf00      	nop
 80010c0:	3714      	adds	r7, #20
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	50040000 	.word	0x50040000
 80010d0:	20000094 	.word	0x20000094
 80010d4:	40021000 	.word	0x40021000
 80010d8:	50040200 	.word	0x50040200

080010dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80010e0:	bf00      	nop
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr

080010ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010ea:	b480      	push	{r7}
 80010ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010ee:	e7fe      	b.n	80010ee <HardFault_Handler+0x4>

080010f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010f4:	e7fe      	b.n	80010f4 <MemManage_Handler+0x4>

080010f6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010f6:	b480      	push	{r7}
 80010f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010fa:	e7fe      	b.n	80010fa <BusFault_Handler+0x4>

080010fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001100:	e7fe      	b.n	8001100 <UsageFault_Handler+0x4>

08001102 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001102:	b480      	push	{r7}
 8001104:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001106:	bf00      	nop
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr

08001110 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001114:	bf00      	nop
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr

0800111e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800111e:	b480      	push	{r7}
 8001120:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001122:	bf00      	nop
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001130:	f000 f8b6 	bl	80012a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001134:	bf00      	nop
 8001136:	bd80      	pop	{r7, pc}

08001138 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800113c:	4b17      	ldr	r3, [pc, #92]	; (800119c <SystemInit+0x64>)
 800113e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001142:	4a16      	ldr	r2, [pc, #88]	; (800119c <SystemInit+0x64>)
 8001144:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001148:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800114c:	4b14      	ldr	r3, [pc, #80]	; (80011a0 <SystemInit+0x68>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a13      	ldr	r2, [pc, #76]	; (80011a0 <SystemInit+0x68>)
 8001152:	f043 0301 	orr.w	r3, r3, #1
 8001156:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001158:	4b11      	ldr	r3, [pc, #68]	; (80011a0 <SystemInit+0x68>)
 800115a:	2200      	movs	r2, #0
 800115c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800115e:	4b10      	ldr	r3, [pc, #64]	; (80011a0 <SystemInit+0x68>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a0f      	ldr	r2, [pc, #60]	; (80011a0 <SystemInit+0x68>)
 8001164:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001168:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800116c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800116e:	4b0c      	ldr	r3, [pc, #48]	; (80011a0 <SystemInit+0x68>)
 8001170:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001174:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001176:	4b0a      	ldr	r3, [pc, #40]	; (80011a0 <SystemInit+0x68>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a09      	ldr	r2, [pc, #36]	; (80011a0 <SystemInit+0x68>)
 800117c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001180:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001182:	4b07      	ldr	r3, [pc, #28]	; (80011a0 <SystemInit+0x68>)
 8001184:	2200      	movs	r2, #0
 8001186:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001188:	4b04      	ldr	r3, [pc, #16]	; (800119c <SystemInit+0x64>)
 800118a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800118e:	609a      	str	r2, [r3, #8]
#endif
}
 8001190:	bf00      	nop
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	e000ed00 	.word	0xe000ed00
 80011a0:	40021000 	.word	0x40021000

080011a4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80011a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011dc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011a8:	f7ff ffc6 	bl	8001138 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80011ac:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80011ae:	e003      	b.n	80011b8 <LoopCopyDataInit>

080011b0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80011b0:	4b0b      	ldr	r3, [pc, #44]	; (80011e0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80011b2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80011b4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80011b6:	3104      	adds	r1, #4

080011b8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80011b8:	480a      	ldr	r0, [pc, #40]	; (80011e4 <LoopForever+0xa>)
	ldr	r3, =_edata
 80011ba:	4b0b      	ldr	r3, [pc, #44]	; (80011e8 <LoopForever+0xe>)
	adds	r2, r0, r1
 80011bc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80011be:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80011c0:	d3f6      	bcc.n	80011b0 <CopyDataInit>
	ldr	r2, =_sbss
 80011c2:	4a0a      	ldr	r2, [pc, #40]	; (80011ec <LoopForever+0x12>)
	b	LoopFillZerobss
 80011c4:	e002      	b.n	80011cc <LoopFillZerobss>

080011c6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80011c6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80011c8:	f842 3b04 	str.w	r3, [r2], #4

080011cc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80011cc:	4b08      	ldr	r3, [pc, #32]	; (80011f0 <LoopForever+0x16>)
	cmp	r2, r3
 80011ce:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80011d0:	d3f9      	bcc.n	80011c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011d2:	f002 fe43 	bl	8003e5c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011d6:	f7ff fc83 	bl	8000ae0 <main>

080011da <LoopForever>:

LoopForever:
    b LoopForever
 80011da:	e7fe      	b.n	80011da <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80011dc:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80011e0:	08005010 	.word	0x08005010
	ldr	r0, =_sdata
 80011e4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80011e8:	20000078 	.word	0x20000078
	ldr	r2, =_sbss
 80011ec:	20000078 	.word	0x20000078
	ldr	r3, = _ebss
 80011f0:	20000164 	.word	0x20000164

080011f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011f4:	e7fe      	b.n	80011f4 <ADC1_2_IRQHandler>

080011f6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011f6:	b580      	push	{r7, lr}
 80011f8:	b082      	sub	sp, #8
 80011fa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011fc:	2300      	movs	r3, #0
 80011fe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001200:	2003      	movs	r0, #3
 8001202:	f001 fb2b 	bl	800285c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001206:	2000      	movs	r0, #0
 8001208:	f000 f80e 	bl	8001228 <HAL_InitTick>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d002      	beq.n	8001218 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	71fb      	strb	r3, [r7, #7]
 8001216:	e001      	b.n	800121c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001218:	f7ff fef4 	bl	8001004 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800121c:	79fb      	ldrb	r3, [r7, #7]
}
 800121e:	4618      	mov	r0, r3
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
	...

08001228 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001230:	2300      	movs	r3, #0
 8001232:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001234:	4b17      	ldr	r3, [pc, #92]	; (8001294 <HAL_InitTick+0x6c>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d023      	beq.n	8001284 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800123c:	4b16      	ldr	r3, [pc, #88]	; (8001298 <HAL_InitTick+0x70>)
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	4b14      	ldr	r3, [pc, #80]	; (8001294 <HAL_InitTick+0x6c>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	4619      	mov	r1, r3
 8001246:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800124a:	fbb3 f3f1 	udiv	r3, r3, r1
 800124e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001252:	4618      	mov	r0, r3
 8001254:	f001 fb29 	bl	80028aa <HAL_SYSTICK_Config>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d10f      	bne.n	800127e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2b0f      	cmp	r3, #15
 8001262:	d809      	bhi.n	8001278 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001264:	2200      	movs	r2, #0
 8001266:	6879      	ldr	r1, [r7, #4]
 8001268:	f04f 30ff 	mov.w	r0, #4294967295
 800126c:	f001 fb01 	bl	8002872 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001270:	4a0a      	ldr	r2, [pc, #40]	; (800129c <HAL_InitTick+0x74>)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6013      	str	r3, [r2, #0]
 8001276:	e007      	b.n	8001288 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001278:	2301      	movs	r3, #1
 800127a:	73fb      	strb	r3, [r7, #15]
 800127c:	e004      	b.n	8001288 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	73fb      	strb	r3, [r7, #15]
 8001282:	e001      	b.n	8001288 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001284:	2301      	movs	r3, #1
 8001286:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001288:	7bfb      	ldrb	r3, [r7, #15]
}
 800128a:	4618      	mov	r0, r3
 800128c:	3710      	adds	r7, #16
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	2000000c 	.word	0x2000000c
 8001298:	20000004 	.word	0x20000004
 800129c:	20000008 	.word	0x20000008

080012a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012a4:	4b06      	ldr	r3, [pc, #24]	; (80012c0 <HAL_IncTick+0x20>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	461a      	mov	r2, r3
 80012aa:	4b06      	ldr	r3, [pc, #24]	; (80012c4 <HAL_IncTick+0x24>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4413      	add	r3, r2
 80012b0:	4a04      	ldr	r2, [pc, #16]	; (80012c4 <HAL_IncTick+0x24>)
 80012b2:	6013      	str	r3, [r2, #0]
}
 80012b4:	bf00      	nop
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	2000000c 	.word	0x2000000c
 80012c4:	20000160 	.word	0x20000160

080012c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  return uwTick;
 80012cc:	4b03      	ldr	r3, [pc, #12]	; (80012dc <HAL_GetTick+0x14>)
 80012ce:	681b      	ldr	r3, [r3, #0]
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	20000160 	.word	0x20000160

080012e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012e8:	f7ff ffee 	bl	80012c8 <HAL_GetTick>
 80012ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012f8:	d005      	beq.n	8001306 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80012fa:	4b09      	ldr	r3, [pc, #36]	; (8001320 <HAL_Delay+0x40>)
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	461a      	mov	r2, r3
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	4413      	add	r3, r2
 8001304:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001306:	bf00      	nop
 8001308:	f7ff ffde 	bl	80012c8 <HAL_GetTick>
 800130c:	4602      	mov	r2, r0
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	68fa      	ldr	r2, [r7, #12]
 8001314:	429a      	cmp	r2, r3
 8001316:	d8f7      	bhi.n	8001308 <HAL_Delay+0x28>
  {
  }
}
 8001318:	bf00      	nop
 800131a:	3710      	adds	r7, #16
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	2000000c 	.word	0x2000000c

08001324 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	431a      	orrs	r2, r3
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	609a      	str	r2, [r3, #8]
}
 800133e:	bf00      	nop
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr

0800134a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800134a:	b480      	push	{r7}
 800134c:	b083      	sub	sp, #12
 800134e:	af00      	add	r7, sp, #0
 8001350:	6078      	str	r0, [r7, #4]
 8001352:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	431a      	orrs	r2, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	609a      	str	r2, [r3, #8]
}
 8001364:	bf00      	nop
 8001366:	370c      	adds	r7, #12
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr

08001370 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001380:	4618      	mov	r0, r3
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr

0800138c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800138c:	b480      	push	{r7}
 800138e:	b087      	sub	sp, #28
 8001390:	af00      	add	r7, sp, #0
 8001392:	60f8      	str	r0, [r7, #12]
 8001394:	60b9      	str	r1, [r7, #8]
 8001396:	607a      	str	r2, [r7, #4]
 8001398:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	3360      	adds	r3, #96	; 0x60
 800139e:	461a      	mov	r2, r3
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	4413      	add	r3, r2
 80013a6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	4b08      	ldr	r3, [pc, #32]	; (80013d0 <LL_ADC_SetOffset+0x44>)
 80013ae:	4013      	ands	r3, r2
 80013b0:	687a      	ldr	r2, [r7, #4]
 80013b2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80013b6:	683a      	ldr	r2, [r7, #0]
 80013b8:	430a      	orrs	r2, r1
 80013ba:	4313      	orrs	r3, r2
 80013bc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80013c4:	bf00      	nop
 80013c6:	371c      	adds	r7, #28
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr
 80013d0:	03fff000 	.word	0x03fff000

080013d4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b085      	sub	sp, #20
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	3360      	adds	r3, #96	; 0x60
 80013e2:	461a      	mov	r2, r3
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	4413      	add	r3, r2
 80013ea:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3714      	adds	r7, #20
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001400:	b480      	push	{r7}
 8001402:	b087      	sub	sp, #28
 8001404:	af00      	add	r7, sp, #0
 8001406:	60f8      	str	r0, [r7, #12]
 8001408:	60b9      	str	r1, [r7, #8]
 800140a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	3360      	adds	r3, #96	; 0x60
 8001410:	461a      	mov	r2, r3
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	4413      	add	r3, r2
 8001418:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	431a      	orrs	r2, r3
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800142a:	bf00      	nop
 800142c:	371c      	adds	r7, #28
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr

08001436 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001436:	b480      	push	{r7}
 8001438:	b083      	sub	sp, #12
 800143a:	af00      	add	r7, sp, #0
 800143c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	68db      	ldr	r3, [r3, #12]
 8001442:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001446:	2b00      	cmp	r3, #0
 8001448:	d101      	bne.n	800144e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800144a:	2301      	movs	r3, #1
 800144c:	e000      	b.n	8001450 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800144e:	2300      	movs	r3, #0
}
 8001450:	4618      	mov	r0, r3
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr

0800145c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800145c:	b480      	push	{r7}
 800145e:	b087      	sub	sp, #28
 8001460:	af00      	add	r7, sp, #0
 8001462:	60f8      	str	r0, [r7, #12]
 8001464:	60b9      	str	r1, [r7, #8]
 8001466:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	3330      	adds	r3, #48	; 0x30
 800146c:	461a      	mov	r2, r3
 800146e:	68bb      	ldr	r3, [r7, #8]
 8001470:	0a1b      	lsrs	r3, r3, #8
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	f003 030c 	and.w	r3, r3, #12
 8001478:	4413      	add	r3, r2
 800147a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	f003 031f 	and.w	r3, r3, #31
 8001486:	211f      	movs	r1, #31
 8001488:	fa01 f303 	lsl.w	r3, r1, r3
 800148c:	43db      	mvns	r3, r3
 800148e:	401a      	ands	r2, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	0e9b      	lsrs	r3, r3, #26
 8001494:	f003 011f 	and.w	r1, r3, #31
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	f003 031f 	and.w	r3, r3, #31
 800149e:	fa01 f303 	lsl.w	r3, r1, r3
 80014a2:	431a      	orrs	r2, r3
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80014a8:	bf00      	nop
 80014aa:	371c      	adds	r7, #28
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr

080014b4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b087      	sub	sp, #28
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	60f8      	str	r0, [r7, #12]
 80014bc:	60b9      	str	r1, [r7, #8]
 80014be:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	3314      	adds	r3, #20
 80014c4:	461a      	mov	r2, r3
 80014c6:	68bb      	ldr	r3, [r7, #8]
 80014c8:	0e5b      	lsrs	r3, r3, #25
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	f003 0304 	and.w	r3, r3, #4
 80014d0:	4413      	add	r3, r2
 80014d2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	0d1b      	lsrs	r3, r3, #20
 80014dc:	f003 031f 	and.w	r3, r3, #31
 80014e0:	2107      	movs	r1, #7
 80014e2:	fa01 f303 	lsl.w	r3, r1, r3
 80014e6:	43db      	mvns	r3, r3
 80014e8:	401a      	ands	r2, r3
 80014ea:	68bb      	ldr	r3, [r7, #8]
 80014ec:	0d1b      	lsrs	r3, r3, #20
 80014ee:	f003 031f 	and.w	r3, r3, #31
 80014f2:	6879      	ldr	r1, [r7, #4]
 80014f4:	fa01 f303 	lsl.w	r3, r1, r3
 80014f8:	431a      	orrs	r2, r3
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80014fe:	bf00      	nop
 8001500:	371c      	adds	r7, #28
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
	...

0800150c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800150c:	b480      	push	{r7}
 800150e:	b085      	sub	sp, #20
 8001510:	af00      	add	r7, sp, #0
 8001512:	60f8      	str	r0, [r7, #12]
 8001514:	60b9      	str	r1, [r7, #8]
 8001516:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001524:	43db      	mvns	r3, r3
 8001526:	401a      	ands	r2, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	f003 0318 	and.w	r3, r3, #24
 800152e:	4908      	ldr	r1, [pc, #32]	; (8001550 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001530:	40d9      	lsrs	r1, r3
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	400b      	ands	r3, r1
 8001536:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800153a:	431a      	orrs	r2, r3
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001542:	bf00      	nop
 8001544:	3714      	adds	r7, #20
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	0007ffff 	.word	0x0007ffff

08001554 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	f003 031f 	and.w	r3, r3, #31
}
 8001564:	4618      	mov	r0, r3
 8001566:	370c      	adds	r7, #12
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr

08001570 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001580:	4618      	mov	r0, r3
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800159c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80015a0:	687a      	ldr	r2, [r7, #4]
 80015a2:	6093      	str	r3, [r2, #8]
}
 80015a4:	bf00      	nop
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80015c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80015c4:	d101      	bne.n	80015ca <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80015c6:	2301      	movs	r3, #1
 80015c8:	e000      	b.n	80015cc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80015ca:	2300      	movs	r3, #0
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80015e8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80015ec:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80015f4:	bf00      	nop
 80015f6:	370c      	adds	r7, #12
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr

08001600 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001610:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001614:	d101      	bne.n	800161a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001616:	2301      	movs	r3, #1
 8001618:	e000      	b.n	800161c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800161a:	2300      	movs	r3, #0
}
 800161c:	4618      	mov	r0, r3
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr

08001628 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001638:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800163c:	f043 0201 	orr.w	r2, r3, #1
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001644:	bf00      	nop
 8001646:	370c      	adds	r7, #12
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr

08001650 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	f003 0301 	and.w	r3, r3, #1
 8001660:	2b01      	cmp	r3, #1
 8001662:	d101      	bne.n	8001668 <LL_ADC_IsEnabled+0x18>
 8001664:	2301      	movs	r3, #1
 8001666:	e000      	b.n	800166a <LL_ADC_IsEnabled+0x1a>
 8001668:	2300      	movs	r3, #0
}
 800166a:	4618      	mov	r0, r3
 800166c:	370c      	adds	r7, #12
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr

08001676 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001676:	b480      	push	{r7}
 8001678:	b083      	sub	sp, #12
 800167a:	af00      	add	r7, sp, #0
 800167c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001686:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800168a:	f043 0204 	orr.w	r2, r3, #4
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001692:	bf00      	nop
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr

0800169e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800169e:	b480      	push	{r7}
 80016a0:	b083      	sub	sp, #12
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	f003 0304 	and.w	r3, r3, #4
 80016ae:	2b04      	cmp	r3, #4
 80016b0:	d101      	bne.n	80016b6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80016b2:	2301      	movs	r3, #1
 80016b4:	e000      	b.n	80016b8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80016b6:	2300      	movs	r3, #0
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr

080016c4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	f003 0308 	and.w	r3, r3, #8
 80016d4:	2b08      	cmp	r3, #8
 80016d6:	d101      	bne.n	80016dc <LL_ADC_INJ_IsConversionOngoing+0x18>
 80016d8:	2301      	movs	r3, #1
 80016da:	e000      	b.n	80016de <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80016dc:	2300      	movs	r3, #0
}
 80016de:	4618      	mov	r0, r3
 80016e0:	370c      	adds	r7, #12
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
	...

080016ec <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80016ec:	b590      	push	{r4, r7, lr}
 80016ee:	b089      	sub	sp, #36	; 0x24
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016f4:	2300      	movs	r3, #0
 80016f6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80016f8:	2300      	movs	r3, #0
 80016fa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d101      	bne.n	8001706 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e134      	b.n	8001970 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	691b      	ldr	r3, [r3, #16]
 800170a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001710:	2b00      	cmp	r3, #0
 8001712:	d109      	bne.n	8001728 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f7ff fc99 	bl	800104c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2200      	movs	r2, #0
 800171e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2200      	movs	r2, #0
 8001724:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4618      	mov	r0, r3
 800172e:	f7ff ff3f 	bl	80015b0 <LL_ADC_IsDeepPowerDownEnabled>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d004      	beq.n	8001742 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4618      	mov	r0, r3
 800173e:	f7ff ff25 	bl	800158c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4618      	mov	r0, r3
 8001748:	f7ff ff5a 	bl	8001600 <LL_ADC_IsInternalRegulatorEnabled>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d113      	bne.n	800177a <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4618      	mov	r0, r3
 8001758:	f7ff ff3e 	bl	80015d8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800175c:	4b86      	ldr	r3, [pc, #536]	; (8001978 <HAL_ADC_Init+0x28c>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	099b      	lsrs	r3, r3, #6
 8001762:	4a86      	ldr	r2, [pc, #536]	; (800197c <HAL_ADC_Init+0x290>)
 8001764:	fba2 2303 	umull	r2, r3, r2, r3
 8001768:	099b      	lsrs	r3, r3, #6
 800176a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800176c:	e002      	b.n	8001774 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	3b01      	subs	r3, #1
 8001772:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d1f9      	bne.n	800176e <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4618      	mov	r0, r3
 8001780:	f7ff ff3e 	bl	8001600 <LL_ADC_IsInternalRegulatorEnabled>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d10d      	bne.n	80017a6 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800178e:	f043 0210 	orr.w	r2, r3, #16
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800179a:	f043 0201 	orr.w	r2, r3, #1
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7ff ff77 	bl	800169e <LL_ADC_REG_IsConversionOngoing>
 80017b0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017b6:	f003 0310 	and.w	r3, r3, #16
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	f040 80cf 	bne.w	800195e <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	f040 80cb 	bne.w	800195e <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017cc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80017d0:	f043 0202 	orr.w	r2, r3, #2
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4618      	mov	r0, r3
 80017de:	f7ff ff37 	bl	8001650 <LL_ADC_IsEnabled>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d115      	bne.n	8001814 <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80017e8:	4865      	ldr	r0, [pc, #404]	; (8001980 <HAL_ADC_Init+0x294>)
 80017ea:	f7ff ff31 	bl	8001650 <LL_ADC_IsEnabled>
 80017ee:	4604      	mov	r4, r0
 80017f0:	4864      	ldr	r0, [pc, #400]	; (8001984 <HAL_ADC_Init+0x298>)
 80017f2:	f7ff ff2d 	bl	8001650 <LL_ADC_IsEnabled>
 80017f6:	4603      	mov	r3, r0
 80017f8:	431c      	orrs	r4, r3
 80017fa:	4863      	ldr	r0, [pc, #396]	; (8001988 <HAL_ADC_Init+0x29c>)
 80017fc:	f7ff ff28 	bl	8001650 <LL_ADC_IsEnabled>
 8001800:	4603      	mov	r3, r0
 8001802:	4323      	orrs	r3, r4
 8001804:	2b00      	cmp	r3, #0
 8001806:	d105      	bne.n	8001814 <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	4619      	mov	r1, r3
 800180e:	485f      	ldr	r0, [pc, #380]	; (800198c <HAL_ADC_Init+0x2a0>)
 8001810:	f7ff fd88 	bl	8001324 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	7e5b      	ldrb	r3, [r3, #25]
 8001818:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800181e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001824:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800182a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001832:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001834:	4313      	orrs	r3, r2
 8001836:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800183e:	2b01      	cmp	r3, #1
 8001840:	d106      	bne.n	8001850 <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001846:	3b01      	subs	r3, #1
 8001848:	045b      	lsls	r3, r3, #17
 800184a:	69ba      	ldr	r2, [r7, #24]
 800184c:	4313      	orrs	r3, r2
 800184e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001854:	2b00      	cmp	r3, #0
 8001856:	d009      	beq.n	800186c <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800185c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001864:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001866:	69ba      	ldr	r2, [r7, #24]
 8001868:	4313      	orrs	r3, r2
 800186a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	68da      	ldr	r2, [r3, #12]
 8001872:	4b47      	ldr	r3, [pc, #284]	; (8001990 <HAL_ADC_Init+0x2a4>)
 8001874:	4013      	ands	r3, r2
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	6812      	ldr	r2, [r2, #0]
 800187a:	69b9      	ldr	r1, [r7, #24]
 800187c:	430b      	orrs	r3, r1
 800187e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff ff0a 	bl	800169e <LL_ADC_REG_IsConversionOngoing>
 800188a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4618      	mov	r0, r3
 8001892:	f7ff ff17 	bl	80016c4 <LL_ADC_INJ_IsConversionOngoing>
 8001896:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d13d      	bne.n	800191a <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d13a      	bne.n	800191a <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80018a8:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80018b0:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80018b2:	4313      	orrs	r3, r2
 80018b4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80018c0:	f023 0302 	bic.w	r3, r3, #2
 80018c4:	687a      	ldr	r2, [r7, #4]
 80018c6:	6812      	ldr	r2, [r2, #0]
 80018c8:	69b9      	ldr	r1, [r7, #24]
 80018ca:	430b      	orrs	r3, r1
 80018cc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d118      	bne.n	800190a <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	691b      	ldr	r3, [r3, #16]
 80018de:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80018e2:	f023 0304 	bic.w	r3, r3, #4
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80018ee:	4311      	orrs	r1, r2
 80018f0:	687a      	ldr	r2, [r7, #4]
 80018f2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80018f4:	4311      	orrs	r1, r2
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80018fa:	430a      	orrs	r2, r1
 80018fc:	431a      	orrs	r2, r3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f042 0201 	orr.w	r2, r2, #1
 8001906:	611a      	str	r2, [r3, #16]
 8001908:	e007      	b.n	800191a <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	691a      	ldr	r2, [r3, #16]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f022 0201 	bic.w	r2, r2, #1
 8001918:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	691b      	ldr	r3, [r3, #16]
 800191e:	2b01      	cmp	r3, #1
 8001920:	d10c      	bne.n	800193c <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001928:	f023 010f 	bic.w	r1, r3, #15
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	69db      	ldr	r3, [r3, #28]
 8001930:	1e5a      	subs	r2, r3, #1
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	430a      	orrs	r2, r1
 8001938:	631a      	str	r2, [r3, #48]	; 0x30
 800193a:	e007      	b.n	800194c <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f022 020f 	bic.w	r2, r2, #15
 800194a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001950:	f023 0303 	bic.w	r3, r3, #3
 8001954:	f043 0201 	orr.w	r2, r3, #1
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	655a      	str	r2, [r3, #84]	; 0x54
 800195c:	e007      	b.n	800196e <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001962:	f043 0210 	orr.w	r2, r3, #16
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800196e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001970:	4618      	mov	r0, r3
 8001972:	3724      	adds	r7, #36	; 0x24
 8001974:	46bd      	mov	sp, r7
 8001976:	bd90      	pop	{r4, r7, pc}
 8001978:	20000004 	.word	0x20000004
 800197c:	053e2d63 	.word	0x053e2d63
 8001980:	50040000 	.word	0x50040000
 8001984:	50040100 	.word	0x50040100
 8001988:	50040200 	.word	0x50040200
 800198c:	50040300 	.word	0x50040300
 8001990:	fff0c007 	.word	0xfff0c007

08001994 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b086      	sub	sp, #24
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800199c:	4857      	ldr	r0, [pc, #348]	; (8001afc <HAL_ADC_Start+0x168>)
 800199e:	f7ff fdd9 	bl	8001554 <LL_ADC_GetMultimode>
 80019a2:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff fe78 	bl	800169e <LL_ADC_REG_IsConversionOngoing>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	f040 809c 	bne.w	8001aee <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d101      	bne.n	80019c4 <HAL_ADC_Start+0x30>
 80019c0:	2302      	movs	r3, #2
 80019c2:	e097      	b.n	8001af4 <HAL_ADC_Start+0x160>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2201      	movs	r2, #1
 80019c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f000 fd67 	bl	80024a0 <ADC_Enable>
 80019d2:	4603      	mov	r3, r0
 80019d4:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80019d6:	7dfb      	ldrb	r3, [r7, #23]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	f040 8083 	bne.w	8001ae4 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019e2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80019e6:	f023 0301 	bic.w	r3, r3, #1
 80019ea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a42      	ldr	r2, [pc, #264]	; (8001b00 <HAL_ADC_Start+0x16c>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d002      	beq.n	8001a02 <HAL_ADC_Start+0x6e>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	e000      	b.n	8001a04 <HAL_ADC_Start+0x70>
 8001a02:	4b40      	ldr	r3, [pc, #256]	; (8001b04 <HAL_ADC_Start+0x170>)
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	6812      	ldr	r2, [r2, #0]
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d002      	beq.n	8001a12 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d105      	bne.n	8001a1e <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a16:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a2a:	d106      	bne.n	8001a3a <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a30:	f023 0206 	bic.w	r2, r3, #6
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	659a      	str	r2, [r3, #88]	; 0x58
 8001a38:	e002      	b.n	8001a40 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	221c      	movs	r2, #28
 8001a46:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a2a      	ldr	r2, [pc, #168]	; (8001b00 <HAL_ADC_Start+0x16c>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d002      	beq.n	8001a60 <HAL_ADC_Start+0xcc>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	e000      	b.n	8001a62 <HAL_ADC_Start+0xce>
 8001a60:	4b28      	ldr	r3, [pc, #160]	; (8001b04 <HAL_ADC_Start+0x170>)
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	6812      	ldr	r2, [r2, #0]
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d008      	beq.n	8001a7c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d005      	beq.n	8001a7c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	2b05      	cmp	r3, #5
 8001a74:	d002      	beq.n	8001a7c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	2b09      	cmp	r3, #9
 8001a7a:	d114      	bne.n	8001aa6 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	68db      	ldr	r3, [r3, #12]
 8001a82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d007      	beq.n	8001a9a <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a8e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a92:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7ff fde9 	bl	8001676 <LL_ADC_REG_StartConversion>
 8001aa4:	e025      	b.n	8001af2 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aaa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a12      	ldr	r2, [pc, #72]	; (8001b00 <HAL_ADC_Start+0x16c>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d002      	beq.n	8001ac2 <HAL_ADC_Start+0x12e>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	e000      	b.n	8001ac4 <HAL_ADC_Start+0x130>
 8001ac2:	4b10      	ldr	r3, [pc, #64]	; (8001b04 <HAL_ADC_Start+0x170>)
 8001ac4:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	68db      	ldr	r3, [r3, #12]
 8001aca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d00f      	beq.n	8001af2 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ad6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ada:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	655a      	str	r2, [r3, #84]	; 0x54
 8001ae2:	e006      	b.n	8001af2 <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001aec:	e001      	b.n	8001af2 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001aee:	2302      	movs	r3, #2
 8001af0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001af2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3718      	adds	r7, #24
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	50040300 	.word	0x50040300
 8001b00:	50040100 	.word	0x50040100
 8001b04:	50040000 	.word	0x50040000

08001b08 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b088      	sub	sp, #32
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001b12:	4862      	ldr	r0, [pc, #392]	; (8001c9c <HAL_ADC_PollForConversion+0x194>)
 8001b14:	f7ff fd1e 	bl	8001554 <LL_ADC_GetMultimode>
 8001b18:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	695b      	ldr	r3, [r3, #20]
 8001b1e:	2b08      	cmp	r3, #8
 8001b20:	d102      	bne.n	8001b28 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001b22:	2308      	movs	r3, #8
 8001b24:	61fb      	str	r3, [r7, #28]
 8001b26:	e02a      	b.n	8001b7e <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d005      	beq.n	8001b3a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	2b05      	cmp	r3, #5
 8001b32:	d002      	beq.n	8001b3a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	2b09      	cmp	r3, #9
 8001b38:	d111      	bne.n	8001b5e <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	f003 0301 	and.w	r3, r3, #1
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d007      	beq.n	8001b58 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b4c:	f043 0220 	orr.w	r2, r3, #32
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e09d      	b.n	8001c94 <HAL_ADC_PollForConversion+0x18c>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001b58:	2304      	movs	r3, #4
 8001b5a:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001b5c:	e00f      	b.n	8001b7e <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001b5e:	484f      	ldr	r0, [pc, #316]	; (8001c9c <HAL_ADC_PollForConversion+0x194>)
 8001b60:	f7ff fd06 	bl	8001570 <LL_ADC_GetMultiDMATransfer>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d007      	beq.n	8001b7a <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b6e:	f043 0220 	orr.w	r2, r3, #32
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e08c      	b.n	8001c94 <HAL_ADC_PollForConversion+0x18c>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001b7a:	2304      	movs	r3, #4
 8001b7c:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001b7e:	f7ff fba3 	bl	80012c8 <HAL_GetTick>
 8001b82:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001b84:	e01a      	b.n	8001bbc <HAL_ADC_PollForConversion+0xb4>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b8c:	d016      	beq.n	8001bbc <HAL_ADC_PollForConversion+0xb4>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001b8e:	f7ff fb9b 	bl	80012c8 <HAL_GetTick>
 8001b92:	4602      	mov	r2, r0
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	683a      	ldr	r2, [r7, #0]
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d302      	bcc.n	8001ba4 <HAL_ADC_PollForConversion+0x9c>
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d10b      	bne.n	8001bbc <HAL_ADC_PollForConversion+0xb4>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ba8:	f043 0204 	orr.w	r2, r3, #4
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	e06b      	b.n	8001c94 <HAL_ADC_PollForConversion+0x18c>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d0dd      	beq.n	8001b86 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bce:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7ff fc2b 	bl	8001436 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d01c      	beq.n	8001c20 <HAL_ADC_PollForConversion+0x118>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	7e5b      	ldrb	r3, [r3, #25]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d118      	bne.n	8001c20 <HAL_ADC_PollForConversion+0x118>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0308 	and.w	r3, r3, #8
 8001bf8:	2b08      	cmp	r3, #8
 8001bfa:	d111      	bne.n	8001c20 <HAL_ADC_PollForConversion+0x118>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c00:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d105      	bne.n	8001c20 <HAL_ADC_PollForConversion+0x118>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c18:	f043 0201 	orr.w	r2, r3, #1
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a1e      	ldr	r2, [pc, #120]	; (8001ca0 <HAL_ADC_PollForConversion+0x198>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d002      	beq.n	8001c30 <HAL_ADC_PollForConversion+0x128>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	e000      	b.n	8001c32 <HAL_ADC_PollForConversion+0x12a>
 8001c30:	4b1c      	ldr	r3, [pc, #112]	; (8001ca4 <HAL_ADC_PollForConversion+0x19c>)
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	6812      	ldr	r2, [r2, #0]
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d008      	beq.n	8001c4c <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d005      	beq.n	8001c4c <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	2b05      	cmp	r3, #5
 8001c44:	d002      	beq.n	8001c4c <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	2b09      	cmp	r3, #9
 8001c4a:	d104      	bne.n	8001c56 <HAL_ADC_PollForConversion+0x14e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	68db      	ldr	r3, [r3, #12]
 8001c52:	61bb      	str	r3, [r7, #24]
 8001c54:	e00c      	b.n	8001c70 <HAL_ADC_PollForConversion+0x168>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a11      	ldr	r2, [pc, #68]	; (8001ca0 <HAL_ADC_PollForConversion+0x198>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d002      	beq.n	8001c66 <HAL_ADC_PollForConversion+0x15e>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	e000      	b.n	8001c68 <HAL_ADC_PollForConversion+0x160>
 8001c66:	4b0f      	ldr	r3, [pc, #60]	; (8001ca4 <HAL_ADC_PollForConversion+0x19c>)
 8001c68:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	68db      	ldr	r3, [r3, #12]
 8001c6e:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	2b08      	cmp	r3, #8
 8001c74:	d104      	bne.n	8001c80 <HAL_ADC_PollForConversion+0x178>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	2208      	movs	r2, #8
 8001c7c:	601a      	str	r2, [r3, #0]
 8001c7e:	e008      	b.n	8001c92 <HAL_ADC_PollForConversion+0x18a>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001c80:	69bb      	ldr	r3, [r7, #24]
 8001c82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d103      	bne.n	8001c92 <HAL_ADC_PollForConversion+0x18a>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	220c      	movs	r2, #12
 8001c90:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001c92:	2300      	movs	r3, #0
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3720      	adds	r7, #32
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	50040300 	.word	0x50040300
 8001ca0:	50040100 	.word	0x50040100
 8001ca4:	50040000 	.word	0x50040000

08001ca8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	370c      	adds	r7, #12
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
	...

08001cc4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b0b6      	sub	sp, #216	; 0xd8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	d101      	bne.n	8001ce6 <HAL_ADC_ConfigChannel+0x22>
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	e3c6      	b.n	8002474 <HAL_ADC_ConfigChannel+0x7b0>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2201      	movs	r2, #1
 8001cea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f7ff fcd3 	bl	800169e <LL_ADC_REG_IsConversionOngoing>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	f040 83a7 	bne.w	800244e <HAL_ADC_ConfigChannel+0x78a>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	2b05      	cmp	r3, #5
 8001d06:	d824      	bhi.n	8001d52 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	3b02      	subs	r3, #2
 8001d0e:	2b03      	cmp	r3, #3
 8001d10:	d81b      	bhi.n	8001d4a <HAL_ADC_ConfigChannel+0x86>
 8001d12:	a201      	add	r2, pc, #4	; (adr r2, 8001d18 <HAL_ADC_ConfigChannel+0x54>)
 8001d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d18:	08001d29 	.word	0x08001d29
 8001d1c:	08001d31 	.word	0x08001d31
 8001d20:	08001d39 	.word	0x08001d39
 8001d24:	08001d41 	.word	0x08001d41
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	220c      	movs	r2, #12
 8001d2c:	605a      	str	r2, [r3, #4]
          break;
 8001d2e:	e011      	b.n	8001d54 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	2212      	movs	r2, #18
 8001d34:	605a      	str	r2, [r3, #4]
          break;
 8001d36:	e00d      	b.n	8001d54 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	2218      	movs	r2, #24
 8001d3c:	605a      	str	r2, [r3, #4]
          break;
 8001d3e:	e009      	b.n	8001d54 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d46:	605a      	str	r2, [r3, #4]
          break;
 8001d48:	e004      	b.n	8001d54 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	2206      	movs	r2, #6
 8001d4e:	605a      	str	r2, [r3, #4]
          break;
 8001d50:	e000      	b.n	8001d54 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001d52:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6818      	ldr	r0, [r3, #0]
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	6859      	ldr	r1, [r3, #4]
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	461a      	mov	r2, r3
 8001d62:	f7ff fb7b 	bl	800145c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7ff fc97 	bl	800169e <LL_ADC_REG_IsConversionOngoing>
 8001d70:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7ff fca3 	bl	80016c4 <LL_ADC_INJ_IsConversionOngoing>
 8001d7e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d82:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	f040 81a6 	bne.w	80020d8 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d8c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	f040 81a1 	bne.w	80020d8 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6818      	ldr	r0, [r3, #0]
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	6819      	ldr	r1, [r3, #0]
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	461a      	mov	r2, r3
 8001da4:	f7ff fb86 	bl	80014b4 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	695a      	ldr	r2, [r3, #20]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	68db      	ldr	r3, [r3, #12]
 8001db2:	08db      	lsrs	r3, r3, #3
 8001db4:	f003 0303 	and.w	r3, r3, #3
 8001db8:	005b      	lsls	r3, r3, #1
 8001dba:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	691b      	ldr	r3, [r3, #16]
 8001dc6:	2b04      	cmp	r3, #4
 8001dc8:	d00a      	beq.n	8001de0 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6818      	ldr	r0, [r3, #0]
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	6919      	ldr	r1, [r3, #16]
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001dda:	f7ff fad7 	bl	800138c <LL_ADC_SetOffset>
 8001dde:	e17b      	b.n	80020d8 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	2100      	movs	r1, #0
 8001de6:	4618      	mov	r0, r3
 8001de8:	f7ff faf4 	bl	80013d4 <LL_ADC_GetOffsetChannel>
 8001dec:	4603      	mov	r3, r0
 8001dee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d10a      	bne.n	8001e0c <HAL_ADC_ConfigChannel+0x148>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	2100      	movs	r1, #0
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7ff fae9 	bl	80013d4 <LL_ADC_GetOffsetChannel>
 8001e02:	4603      	mov	r3, r0
 8001e04:	0e9b      	lsrs	r3, r3, #26
 8001e06:	f003 021f 	and.w	r2, r3, #31
 8001e0a:	e01e      	b.n	8001e4a <HAL_ADC_ConfigChannel+0x186>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2100      	movs	r1, #0
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7ff fade 	bl	80013d4 <LL_ADC_GetOffsetChannel>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e1e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001e22:	fa93 f3a3 	rbit	r3, r3
 8001e26:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001e2a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001e2e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001e32:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d101      	bne.n	8001e3e <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8001e3a:	2320      	movs	r3, #32
 8001e3c:	e004      	b.n	8001e48 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8001e3e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001e42:	fab3 f383 	clz	r3, r3
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d105      	bne.n	8001e62 <HAL_ADC_ConfigChannel+0x19e>
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	0e9b      	lsrs	r3, r3, #26
 8001e5c:	f003 031f 	and.w	r3, r3, #31
 8001e60:	e018      	b.n	8001e94 <HAL_ADC_ConfigChannel+0x1d0>
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e6a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001e6e:	fa93 f3a3 	rbit	r3, r3
 8001e72:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001e76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001e7a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001e7e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d101      	bne.n	8001e8a <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8001e86:	2320      	movs	r3, #32
 8001e88:	e004      	b.n	8001e94 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8001e8a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001e8e:	fab3 f383 	clz	r3, r3
 8001e92:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d106      	bne.n	8001ea6 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	2100      	movs	r1, #0
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7ff faad 	bl	8001400 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	2101      	movs	r1, #1
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7ff fa91 	bl	80013d4 <LL_ADC_GetOffsetChannel>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d10a      	bne.n	8001ed2 <HAL_ADC_ConfigChannel+0x20e>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	2101      	movs	r1, #1
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7ff fa86 	bl	80013d4 <LL_ADC_GetOffsetChannel>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	0e9b      	lsrs	r3, r3, #26
 8001ecc:	f003 021f 	and.w	r2, r3, #31
 8001ed0:	e01e      	b.n	8001f10 <HAL_ADC_ConfigChannel+0x24c>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	2101      	movs	r1, #1
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7ff fa7b 	bl	80013d4 <LL_ADC_GetOffsetChannel>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001ee8:	fa93 f3a3 	rbit	r3, r3
 8001eec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001ef0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001ef4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001ef8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d101      	bne.n	8001f04 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8001f00:	2320      	movs	r3, #32
 8001f02:	e004      	b.n	8001f0e <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001f04:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001f08:	fab3 f383 	clz	r3, r3
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d105      	bne.n	8001f28 <HAL_ADC_ConfigChannel+0x264>
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	0e9b      	lsrs	r3, r3, #26
 8001f22:	f003 031f 	and.w	r3, r3, #31
 8001f26:	e018      	b.n	8001f5a <HAL_ADC_ConfigChannel+0x296>
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f30:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001f34:	fa93 f3a3 	rbit	r3, r3
 8001f38:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001f3c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001f40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001f44:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d101      	bne.n	8001f50 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8001f4c:	2320      	movs	r3, #32
 8001f4e:	e004      	b.n	8001f5a <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8001f50:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f54:	fab3 f383 	clz	r3, r3
 8001f58:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d106      	bne.n	8001f6c <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	2200      	movs	r2, #0
 8001f64:	2101      	movs	r1, #1
 8001f66:	4618      	mov	r0, r3
 8001f68:	f7ff fa4a 	bl	8001400 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2102      	movs	r1, #2
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7ff fa2e 	bl	80013d4 <LL_ADC_GetOffsetChannel>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d10a      	bne.n	8001f98 <HAL_ADC_ConfigChannel+0x2d4>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	2102      	movs	r1, #2
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7ff fa23 	bl	80013d4 <LL_ADC_GetOffsetChannel>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	0e9b      	lsrs	r3, r3, #26
 8001f92:	f003 021f 	and.w	r2, r3, #31
 8001f96:	e01e      	b.n	8001fd6 <HAL_ADC_ConfigChannel+0x312>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2102      	movs	r1, #2
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7ff fa18 	bl	80013d4 <LL_ADC_GetOffsetChannel>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001faa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001fae:	fa93 f3a3 	rbit	r3, r3
 8001fb2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001fb6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001fba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001fbe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d101      	bne.n	8001fca <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8001fc6:	2320      	movs	r3, #32
 8001fc8:	e004      	b.n	8001fd4 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001fca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001fce:	fab3 f383 	clz	r3, r3
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d105      	bne.n	8001fee <HAL_ADC_ConfigChannel+0x32a>
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	0e9b      	lsrs	r3, r3, #26
 8001fe8:	f003 031f 	and.w	r3, r3, #31
 8001fec:	e016      	b.n	800201c <HAL_ADC_ConfigChannel+0x358>
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001ffa:	fa93 f3a3 	rbit	r3, r3
 8001ffe:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002000:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002002:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002006:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800200a:	2b00      	cmp	r3, #0
 800200c:	d101      	bne.n	8002012 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 800200e:	2320      	movs	r3, #32
 8002010:	e004      	b.n	800201c <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8002012:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002016:	fab3 f383 	clz	r3, r3
 800201a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800201c:	429a      	cmp	r2, r3
 800201e:	d106      	bne.n	800202e <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	2200      	movs	r2, #0
 8002026:	2102      	movs	r1, #2
 8002028:	4618      	mov	r0, r3
 800202a:	f7ff f9e9 	bl	8001400 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	2103      	movs	r1, #3
 8002034:	4618      	mov	r0, r3
 8002036:	f7ff f9cd 	bl	80013d4 <LL_ADC_GetOffsetChannel>
 800203a:	4603      	mov	r3, r0
 800203c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002040:	2b00      	cmp	r3, #0
 8002042:	d10a      	bne.n	800205a <HAL_ADC_ConfigChannel+0x396>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2103      	movs	r1, #3
 800204a:	4618      	mov	r0, r3
 800204c:	f7ff f9c2 	bl	80013d4 <LL_ADC_GetOffsetChannel>
 8002050:	4603      	mov	r3, r0
 8002052:	0e9b      	lsrs	r3, r3, #26
 8002054:	f003 021f 	and.w	r2, r3, #31
 8002058:	e017      	b.n	800208a <HAL_ADC_ConfigChannel+0x3c6>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	2103      	movs	r1, #3
 8002060:	4618      	mov	r0, r3
 8002062:	f7ff f9b7 	bl	80013d4 <LL_ADC_GetOffsetChannel>
 8002066:	4603      	mov	r3, r0
 8002068:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800206a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800206c:	fa93 f3a3 	rbit	r3, r3
 8002070:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002072:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002074:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002076:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002078:	2b00      	cmp	r3, #0
 800207a:	d101      	bne.n	8002080 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 800207c:	2320      	movs	r3, #32
 800207e:	e003      	b.n	8002088 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002080:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002082:	fab3 f383 	clz	r3, r3
 8002086:	b2db      	uxtb	r3, r3
 8002088:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002092:	2b00      	cmp	r3, #0
 8002094:	d105      	bne.n	80020a2 <HAL_ADC_ConfigChannel+0x3de>
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	0e9b      	lsrs	r3, r3, #26
 800209c:	f003 031f 	and.w	r3, r3, #31
 80020a0:	e011      	b.n	80020c6 <HAL_ADC_ConfigChannel+0x402>
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80020aa:	fa93 f3a3 	rbit	r3, r3
 80020ae:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80020b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80020b2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80020b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d101      	bne.n	80020be <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 80020ba:	2320      	movs	r3, #32
 80020bc:	e003      	b.n	80020c6 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 80020be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020c0:	fab3 f383 	clz	r3, r3
 80020c4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d106      	bne.n	80020d8 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	2200      	movs	r2, #0
 80020d0:	2103      	movs	r1, #3
 80020d2:	4618      	mov	r0, r3
 80020d4:	f7ff f994 	bl	8001400 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4618      	mov	r0, r3
 80020de:	f7ff fab7 	bl	8001650 <LL_ADC_IsEnabled>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	f040 813f 	bne.w	8002368 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6818      	ldr	r0, [r3, #0]
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	6819      	ldr	r1, [r3, #0]
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	68db      	ldr	r3, [r3, #12]
 80020f6:	461a      	mov	r2, r3
 80020f8:	f7ff fa08 	bl	800150c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	4a8e      	ldr	r2, [pc, #568]	; (800233c <HAL_ADC_ConfigChannel+0x678>)
 8002102:	4293      	cmp	r3, r2
 8002104:	f040 8130 	bne.w	8002368 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002114:	2b00      	cmp	r3, #0
 8002116:	d10b      	bne.n	8002130 <HAL_ADC_ConfigChannel+0x46c>
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	0e9b      	lsrs	r3, r3, #26
 800211e:	3301      	adds	r3, #1
 8002120:	f003 031f 	and.w	r3, r3, #31
 8002124:	2b09      	cmp	r3, #9
 8002126:	bf94      	ite	ls
 8002128:	2301      	movls	r3, #1
 800212a:	2300      	movhi	r3, #0
 800212c:	b2db      	uxtb	r3, r3
 800212e:	e019      	b.n	8002164 <HAL_ADC_ConfigChannel+0x4a0>
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002136:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002138:	fa93 f3a3 	rbit	r3, r3
 800213c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800213e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002140:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002142:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002144:	2b00      	cmp	r3, #0
 8002146:	d101      	bne.n	800214c <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002148:	2320      	movs	r3, #32
 800214a:	e003      	b.n	8002154 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 800214c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800214e:	fab3 f383 	clz	r3, r3
 8002152:	b2db      	uxtb	r3, r3
 8002154:	3301      	adds	r3, #1
 8002156:	f003 031f 	and.w	r3, r3, #31
 800215a:	2b09      	cmp	r3, #9
 800215c:	bf94      	ite	ls
 800215e:	2301      	movls	r3, #1
 8002160:	2300      	movhi	r3, #0
 8002162:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002164:	2b00      	cmp	r3, #0
 8002166:	d079      	beq.n	800225c <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002170:	2b00      	cmp	r3, #0
 8002172:	d107      	bne.n	8002184 <HAL_ADC_ConfigChannel+0x4c0>
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	0e9b      	lsrs	r3, r3, #26
 800217a:	3301      	adds	r3, #1
 800217c:	069b      	lsls	r3, r3, #26
 800217e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002182:	e015      	b.n	80021b0 <HAL_ADC_ConfigChannel+0x4ec>
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800218a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800218c:	fa93 f3a3 	rbit	r3, r3
 8002190:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002192:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002194:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002196:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002198:	2b00      	cmp	r3, #0
 800219a:	d101      	bne.n	80021a0 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 800219c:	2320      	movs	r3, #32
 800219e:	e003      	b.n	80021a8 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 80021a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021a2:	fab3 f383 	clz	r3, r3
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	3301      	adds	r3, #1
 80021aa:	069b      	lsls	r3, r3, #26
 80021ac:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d109      	bne.n	80021d0 <HAL_ADC_ConfigChannel+0x50c>
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	0e9b      	lsrs	r3, r3, #26
 80021c2:	3301      	adds	r3, #1
 80021c4:	f003 031f 	and.w	r3, r3, #31
 80021c8:	2101      	movs	r1, #1
 80021ca:	fa01 f303 	lsl.w	r3, r1, r3
 80021ce:	e017      	b.n	8002200 <HAL_ADC_ConfigChannel+0x53c>
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021d8:	fa93 f3a3 	rbit	r3, r3
 80021dc:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80021de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021e0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80021e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d101      	bne.n	80021ec <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 80021e8:	2320      	movs	r3, #32
 80021ea:	e003      	b.n	80021f4 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 80021ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021ee:	fab3 f383 	clz	r3, r3
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	3301      	adds	r3, #1
 80021f6:	f003 031f 	and.w	r3, r3, #31
 80021fa:	2101      	movs	r1, #1
 80021fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002200:	ea42 0103 	orr.w	r1, r2, r3
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800220c:	2b00      	cmp	r3, #0
 800220e:	d10a      	bne.n	8002226 <HAL_ADC_ConfigChannel+0x562>
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	0e9b      	lsrs	r3, r3, #26
 8002216:	3301      	adds	r3, #1
 8002218:	f003 021f 	and.w	r2, r3, #31
 800221c:	4613      	mov	r3, r2
 800221e:	005b      	lsls	r3, r3, #1
 8002220:	4413      	add	r3, r2
 8002222:	051b      	lsls	r3, r3, #20
 8002224:	e018      	b.n	8002258 <HAL_ADC_ConfigChannel+0x594>
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800222c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800222e:	fa93 f3a3 	rbit	r3, r3
 8002232:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002236:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002238:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800223a:	2b00      	cmp	r3, #0
 800223c:	d101      	bne.n	8002242 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 800223e:	2320      	movs	r3, #32
 8002240:	e003      	b.n	800224a <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8002242:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002244:	fab3 f383 	clz	r3, r3
 8002248:	b2db      	uxtb	r3, r3
 800224a:	3301      	adds	r3, #1
 800224c:	f003 021f 	and.w	r2, r3, #31
 8002250:	4613      	mov	r3, r2
 8002252:	005b      	lsls	r3, r3, #1
 8002254:	4413      	add	r3, r2
 8002256:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002258:	430b      	orrs	r3, r1
 800225a:	e080      	b.n	800235e <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002264:	2b00      	cmp	r3, #0
 8002266:	d107      	bne.n	8002278 <HAL_ADC_ConfigChannel+0x5b4>
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	0e9b      	lsrs	r3, r3, #26
 800226e:	3301      	adds	r3, #1
 8002270:	069b      	lsls	r3, r3, #26
 8002272:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002276:	e015      	b.n	80022a4 <HAL_ADC_ConfigChannel+0x5e0>
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800227e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002280:	fa93 f3a3 	rbit	r3, r3
 8002284:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002288:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800228a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800228c:	2b00      	cmp	r3, #0
 800228e:	d101      	bne.n	8002294 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002290:	2320      	movs	r3, #32
 8002292:	e003      	b.n	800229c <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002296:	fab3 f383 	clz	r3, r3
 800229a:	b2db      	uxtb	r3, r3
 800229c:	3301      	adds	r3, #1
 800229e:	069b      	lsls	r3, r3, #26
 80022a0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d109      	bne.n	80022c4 <HAL_ADC_ConfigChannel+0x600>
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	0e9b      	lsrs	r3, r3, #26
 80022b6:	3301      	adds	r3, #1
 80022b8:	f003 031f 	and.w	r3, r3, #31
 80022bc:	2101      	movs	r1, #1
 80022be:	fa01 f303 	lsl.w	r3, r1, r3
 80022c2:	e017      	b.n	80022f4 <HAL_ADC_ConfigChannel+0x630>
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ca:	6a3b      	ldr	r3, [r7, #32]
 80022cc:	fa93 f3a3 	rbit	r3, r3
 80022d0:	61fb      	str	r3, [r7, #28]
  return result;
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80022d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d101      	bne.n	80022e0 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80022dc:	2320      	movs	r3, #32
 80022de:	e003      	b.n	80022e8 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80022e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e2:	fab3 f383 	clz	r3, r3
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	3301      	adds	r3, #1
 80022ea:	f003 031f 	and.w	r3, r3, #31
 80022ee:	2101      	movs	r1, #1
 80022f0:	fa01 f303 	lsl.w	r3, r1, r3
 80022f4:	ea42 0103 	orr.w	r1, r2, r3
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002300:	2b00      	cmp	r3, #0
 8002302:	d10d      	bne.n	8002320 <HAL_ADC_ConfigChannel+0x65c>
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	0e9b      	lsrs	r3, r3, #26
 800230a:	3301      	adds	r3, #1
 800230c:	f003 021f 	and.w	r2, r3, #31
 8002310:	4613      	mov	r3, r2
 8002312:	005b      	lsls	r3, r3, #1
 8002314:	4413      	add	r3, r2
 8002316:	3b1e      	subs	r3, #30
 8002318:	051b      	lsls	r3, r3, #20
 800231a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800231e:	e01d      	b.n	800235c <HAL_ADC_ConfigChannel+0x698>
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	fa93 f3a3 	rbit	r3, r3
 800232c:	613b      	str	r3, [r7, #16]
  return result;
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002332:	69bb      	ldr	r3, [r7, #24]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d103      	bne.n	8002340 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002338:	2320      	movs	r3, #32
 800233a:	e005      	b.n	8002348 <HAL_ADC_ConfigChannel+0x684>
 800233c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002340:	69bb      	ldr	r3, [r7, #24]
 8002342:	fab3 f383 	clz	r3, r3
 8002346:	b2db      	uxtb	r3, r3
 8002348:	3301      	adds	r3, #1
 800234a:	f003 021f 	and.w	r2, r3, #31
 800234e:	4613      	mov	r3, r2
 8002350:	005b      	lsls	r3, r3, #1
 8002352:	4413      	add	r3, r2
 8002354:	3b1e      	subs	r3, #30
 8002356:	051b      	lsls	r3, r3, #20
 8002358:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800235c:	430b      	orrs	r3, r1
 800235e:	683a      	ldr	r2, [r7, #0]
 8002360:	6892      	ldr	r2, [r2, #8]
 8002362:	4619      	mov	r1, r3
 8002364:	f7ff f8a6 	bl	80014b4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	4b43      	ldr	r3, [pc, #268]	; (800247c <HAL_ADC_ConfigChannel+0x7b8>)
 800236e:	4013      	ands	r3, r2
 8002370:	2b00      	cmp	r3, #0
 8002372:	d079      	beq.n	8002468 <HAL_ADC_ConfigChannel+0x7a4>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002374:	4842      	ldr	r0, [pc, #264]	; (8002480 <HAL_ADC_ConfigChannel+0x7bc>)
 8002376:	f7fe fffb 	bl	8001370 <LL_ADC_GetCommonPathInternalCh>
 800237a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a40      	ldr	r2, [pc, #256]	; (8002484 <HAL_ADC_ConfigChannel+0x7c0>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d12b      	bne.n	80023e0 <HAL_ADC_ConfigChannel+0x71c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002388:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800238c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d125      	bne.n	80023e0 <HAL_ADC_ConfigChannel+0x71c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a3b      	ldr	r2, [pc, #236]	; (8002488 <HAL_ADC_ConfigChannel+0x7c4>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d004      	beq.n	80023a8 <HAL_ADC_ConfigChannel+0x6e4>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a3a      	ldr	r2, [pc, #232]	; (800248c <HAL_ADC_ConfigChannel+0x7c8>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d15c      	bne.n	8002462 <HAL_ADC_ConfigChannel+0x79e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80023a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80023ac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80023b0:	4619      	mov	r1, r3
 80023b2:	4833      	ldr	r0, [pc, #204]	; (8002480 <HAL_ADC_ConfigChannel+0x7bc>)
 80023b4:	f7fe ffc9 	bl	800134a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80023b8:	4b35      	ldr	r3, [pc, #212]	; (8002490 <HAL_ADC_ConfigChannel+0x7cc>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	099b      	lsrs	r3, r3, #6
 80023be:	4a35      	ldr	r2, [pc, #212]	; (8002494 <HAL_ADC_ConfigChannel+0x7d0>)
 80023c0:	fba2 2303 	umull	r2, r3, r2, r3
 80023c4:	099a      	lsrs	r2, r3, #6
 80023c6:	4613      	mov	r3, r2
 80023c8:	005b      	lsls	r3, r3, #1
 80023ca:	4413      	add	r3, r2
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80023d0:	e002      	b.n	80023d8 <HAL_ADC_ConfigChannel+0x714>
          {
            wait_loop_index--;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	3b01      	subs	r3, #1
 80023d6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d1f9      	bne.n	80023d2 <HAL_ADC_ConfigChannel+0x70e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80023de:	e040      	b.n	8002462 <HAL_ADC_ConfigChannel+0x79e>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a2c      	ldr	r2, [pc, #176]	; (8002498 <HAL_ADC_ConfigChannel+0x7d4>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d118      	bne.n	800241c <HAL_ADC_ConfigChannel+0x758>
 80023ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80023ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d112      	bne.n	800241c <HAL_ADC_ConfigChannel+0x758>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a23      	ldr	r2, [pc, #140]	; (8002488 <HAL_ADC_ConfigChannel+0x7c4>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d004      	beq.n	800240a <HAL_ADC_ConfigChannel+0x746>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a21      	ldr	r2, [pc, #132]	; (800248c <HAL_ADC_ConfigChannel+0x7c8>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d12d      	bne.n	8002466 <HAL_ADC_ConfigChannel+0x7a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800240a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800240e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002412:	4619      	mov	r1, r3
 8002414:	481a      	ldr	r0, [pc, #104]	; (8002480 <HAL_ADC_ConfigChannel+0x7bc>)
 8002416:	f7fe ff98 	bl	800134a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800241a:	e024      	b.n	8002466 <HAL_ADC_ConfigChannel+0x7a2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a1e      	ldr	r2, [pc, #120]	; (800249c <HAL_ADC_ConfigChannel+0x7d8>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d120      	bne.n	8002468 <HAL_ADC_ConfigChannel+0x7a4>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002426:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800242a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d11a      	bne.n	8002468 <HAL_ADC_ConfigChannel+0x7a4>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a14      	ldr	r2, [pc, #80]	; (8002488 <HAL_ADC_ConfigChannel+0x7c4>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d115      	bne.n	8002468 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800243c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002440:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002444:	4619      	mov	r1, r3
 8002446:	480e      	ldr	r0, [pc, #56]	; (8002480 <HAL_ADC_ConfigChannel+0x7bc>)
 8002448:	f7fe ff7f 	bl	800134a <LL_ADC_SetCommonPathInternalCh>
 800244c:	e00c      	b.n	8002468 <HAL_ADC_ConfigChannel+0x7a4>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002452:	f043 0220 	orr.w	r2, r3, #32
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002460:	e002      	b.n	8002468 <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002462:	bf00      	nop
 8002464:	e000      	b.n	8002468 <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002466:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2200      	movs	r2, #0
 800246c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002470:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002474:	4618      	mov	r0, r3
 8002476:	37d8      	adds	r7, #216	; 0xd8
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	80080000 	.word	0x80080000
 8002480:	50040300 	.word	0x50040300
 8002484:	c7520000 	.word	0xc7520000
 8002488:	50040000 	.word	0x50040000
 800248c:	50040200 	.word	0x50040200
 8002490:	20000004 	.word	0x20000004
 8002494:	053e2d63 	.word	0x053e2d63
 8002498:	cb840000 	.word	0xcb840000
 800249c:	80000001 	.word	0x80000001

080024a0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7ff f8cf 	bl	8001650 <LL_ADC_IsEnabled>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d146      	bne.n	8002546 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	689a      	ldr	r2, [r3, #8]
 80024be:	4b24      	ldr	r3, [pc, #144]	; (8002550 <ADC_Enable+0xb0>)
 80024c0:	4013      	ands	r3, r2
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d00d      	beq.n	80024e2 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ca:	f043 0210 	orr.w	r2, r3, #16
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024d6:	f043 0201 	orr.w	r2, r3, #1
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e032      	b.n	8002548 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7ff f89e 	bl	8001628 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80024ec:	f7fe feec 	bl	80012c8 <HAL_GetTick>
 80024f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80024f2:	e021      	b.n	8002538 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4618      	mov	r0, r3
 80024fa:	f7ff f8a9 	bl	8001650 <LL_ADC_IsEnabled>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d104      	bne.n	800250e <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4618      	mov	r0, r3
 800250a:	f7ff f88d 	bl	8001628 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800250e:	f7fe fedb 	bl	80012c8 <HAL_GetTick>
 8002512:	4602      	mov	r2, r0
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	2b02      	cmp	r3, #2
 800251a:	d90d      	bls.n	8002538 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002520:	f043 0210 	orr.w	r2, r3, #16
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800252c:	f043 0201 	orr.w	r2, r3, #1
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e007      	b.n	8002548 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0301 	and.w	r3, r3, #1
 8002542:	2b01      	cmp	r3, #1
 8002544:	d1d6      	bne.n	80024f4 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002546:	2300      	movs	r3, #0
}
 8002548:	4618      	mov	r0, r3
 800254a:	3710      	adds	r7, #16
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	8000003f 	.word	0x8000003f

08002554 <LL_ADC_IsEnabled>:
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	f003 0301 	and.w	r3, r3, #1
 8002564:	2b01      	cmp	r3, #1
 8002566:	d101      	bne.n	800256c <LL_ADC_IsEnabled+0x18>
 8002568:	2301      	movs	r3, #1
 800256a:	e000      	b.n	800256e <LL_ADC_IsEnabled+0x1a>
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	370c      	adds	r7, #12
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr

0800257a <LL_ADC_REG_IsConversionOngoing>:
{
 800257a:	b480      	push	{r7}
 800257c:	b083      	sub	sp, #12
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	f003 0304 	and.w	r3, r3, #4
 800258a:	2b04      	cmp	r3, #4
 800258c:	d101      	bne.n	8002592 <LL_ADC_REG_IsConversionOngoing+0x18>
 800258e:	2301      	movs	r3, #1
 8002590:	e000      	b.n	8002594 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002592:	2300      	movs	r3, #0
}
 8002594:	4618      	mov	r0, r3
 8002596:	370c      	adds	r7, #12
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr

080025a0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80025a0:	b590      	push	{r4, r7, lr}
 80025a2:	b09f      	sub	sp, #124	; 0x7c
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025aa:	2300      	movs	r3, #0
 80025ac:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d101      	bne.n	80025be <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80025ba:	2302      	movs	r3, #2
 80025bc:	e08f      	b.n	80026de <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2201      	movs	r2, #1
 80025c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a47      	ldr	r2, [pc, #284]	; (80026e8 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d102      	bne.n	80025d6 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 80025d0:	4b46      	ldr	r3, [pc, #280]	; (80026ec <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80025d2:	60bb      	str	r3, [r7, #8]
 80025d4:	e001      	b.n	80025da <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 80025d6:	2300      	movs	r3, #0
 80025d8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d10b      	bne.n	80025f8 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025e4:	f043 0220 	orr.w	r2, r3, #32
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2200      	movs	r2, #0
 80025f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e072      	b.n	80026de <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	4618      	mov	r0, r3
 80025fc:	f7ff ffbd 	bl	800257a <LL_ADC_REG_IsConversionOngoing>
 8002600:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4618      	mov	r0, r3
 8002608:	f7ff ffb7 	bl	800257a <LL_ADC_REG_IsConversionOngoing>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d154      	bne.n	80026bc <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002612:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002614:	2b00      	cmp	r3, #0
 8002616:	d151      	bne.n	80026bc <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002618:	4b35      	ldr	r3, [pc, #212]	; (80026f0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800261a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d02c      	beq.n	800267e <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002624:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	6859      	ldr	r1, [r3, #4]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002636:	035b      	lsls	r3, r3, #13
 8002638:	430b      	orrs	r3, r1
 800263a:	431a      	orrs	r2, r3
 800263c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800263e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002640:	4829      	ldr	r0, [pc, #164]	; (80026e8 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8002642:	f7ff ff87 	bl	8002554 <LL_ADC_IsEnabled>
 8002646:	4604      	mov	r4, r0
 8002648:	4828      	ldr	r0, [pc, #160]	; (80026ec <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 800264a:	f7ff ff83 	bl	8002554 <LL_ADC_IsEnabled>
 800264e:	4603      	mov	r3, r0
 8002650:	431c      	orrs	r4, r3
 8002652:	4828      	ldr	r0, [pc, #160]	; (80026f4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002654:	f7ff ff7e 	bl	8002554 <LL_ADC_IsEnabled>
 8002658:	4603      	mov	r3, r0
 800265a:	4323      	orrs	r3, r4
 800265c:	2b00      	cmp	r3, #0
 800265e:	d137      	bne.n	80026d0 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002660:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002668:	f023 030f 	bic.w	r3, r3, #15
 800266c:	683a      	ldr	r2, [r7, #0]
 800266e:	6811      	ldr	r1, [r2, #0]
 8002670:	683a      	ldr	r2, [r7, #0]
 8002672:	6892      	ldr	r2, [r2, #8]
 8002674:	430a      	orrs	r2, r1
 8002676:	431a      	orrs	r2, r3
 8002678:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800267a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800267c:	e028      	b.n	80026d0 <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800267e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002686:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002688:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800268a:	4817      	ldr	r0, [pc, #92]	; (80026e8 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 800268c:	f7ff ff62 	bl	8002554 <LL_ADC_IsEnabled>
 8002690:	4604      	mov	r4, r0
 8002692:	4816      	ldr	r0, [pc, #88]	; (80026ec <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8002694:	f7ff ff5e 	bl	8002554 <LL_ADC_IsEnabled>
 8002698:	4603      	mov	r3, r0
 800269a:	431c      	orrs	r4, r3
 800269c:	4815      	ldr	r0, [pc, #84]	; (80026f4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800269e:	f7ff ff59 	bl	8002554 <LL_ADC_IsEnabled>
 80026a2:	4603      	mov	r3, r0
 80026a4:	4323      	orrs	r3, r4
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d112      	bne.n	80026d0 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80026aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80026b2:	f023 030f 	bic.w	r3, r3, #15
 80026b6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80026b8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80026ba:	e009      	b.n	80026d0 <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026c0:	f043 0220 	orr.w	r2, r3, #32
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80026ce:	e000      	b.n	80026d2 <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80026d0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80026da:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80026de:	4618      	mov	r0, r3
 80026e0:	377c      	adds	r7, #124	; 0x7c
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd90      	pop	{r4, r7, pc}
 80026e6:	bf00      	nop
 80026e8:	50040000 	.word	0x50040000
 80026ec:	50040100 	.word	0x50040100
 80026f0:	50040300 	.word	0x50040300
 80026f4:	50040200 	.word	0x50040200

080026f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b085      	sub	sp, #20
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	f003 0307 	and.w	r3, r3, #7
 8002706:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002708:	4b0c      	ldr	r3, [pc, #48]	; (800273c <__NVIC_SetPriorityGrouping+0x44>)
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800270e:	68ba      	ldr	r2, [r7, #8]
 8002710:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002714:	4013      	ands	r3, r2
 8002716:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002720:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002724:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002728:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800272a:	4a04      	ldr	r2, [pc, #16]	; (800273c <__NVIC_SetPriorityGrouping+0x44>)
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	60d3      	str	r3, [r2, #12]
}
 8002730:	bf00      	nop
 8002732:	3714      	adds	r7, #20
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr
 800273c:	e000ed00 	.word	0xe000ed00

08002740 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002740:	b480      	push	{r7}
 8002742:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002744:	4b04      	ldr	r3, [pc, #16]	; (8002758 <__NVIC_GetPriorityGrouping+0x18>)
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	0a1b      	lsrs	r3, r3, #8
 800274a:	f003 0307 	and.w	r3, r3, #7
}
 800274e:	4618      	mov	r0, r3
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr
 8002758:	e000ed00 	.word	0xe000ed00

0800275c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
 8002762:	4603      	mov	r3, r0
 8002764:	6039      	str	r1, [r7, #0]
 8002766:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002768:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800276c:	2b00      	cmp	r3, #0
 800276e:	db0a      	blt.n	8002786 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	b2da      	uxtb	r2, r3
 8002774:	490c      	ldr	r1, [pc, #48]	; (80027a8 <__NVIC_SetPriority+0x4c>)
 8002776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800277a:	0112      	lsls	r2, r2, #4
 800277c:	b2d2      	uxtb	r2, r2
 800277e:	440b      	add	r3, r1
 8002780:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002784:	e00a      	b.n	800279c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	b2da      	uxtb	r2, r3
 800278a:	4908      	ldr	r1, [pc, #32]	; (80027ac <__NVIC_SetPriority+0x50>)
 800278c:	79fb      	ldrb	r3, [r7, #7]
 800278e:	f003 030f 	and.w	r3, r3, #15
 8002792:	3b04      	subs	r3, #4
 8002794:	0112      	lsls	r2, r2, #4
 8002796:	b2d2      	uxtb	r2, r2
 8002798:	440b      	add	r3, r1
 800279a:	761a      	strb	r2, [r3, #24]
}
 800279c:	bf00      	nop
 800279e:	370c      	adds	r7, #12
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr
 80027a8:	e000e100 	.word	0xe000e100
 80027ac:	e000ed00 	.word	0xe000ed00

080027b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b089      	sub	sp, #36	; 0x24
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	60b9      	str	r1, [r7, #8]
 80027ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	f003 0307 	and.w	r3, r3, #7
 80027c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	f1c3 0307 	rsb	r3, r3, #7
 80027ca:	2b04      	cmp	r3, #4
 80027cc:	bf28      	it	cs
 80027ce:	2304      	movcs	r3, #4
 80027d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	3304      	adds	r3, #4
 80027d6:	2b06      	cmp	r3, #6
 80027d8:	d902      	bls.n	80027e0 <NVIC_EncodePriority+0x30>
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	3b03      	subs	r3, #3
 80027de:	e000      	b.n	80027e2 <NVIC_EncodePriority+0x32>
 80027e0:	2300      	movs	r3, #0
 80027e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027e4:	f04f 32ff 	mov.w	r2, #4294967295
 80027e8:	69bb      	ldr	r3, [r7, #24]
 80027ea:	fa02 f303 	lsl.w	r3, r2, r3
 80027ee:	43da      	mvns	r2, r3
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	401a      	ands	r2, r3
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027f8:	f04f 31ff 	mov.w	r1, #4294967295
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002802:	43d9      	mvns	r1, r3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002808:	4313      	orrs	r3, r2
         );
}
 800280a:	4618      	mov	r0, r3
 800280c:	3724      	adds	r7, #36	; 0x24
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
	...

08002818 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	3b01      	subs	r3, #1
 8002824:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002828:	d301      	bcc.n	800282e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800282a:	2301      	movs	r3, #1
 800282c:	e00f      	b.n	800284e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800282e:	4a0a      	ldr	r2, [pc, #40]	; (8002858 <SysTick_Config+0x40>)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	3b01      	subs	r3, #1
 8002834:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002836:	210f      	movs	r1, #15
 8002838:	f04f 30ff 	mov.w	r0, #4294967295
 800283c:	f7ff ff8e 	bl	800275c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002840:	4b05      	ldr	r3, [pc, #20]	; (8002858 <SysTick_Config+0x40>)
 8002842:	2200      	movs	r2, #0
 8002844:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002846:	4b04      	ldr	r3, [pc, #16]	; (8002858 <SysTick_Config+0x40>)
 8002848:	2207      	movs	r2, #7
 800284a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800284c:	2300      	movs	r3, #0
}
 800284e:	4618      	mov	r0, r3
 8002850:	3708      	adds	r7, #8
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	e000e010 	.word	0xe000e010

0800285c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	f7ff ff47 	bl	80026f8 <__NVIC_SetPriorityGrouping>
}
 800286a:	bf00      	nop
 800286c:	3708      	adds	r7, #8
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}

08002872 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002872:	b580      	push	{r7, lr}
 8002874:	b086      	sub	sp, #24
 8002876:	af00      	add	r7, sp, #0
 8002878:	4603      	mov	r3, r0
 800287a:	60b9      	str	r1, [r7, #8]
 800287c:	607a      	str	r2, [r7, #4]
 800287e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002880:	2300      	movs	r3, #0
 8002882:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002884:	f7ff ff5c 	bl	8002740 <__NVIC_GetPriorityGrouping>
 8002888:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	68b9      	ldr	r1, [r7, #8]
 800288e:	6978      	ldr	r0, [r7, #20]
 8002890:	f7ff ff8e 	bl	80027b0 <NVIC_EncodePriority>
 8002894:	4602      	mov	r2, r0
 8002896:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800289a:	4611      	mov	r1, r2
 800289c:	4618      	mov	r0, r3
 800289e:	f7ff ff5d 	bl	800275c <__NVIC_SetPriority>
}
 80028a2:	bf00      	nop
 80028a4:	3718      	adds	r7, #24
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}

080028aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028aa:	b580      	push	{r7, lr}
 80028ac:	b082      	sub	sp, #8
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f7ff ffb0 	bl	8002818 <SysTick_Config>
 80028b8:	4603      	mov	r3, r0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3708      	adds	r7, #8
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
	...

080028c4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80028c8:	4b04      	ldr	r3, [pc, #16]	; (80028dc <HAL_PWREx_GetVoltageRange+0x18>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
 80028da:	bf00      	nop
 80028dc:	40007000 	.word	0x40007000

080028e0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b085      	sub	sp, #20
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028ee:	d130      	bne.n	8002952 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80028f0:	4b23      	ldr	r3, [pc, #140]	; (8002980 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80028f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028fc:	d038      	beq.n	8002970 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80028fe:	4b20      	ldr	r3, [pc, #128]	; (8002980 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002906:	4a1e      	ldr	r2, [pc, #120]	; (8002980 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002908:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800290c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800290e:	4b1d      	ldr	r3, [pc, #116]	; (8002984 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	2232      	movs	r2, #50	; 0x32
 8002914:	fb02 f303 	mul.w	r3, r2, r3
 8002918:	4a1b      	ldr	r2, [pc, #108]	; (8002988 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800291a:	fba2 2303 	umull	r2, r3, r2, r3
 800291e:	0c9b      	lsrs	r3, r3, #18
 8002920:	3301      	adds	r3, #1
 8002922:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002924:	e002      	b.n	800292c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	3b01      	subs	r3, #1
 800292a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800292c:	4b14      	ldr	r3, [pc, #80]	; (8002980 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800292e:	695b      	ldr	r3, [r3, #20]
 8002930:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002934:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002938:	d102      	bne.n	8002940 <HAL_PWREx_ControlVoltageScaling+0x60>
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d1f2      	bne.n	8002926 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002940:	4b0f      	ldr	r3, [pc, #60]	; (8002980 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002942:	695b      	ldr	r3, [r3, #20]
 8002944:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002948:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800294c:	d110      	bne.n	8002970 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e00f      	b.n	8002972 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002952:	4b0b      	ldr	r3, [pc, #44]	; (8002980 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800295a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800295e:	d007      	beq.n	8002970 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002960:	4b07      	ldr	r3, [pc, #28]	; (8002980 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002968:	4a05      	ldr	r2, [pc, #20]	; (8002980 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800296a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800296e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002970:	2300      	movs	r3, #0
}
 8002972:	4618      	mov	r0, r3
 8002974:	3714      	adds	r7, #20
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	40007000 	.word	0x40007000
 8002984:	20000004 	.word	0x20000004
 8002988:	431bde83 	.word	0x431bde83

0800298c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b088      	sub	sp, #32
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d101      	bne.n	800299e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e3d4      	b.n	8003148 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800299e:	4ba1      	ldr	r3, [pc, #644]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f003 030c 	and.w	r3, r3, #12
 80029a6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029a8:	4b9e      	ldr	r3, [pc, #632]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	f003 0303 	and.w	r3, r3, #3
 80029b0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0310 	and.w	r3, r3, #16
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	f000 80e4 	beq.w	8002b88 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80029c0:	69bb      	ldr	r3, [r7, #24]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d007      	beq.n	80029d6 <HAL_RCC_OscConfig+0x4a>
 80029c6:	69bb      	ldr	r3, [r7, #24]
 80029c8:	2b0c      	cmp	r3, #12
 80029ca:	f040 808b 	bne.w	8002ae4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	f040 8087 	bne.w	8002ae4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80029d6:	4b93      	ldr	r3, [pc, #588]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0302 	and.w	r3, r3, #2
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d005      	beq.n	80029ee <HAL_RCC_OscConfig+0x62>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	699b      	ldr	r3, [r3, #24]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d101      	bne.n	80029ee <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e3ac      	b.n	8003148 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6a1a      	ldr	r2, [r3, #32]
 80029f2:	4b8c      	ldr	r3, [pc, #560]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0308 	and.w	r3, r3, #8
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d004      	beq.n	8002a08 <HAL_RCC_OscConfig+0x7c>
 80029fe:	4b89      	ldr	r3, [pc, #548]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a06:	e005      	b.n	8002a14 <HAL_RCC_OscConfig+0x88>
 8002a08:	4b86      	ldr	r3, [pc, #536]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 8002a0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a0e:	091b      	lsrs	r3, r3, #4
 8002a10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d223      	bcs.n	8002a60 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6a1b      	ldr	r3, [r3, #32]
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f000 fd07 	bl	8003430 <RCC_SetFlashLatencyFromMSIRange>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d001      	beq.n	8002a2c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e38d      	b.n	8003148 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a2c:	4b7d      	ldr	r3, [pc, #500]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a7c      	ldr	r2, [pc, #496]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 8002a32:	f043 0308 	orr.w	r3, r3, #8
 8002a36:	6013      	str	r3, [r2, #0]
 8002a38:	4b7a      	ldr	r3, [pc, #488]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6a1b      	ldr	r3, [r3, #32]
 8002a44:	4977      	ldr	r1, [pc, #476]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a4a:	4b76      	ldr	r3, [pc, #472]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	69db      	ldr	r3, [r3, #28]
 8002a56:	021b      	lsls	r3, r3, #8
 8002a58:	4972      	ldr	r1, [pc, #456]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	604b      	str	r3, [r1, #4]
 8002a5e:	e025      	b.n	8002aac <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a60:	4b70      	ldr	r3, [pc, #448]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a6f      	ldr	r2, [pc, #444]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 8002a66:	f043 0308 	orr.w	r3, r3, #8
 8002a6a:	6013      	str	r3, [r2, #0]
 8002a6c:	4b6d      	ldr	r3, [pc, #436]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6a1b      	ldr	r3, [r3, #32]
 8002a78:	496a      	ldr	r1, [pc, #424]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a7e:	4b69      	ldr	r3, [pc, #420]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	69db      	ldr	r3, [r3, #28]
 8002a8a:	021b      	lsls	r3, r3, #8
 8002a8c:	4965      	ldr	r1, [pc, #404]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d109      	bne.n	8002aac <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6a1b      	ldr	r3, [r3, #32]
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f000 fcc7 	bl	8003430 <RCC_SetFlashLatencyFromMSIRange>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d001      	beq.n	8002aac <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e34d      	b.n	8003148 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002aac:	f000 fc36 	bl	800331c <HAL_RCC_GetSysClockFreq>
 8002ab0:	4601      	mov	r1, r0
 8002ab2:	4b5c      	ldr	r3, [pc, #368]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	091b      	lsrs	r3, r3, #4
 8002ab8:	f003 030f 	and.w	r3, r3, #15
 8002abc:	4a5a      	ldr	r2, [pc, #360]	; (8002c28 <HAL_RCC_OscConfig+0x29c>)
 8002abe:	5cd3      	ldrb	r3, [r2, r3]
 8002ac0:	f003 031f 	and.w	r3, r3, #31
 8002ac4:	fa21 f303 	lsr.w	r3, r1, r3
 8002ac8:	4a58      	ldr	r2, [pc, #352]	; (8002c2c <HAL_RCC_OscConfig+0x2a0>)
 8002aca:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002acc:	4b58      	ldr	r3, [pc, #352]	; (8002c30 <HAL_RCC_OscConfig+0x2a4>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f7fe fba9 	bl	8001228 <HAL_InitTick>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002ada:	7bfb      	ldrb	r3, [r7, #15]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d052      	beq.n	8002b86 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002ae0:	7bfb      	ldrb	r3, [r7, #15]
 8002ae2:	e331      	b.n	8003148 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	699b      	ldr	r3, [r3, #24]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d032      	beq.n	8002b52 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002aec:	4b4d      	ldr	r3, [pc, #308]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a4c      	ldr	r2, [pc, #304]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 8002af2:	f043 0301 	orr.w	r3, r3, #1
 8002af6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002af8:	f7fe fbe6 	bl	80012c8 <HAL_GetTick>
 8002afc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002afe:	e008      	b.n	8002b12 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b00:	f7fe fbe2 	bl	80012c8 <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d901      	bls.n	8002b12 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e31a      	b.n	8003148 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b12:	4b44      	ldr	r3, [pc, #272]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0302 	and.w	r3, r3, #2
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d0f0      	beq.n	8002b00 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b1e:	4b41      	ldr	r3, [pc, #260]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a40      	ldr	r2, [pc, #256]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 8002b24:	f043 0308 	orr.w	r3, r3, #8
 8002b28:	6013      	str	r3, [r2, #0]
 8002b2a:	4b3e      	ldr	r3, [pc, #248]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6a1b      	ldr	r3, [r3, #32]
 8002b36:	493b      	ldr	r1, [pc, #236]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b3c:	4b39      	ldr	r3, [pc, #228]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	69db      	ldr	r3, [r3, #28]
 8002b48:	021b      	lsls	r3, r3, #8
 8002b4a:	4936      	ldr	r1, [pc, #216]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	604b      	str	r3, [r1, #4]
 8002b50:	e01a      	b.n	8002b88 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002b52:	4b34      	ldr	r3, [pc, #208]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a33      	ldr	r2, [pc, #204]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 8002b58:	f023 0301 	bic.w	r3, r3, #1
 8002b5c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b5e:	f7fe fbb3 	bl	80012c8 <HAL_GetTick>
 8002b62:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002b64:	e008      	b.n	8002b78 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b66:	f7fe fbaf 	bl	80012c8 <HAL_GetTick>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	1ad3      	subs	r3, r2, r3
 8002b70:	2b02      	cmp	r3, #2
 8002b72:	d901      	bls.n	8002b78 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002b74:	2303      	movs	r3, #3
 8002b76:	e2e7      	b.n	8003148 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002b78:	4b2a      	ldr	r3, [pc, #168]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0302 	and.w	r3, r3, #2
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d1f0      	bne.n	8002b66 <HAL_RCC_OscConfig+0x1da>
 8002b84:	e000      	b.n	8002b88 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002b86:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 0301 	and.w	r3, r3, #1
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d074      	beq.n	8002c7e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002b94:	69bb      	ldr	r3, [r7, #24]
 8002b96:	2b08      	cmp	r3, #8
 8002b98:	d005      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x21a>
 8002b9a:	69bb      	ldr	r3, [r7, #24]
 8002b9c:	2b0c      	cmp	r3, #12
 8002b9e:	d10e      	bne.n	8002bbe <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	2b03      	cmp	r3, #3
 8002ba4:	d10b      	bne.n	8002bbe <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ba6:	4b1f      	ldr	r3, [pc, #124]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d064      	beq.n	8002c7c <HAL_RCC_OscConfig+0x2f0>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d160      	bne.n	8002c7c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e2c4      	b.n	8003148 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bc6:	d106      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x24a>
 8002bc8:	4b16      	ldr	r3, [pc, #88]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a15      	ldr	r2, [pc, #84]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 8002bce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bd2:	6013      	str	r3, [r2, #0]
 8002bd4:	e01d      	b.n	8002c12 <HAL_RCC_OscConfig+0x286>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bde:	d10c      	bne.n	8002bfa <HAL_RCC_OscConfig+0x26e>
 8002be0:	4b10      	ldr	r3, [pc, #64]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a0f      	ldr	r2, [pc, #60]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 8002be6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bea:	6013      	str	r3, [r2, #0]
 8002bec:	4b0d      	ldr	r3, [pc, #52]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a0c      	ldr	r2, [pc, #48]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 8002bf2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bf6:	6013      	str	r3, [r2, #0]
 8002bf8:	e00b      	b.n	8002c12 <HAL_RCC_OscConfig+0x286>
 8002bfa:	4b0a      	ldr	r3, [pc, #40]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a09      	ldr	r2, [pc, #36]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 8002c00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c04:	6013      	str	r3, [r2, #0]
 8002c06:	4b07      	ldr	r3, [pc, #28]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a06      	ldr	r2, [pc, #24]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 8002c0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c10:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d01c      	beq.n	8002c54 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c1a:	f7fe fb55 	bl	80012c8 <HAL_GetTick>
 8002c1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c20:	e011      	b.n	8002c46 <HAL_RCC_OscConfig+0x2ba>
 8002c22:	bf00      	nop
 8002c24:	40021000 	.word	0x40021000
 8002c28:	08004f80 	.word	0x08004f80
 8002c2c:	20000004 	.word	0x20000004
 8002c30:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c34:	f7fe fb48 	bl	80012c8 <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	2b64      	cmp	r3, #100	; 0x64
 8002c40:	d901      	bls.n	8002c46 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e280      	b.n	8003148 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c46:	4baf      	ldr	r3, [pc, #700]	; (8002f04 <HAL_RCC_OscConfig+0x578>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d0f0      	beq.n	8002c34 <HAL_RCC_OscConfig+0x2a8>
 8002c52:	e014      	b.n	8002c7e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c54:	f7fe fb38 	bl	80012c8 <HAL_GetTick>
 8002c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c5a:	e008      	b.n	8002c6e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c5c:	f7fe fb34 	bl	80012c8 <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	2b64      	cmp	r3, #100	; 0x64
 8002c68:	d901      	bls.n	8002c6e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e26c      	b.n	8003148 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c6e:	4ba5      	ldr	r3, [pc, #660]	; (8002f04 <HAL_RCC_OscConfig+0x578>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d1f0      	bne.n	8002c5c <HAL_RCC_OscConfig+0x2d0>
 8002c7a:	e000      	b.n	8002c7e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0302 	and.w	r3, r3, #2
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d060      	beq.n	8002d4c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002c8a:	69bb      	ldr	r3, [r7, #24]
 8002c8c:	2b04      	cmp	r3, #4
 8002c8e:	d005      	beq.n	8002c9c <HAL_RCC_OscConfig+0x310>
 8002c90:	69bb      	ldr	r3, [r7, #24]
 8002c92:	2b0c      	cmp	r3, #12
 8002c94:	d119      	bne.n	8002cca <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	2b02      	cmp	r3, #2
 8002c9a:	d116      	bne.n	8002cca <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c9c:	4b99      	ldr	r3, [pc, #612]	; (8002f04 <HAL_RCC_OscConfig+0x578>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d005      	beq.n	8002cb4 <HAL_RCC_OscConfig+0x328>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d101      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e249      	b.n	8003148 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cb4:	4b93      	ldr	r3, [pc, #588]	; (8002f04 <HAL_RCC_OscConfig+0x578>)
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	691b      	ldr	r3, [r3, #16]
 8002cc0:	061b      	lsls	r3, r3, #24
 8002cc2:	4990      	ldr	r1, [pc, #576]	; (8002f04 <HAL_RCC_OscConfig+0x578>)
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002cc8:	e040      	b.n	8002d4c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d023      	beq.n	8002d1a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cd2:	4b8c      	ldr	r3, [pc, #560]	; (8002f04 <HAL_RCC_OscConfig+0x578>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a8b      	ldr	r2, [pc, #556]	; (8002f04 <HAL_RCC_OscConfig+0x578>)
 8002cd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cdc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cde:	f7fe faf3 	bl	80012c8 <HAL_GetTick>
 8002ce2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ce4:	e008      	b.n	8002cf8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ce6:	f7fe faef 	bl	80012c8 <HAL_GetTick>
 8002cea:	4602      	mov	r2, r0
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	d901      	bls.n	8002cf8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	e227      	b.n	8003148 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cf8:	4b82      	ldr	r3, [pc, #520]	; (8002f04 <HAL_RCC_OscConfig+0x578>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d0f0      	beq.n	8002ce6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d04:	4b7f      	ldr	r3, [pc, #508]	; (8002f04 <HAL_RCC_OscConfig+0x578>)
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	691b      	ldr	r3, [r3, #16]
 8002d10:	061b      	lsls	r3, r3, #24
 8002d12:	497c      	ldr	r1, [pc, #496]	; (8002f04 <HAL_RCC_OscConfig+0x578>)
 8002d14:	4313      	orrs	r3, r2
 8002d16:	604b      	str	r3, [r1, #4]
 8002d18:	e018      	b.n	8002d4c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d1a:	4b7a      	ldr	r3, [pc, #488]	; (8002f04 <HAL_RCC_OscConfig+0x578>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a79      	ldr	r2, [pc, #484]	; (8002f04 <HAL_RCC_OscConfig+0x578>)
 8002d20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d26:	f7fe facf 	bl	80012c8 <HAL_GetTick>
 8002d2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d2c:	e008      	b.n	8002d40 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d2e:	f7fe facb 	bl	80012c8 <HAL_GetTick>
 8002d32:	4602      	mov	r2, r0
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d901      	bls.n	8002d40 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	e203      	b.n	8003148 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d40:	4b70      	ldr	r3, [pc, #448]	; (8002f04 <HAL_RCC_OscConfig+0x578>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d1f0      	bne.n	8002d2e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0308 	and.w	r3, r3, #8
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d03c      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	695b      	ldr	r3, [r3, #20]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d01c      	beq.n	8002d9a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d60:	4b68      	ldr	r3, [pc, #416]	; (8002f04 <HAL_RCC_OscConfig+0x578>)
 8002d62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d66:	4a67      	ldr	r2, [pc, #412]	; (8002f04 <HAL_RCC_OscConfig+0x578>)
 8002d68:	f043 0301 	orr.w	r3, r3, #1
 8002d6c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d70:	f7fe faaa 	bl	80012c8 <HAL_GetTick>
 8002d74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d76:	e008      	b.n	8002d8a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d78:	f7fe faa6 	bl	80012c8 <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d901      	bls.n	8002d8a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e1de      	b.n	8003148 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d8a:	4b5e      	ldr	r3, [pc, #376]	; (8002f04 <HAL_RCC_OscConfig+0x578>)
 8002d8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d90:	f003 0302 	and.w	r3, r3, #2
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d0ef      	beq.n	8002d78 <HAL_RCC_OscConfig+0x3ec>
 8002d98:	e01b      	b.n	8002dd2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d9a:	4b5a      	ldr	r3, [pc, #360]	; (8002f04 <HAL_RCC_OscConfig+0x578>)
 8002d9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002da0:	4a58      	ldr	r2, [pc, #352]	; (8002f04 <HAL_RCC_OscConfig+0x578>)
 8002da2:	f023 0301 	bic.w	r3, r3, #1
 8002da6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002daa:	f7fe fa8d 	bl	80012c8 <HAL_GetTick>
 8002dae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002db0:	e008      	b.n	8002dc4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002db2:	f7fe fa89 	bl	80012c8 <HAL_GetTick>
 8002db6:	4602      	mov	r2, r0
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	d901      	bls.n	8002dc4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	e1c1      	b.n	8003148 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002dc4:	4b4f      	ldr	r3, [pc, #316]	; (8002f04 <HAL_RCC_OscConfig+0x578>)
 8002dc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dca:	f003 0302 	and.w	r3, r3, #2
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d1ef      	bne.n	8002db2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0304 	and.w	r3, r3, #4
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	f000 80a6 	beq.w	8002f2c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002de0:	2300      	movs	r3, #0
 8002de2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002de4:	4b47      	ldr	r3, [pc, #284]	; (8002f04 <HAL_RCC_OscConfig+0x578>)
 8002de6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002de8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d10d      	bne.n	8002e0c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002df0:	4b44      	ldr	r3, [pc, #272]	; (8002f04 <HAL_RCC_OscConfig+0x578>)
 8002df2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002df4:	4a43      	ldr	r2, [pc, #268]	; (8002f04 <HAL_RCC_OscConfig+0x578>)
 8002df6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dfa:	6593      	str	r3, [r2, #88]	; 0x58
 8002dfc:	4b41      	ldr	r3, [pc, #260]	; (8002f04 <HAL_RCC_OscConfig+0x578>)
 8002dfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e04:	60bb      	str	r3, [r7, #8]
 8002e06:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e0c:	4b3e      	ldr	r3, [pc, #248]	; (8002f08 <HAL_RCC_OscConfig+0x57c>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d118      	bne.n	8002e4a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e18:	4b3b      	ldr	r3, [pc, #236]	; (8002f08 <HAL_RCC_OscConfig+0x57c>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a3a      	ldr	r2, [pc, #232]	; (8002f08 <HAL_RCC_OscConfig+0x57c>)
 8002e1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e22:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e24:	f7fe fa50 	bl	80012c8 <HAL_GetTick>
 8002e28:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e2a:	e008      	b.n	8002e3e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e2c:	f7fe fa4c 	bl	80012c8 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d901      	bls.n	8002e3e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e184      	b.n	8003148 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e3e:	4b32      	ldr	r3, [pc, #200]	; (8002f08 <HAL_RCC_OscConfig+0x57c>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d0f0      	beq.n	8002e2c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d108      	bne.n	8002e64 <HAL_RCC_OscConfig+0x4d8>
 8002e52:	4b2c      	ldr	r3, [pc, #176]	; (8002f04 <HAL_RCC_OscConfig+0x578>)
 8002e54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e58:	4a2a      	ldr	r2, [pc, #168]	; (8002f04 <HAL_RCC_OscConfig+0x578>)
 8002e5a:	f043 0301 	orr.w	r3, r3, #1
 8002e5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e62:	e024      	b.n	8002eae <HAL_RCC_OscConfig+0x522>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	2b05      	cmp	r3, #5
 8002e6a:	d110      	bne.n	8002e8e <HAL_RCC_OscConfig+0x502>
 8002e6c:	4b25      	ldr	r3, [pc, #148]	; (8002f04 <HAL_RCC_OscConfig+0x578>)
 8002e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e72:	4a24      	ldr	r2, [pc, #144]	; (8002f04 <HAL_RCC_OscConfig+0x578>)
 8002e74:	f043 0304 	orr.w	r3, r3, #4
 8002e78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e7c:	4b21      	ldr	r3, [pc, #132]	; (8002f04 <HAL_RCC_OscConfig+0x578>)
 8002e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e82:	4a20      	ldr	r2, [pc, #128]	; (8002f04 <HAL_RCC_OscConfig+0x578>)
 8002e84:	f043 0301 	orr.w	r3, r3, #1
 8002e88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e8c:	e00f      	b.n	8002eae <HAL_RCC_OscConfig+0x522>
 8002e8e:	4b1d      	ldr	r3, [pc, #116]	; (8002f04 <HAL_RCC_OscConfig+0x578>)
 8002e90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e94:	4a1b      	ldr	r2, [pc, #108]	; (8002f04 <HAL_RCC_OscConfig+0x578>)
 8002e96:	f023 0301 	bic.w	r3, r3, #1
 8002e9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e9e:	4b19      	ldr	r3, [pc, #100]	; (8002f04 <HAL_RCC_OscConfig+0x578>)
 8002ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ea4:	4a17      	ldr	r2, [pc, #92]	; (8002f04 <HAL_RCC_OscConfig+0x578>)
 8002ea6:	f023 0304 	bic.w	r3, r3, #4
 8002eaa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d016      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eb6:	f7fe fa07 	bl	80012c8 <HAL_GetTick>
 8002eba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ebc:	e00a      	b.n	8002ed4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ebe:	f7fe fa03 	bl	80012c8 <HAL_GetTick>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d901      	bls.n	8002ed4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002ed0:	2303      	movs	r3, #3
 8002ed2:	e139      	b.n	8003148 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ed4:	4b0b      	ldr	r3, [pc, #44]	; (8002f04 <HAL_RCC_OscConfig+0x578>)
 8002ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eda:	f003 0302 	and.w	r3, r3, #2
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d0ed      	beq.n	8002ebe <HAL_RCC_OscConfig+0x532>
 8002ee2:	e01a      	b.n	8002f1a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ee4:	f7fe f9f0 	bl	80012c8 <HAL_GetTick>
 8002ee8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002eea:	e00f      	b.n	8002f0c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eec:	f7fe f9ec 	bl	80012c8 <HAL_GetTick>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d906      	bls.n	8002f0c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e122      	b.n	8003148 <HAL_RCC_OscConfig+0x7bc>
 8002f02:	bf00      	nop
 8002f04:	40021000 	.word	0x40021000
 8002f08:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f0c:	4b90      	ldr	r3, [pc, #576]	; (8003150 <HAL_RCC_OscConfig+0x7c4>)
 8002f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f12:	f003 0302 	and.w	r3, r3, #2
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d1e8      	bne.n	8002eec <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f1a:	7ffb      	ldrb	r3, [r7, #31]
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d105      	bne.n	8002f2c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f20:	4b8b      	ldr	r3, [pc, #556]	; (8003150 <HAL_RCC_OscConfig+0x7c4>)
 8002f22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f24:	4a8a      	ldr	r2, [pc, #552]	; (8003150 <HAL_RCC_OscConfig+0x7c4>)
 8002f26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f2a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	f000 8108 	beq.w	8003146 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	f040 80d0 	bne.w	80030e0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002f40:	4b83      	ldr	r3, [pc, #524]	; (8003150 <HAL_RCC_OscConfig+0x7c4>)
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	f003 0203 	and.w	r2, r3, #3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d130      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5e:	3b01      	subs	r3, #1
 8002f60:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d127      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f70:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d11f      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002f80:	2a07      	cmp	r2, #7
 8002f82:	bf14      	ite	ne
 8002f84:	2201      	movne	r2, #1
 8002f86:	2200      	moveq	r2, #0
 8002f88:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d113      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f98:	085b      	lsrs	r3, r3, #1
 8002f9a:	3b01      	subs	r3, #1
 8002f9c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d109      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fac:	085b      	lsrs	r3, r3, #1
 8002fae:	3b01      	subs	r3, #1
 8002fb0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d06e      	beq.n	8003094 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002fb6:	69bb      	ldr	r3, [r7, #24]
 8002fb8:	2b0c      	cmp	r3, #12
 8002fba:	d069      	beq.n	8003090 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002fbc:	4b64      	ldr	r3, [pc, #400]	; (8003150 <HAL_RCC_OscConfig+0x7c4>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d105      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002fc8:	4b61      	ldr	r3, [pc, #388]	; (8003150 <HAL_RCC_OscConfig+0x7c4>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d001      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e0b7      	b.n	8003148 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002fd8:	4b5d      	ldr	r3, [pc, #372]	; (8003150 <HAL_RCC_OscConfig+0x7c4>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a5c      	ldr	r2, [pc, #368]	; (8003150 <HAL_RCC_OscConfig+0x7c4>)
 8002fde:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fe2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002fe4:	f7fe f970 	bl	80012c8 <HAL_GetTick>
 8002fe8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fea:	e008      	b.n	8002ffe <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fec:	f7fe f96c 	bl	80012c8 <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d901      	bls.n	8002ffe <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e0a4      	b.n	8003148 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ffe:	4b54      	ldr	r3, [pc, #336]	; (8003150 <HAL_RCC_OscConfig+0x7c4>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d1f0      	bne.n	8002fec <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800300a:	4b51      	ldr	r3, [pc, #324]	; (8003150 <HAL_RCC_OscConfig+0x7c4>)
 800300c:	68da      	ldr	r2, [r3, #12]
 800300e:	4b51      	ldr	r3, [pc, #324]	; (8003154 <HAL_RCC_OscConfig+0x7c8>)
 8003010:	4013      	ands	r3, r2
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800301a:	3a01      	subs	r2, #1
 800301c:	0112      	lsls	r2, r2, #4
 800301e:	4311      	orrs	r1, r2
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003024:	0212      	lsls	r2, r2, #8
 8003026:	4311      	orrs	r1, r2
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800302c:	0852      	lsrs	r2, r2, #1
 800302e:	3a01      	subs	r2, #1
 8003030:	0552      	lsls	r2, r2, #21
 8003032:	4311      	orrs	r1, r2
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003038:	0852      	lsrs	r2, r2, #1
 800303a:	3a01      	subs	r2, #1
 800303c:	0652      	lsls	r2, r2, #25
 800303e:	4311      	orrs	r1, r2
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003044:	0912      	lsrs	r2, r2, #4
 8003046:	0452      	lsls	r2, r2, #17
 8003048:	430a      	orrs	r2, r1
 800304a:	4941      	ldr	r1, [pc, #260]	; (8003150 <HAL_RCC_OscConfig+0x7c4>)
 800304c:	4313      	orrs	r3, r2
 800304e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003050:	4b3f      	ldr	r3, [pc, #252]	; (8003150 <HAL_RCC_OscConfig+0x7c4>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a3e      	ldr	r2, [pc, #248]	; (8003150 <HAL_RCC_OscConfig+0x7c4>)
 8003056:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800305a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800305c:	4b3c      	ldr	r3, [pc, #240]	; (8003150 <HAL_RCC_OscConfig+0x7c4>)
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	4a3b      	ldr	r2, [pc, #236]	; (8003150 <HAL_RCC_OscConfig+0x7c4>)
 8003062:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003066:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003068:	f7fe f92e 	bl	80012c8 <HAL_GetTick>
 800306c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800306e:	e008      	b.n	8003082 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003070:	f7fe f92a 	bl	80012c8 <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	2b02      	cmp	r3, #2
 800307c:	d901      	bls.n	8003082 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e062      	b.n	8003148 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003082:	4b33      	ldr	r3, [pc, #204]	; (8003150 <HAL_RCC_OscConfig+0x7c4>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d0f0      	beq.n	8003070 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800308e:	e05a      	b.n	8003146 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e059      	b.n	8003148 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003094:	4b2e      	ldr	r3, [pc, #184]	; (8003150 <HAL_RCC_OscConfig+0x7c4>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d152      	bne.n	8003146 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80030a0:	4b2b      	ldr	r3, [pc, #172]	; (8003150 <HAL_RCC_OscConfig+0x7c4>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a2a      	ldr	r2, [pc, #168]	; (8003150 <HAL_RCC_OscConfig+0x7c4>)
 80030a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030aa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80030ac:	4b28      	ldr	r3, [pc, #160]	; (8003150 <HAL_RCC_OscConfig+0x7c4>)
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	4a27      	ldr	r2, [pc, #156]	; (8003150 <HAL_RCC_OscConfig+0x7c4>)
 80030b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030b6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80030b8:	f7fe f906 	bl	80012c8 <HAL_GetTick>
 80030bc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030be:	e008      	b.n	80030d2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030c0:	f7fe f902 	bl	80012c8 <HAL_GetTick>
 80030c4:	4602      	mov	r2, r0
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	d901      	bls.n	80030d2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e03a      	b.n	8003148 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030d2:	4b1f      	ldr	r3, [pc, #124]	; (8003150 <HAL_RCC_OscConfig+0x7c4>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d0f0      	beq.n	80030c0 <HAL_RCC_OscConfig+0x734>
 80030de:	e032      	b.n	8003146 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80030e0:	69bb      	ldr	r3, [r7, #24]
 80030e2:	2b0c      	cmp	r3, #12
 80030e4:	d02d      	beq.n	8003142 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030e6:	4b1a      	ldr	r3, [pc, #104]	; (8003150 <HAL_RCC_OscConfig+0x7c4>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a19      	ldr	r2, [pc, #100]	; (8003150 <HAL_RCC_OscConfig+0x7c4>)
 80030ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030f0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80030f2:	4b17      	ldr	r3, [pc, #92]	; (8003150 <HAL_RCC_OscConfig+0x7c4>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d105      	bne.n	800310a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80030fe:	4b14      	ldr	r3, [pc, #80]	; (8003150 <HAL_RCC_OscConfig+0x7c4>)
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	4a13      	ldr	r2, [pc, #76]	; (8003150 <HAL_RCC_OscConfig+0x7c4>)
 8003104:	f023 0303 	bic.w	r3, r3, #3
 8003108:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800310a:	4b11      	ldr	r3, [pc, #68]	; (8003150 <HAL_RCC_OscConfig+0x7c4>)
 800310c:	68db      	ldr	r3, [r3, #12]
 800310e:	4a10      	ldr	r2, [pc, #64]	; (8003150 <HAL_RCC_OscConfig+0x7c4>)
 8003110:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003114:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003118:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800311a:	f7fe f8d5 	bl	80012c8 <HAL_GetTick>
 800311e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003120:	e008      	b.n	8003134 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003122:	f7fe f8d1 	bl	80012c8 <HAL_GetTick>
 8003126:	4602      	mov	r2, r0
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	2b02      	cmp	r3, #2
 800312e:	d901      	bls.n	8003134 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8003130:	2303      	movs	r3, #3
 8003132:	e009      	b.n	8003148 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003134:	4b06      	ldr	r3, [pc, #24]	; (8003150 <HAL_RCC_OscConfig+0x7c4>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800313c:	2b00      	cmp	r3, #0
 800313e:	d1f0      	bne.n	8003122 <HAL_RCC_OscConfig+0x796>
 8003140:	e001      	b.n	8003146 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e000      	b.n	8003148 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8003146:	2300      	movs	r3, #0
}
 8003148:	4618      	mov	r0, r3
 800314a:	3720      	adds	r7, #32
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}
 8003150:	40021000 	.word	0x40021000
 8003154:	f99d808c 	.word	0xf99d808c

08003158 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d101      	bne.n	800316c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e0c8      	b.n	80032fe <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800316c:	4b66      	ldr	r3, [pc, #408]	; (8003308 <HAL_RCC_ClockConfig+0x1b0>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0307 	and.w	r3, r3, #7
 8003174:	683a      	ldr	r2, [r7, #0]
 8003176:	429a      	cmp	r2, r3
 8003178:	d910      	bls.n	800319c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800317a:	4b63      	ldr	r3, [pc, #396]	; (8003308 <HAL_RCC_ClockConfig+0x1b0>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f023 0207 	bic.w	r2, r3, #7
 8003182:	4961      	ldr	r1, [pc, #388]	; (8003308 <HAL_RCC_ClockConfig+0x1b0>)
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	4313      	orrs	r3, r2
 8003188:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800318a:	4b5f      	ldr	r3, [pc, #380]	; (8003308 <HAL_RCC_ClockConfig+0x1b0>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0307 	and.w	r3, r3, #7
 8003192:	683a      	ldr	r2, [r7, #0]
 8003194:	429a      	cmp	r2, r3
 8003196:	d001      	beq.n	800319c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e0b0      	b.n	80032fe <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0301 	and.w	r3, r3, #1
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d04c      	beq.n	8003242 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	2b03      	cmp	r3, #3
 80031ae:	d107      	bne.n	80031c0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031b0:	4b56      	ldr	r3, [pc, #344]	; (800330c <HAL_RCC_ClockConfig+0x1b4>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d121      	bne.n	8003200 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e09e      	b.n	80032fe <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	d107      	bne.n	80031d8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031c8:	4b50      	ldr	r3, [pc, #320]	; (800330c <HAL_RCC_ClockConfig+0x1b4>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d115      	bne.n	8003200 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e092      	b.n	80032fe <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d107      	bne.n	80031f0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80031e0:	4b4a      	ldr	r3, [pc, #296]	; (800330c <HAL_RCC_ClockConfig+0x1b4>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0302 	and.w	r3, r3, #2
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d109      	bne.n	8003200 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e086      	b.n	80032fe <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031f0:	4b46      	ldr	r3, [pc, #280]	; (800330c <HAL_RCC_ClockConfig+0x1b4>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d101      	bne.n	8003200 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e07e      	b.n	80032fe <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003200:	4b42      	ldr	r3, [pc, #264]	; (800330c <HAL_RCC_ClockConfig+0x1b4>)
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	f023 0203 	bic.w	r2, r3, #3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	493f      	ldr	r1, [pc, #252]	; (800330c <HAL_RCC_ClockConfig+0x1b4>)
 800320e:	4313      	orrs	r3, r2
 8003210:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003212:	f7fe f859 	bl	80012c8 <HAL_GetTick>
 8003216:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003218:	e00a      	b.n	8003230 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800321a:	f7fe f855 	bl	80012c8 <HAL_GetTick>
 800321e:	4602      	mov	r2, r0
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	f241 3288 	movw	r2, #5000	; 0x1388
 8003228:	4293      	cmp	r3, r2
 800322a:	d901      	bls.n	8003230 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800322c:	2303      	movs	r3, #3
 800322e:	e066      	b.n	80032fe <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003230:	4b36      	ldr	r3, [pc, #216]	; (800330c <HAL_RCC_ClockConfig+0x1b4>)
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	f003 020c 	and.w	r2, r3, #12
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	429a      	cmp	r2, r3
 8003240:	d1eb      	bne.n	800321a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0302 	and.w	r3, r3, #2
 800324a:	2b00      	cmp	r3, #0
 800324c:	d008      	beq.n	8003260 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800324e:	4b2f      	ldr	r3, [pc, #188]	; (800330c <HAL_RCC_ClockConfig+0x1b4>)
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	492c      	ldr	r1, [pc, #176]	; (800330c <HAL_RCC_ClockConfig+0x1b4>)
 800325c:	4313      	orrs	r3, r2
 800325e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003260:	4b29      	ldr	r3, [pc, #164]	; (8003308 <HAL_RCC_ClockConfig+0x1b0>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0307 	and.w	r3, r3, #7
 8003268:	683a      	ldr	r2, [r7, #0]
 800326a:	429a      	cmp	r2, r3
 800326c:	d210      	bcs.n	8003290 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800326e:	4b26      	ldr	r3, [pc, #152]	; (8003308 <HAL_RCC_ClockConfig+0x1b0>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f023 0207 	bic.w	r2, r3, #7
 8003276:	4924      	ldr	r1, [pc, #144]	; (8003308 <HAL_RCC_ClockConfig+0x1b0>)
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	4313      	orrs	r3, r2
 800327c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800327e:	4b22      	ldr	r3, [pc, #136]	; (8003308 <HAL_RCC_ClockConfig+0x1b0>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0307 	and.w	r3, r3, #7
 8003286:	683a      	ldr	r2, [r7, #0]
 8003288:	429a      	cmp	r2, r3
 800328a:	d001      	beq.n	8003290 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e036      	b.n	80032fe <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0304 	and.w	r3, r3, #4
 8003298:	2b00      	cmp	r3, #0
 800329a:	d008      	beq.n	80032ae <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800329c:	4b1b      	ldr	r3, [pc, #108]	; (800330c <HAL_RCC_ClockConfig+0x1b4>)
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	4918      	ldr	r1, [pc, #96]	; (800330c <HAL_RCC_ClockConfig+0x1b4>)
 80032aa:	4313      	orrs	r3, r2
 80032ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0308 	and.w	r3, r3, #8
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d009      	beq.n	80032ce <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032ba:	4b14      	ldr	r3, [pc, #80]	; (800330c <HAL_RCC_ClockConfig+0x1b4>)
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	691b      	ldr	r3, [r3, #16]
 80032c6:	00db      	lsls	r3, r3, #3
 80032c8:	4910      	ldr	r1, [pc, #64]	; (800330c <HAL_RCC_ClockConfig+0x1b4>)
 80032ca:	4313      	orrs	r3, r2
 80032cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80032ce:	f000 f825 	bl	800331c <HAL_RCC_GetSysClockFreq>
 80032d2:	4601      	mov	r1, r0
 80032d4:	4b0d      	ldr	r3, [pc, #52]	; (800330c <HAL_RCC_ClockConfig+0x1b4>)
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	091b      	lsrs	r3, r3, #4
 80032da:	f003 030f 	and.w	r3, r3, #15
 80032de:	4a0c      	ldr	r2, [pc, #48]	; (8003310 <HAL_RCC_ClockConfig+0x1b8>)
 80032e0:	5cd3      	ldrb	r3, [r2, r3]
 80032e2:	f003 031f 	and.w	r3, r3, #31
 80032e6:	fa21 f303 	lsr.w	r3, r1, r3
 80032ea:	4a0a      	ldr	r2, [pc, #40]	; (8003314 <HAL_RCC_ClockConfig+0x1bc>)
 80032ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80032ee:	4b0a      	ldr	r3, [pc, #40]	; (8003318 <HAL_RCC_ClockConfig+0x1c0>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4618      	mov	r0, r3
 80032f4:	f7fd ff98 	bl	8001228 <HAL_InitTick>
 80032f8:	4603      	mov	r3, r0
 80032fa:	72fb      	strb	r3, [r7, #11]

  return status;
 80032fc:	7afb      	ldrb	r3, [r7, #11]
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3710      	adds	r7, #16
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	40022000 	.word	0x40022000
 800330c:	40021000 	.word	0x40021000
 8003310:	08004f80 	.word	0x08004f80
 8003314:	20000004 	.word	0x20000004
 8003318:	20000008 	.word	0x20000008

0800331c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800331c:	b480      	push	{r7}
 800331e:	b089      	sub	sp, #36	; 0x24
 8003320:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003322:	2300      	movs	r3, #0
 8003324:	61fb      	str	r3, [r7, #28]
 8003326:	2300      	movs	r3, #0
 8003328:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800332a:	4b3d      	ldr	r3, [pc, #244]	; (8003420 <HAL_RCC_GetSysClockFreq+0x104>)
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	f003 030c 	and.w	r3, r3, #12
 8003332:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003334:	4b3a      	ldr	r3, [pc, #232]	; (8003420 <HAL_RCC_GetSysClockFreq+0x104>)
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	f003 0303 	and.w	r3, r3, #3
 800333c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d005      	beq.n	8003350 <HAL_RCC_GetSysClockFreq+0x34>
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	2b0c      	cmp	r3, #12
 8003348:	d121      	bne.n	800338e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2b01      	cmp	r3, #1
 800334e:	d11e      	bne.n	800338e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003350:	4b33      	ldr	r3, [pc, #204]	; (8003420 <HAL_RCC_GetSysClockFreq+0x104>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 0308 	and.w	r3, r3, #8
 8003358:	2b00      	cmp	r3, #0
 800335a:	d107      	bne.n	800336c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800335c:	4b30      	ldr	r3, [pc, #192]	; (8003420 <HAL_RCC_GetSysClockFreq+0x104>)
 800335e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003362:	0a1b      	lsrs	r3, r3, #8
 8003364:	f003 030f 	and.w	r3, r3, #15
 8003368:	61fb      	str	r3, [r7, #28]
 800336a:	e005      	b.n	8003378 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800336c:	4b2c      	ldr	r3, [pc, #176]	; (8003420 <HAL_RCC_GetSysClockFreq+0x104>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	091b      	lsrs	r3, r3, #4
 8003372:	f003 030f 	and.w	r3, r3, #15
 8003376:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003378:	4a2a      	ldr	r2, [pc, #168]	; (8003424 <HAL_RCC_GetSysClockFreq+0x108>)
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003380:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d10d      	bne.n	80033a4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800338c:	e00a      	b.n	80033a4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	2b04      	cmp	r3, #4
 8003392:	d102      	bne.n	800339a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003394:	4b24      	ldr	r3, [pc, #144]	; (8003428 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003396:	61bb      	str	r3, [r7, #24]
 8003398:	e004      	b.n	80033a4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	2b08      	cmp	r3, #8
 800339e:	d101      	bne.n	80033a4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80033a0:	4b22      	ldr	r3, [pc, #136]	; (800342c <HAL_RCC_GetSysClockFreq+0x110>)
 80033a2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	2b0c      	cmp	r3, #12
 80033a8:	d133      	bne.n	8003412 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80033aa:	4b1d      	ldr	r3, [pc, #116]	; (8003420 <HAL_RCC_GetSysClockFreq+0x104>)
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	f003 0303 	and.w	r3, r3, #3
 80033b2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d002      	beq.n	80033c0 <HAL_RCC_GetSysClockFreq+0xa4>
 80033ba:	2b03      	cmp	r3, #3
 80033bc:	d003      	beq.n	80033c6 <HAL_RCC_GetSysClockFreq+0xaa>
 80033be:	e005      	b.n	80033cc <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80033c0:	4b19      	ldr	r3, [pc, #100]	; (8003428 <HAL_RCC_GetSysClockFreq+0x10c>)
 80033c2:	617b      	str	r3, [r7, #20]
      break;
 80033c4:	e005      	b.n	80033d2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80033c6:	4b19      	ldr	r3, [pc, #100]	; (800342c <HAL_RCC_GetSysClockFreq+0x110>)
 80033c8:	617b      	str	r3, [r7, #20]
      break;
 80033ca:	e002      	b.n	80033d2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	617b      	str	r3, [r7, #20]
      break;
 80033d0:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80033d2:	4b13      	ldr	r3, [pc, #76]	; (8003420 <HAL_RCC_GetSysClockFreq+0x104>)
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	091b      	lsrs	r3, r3, #4
 80033d8:	f003 0307 	and.w	r3, r3, #7
 80033dc:	3301      	adds	r3, #1
 80033de:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80033e0:	4b0f      	ldr	r3, [pc, #60]	; (8003420 <HAL_RCC_GetSysClockFreq+0x104>)
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	0a1b      	lsrs	r3, r3, #8
 80033e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033ea:	697a      	ldr	r2, [r7, #20]
 80033ec:	fb02 f203 	mul.w	r2, r2, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80033f6:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80033f8:	4b09      	ldr	r3, [pc, #36]	; (8003420 <HAL_RCC_GetSysClockFreq+0x104>)
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	0e5b      	lsrs	r3, r3, #25
 80033fe:	f003 0303 	and.w	r3, r3, #3
 8003402:	3301      	adds	r3, #1
 8003404:	005b      	lsls	r3, r3, #1
 8003406:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003408:	697a      	ldr	r2, [r7, #20]
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003410:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003412:	69bb      	ldr	r3, [r7, #24]
}
 8003414:	4618      	mov	r0, r3
 8003416:	3724      	adds	r7, #36	; 0x24
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr
 8003420:	40021000 	.word	0x40021000
 8003424:	08004f90 	.word	0x08004f90
 8003428:	00f42400 	.word	0x00f42400
 800342c:	007a1200 	.word	0x007a1200

08003430 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b086      	sub	sp, #24
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003438:	2300      	movs	r3, #0
 800343a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800343c:	4b2a      	ldr	r3, [pc, #168]	; (80034e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800343e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003440:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003444:	2b00      	cmp	r3, #0
 8003446:	d003      	beq.n	8003450 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003448:	f7ff fa3c 	bl	80028c4 <HAL_PWREx_GetVoltageRange>
 800344c:	6178      	str	r0, [r7, #20]
 800344e:	e014      	b.n	800347a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003450:	4b25      	ldr	r3, [pc, #148]	; (80034e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003454:	4a24      	ldr	r2, [pc, #144]	; (80034e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003456:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800345a:	6593      	str	r3, [r2, #88]	; 0x58
 800345c:	4b22      	ldr	r3, [pc, #136]	; (80034e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800345e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003460:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003464:	60fb      	str	r3, [r7, #12]
 8003466:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003468:	f7ff fa2c 	bl	80028c4 <HAL_PWREx_GetVoltageRange>
 800346c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800346e:	4b1e      	ldr	r3, [pc, #120]	; (80034e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003472:	4a1d      	ldr	r2, [pc, #116]	; (80034e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003474:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003478:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003480:	d10b      	bne.n	800349a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2b80      	cmp	r3, #128	; 0x80
 8003486:	d919      	bls.n	80034bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2ba0      	cmp	r3, #160	; 0xa0
 800348c:	d902      	bls.n	8003494 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800348e:	2302      	movs	r3, #2
 8003490:	613b      	str	r3, [r7, #16]
 8003492:	e013      	b.n	80034bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003494:	2301      	movs	r3, #1
 8003496:	613b      	str	r3, [r7, #16]
 8003498:	e010      	b.n	80034bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2b80      	cmp	r3, #128	; 0x80
 800349e:	d902      	bls.n	80034a6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80034a0:	2303      	movs	r3, #3
 80034a2:	613b      	str	r3, [r7, #16]
 80034a4:	e00a      	b.n	80034bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2b80      	cmp	r3, #128	; 0x80
 80034aa:	d102      	bne.n	80034b2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80034ac:	2302      	movs	r3, #2
 80034ae:	613b      	str	r3, [r7, #16]
 80034b0:	e004      	b.n	80034bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2b70      	cmp	r3, #112	; 0x70
 80034b6:	d101      	bne.n	80034bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80034b8:	2301      	movs	r3, #1
 80034ba:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80034bc:	4b0b      	ldr	r3, [pc, #44]	; (80034ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f023 0207 	bic.w	r2, r3, #7
 80034c4:	4909      	ldr	r1, [pc, #36]	; (80034ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80034cc:	4b07      	ldr	r3, [pc, #28]	; (80034ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0307 	and.w	r3, r3, #7
 80034d4:	693a      	ldr	r2, [r7, #16]
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d001      	beq.n	80034de <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e000      	b.n	80034e0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80034de:	2300      	movs	r3, #0
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3718      	adds	r7, #24
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}
 80034e8:	40021000 	.word	0x40021000
 80034ec:	40022000 	.word	0x40022000

080034f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b086      	sub	sp, #24
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80034f8:	2300      	movs	r3, #0
 80034fa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80034fc:	2300      	movs	r3, #0
 80034fe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003508:	2b00      	cmp	r3, #0
 800350a:	d03f      	beq.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003510:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003514:	d01c      	beq.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8003516:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800351a:	d802      	bhi.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800351c:	2b00      	cmp	r3, #0
 800351e:	d00e      	beq.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8003520:	e01f      	b.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8003522:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003526:	d003      	beq.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003528:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800352c:	d01c      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800352e:	e018      	b.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003530:	4b85      	ldr	r3, [pc, #532]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	4a84      	ldr	r2, [pc, #528]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003536:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800353a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800353c:	e015      	b.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	3304      	adds	r3, #4
 8003542:	2100      	movs	r1, #0
 8003544:	4618      	mov	r0, r3
 8003546:	f000 fab9 	bl	8003abc <RCCEx_PLLSAI1_Config>
 800354a:	4603      	mov	r3, r0
 800354c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800354e:	e00c      	b.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	3320      	adds	r3, #32
 8003554:	2100      	movs	r1, #0
 8003556:	4618      	mov	r0, r3
 8003558:	f000 fba0 	bl	8003c9c <RCCEx_PLLSAI2_Config>
 800355c:	4603      	mov	r3, r0
 800355e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003560:	e003      	b.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	74fb      	strb	r3, [r7, #19]
      break;
 8003566:	e000      	b.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8003568:	bf00      	nop
    }

    if(ret == HAL_OK)
 800356a:	7cfb      	ldrb	r3, [r7, #19]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d10b      	bne.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003570:	4b75      	ldr	r3, [pc, #468]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003576:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800357e:	4972      	ldr	r1, [pc, #456]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003580:	4313      	orrs	r3, r2
 8003582:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003586:	e001      	b.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003588:	7cfb      	ldrb	r3, [r7, #19]
 800358a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003594:	2b00      	cmp	r3, #0
 8003596:	d03f      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800359c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035a0:	d01c      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0xec>
 80035a2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035a6:	d802      	bhi.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0xbe>
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d00e      	beq.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0xda>
 80035ac:	e01f      	b.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80035ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80035b2:	d003      	beq.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0xcc>
 80035b4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80035b8:	d01c      	beq.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x104>
 80035ba:	e018      	b.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80035bc:	4b62      	ldr	r3, [pc, #392]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	4a61      	ldr	r2, [pc, #388]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80035c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035c6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80035c8:	e015      	b.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	3304      	adds	r3, #4
 80035ce:	2100      	movs	r1, #0
 80035d0:	4618      	mov	r0, r3
 80035d2:	f000 fa73 	bl	8003abc <RCCEx_PLLSAI1_Config>
 80035d6:	4603      	mov	r3, r0
 80035d8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80035da:	e00c      	b.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	3320      	adds	r3, #32
 80035e0:	2100      	movs	r1, #0
 80035e2:	4618      	mov	r0, r3
 80035e4:	f000 fb5a 	bl	8003c9c <RCCEx_PLLSAI2_Config>
 80035e8:	4603      	mov	r3, r0
 80035ea:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80035ec:	e003      	b.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	74fb      	strb	r3, [r7, #19]
      break;
 80035f2:	e000      	b.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80035f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035f6:	7cfb      	ldrb	r3, [r7, #19]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d10b      	bne.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80035fc:	4b52      	ldr	r3, [pc, #328]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80035fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003602:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800360a:	494f      	ldr	r1, [pc, #316]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800360c:	4313      	orrs	r3, r2
 800360e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003612:	e001      	b.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003614:	7cfb      	ldrb	r3, [r7, #19]
 8003616:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003620:	2b00      	cmp	r3, #0
 8003622:	f000 80a0 	beq.w	8003766 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003626:	2300      	movs	r3, #0
 8003628:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800362a:	4b47      	ldr	r3, [pc, #284]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800362c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800362e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d101      	bne.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8003636:	2301      	movs	r3, #1
 8003638:	e000      	b.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800363a:	2300      	movs	r3, #0
 800363c:	2b00      	cmp	r3, #0
 800363e:	d00d      	beq.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003640:	4b41      	ldr	r3, [pc, #260]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003642:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003644:	4a40      	ldr	r2, [pc, #256]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003646:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800364a:	6593      	str	r3, [r2, #88]	; 0x58
 800364c:	4b3e      	ldr	r3, [pc, #248]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800364e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003650:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003654:	60bb      	str	r3, [r7, #8]
 8003656:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003658:	2301      	movs	r3, #1
 800365a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800365c:	4b3b      	ldr	r3, [pc, #236]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a3a      	ldr	r2, [pc, #232]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003662:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003666:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003668:	f7fd fe2e 	bl	80012c8 <HAL_GetTick>
 800366c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800366e:	e009      	b.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003670:	f7fd fe2a 	bl	80012c8 <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	2b02      	cmp	r3, #2
 800367c:	d902      	bls.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	74fb      	strb	r3, [r7, #19]
        break;
 8003682:	e005      	b.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003684:	4b31      	ldr	r3, [pc, #196]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800368c:	2b00      	cmp	r3, #0
 800368e:	d0ef      	beq.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8003690:	7cfb      	ldrb	r3, [r7, #19]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d15c      	bne.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003696:	4b2c      	ldr	r3, [pc, #176]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003698:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800369c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036a0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d01f      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036ae:	697a      	ldr	r2, [r7, #20]
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d019      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80036b4:	4b24      	ldr	r3, [pc, #144]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036be:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80036c0:	4b21      	ldr	r3, [pc, #132]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036c6:	4a20      	ldr	r2, [pc, #128]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80036d0:	4b1d      	ldr	r3, [pc, #116]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036d6:	4a1c      	ldr	r2, [pc, #112]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80036e0:	4a19      	ldr	r2, [pc, #100]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	f003 0301 	and.w	r3, r3, #1
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d016      	beq.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036f2:	f7fd fde9 	bl	80012c8 <HAL_GetTick>
 80036f6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036f8:	e00b      	b.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036fa:	f7fd fde5 	bl	80012c8 <HAL_GetTick>
 80036fe:	4602      	mov	r2, r0
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	f241 3288 	movw	r2, #5000	; 0x1388
 8003708:	4293      	cmp	r3, r2
 800370a:	d902      	bls.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 800370c:	2303      	movs	r3, #3
 800370e:	74fb      	strb	r3, [r7, #19]
            break;
 8003710:	e006      	b.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003712:	4b0d      	ldr	r3, [pc, #52]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003714:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003718:	f003 0302 	and.w	r3, r3, #2
 800371c:	2b00      	cmp	r3, #0
 800371e:	d0ec      	beq.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8003720:	7cfb      	ldrb	r3, [r7, #19]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d10c      	bne.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003726:	4b08      	ldr	r3, [pc, #32]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003728:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800372c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003736:	4904      	ldr	r1, [pc, #16]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003738:	4313      	orrs	r3, r2
 800373a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800373e:	e009      	b.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003740:	7cfb      	ldrb	r3, [r7, #19]
 8003742:	74bb      	strb	r3, [r7, #18]
 8003744:	e006      	b.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8003746:	bf00      	nop
 8003748:	40021000 	.word	0x40021000
 800374c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003750:	7cfb      	ldrb	r3, [r7, #19]
 8003752:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003754:	7c7b      	ldrb	r3, [r7, #17]
 8003756:	2b01      	cmp	r3, #1
 8003758:	d105      	bne.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800375a:	4b9e      	ldr	r3, [pc, #632]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800375c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800375e:	4a9d      	ldr	r2, [pc, #628]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003760:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003764:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 0301 	and.w	r3, r3, #1
 800376e:	2b00      	cmp	r3, #0
 8003770:	d00a      	beq.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003772:	4b98      	ldr	r3, [pc, #608]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003774:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003778:	f023 0203 	bic.w	r2, r3, #3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003780:	4994      	ldr	r1, [pc, #592]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003782:	4313      	orrs	r3, r2
 8003784:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0302 	and.w	r3, r3, #2
 8003790:	2b00      	cmp	r3, #0
 8003792:	d00a      	beq.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003794:	4b8f      	ldr	r3, [pc, #572]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003796:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800379a:	f023 020c 	bic.w	r2, r3, #12
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037a2:	498c      	ldr	r1, [pc, #560]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80037a4:	4313      	orrs	r3, r2
 80037a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0304 	and.w	r3, r3, #4
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d00a      	beq.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80037b6:	4b87      	ldr	r3, [pc, #540]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80037b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037bc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c4:	4983      	ldr	r1, [pc, #524]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80037c6:	4313      	orrs	r3, r2
 80037c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 0308 	and.w	r3, r3, #8
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d00a      	beq.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80037d8:	4b7e      	ldr	r3, [pc, #504]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80037da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037de:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037e6:	497b      	ldr	r1, [pc, #492]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80037e8:	4313      	orrs	r3, r2
 80037ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0310 	and.w	r3, r3, #16
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d00a      	beq.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80037fa:	4b76      	ldr	r3, [pc, #472]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80037fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003800:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003808:	4972      	ldr	r1, [pc, #456]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800380a:	4313      	orrs	r3, r2
 800380c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0320 	and.w	r3, r3, #32
 8003818:	2b00      	cmp	r3, #0
 800381a:	d00a      	beq.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800381c:	4b6d      	ldr	r3, [pc, #436]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800381e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003822:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800382a:	496a      	ldr	r1, [pc, #424]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800382c:	4313      	orrs	r3, r2
 800382e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800383a:	2b00      	cmp	r3, #0
 800383c:	d00a      	beq.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800383e:	4b65      	ldr	r3, [pc, #404]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003840:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003844:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800384c:	4961      	ldr	r1, [pc, #388]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800384e:	4313      	orrs	r3, r2
 8003850:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800385c:	2b00      	cmp	r3, #0
 800385e:	d00a      	beq.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003860:	4b5c      	ldr	r3, [pc, #368]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003862:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003866:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800386e:	4959      	ldr	r1, [pc, #356]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003870:	4313      	orrs	r3, r2
 8003872:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800387e:	2b00      	cmp	r3, #0
 8003880:	d00a      	beq.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003882:	4b54      	ldr	r3, [pc, #336]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003884:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003888:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003890:	4950      	ldr	r1, [pc, #320]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003892:	4313      	orrs	r3, r2
 8003894:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d00a      	beq.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80038a4:	4b4b      	ldr	r3, [pc, #300]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038aa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038b2:	4948      	ldr	r1, [pc, #288]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038b4:	4313      	orrs	r3, r2
 80038b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d00a      	beq.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80038c6:	4b43      	ldr	r3, [pc, #268]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038d4:	493f      	ldr	r1, [pc, #252]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038d6:	4313      	orrs	r3, r2
 80038d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d028      	beq.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80038e8:	4b3a      	ldr	r3, [pc, #232]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038f6:	4937      	ldr	r1, [pc, #220]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038f8:	4313      	orrs	r3, r2
 80038fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003902:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003906:	d106      	bne.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003908:	4b32      	ldr	r3, [pc, #200]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	4a31      	ldr	r2, [pc, #196]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800390e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003912:	60d3      	str	r3, [r2, #12]
 8003914:	e011      	b.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800391a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800391e:	d10c      	bne.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	3304      	adds	r3, #4
 8003924:	2101      	movs	r1, #1
 8003926:	4618      	mov	r0, r3
 8003928:	f000 f8c8 	bl	8003abc <RCCEx_PLLSAI1_Config>
 800392c:	4603      	mov	r3, r0
 800392e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003930:	7cfb      	ldrb	r3, [r7, #19]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d001      	beq.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8003936:	7cfb      	ldrb	r3, [r7, #19]
 8003938:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d028      	beq.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003946:	4b23      	ldr	r3, [pc, #140]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003948:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800394c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003954:	491f      	ldr	r1, [pc, #124]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003956:	4313      	orrs	r3, r2
 8003958:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003960:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003964:	d106      	bne.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003966:	4b1b      	ldr	r3, [pc, #108]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	4a1a      	ldr	r2, [pc, #104]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800396c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003970:	60d3      	str	r3, [r2, #12]
 8003972:	e011      	b.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003978:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800397c:	d10c      	bne.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	3304      	adds	r3, #4
 8003982:	2101      	movs	r1, #1
 8003984:	4618      	mov	r0, r3
 8003986:	f000 f899 	bl	8003abc <RCCEx_PLLSAI1_Config>
 800398a:	4603      	mov	r3, r0
 800398c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800398e:	7cfb      	ldrb	r3, [r7, #19]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d001      	beq.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8003994:	7cfb      	ldrb	r3, [r7, #19]
 8003996:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d02b      	beq.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80039a4:	4b0b      	ldr	r3, [pc, #44]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80039a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039aa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039b2:	4908      	ldr	r1, [pc, #32]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80039b4:	4313      	orrs	r3, r2
 80039b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039c2:	d109      	bne.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039c4:	4b03      	ldr	r3, [pc, #12]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	4a02      	ldr	r2, [pc, #8]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80039ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039ce:	60d3      	str	r3, [r2, #12]
 80039d0:	e014      	b.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80039d2:	bf00      	nop
 80039d4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80039e0:	d10c      	bne.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	3304      	adds	r3, #4
 80039e6:	2101      	movs	r1, #1
 80039e8:	4618      	mov	r0, r3
 80039ea:	f000 f867 	bl	8003abc <RCCEx_PLLSAI1_Config>
 80039ee:	4603      	mov	r3, r0
 80039f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80039f2:	7cfb      	ldrb	r3, [r7, #19]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d001      	beq.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 80039f8:	7cfb      	ldrb	r3, [r7, #19]
 80039fa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d02f      	beq.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a08:	4b2b      	ldr	r3, [pc, #172]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a0e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a16:	4928      	ldr	r1, [pc, #160]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a26:	d10d      	bne.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	3304      	adds	r3, #4
 8003a2c:	2102      	movs	r1, #2
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f000 f844 	bl	8003abc <RCCEx_PLLSAI1_Config>
 8003a34:	4603      	mov	r3, r0
 8003a36:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a38:	7cfb      	ldrb	r3, [r7, #19]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d014      	beq.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8003a3e:	7cfb      	ldrb	r3, [r7, #19]
 8003a40:	74bb      	strb	r3, [r7, #18]
 8003a42:	e011      	b.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a4c:	d10c      	bne.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	3320      	adds	r3, #32
 8003a52:	2102      	movs	r1, #2
 8003a54:	4618      	mov	r0, r3
 8003a56:	f000 f921 	bl	8003c9c <RCCEx_PLLSAI2_Config>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a5e:	7cfb      	ldrb	r3, [r7, #19]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d001      	beq.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8003a64:	7cfb      	ldrb	r3, [r7, #19]
 8003a66:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d00a      	beq.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003a74:	4b10      	ldr	r3, [pc, #64]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a7a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a82:	490d      	ldr	r1, [pc, #52]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a84:	4313      	orrs	r3, r2
 8003a86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d00b      	beq.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003a96:	4b08      	ldr	r3, [pc, #32]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a9c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003aa6:	4904      	ldr	r1, [pc, #16]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003aae:	7cbb      	ldrb	r3, [r7, #18]
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3718      	adds	r7, #24
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	40021000 	.word	0x40021000

08003abc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b084      	sub	sp, #16
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003aca:	4b73      	ldr	r3, [pc, #460]	; (8003c98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	f003 0303 	and.w	r3, r3, #3
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d018      	beq.n	8003b08 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003ad6:	4b70      	ldr	r3, [pc, #448]	; (8003c98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003ad8:	68db      	ldr	r3, [r3, #12]
 8003ada:	f003 0203 	and.w	r2, r3, #3
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d10d      	bne.n	8003b02 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
       ||
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d009      	beq.n	8003b02 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003aee:	4b6a      	ldr	r3, [pc, #424]	; (8003c98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003af0:	68db      	ldr	r3, [r3, #12]
 8003af2:	091b      	lsrs	r3, r3, #4
 8003af4:	f003 0307 	and.w	r3, r3, #7
 8003af8:	1c5a      	adds	r2, r3, #1
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685b      	ldr	r3, [r3, #4]
       ||
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d044      	beq.n	8003b8c <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	73fb      	strb	r3, [r7, #15]
 8003b06:	e041      	b.n	8003b8c <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	2b02      	cmp	r3, #2
 8003b0e:	d00c      	beq.n	8003b2a <RCCEx_PLLSAI1_Config+0x6e>
 8003b10:	2b03      	cmp	r3, #3
 8003b12:	d013      	beq.n	8003b3c <RCCEx_PLLSAI1_Config+0x80>
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d120      	bne.n	8003b5a <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003b18:	4b5f      	ldr	r3, [pc, #380]	; (8003c98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 0302 	and.w	r3, r3, #2
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d11d      	bne.n	8003b60 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b28:	e01a      	b.n	8003b60 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003b2a:	4b5b      	ldr	r3, [pc, #364]	; (8003c98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d116      	bne.n	8003b64 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b3a:	e013      	b.n	8003b64 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003b3c:	4b56      	ldr	r3, [pc, #344]	; (8003c98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d10f      	bne.n	8003b68 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003b48:	4b53      	ldr	r3, [pc, #332]	; (8003c98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d109      	bne.n	8003b68 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003b58:	e006      	b.n	8003b68 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	73fb      	strb	r3, [r7, #15]
      break;
 8003b5e:	e004      	b.n	8003b6a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003b60:	bf00      	nop
 8003b62:	e002      	b.n	8003b6a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003b64:	bf00      	nop
 8003b66:	e000      	b.n	8003b6a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003b68:	bf00      	nop
    }

    if(status == HAL_OK)
 8003b6a:	7bfb      	ldrb	r3, [r7, #15]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d10d      	bne.n	8003b8c <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003b70:	4b49      	ldr	r3, [pc, #292]	; (8003c98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6819      	ldr	r1, [r3, #0]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	3b01      	subs	r3, #1
 8003b82:	011b      	lsls	r3, r3, #4
 8003b84:	430b      	orrs	r3, r1
 8003b86:	4944      	ldr	r1, [pc, #272]	; (8003c98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003b8c:	7bfb      	ldrb	r3, [r7, #15]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d17d      	bne.n	8003c8e <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003b92:	4b41      	ldr	r3, [pc, #260]	; (8003c98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a40      	ldr	r2, [pc, #256]	; (8003c98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b98:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003b9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b9e:	f7fd fb93 	bl	80012c8 <HAL_GetTick>
 8003ba2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003ba4:	e009      	b.n	8003bba <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003ba6:	f7fd fb8f 	bl	80012c8 <HAL_GetTick>
 8003baa:	4602      	mov	r2, r0
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	2b02      	cmp	r3, #2
 8003bb2:	d902      	bls.n	8003bba <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003bb4:	2303      	movs	r3, #3
 8003bb6:	73fb      	strb	r3, [r7, #15]
        break;
 8003bb8:	e005      	b.n	8003bc6 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003bba:	4b37      	ldr	r3, [pc, #220]	; (8003c98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d1ef      	bne.n	8003ba6 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003bc6:	7bfb      	ldrb	r3, [r7, #15]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d160      	bne.n	8003c8e <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d111      	bne.n	8003bf6 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003bd2:	4b31      	ldr	r3, [pc, #196]	; (8003c98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003bd4:	691b      	ldr	r3, [r3, #16]
 8003bd6:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003bda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	6892      	ldr	r2, [r2, #8]
 8003be2:	0211      	lsls	r1, r2, #8
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	68d2      	ldr	r2, [r2, #12]
 8003be8:	0912      	lsrs	r2, r2, #4
 8003bea:	0452      	lsls	r2, r2, #17
 8003bec:	430a      	orrs	r2, r1
 8003bee:	492a      	ldr	r1, [pc, #168]	; (8003c98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	610b      	str	r3, [r1, #16]
 8003bf4:	e027      	b.n	8003c46 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d112      	bne.n	8003c22 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003bfc:	4b26      	ldr	r3, [pc, #152]	; (8003c98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003bfe:	691b      	ldr	r3, [r3, #16]
 8003c00:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003c04:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	6892      	ldr	r2, [r2, #8]
 8003c0c:	0211      	lsls	r1, r2, #8
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	6912      	ldr	r2, [r2, #16]
 8003c12:	0852      	lsrs	r2, r2, #1
 8003c14:	3a01      	subs	r2, #1
 8003c16:	0552      	lsls	r2, r2, #21
 8003c18:	430a      	orrs	r2, r1
 8003c1a:	491f      	ldr	r1, [pc, #124]	; (8003c98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	610b      	str	r3, [r1, #16]
 8003c20:	e011      	b.n	8003c46 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c22:	4b1d      	ldr	r3, [pc, #116]	; (8003c98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c24:	691b      	ldr	r3, [r3, #16]
 8003c26:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003c2a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	6892      	ldr	r2, [r2, #8]
 8003c32:	0211      	lsls	r1, r2, #8
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	6952      	ldr	r2, [r2, #20]
 8003c38:	0852      	lsrs	r2, r2, #1
 8003c3a:	3a01      	subs	r2, #1
 8003c3c:	0652      	lsls	r2, r2, #25
 8003c3e:	430a      	orrs	r2, r1
 8003c40:	4915      	ldr	r1, [pc, #84]	; (8003c98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c42:	4313      	orrs	r3, r2
 8003c44:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003c46:	4b14      	ldr	r3, [pc, #80]	; (8003c98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a13      	ldr	r2, [pc, #76]	; (8003c98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c4c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003c50:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c52:	f7fd fb39 	bl	80012c8 <HAL_GetTick>
 8003c56:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003c58:	e009      	b.n	8003c6e <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003c5a:	f7fd fb35 	bl	80012c8 <HAL_GetTick>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	1ad3      	subs	r3, r2, r3
 8003c64:	2b02      	cmp	r3, #2
 8003c66:	d902      	bls.n	8003c6e <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8003c68:	2303      	movs	r3, #3
 8003c6a:	73fb      	strb	r3, [r7, #15]
          break;
 8003c6c:	e005      	b.n	8003c7a <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003c6e:	4b0a      	ldr	r3, [pc, #40]	; (8003c98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d0ef      	beq.n	8003c5a <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8003c7a:	7bfb      	ldrb	r3, [r7, #15]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d106      	bne.n	8003c8e <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003c80:	4b05      	ldr	r3, [pc, #20]	; (8003c98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c82:	691a      	ldr	r2, [r3, #16]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	699b      	ldr	r3, [r3, #24]
 8003c88:	4903      	ldr	r1, [pc, #12]	; (8003c98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003c8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3710      	adds	r7, #16
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	40021000 	.word	0x40021000

08003c9c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b084      	sub	sp, #16
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
 8003ca4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003caa:	4b68      	ldr	r3, [pc, #416]	; (8003e4c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003cac:	68db      	ldr	r3, [r3, #12]
 8003cae:	f003 0303 	and.w	r3, r3, #3
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d018      	beq.n	8003ce8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003cb6:	4b65      	ldr	r3, [pc, #404]	; (8003e4c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003cb8:	68db      	ldr	r3, [r3, #12]
 8003cba:	f003 0203 	and.w	r2, r3, #3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d10d      	bne.n	8003ce2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
       ||
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d009      	beq.n	8003ce2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003cce:	4b5f      	ldr	r3, [pc, #380]	; (8003e4c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	091b      	lsrs	r3, r3, #4
 8003cd4:	f003 0307 	and.w	r3, r3, #7
 8003cd8:	1c5a      	adds	r2, r3, #1
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	685b      	ldr	r3, [r3, #4]
       ||
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d044      	beq.n	8003d6c <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	73fb      	strb	r3, [r7, #15]
 8003ce6:	e041      	b.n	8003d6c <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	2b02      	cmp	r3, #2
 8003cee:	d00c      	beq.n	8003d0a <RCCEx_PLLSAI2_Config+0x6e>
 8003cf0:	2b03      	cmp	r3, #3
 8003cf2:	d013      	beq.n	8003d1c <RCCEx_PLLSAI2_Config+0x80>
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d120      	bne.n	8003d3a <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003cf8:	4b54      	ldr	r3, [pc, #336]	; (8003e4c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 0302 	and.w	r3, r3, #2
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d11d      	bne.n	8003d40 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d08:	e01a      	b.n	8003d40 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003d0a:	4b50      	ldr	r3, [pc, #320]	; (8003e4c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d116      	bne.n	8003d44 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d1a:	e013      	b.n	8003d44 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003d1c:	4b4b      	ldr	r3, [pc, #300]	; (8003e4c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d10f      	bne.n	8003d48 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003d28:	4b48      	ldr	r3, [pc, #288]	; (8003e4c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d109      	bne.n	8003d48 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003d38:	e006      	b.n	8003d48 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	73fb      	strb	r3, [r7, #15]
      break;
 8003d3e:	e004      	b.n	8003d4a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003d40:	bf00      	nop
 8003d42:	e002      	b.n	8003d4a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003d44:	bf00      	nop
 8003d46:	e000      	b.n	8003d4a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003d48:	bf00      	nop
    }

    if(status == HAL_OK)
 8003d4a:	7bfb      	ldrb	r3, [r7, #15]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d10d      	bne.n	8003d6c <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003d50:	4b3e      	ldr	r3, [pc, #248]	; (8003e4c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6819      	ldr	r1, [r3, #0]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	3b01      	subs	r3, #1
 8003d62:	011b      	lsls	r3, r3, #4
 8003d64:	430b      	orrs	r3, r1
 8003d66:	4939      	ldr	r1, [pc, #228]	; (8003e4c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003d6c:	7bfb      	ldrb	r3, [r7, #15]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d167      	bne.n	8003e42 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003d72:	4b36      	ldr	r3, [pc, #216]	; (8003e4c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a35      	ldr	r2, [pc, #212]	; (8003e4c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003d78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d7e:	f7fd faa3 	bl	80012c8 <HAL_GetTick>
 8003d82:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003d84:	e009      	b.n	8003d9a <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003d86:	f7fd fa9f 	bl	80012c8 <HAL_GetTick>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	1ad3      	subs	r3, r2, r3
 8003d90:	2b02      	cmp	r3, #2
 8003d92:	d902      	bls.n	8003d9a <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003d94:	2303      	movs	r3, #3
 8003d96:	73fb      	strb	r3, [r7, #15]
        break;
 8003d98:	e005      	b.n	8003da6 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003d9a:	4b2c      	ldr	r3, [pc, #176]	; (8003e4c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d1ef      	bne.n	8003d86 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003da6:	7bfb      	ldrb	r3, [r7, #15]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d14a      	bne.n	8003e42 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d111      	bne.n	8003dd6 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003db2:	4b26      	ldr	r3, [pc, #152]	; (8003e4c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003db4:	695b      	ldr	r3, [r3, #20]
 8003db6:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003dba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	6892      	ldr	r2, [r2, #8]
 8003dc2:	0211      	lsls	r1, r2, #8
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	68d2      	ldr	r2, [r2, #12]
 8003dc8:	0912      	lsrs	r2, r2, #4
 8003dca:	0452      	lsls	r2, r2, #17
 8003dcc:	430a      	orrs	r2, r1
 8003dce:	491f      	ldr	r1, [pc, #124]	; (8003e4c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	614b      	str	r3, [r1, #20]
 8003dd4:	e011      	b.n	8003dfa <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003dd6:	4b1d      	ldr	r3, [pc, #116]	; (8003e4c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003dd8:	695b      	ldr	r3, [r3, #20]
 8003dda:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003dde:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003de2:	687a      	ldr	r2, [r7, #4]
 8003de4:	6892      	ldr	r2, [r2, #8]
 8003de6:	0211      	lsls	r1, r2, #8
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	6912      	ldr	r2, [r2, #16]
 8003dec:	0852      	lsrs	r2, r2, #1
 8003dee:	3a01      	subs	r2, #1
 8003df0:	0652      	lsls	r2, r2, #25
 8003df2:	430a      	orrs	r2, r1
 8003df4:	4915      	ldr	r1, [pc, #84]	; (8003e4c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003df6:	4313      	orrs	r3, r2
 8003df8:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003dfa:	4b14      	ldr	r3, [pc, #80]	; (8003e4c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a13      	ldr	r2, [pc, #76]	; (8003e4c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003e00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e04:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e06:	f7fd fa5f 	bl	80012c8 <HAL_GetTick>
 8003e0a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003e0c:	e009      	b.n	8003e22 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003e0e:	f7fd fa5b 	bl	80012c8 <HAL_GetTick>
 8003e12:	4602      	mov	r2, r0
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	1ad3      	subs	r3, r2, r3
 8003e18:	2b02      	cmp	r3, #2
 8003e1a:	d902      	bls.n	8003e22 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8003e1c:	2303      	movs	r3, #3
 8003e1e:	73fb      	strb	r3, [r7, #15]
          break;
 8003e20:	e005      	b.n	8003e2e <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003e22:	4b0a      	ldr	r3, [pc, #40]	; (8003e4c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d0ef      	beq.n	8003e0e <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8003e2e:	7bfb      	ldrb	r3, [r7, #15]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d106      	bne.n	8003e42 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003e34:	4b05      	ldr	r3, [pc, #20]	; (8003e4c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003e36:	695a      	ldr	r2, [r3, #20]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	695b      	ldr	r3, [r3, #20]
 8003e3c:	4903      	ldr	r1, [pc, #12]	; (8003e4c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003e42:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3710      	adds	r7, #16
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}
 8003e4c:	40021000 	.word	0x40021000

08003e50 <__errno>:
 8003e50:	4b01      	ldr	r3, [pc, #4]	; (8003e58 <__errno+0x8>)
 8003e52:	6818      	ldr	r0, [r3, #0]
 8003e54:	4770      	bx	lr
 8003e56:	bf00      	nop
 8003e58:	20000010 	.word	0x20000010

08003e5c <__libc_init_array>:
 8003e5c:	b570      	push	{r4, r5, r6, lr}
 8003e5e:	4e0d      	ldr	r6, [pc, #52]	; (8003e94 <__libc_init_array+0x38>)
 8003e60:	4c0d      	ldr	r4, [pc, #52]	; (8003e98 <__libc_init_array+0x3c>)
 8003e62:	1ba4      	subs	r4, r4, r6
 8003e64:	10a4      	asrs	r4, r4, #2
 8003e66:	2500      	movs	r5, #0
 8003e68:	42a5      	cmp	r5, r4
 8003e6a:	d109      	bne.n	8003e80 <__libc_init_array+0x24>
 8003e6c:	4e0b      	ldr	r6, [pc, #44]	; (8003e9c <__libc_init_array+0x40>)
 8003e6e:	4c0c      	ldr	r4, [pc, #48]	; (8003ea0 <__libc_init_array+0x44>)
 8003e70:	f001 f878 	bl	8004f64 <_init>
 8003e74:	1ba4      	subs	r4, r4, r6
 8003e76:	10a4      	asrs	r4, r4, #2
 8003e78:	2500      	movs	r5, #0
 8003e7a:	42a5      	cmp	r5, r4
 8003e7c:	d105      	bne.n	8003e8a <__libc_init_array+0x2e>
 8003e7e:	bd70      	pop	{r4, r5, r6, pc}
 8003e80:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003e84:	4798      	blx	r3
 8003e86:	3501      	adds	r5, #1
 8003e88:	e7ee      	b.n	8003e68 <__libc_init_array+0xc>
 8003e8a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003e8e:	4798      	blx	r3
 8003e90:	3501      	adds	r5, #1
 8003e92:	e7f2      	b.n	8003e7a <__libc_init_array+0x1e>
 8003e94:	08005008 	.word	0x08005008
 8003e98:	08005008 	.word	0x08005008
 8003e9c:	08005008 	.word	0x08005008
 8003ea0:	0800500c 	.word	0x0800500c

08003ea4 <memset>:
 8003ea4:	4402      	add	r2, r0
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d100      	bne.n	8003eae <memset+0xa>
 8003eac:	4770      	bx	lr
 8003eae:	f803 1b01 	strb.w	r1, [r3], #1
 8003eb2:	e7f9      	b.n	8003ea8 <memset+0x4>

08003eb4 <pow>:
 8003eb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003eb8:	ed2d 8b04 	vpush	{d8-d9}
 8003ebc:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8004190 <pow+0x2dc>
 8003ec0:	b08d      	sub	sp, #52	; 0x34
 8003ec2:	ec57 6b10 	vmov	r6, r7, d0
 8003ec6:	ec55 4b11 	vmov	r4, r5, d1
 8003eca:	f000 f965 	bl	8004198 <__ieee754_pow>
 8003ece:	f999 3000 	ldrsb.w	r3, [r9]
 8003ed2:	9300      	str	r3, [sp, #0]
 8003ed4:	3301      	adds	r3, #1
 8003ed6:	eeb0 8a40 	vmov.f32	s16, s0
 8003eda:	eef0 8a60 	vmov.f32	s17, s1
 8003ede:	46c8      	mov	r8, r9
 8003ee0:	d05f      	beq.n	8003fa2 <pow+0xee>
 8003ee2:	4622      	mov	r2, r4
 8003ee4:	462b      	mov	r3, r5
 8003ee6:	4620      	mov	r0, r4
 8003ee8:	4629      	mov	r1, r5
 8003eea:	f7fc fdc3 	bl	8000a74 <__aeabi_dcmpun>
 8003eee:	4683      	mov	fp, r0
 8003ef0:	2800      	cmp	r0, #0
 8003ef2:	d156      	bne.n	8003fa2 <pow+0xee>
 8003ef4:	4632      	mov	r2, r6
 8003ef6:	463b      	mov	r3, r7
 8003ef8:	4630      	mov	r0, r6
 8003efa:	4639      	mov	r1, r7
 8003efc:	f7fc fdba 	bl	8000a74 <__aeabi_dcmpun>
 8003f00:	9001      	str	r0, [sp, #4]
 8003f02:	b1e8      	cbz	r0, 8003f40 <pow+0x8c>
 8003f04:	2200      	movs	r2, #0
 8003f06:	2300      	movs	r3, #0
 8003f08:	4620      	mov	r0, r4
 8003f0a:	4629      	mov	r1, r5
 8003f0c:	f7fc fd80 	bl	8000a10 <__aeabi_dcmpeq>
 8003f10:	2800      	cmp	r0, #0
 8003f12:	d046      	beq.n	8003fa2 <pow+0xee>
 8003f14:	2301      	movs	r3, #1
 8003f16:	9302      	str	r3, [sp, #8]
 8003f18:	4b96      	ldr	r3, [pc, #600]	; (8004174 <pow+0x2c0>)
 8003f1a:	9303      	str	r3, [sp, #12]
 8003f1c:	4b96      	ldr	r3, [pc, #600]	; (8004178 <pow+0x2c4>)
 8003f1e:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8003f22:	2200      	movs	r2, #0
 8003f24:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8003f28:	9b00      	ldr	r3, [sp, #0]
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8003f30:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8003f34:	d033      	beq.n	8003f9e <pow+0xea>
 8003f36:	a802      	add	r0, sp, #8
 8003f38:	f000 fefd 	bl	8004d36 <matherr>
 8003f3c:	bb48      	cbnz	r0, 8003f92 <pow+0xde>
 8003f3e:	e05d      	b.n	8003ffc <pow+0x148>
 8003f40:	f04f 0a00 	mov.w	sl, #0
 8003f44:	f04f 0b00 	mov.w	fp, #0
 8003f48:	4652      	mov	r2, sl
 8003f4a:	465b      	mov	r3, fp
 8003f4c:	4630      	mov	r0, r6
 8003f4e:	4639      	mov	r1, r7
 8003f50:	f7fc fd5e 	bl	8000a10 <__aeabi_dcmpeq>
 8003f54:	ec4b ab19 	vmov	d9, sl, fp
 8003f58:	2800      	cmp	r0, #0
 8003f5a:	d054      	beq.n	8004006 <pow+0x152>
 8003f5c:	4652      	mov	r2, sl
 8003f5e:	465b      	mov	r3, fp
 8003f60:	4620      	mov	r0, r4
 8003f62:	4629      	mov	r1, r5
 8003f64:	f7fc fd54 	bl	8000a10 <__aeabi_dcmpeq>
 8003f68:	4680      	mov	r8, r0
 8003f6a:	b318      	cbz	r0, 8003fb4 <pow+0x100>
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	9302      	str	r3, [sp, #8]
 8003f70:	4b80      	ldr	r3, [pc, #512]	; (8004174 <pow+0x2c0>)
 8003f72:	9303      	str	r3, [sp, #12]
 8003f74:	9b01      	ldr	r3, [sp, #4]
 8003f76:	930a      	str	r3, [sp, #40]	; 0x28
 8003f78:	9b00      	ldr	r3, [sp, #0]
 8003f7a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8003f7e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8003f82:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d0d5      	beq.n	8003f36 <pow+0x82>
 8003f8a:	4b7b      	ldr	r3, [pc, #492]	; (8004178 <pow+0x2c4>)
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8003f92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f94:	b11b      	cbz	r3, 8003f9e <pow+0xea>
 8003f96:	f7ff ff5b 	bl	8003e50 <__errno>
 8003f9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f9c:	6003      	str	r3, [r0, #0]
 8003f9e:	ed9d 8b08 	vldr	d8, [sp, #32]
 8003fa2:	eeb0 0a48 	vmov.f32	s0, s16
 8003fa6:	eef0 0a68 	vmov.f32	s1, s17
 8003faa:	b00d      	add	sp, #52	; 0x34
 8003fac:	ecbd 8b04 	vpop	{d8-d9}
 8003fb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fb4:	ec45 4b10 	vmov	d0, r4, r5
 8003fb8:	f000 feb5 	bl	8004d26 <finite>
 8003fbc:	2800      	cmp	r0, #0
 8003fbe:	d0f0      	beq.n	8003fa2 <pow+0xee>
 8003fc0:	4652      	mov	r2, sl
 8003fc2:	465b      	mov	r3, fp
 8003fc4:	4620      	mov	r0, r4
 8003fc6:	4629      	mov	r1, r5
 8003fc8:	f7fc fd2c 	bl	8000a24 <__aeabi_dcmplt>
 8003fcc:	2800      	cmp	r0, #0
 8003fce:	d0e8      	beq.n	8003fa2 <pow+0xee>
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	9302      	str	r3, [sp, #8]
 8003fd4:	4b67      	ldr	r3, [pc, #412]	; (8004174 <pow+0x2c0>)
 8003fd6:	9303      	str	r3, [sp, #12]
 8003fd8:	f999 3000 	ldrsb.w	r3, [r9]
 8003fdc:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8003fe0:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8003fe4:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8003fe8:	b913      	cbnz	r3, 8003ff0 <pow+0x13c>
 8003fea:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8003fee:	e7a2      	b.n	8003f36 <pow+0x82>
 8003ff0:	4962      	ldr	r1, [pc, #392]	; (800417c <pow+0x2c8>)
 8003ff2:	2000      	movs	r0, #0
 8003ff4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8003ff8:	2b02      	cmp	r3, #2
 8003ffa:	d19c      	bne.n	8003f36 <pow+0x82>
 8003ffc:	f7ff ff28 	bl	8003e50 <__errno>
 8004000:	2321      	movs	r3, #33	; 0x21
 8004002:	6003      	str	r3, [r0, #0]
 8004004:	e7c5      	b.n	8003f92 <pow+0xde>
 8004006:	eeb0 0a48 	vmov.f32	s0, s16
 800400a:	eef0 0a68 	vmov.f32	s1, s17
 800400e:	f000 fe8a 	bl	8004d26 <finite>
 8004012:	9000      	str	r0, [sp, #0]
 8004014:	2800      	cmp	r0, #0
 8004016:	f040 8081 	bne.w	800411c <pow+0x268>
 800401a:	ec47 6b10 	vmov	d0, r6, r7
 800401e:	f000 fe82 	bl	8004d26 <finite>
 8004022:	2800      	cmp	r0, #0
 8004024:	d07a      	beq.n	800411c <pow+0x268>
 8004026:	ec45 4b10 	vmov	d0, r4, r5
 800402a:	f000 fe7c 	bl	8004d26 <finite>
 800402e:	2800      	cmp	r0, #0
 8004030:	d074      	beq.n	800411c <pow+0x268>
 8004032:	ec53 2b18 	vmov	r2, r3, d8
 8004036:	ee18 0a10 	vmov	r0, s16
 800403a:	4619      	mov	r1, r3
 800403c:	f7fc fd1a 	bl	8000a74 <__aeabi_dcmpun>
 8004040:	f999 9000 	ldrsb.w	r9, [r9]
 8004044:	4b4b      	ldr	r3, [pc, #300]	; (8004174 <pow+0x2c0>)
 8004046:	b1b0      	cbz	r0, 8004076 <pow+0x1c2>
 8004048:	2201      	movs	r2, #1
 800404a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800404e:	9b00      	ldr	r3, [sp, #0]
 8004050:	930a      	str	r3, [sp, #40]	; 0x28
 8004052:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004056:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800405a:	f1b9 0f00 	cmp.w	r9, #0
 800405e:	d0c4      	beq.n	8003fea <pow+0x136>
 8004060:	4652      	mov	r2, sl
 8004062:	465b      	mov	r3, fp
 8004064:	4650      	mov	r0, sl
 8004066:	4659      	mov	r1, fp
 8004068:	f7fc fb94 	bl	8000794 <__aeabi_ddiv>
 800406c:	f1b9 0f02 	cmp.w	r9, #2
 8004070:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004074:	e7c1      	b.n	8003ffa <pow+0x146>
 8004076:	2203      	movs	r2, #3
 8004078:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800407c:	900a      	str	r0, [sp, #40]	; 0x28
 800407e:	4629      	mov	r1, r5
 8004080:	4620      	mov	r0, r4
 8004082:	2200      	movs	r2, #0
 8004084:	4b3e      	ldr	r3, [pc, #248]	; (8004180 <pow+0x2cc>)
 8004086:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800408a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800408e:	f7fc fa57 	bl	8000540 <__aeabi_dmul>
 8004092:	4604      	mov	r4, r0
 8004094:	460d      	mov	r5, r1
 8004096:	f1b9 0f00 	cmp.w	r9, #0
 800409a:	d124      	bne.n	80040e6 <pow+0x232>
 800409c:	4b39      	ldr	r3, [pc, #228]	; (8004184 <pow+0x2d0>)
 800409e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80040a2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80040a6:	4630      	mov	r0, r6
 80040a8:	4652      	mov	r2, sl
 80040aa:	465b      	mov	r3, fp
 80040ac:	4639      	mov	r1, r7
 80040ae:	f7fc fcb9 	bl	8000a24 <__aeabi_dcmplt>
 80040b2:	2800      	cmp	r0, #0
 80040b4:	d056      	beq.n	8004164 <pow+0x2b0>
 80040b6:	ec45 4b10 	vmov	d0, r4, r5
 80040ba:	f000 fe49 	bl	8004d50 <rint>
 80040be:	4622      	mov	r2, r4
 80040c0:	462b      	mov	r3, r5
 80040c2:	ec51 0b10 	vmov	r0, r1, d0
 80040c6:	f7fc fca3 	bl	8000a10 <__aeabi_dcmpeq>
 80040ca:	b920      	cbnz	r0, 80040d6 <pow+0x222>
 80040cc:	4b2e      	ldr	r3, [pc, #184]	; (8004188 <pow+0x2d4>)
 80040ce:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80040d2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80040d6:	f998 3000 	ldrsb.w	r3, [r8]
 80040da:	2b02      	cmp	r3, #2
 80040dc:	d142      	bne.n	8004164 <pow+0x2b0>
 80040de:	f7ff feb7 	bl	8003e50 <__errno>
 80040e2:	2322      	movs	r3, #34	; 0x22
 80040e4:	e78d      	b.n	8004002 <pow+0x14e>
 80040e6:	4b29      	ldr	r3, [pc, #164]	; (800418c <pow+0x2d8>)
 80040e8:	2200      	movs	r2, #0
 80040ea:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80040ee:	4630      	mov	r0, r6
 80040f0:	4652      	mov	r2, sl
 80040f2:	465b      	mov	r3, fp
 80040f4:	4639      	mov	r1, r7
 80040f6:	f7fc fc95 	bl	8000a24 <__aeabi_dcmplt>
 80040fa:	2800      	cmp	r0, #0
 80040fc:	d0eb      	beq.n	80040d6 <pow+0x222>
 80040fe:	ec45 4b10 	vmov	d0, r4, r5
 8004102:	f000 fe25 	bl	8004d50 <rint>
 8004106:	4622      	mov	r2, r4
 8004108:	462b      	mov	r3, r5
 800410a:	ec51 0b10 	vmov	r0, r1, d0
 800410e:	f7fc fc7f 	bl	8000a10 <__aeabi_dcmpeq>
 8004112:	2800      	cmp	r0, #0
 8004114:	d1df      	bne.n	80040d6 <pow+0x222>
 8004116:	2200      	movs	r2, #0
 8004118:	4b18      	ldr	r3, [pc, #96]	; (800417c <pow+0x2c8>)
 800411a:	e7da      	b.n	80040d2 <pow+0x21e>
 800411c:	2200      	movs	r2, #0
 800411e:	2300      	movs	r3, #0
 8004120:	ec51 0b18 	vmov	r0, r1, d8
 8004124:	f7fc fc74 	bl	8000a10 <__aeabi_dcmpeq>
 8004128:	2800      	cmp	r0, #0
 800412a:	f43f af3a 	beq.w	8003fa2 <pow+0xee>
 800412e:	ec47 6b10 	vmov	d0, r6, r7
 8004132:	f000 fdf8 	bl	8004d26 <finite>
 8004136:	2800      	cmp	r0, #0
 8004138:	f43f af33 	beq.w	8003fa2 <pow+0xee>
 800413c:	ec45 4b10 	vmov	d0, r4, r5
 8004140:	f000 fdf1 	bl	8004d26 <finite>
 8004144:	2800      	cmp	r0, #0
 8004146:	f43f af2c 	beq.w	8003fa2 <pow+0xee>
 800414a:	2304      	movs	r3, #4
 800414c:	9302      	str	r3, [sp, #8]
 800414e:	4b09      	ldr	r3, [pc, #36]	; (8004174 <pow+0x2c0>)
 8004150:	9303      	str	r3, [sp, #12]
 8004152:	2300      	movs	r3, #0
 8004154:	930a      	str	r3, [sp, #40]	; 0x28
 8004156:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800415a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800415e:	ed8d 9b08 	vstr	d9, [sp, #32]
 8004162:	e7b8      	b.n	80040d6 <pow+0x222>
 8004164:	a802      	add	r0, sp, #8
 8004166:	f000 fde6 	bl	8004d36 <matherr>
 800416a:	2800      	cmp	r0, #0
 800416c:	f47f af11 	bne.w	8003f92 <pow+0xde>
 8004170:	e7b5      	b.n	80040de <pow+0x22a>
 8004172:	bf00      	nop
 8004174:	08004fc0 	.word	0x08004fc0
 8004178:	3ff00000 	.word	0x3ff00000
 800417c:	fff00000 	.word	0xfff00000
 8004180:	3fe00000 	.word	0x3fe00000
 8004184:	47efffff 	.word	0x47efffff
 8004188:	c7efffff 	.word	0xc7efffff
 800418c:	7ff00000 	.word	0x7ff00000
 8004190:	20000074 	.word	0x20000074
 8004194:	00000000 	.word	0x00000000

08004198 <__ieee754_pow>:
 8004198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800419c:	b091      	sub	sp, #68	; 0x44
 800419e:	ed8d 1b00 	vstr	d1, [sp]
 80041a2:	e9dd 2900 	ldrd	r2, r9, [sp]
 80041a6:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80041aa:	ea58 0302 	orrs.w	r3, r8, r2
 80041ae:	ec57 6b10 	vmov	r6, r7, d0
 80041b2:	f000 84be 	beq.w	8004b32 <__ieee754_pow+0x99a>
 80041b6:	4b7a      	ldr	r3, [pc, #488]	; (80043a0 <__ieee754_pow+0x208>)
 80041b8:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80041bc:	429c      	cmp	r4, r3
 80041be:	463d      	mov	r5, r7
 80041c0:	ee10 aa10 	vmov	sl, s0
 80041c4:	dc09      	bgt.n	80041da <__ieee754_pow+0x42>
 80041c6:	d103      	bne.n	80041d0 <__ieee754_pow+0x38>
 80041c8:	b93e      	cbnz	r6, 80041da <__ieee754_pow+0x42>
 80041ca:	45a0      	cmp	r8, r4
 80041cc:	dc0d      	bgt.n	80041ea <__ieee754_pow+0x52>
 80041ce:	e001      	b.n	80041d4 <__ieee754_pow+0x3c>
 80041d0:	4598      	cmp	r8, r3
 80041d2:	dc02      	bgt.n	80041da <__ieee754_pow+0x42>
 80041d4:	4598      	cmp	r8, r3
 80041d6:	d10e      	bne.n	80041f6 <__ieee754_pow+0x5e>
 80041d8:	b16a      	cbz	r2, 80041f6 <__ieee754_pow+0x5e>
 80041da:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80041de:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80041e2:	ea54 030a 	orrs.w	r3, r4, sl
 80041e6:	f000 84a4 	beq.w	8004b32 <__ieee754_pow+0x99a>
 80041ea:	486e      	ldr	r0, [pc, #440]	; (80043a4 <__ieee754_pow+0x20c>)
 80041ec:	b011      	add	sp, #68	; 0x44
 80041ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041f2:	f000 bda5 	b.w	8004d40 <nan>
 80041f6:	2d00      	cmp	r5, #0
 80041f8:	da53      	bge.n	80042a2 <__ieee754_pow+0x10a>
 80041fa:	4b6b      	ldr	r3, [pc, #428]	; (80043a8 <__ieee754_pow+0x210>)
 80041fc:	4598      	cmp	r8, r3
 80041fe:	dc4d      	bgt.n	800429c <__ieee754_pow+0x104>
 8004200:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8004204:	4598      	cmp	r8, r3
 8004206:	dd4c      	ble.n	80042a2 <__ieee754_pow+0x10a>
 8004208:	ea4f 5328 	mov.w	r3, r8, asr #20
 800420c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004210:	2b14      	cmp	r3, #20
 8004212:	dd26      	ble.n	8004262 <__ieee754_pow+0xca>
 8004214:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8004218:	fa22 f103 	lsr.w	r1, r2, r3
 800421c:	fa01 f303 	lsl.w	r3, r1, r3
 8004220:	4293      	cmp	r3, r2
 8004222:	d13e      	bne.n	80042a2 <__ieee754_pow+0x10a>
 8004224:	f001 0101 	and.w	r1, r1, #1
 8004228:	f1c1 0b02 	rsb	fp, r1, #2
 800422c:	2a00      	cmp	r2, #0
 800422e:	d15b      	bne.n	80042e8 <__ieee754_pow+0x150>
 8004230:	4b5b      	ldr	r3, [pc, #364]	; (80043a0 <__ieee754_pow+0x208>)
 8004232:	4598      	cmp	r8, r3
 8004234:	d124      	bne.n	8004280 <__ieee754_pow+0xe8>
 8004236:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800423a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800423e:	ea53 030a 	orrs.w	r3, r3, sl
 8004242:	f000 8476 	beq.w	8004b32 <__ieee754_pow+0x99a>
 8004246:	4b59      	ldr	r3, [pc, #356]	; (80043ac <__ieee754_pow+0x214>)
 8004248:	429c      	cmp	r4, r3
 800424a:	dd2d      	ble.n	80042a8 <__ieee754_pow+0x110>
 800424c:	f1b9 0f00 	cmp.w	r9, #0
 8004250:	f280 8473 	bge.w	8004b3a <__ieee754_pow+0x9a2>
 8004254:	2000      	movs	r0, #0
 8004256:	2100      	movs	r1, #0
 8004258:	ec41 0b10 	vmov	d0, r0, r1
 800425c:	b011      	add	sp, #68	; 0x44
 800425e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004262:	2a00      	cmp	r2, #0
 8004264:	d13e      	bne.n	80042e4 <__ieee754_pow+0x14c>
 8004266:	f1c3 0314 	rsb	r3, r3, #20
 800426a:	fa48 f103 	asr.w	r1, r8, r3
 800426e:	fa01 f303 	lsl.w	r3, r1, r3
 8004272:	4543      	cmp	r3, r8
 8004274:	f040 8469 	bne.w	8004b4a <__ieee754_pow+0x9b2>
 8004278:	f001 0101 	and.w	r1, r1, #1
 800427c:	f1c1 0b02 	rsb	fp, r1, #2
 8004280:	4b4b      	ldr	r3, [pc, #300]	; (80043b0 <__ieee754_pow+0x218>)
 8004282:	4598      	cmp	r8, r3
 8004284:	d118      	bne.n	80042b8 <__ieee754_pow+0x120>
 8004286:	f1b9 0f00 	cmp.w	r9, #0
 800428a:	f280 845a 	bge.w	8004b42 <__ieee754_pow+0x9aa>
 800428e:	4948      	ldr	r1, [pc, #288]	; (80043b0 <__ieee754_pow+0x218>)
 8004290:	4632      	mov	r2, r6
 8004292:	463b      	mov	r3, r7
 8004294:	2000      	movs	r0, #0
 8004296:	f7fc fa7d 	bl	8000794 <__aeabi_ddiv>
 800429a:	e7dd      	b.n	8004258 <__ieee754_pow+0xc0>
 800429c:	f04f 0b02 	mov.w	fp, #2
 80042a0:	e7c4      	b.n	800422c <__ieee754_pow+0x94>
 80042a2:	f04f 0b00 	mov.w	fp, #0
 80042a6:	e7c1      	b.n	800422c <__ieee754_pow+0x94>
 80042a8:	f1b9 0f00 	cmp.w	r9, #0
 80042ac:	dad2      	bge.n	8004254 <__ieee754_pow+0xbc>
 80042ae:	e9dd 0300 	ldrd	r0, r3, [sp]
 80042b2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80042b6:	e7cf      	b.n	8004258 <__ieee754_pow+0xc0>
 80042b8:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80042bc:	d106      	bne.n	80042cc <__ieee754_pow+0x134>
 80042be:	4632      	mov	r2, r6
 80042c0:	463b      	mov	r3, r7
 80042c2:	4610      	mov	r0, r2
 80042c4:	4619      	mov	r1, r3
 80042c6:	f7fc f93b 	bl	8000540 <__aeabi_dmul>
 80042ca:	e7c5      	b.n	8004258 <__ieee754_pow+0xc0>
 80042cc:	4b39      	ldr	r3, [pc, #228]	; (80043b4 <__ieee754_pow+0x21c>)
 80042ce:	4599      	cmp	r9, r3
 80042d0:	d10a      	bne.n	80042e8 <__ieee754_pow+0x150>
 80042d2:	2d00      	cmp	r5, #0
 80042d4:	db08      	blt.n	80042e8 <__ieee754_pow+0x150>
 80042d6:	ec47 6b10 	vmov	d0, r6, r7
 80042da:	b011      	add	sp, #68	; 0x44
 80042dc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042e0:	f000 bc68 	b.w	8004bb4 <__ieee754_sqrt>
 80042e4:	f04f 0b00 	mov.w	fp, #0
 80042e8:	ec47 6b10 	vmov	d0, r6, r7
 80042ec:	f000 fd12 	bl	8004d14 <fabs>
 80042f0:	ec51 0b10 	vmov	r0, r1, d0
 80042f4:	f1ba 0f00 	cmp.w	sl, #0
 80042f8:	d127      	bne.n	800434a <__ieee754_pow+0x1b2>
 80042fa:	b124      	cbz	r4, 8004306 <__ieee754_pow+0x16e>
 80042fc:	4b2c      	ldr	r3, [pc, #176]	; (80043b0 <__ieee754_pow+0x218>)
 80042fe:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8004302:	429a      	cmp	r2, r3
 8004304:	d121      	bne.n	800434a <__ieee754_pow+0x1b2>
 8004306:	f1b9 0f00 	cmp.w	r9, #0
 800430a:	da05      	bge.n	8004318 <__ieee754_pow+0x180>
 800430c:	4602      	mov	r2, r0
 800430e:	460b      	mov	r3, r1
 8004310:	2000      	movs	r0, #0
 8004312:	4927      	ldr	r1, [pc, #156]	; (80043b0 <__ieee754_pow+0x218>)
 8004314:	f7fc fa3e 	bl	8000794 <__aeabi_ddiv>
 8004318:	2d00      	cmp	r5, #0
 800431a:	da9d      	bge.n	8004258 <__ieee754_pow+0xc0>
 800431c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8004320:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8004324:	ea54 030b 	orrs.w	r3, r4, fp
 8004328:	d108      	bne.n	800433c <__ieee754_pow+0x1a4>
 800432a:	4602      	mov	r2, r0
 800432c:	460b      	mov	r3, r1
 800432e:	4610      	mov	r0, r2
 8004330:	4619      	mov	r1, r3
 8004332:	f7fb ff4d 	bl	80001d0 <__aeabi_dsub>
 8004336:	4602      	mov	r2, r0
 8004338:	460b      	mov	r3, r1
 800433a:	e7ac      	b.n	8004296 <__ieee754_pow+0xfe>
 800433c:	f1bb 0f01 	cmp.w	fp, #1
 8004340:	d18a      	bne.n	8004258 <__ieee754_pow+0xc0>
 8004342:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004346:	4619      	mov	r1, r3
 8004348:	e786      	b.n	8004258 <__ieee754_pow+0xc0>
 800434a:	0fed      	lsrs	r5, r5, #31
 800434c:	1e6b      	subs	r3, r5, #1
 800434e:	930d      	str	r3, [sp, #52]	; 0x34
 8004350:	ea5b 0303 	orrs.w	r3, fp, r3
 8004354:	d102      	bne.n	800435c <__ieee754_pow+0x1c4>
 8004356:	4632      	mov	r2, r6
 8004358:	463b      	mov	r3, r7
 800435a:	e7e8      	b.n	800432e <__ieee754_pow+0x196>
 800435c:	4b16      	ldr	r3, [pc, #88]	; (80043b8 <__ieee754_pow+0x220>)
 800435e:	4598      	cmp	r8, r3
 8004360:	f340 80fe 	ble.w	8004560 <__ieee754_pow+0x3c8>
 8004364:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8004368:	4598      	cmp	r8, r3
 800436a:	dd0a      	ble.n	8004382 <__ieee754_pow+0x1ea>
 800436c:	4b0f      	ldr	r3, [pc, #60]	; (80043ac <__ieee754_pow+0x214>)
 800436e:	429c      	cmp	r4, r3
 8004370:	dc0d      	bgt.n	800438e <__ieee754_pow+0x1f6>
 8004372:	f1b9 0f00 	cmp.w	r9, #0
 8004376:	f6bf af6d 	bge.w	8004254 <__ieee754_pow+0xbc>
 800437a:	a307      	add	r3, pc, #28	; (adr r3, 8004398 <__ieee754_pow+0x200>)
 800437c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004380:	e79f      	b.n	80042c2 <__ieee754_pow+0x12a>
 8004382:	4b0e      	ldr	r3, [pc, #56]	; (80043bc <__ieee754_pow+0x224>)
 8004384:	429c      	cmp	r4, r3
 8004386:	ddf4      	ble.n	8004372 <__ieee754_pow+0x1da>
 8004388:	4b09      	ldr	r3, [pc, #36]	; (80043b0 <__ieee754_pow+0x218>)
 800438a:	429c      	cmp	r4, r3
 800438c:	dd18      	ble.n	80043c0 <__ieee754_pow+0x228>
 800438e:	f1b9 0f00 	cmp.w	r9, #0
 8004392:	dcf2      	bgt.n	800437a <__ieee754_pow+0x1e2>
 8004394:	e75e      	b.n	8004254 <__ieee754_pow+0xbc>
 8004396:	bf00      	nop
 8004398:	8800759c 	.word	0x8800759c
 800439c:	7e37e43c 	.word	0x7e37e43c
 80043a0:	7ff00000 	.word	0x7ff00000
 80043a4:	08004fc3 	.word	0x08004fc3
 80043a8:	433fffff 	.word	0x433fffff
 80043ac:	3fefffff 	.word	0x3fefffff
 80043b0:	3ff00000 	.word	0x3ff00000
 80043b4:	3fe00000 	.word	0x3fe00000
 80043b8:	41e00000 	.word	0x41e00000
 80043bc:	3feffffe 	.word	0x3feffffe
 80043c0:	2200      	movs	r2, #0
 80043c2:	4b63      	ldr	r3, [pc, #396]	; (8004550 <__ieee754_pow+0x3b8>)
 80043c4:	f7fb ff04 	bl	80001d0 <__aeabi_dsub>
 80043c8:	a355      	add	r3, pc, #340	; (adr r3, 8004520 <__ieee754_pow+0x388>)
 80043ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ce:	4604      	mov	r4, r0
 80043d0:	460d      	mov	r5, r1
 80043d2:	f7fc f8b5 	bl	8000540 <__aeabi_dmul>
 80043d6:	a354      	add	r3, pc, #336	; (adr r3, 8004528 <__ieee754_pow+0x390>)
 80043d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043dc:	4606      	mov	r6, r0
 80043de:	460f      	mov	r7, r1
 80043e0:	4620      	mov	r0, r4
 80043e2:	4629      	mov	r1, r5
 80043e4:	f7fc f8ac 	bl	8000540 <__aeabi_dmul>
 80043e8:	2200      	movs	r2, #0
 80043ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80043ee:	4b59      	ldr	r3, [pc, #356]	; (8004554 <__ieee754_pow+0x3bc>)
 80043f0:	4620      	mov	r0, r4
 80043f2:	4629      	mov	r1, r5
 80043f4:	f7fc f8a4 	bl	8000540 <__aeabi_dmul>
 80043f8:	4602      	mov	r2, r0
 80043fa:	460b      	mov	r3, r1
 80043fc:	a14c      	add	r1, pc, #304	; (adr r1, 8004530 <__ieee754_pow+0x398>)
 80043fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004402:	f7fb fee5 	bl	80001d0 <__aeabi_dsub>
 8004406:	4622      	mov	r2, r4
 8004408:	462b      	mov	r3, r5
 800440a:	f7fc f899 	bl	8000540 <__aeabi_dmul>
 800440e:	4602      	mov	r2, r0
 8004410:	460b      	mov	r3, r1
 8004412:	2000      	movs	r0, #0
 8004414:	4950      	ldr	r1, [pc, #320]	; (8004558 <__ieee754_pow+0x3c0>)
 8004416:	f7fb fedb 	bl	80001d0 <__aeabi_dsub>
 800441a:	4622      	mov	r2, r4
 800441c:	462b      	mov	r3, r5
 800441e:	4680      	mov	r8, r0
 8004420:	4689      	mov	r9, r1
 8004422:	4620      	mov	r0, r4
 8004424:	4629      	mov	r1, r5
 8004426:	f7fc f88b 	bl	8000540 <__aeabi_dmul>
 800442a:	4602      	mov	r2, r0
 800442c:	460b      	mov	r3, r1
 800442e:	4640      	mov	r0, r8
 8004430:	4649      	mov	r1, r9
 8004432:	f7fc f885 	bl	8000540 <__aeabi_dmul>
 8004436:	a340      	add	r3, pc, #256	; (adr r3, 8004538 <__ieee754_pow+0x3a0>)
 8004438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800443c:	f7fc f880 	bl	8000540 <__aeabi_dmul>
 8004440:	4602      	mov	r2, r0
 8004442:	460b      	mov	r3, r1
 8004444:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004448:	f7fb fec2 	bl	80001d0 <__aeabi_dsub>
 800444c:	4602      	mov	r2, r0
 800444e:	460b      	mov	r3, r1
 8004450:	4604      	mov	r4, r0
 8004452:	460d      	mov	r5, r1
 8004454:	4630      	mov	r0, r6
 8004456:	4639      	mov	r1, r7
 8004458:	f7fb febc 	bl	80001d4 <__adddf3>
 800445c:	2000      	movs	r0, #0
 800445e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004462:	4632      	mov	r2, r6
 8004464:	463b      	mov	r3, r7
 8004466:	f7fb feb3 	bl	80001d0 <__aeabi_dsub>
 800446a:	4602      	mov	r2, r0
 800446c:	460b      	mov	r3, r1
 800446e:	4620      	mov	r0, r4
 8004470:	4629      	mov	r1, r5
 8004472:	f7fb fead 	bl	80001d0 <__aeabi_dsub>
 8004476:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004478:	f10b 33ff 	add.w	r3, fp, #4294967295
 800447c:	4313      	orrs	r3, r2
 800447e:	4606      	mov	r6, r0
 8004480:	460f      	mov	r7, r1
 8004482:	f040 81eb 	bne.w	800485c <__ieee754_pow+0x6c4>
 8004486:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8004540 <__ieee754_pow+0x3a8>
 800448a:	e9dd 4500 	ldrd	r4, r5, [sp]
 800448e:	2400      	movs	r4, #0
 8004490:	4622      	mov	r2, r4
 8004492:	462b      	mov	r3, r5
 8004494:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004498:	ed8d 7b02 	vstr	d7, [sp, #8]
 800449c:	f7fb fe98 	bl	80001d0 <__aeabi_dsub>
 80044a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80044a4:	f7fc f84c 	bl	8000540 <__aeabi_dmul>
 80044a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80044ac:	4680      	mov	r8, r0
 80044ae:	4689      	mov	r9, r1
 80044b0:	4630      	mov	r0, r6
 80044b2:	4639      	mov	r1, r7
 80044b4:	f7fc f844 	bl	8000540 <__aeabi_dmul>
 80044b8:	4602      	mov	r2, r0
 80044ba:	460b      	mov	r3, r1
 80044bc:	4640      	mov	r0, r8
 80044be:	4649      	mov	r1, r9
 80044c0:	f7fb fe88 	bl	80001d4 <__adddf3>
 80044c4:	4622      	mov	r2, r4
 80044c6:	462b      	mov	r3, r5
 80044c8:	4680      	mov	r8, r0
 80044ca:	4689      	mov	r9, r1
 80044cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80044d0:	f7fc f836 	bl	8000540 <__aeabi_dmul>
 80044d4:	460b      	mov	r3, r1
 80044d6:	4604      	mov	r4, r0
 80044d8:	460d      	mov	r5, r1
 80044da:	4602      	mov	r2, r0
 80044dc:	4649      	mov	r1, r9
 80044de:	4640      	mov	r0, r8
 80044e0:	e9cd 4500 	strd	r4, r5, [sp]
 80044e4:	f7fb fe76 	bl	80001d4 <__adddf3>
 80044e8:	4b1c      	ldr	r3, [pc, #112]	; (800455c <__ieee754_pow+0x3c4>)
 80044ea:	4299      	cmp	r1, r3
 80044ec:	4606      	mov	r6, r0
 80044ee:	460f      	mov	r7, r1
 80044f0:	468b      	mov	fp, r1
 80044f2:	f340 82f7 	ble.w	8004ae4 <__ieee754_pow+0x94c>
 80044f6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80044fa:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80044fe:	4303      	orrs	r3, r0
 8004500:	f000 81ea 	beq.w	80048d8 <__ieee754_pow+0x740>
 8004504:	a310      	add	r3, pc, #64	; (adr r3, 8004548 <__ieee754_pow+0x3b0>)
 8004506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800450a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800450e:	f7fc f817 	bl	8000540 <__aeabi_dmul>
 8004512:	a30d      	add	r3, pc, #52	; (adr r3, 8004548 <__ieee754_pow+0x3b0>)
 8004514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004518:	e6d5      	b.n	80042c6 <__ieee754_pow+0x12e>
 800451a:	bf00      	nop
 800451c:	f3af 8000 	nop.w
 8004520:	60000000 	.word	0x60000000
 8004524:	3ff71547 	.word	0x3ff71547
 8004528:	f85ddf44 	.word	0xf85ddf44
 800452c:	3e54ae0b 	.word	0x3e54ae0b
 8004530:	55555555 	.word	0x55555555
 8004534:	3fd55555 	.word	0x3fd55555
 8004538:	652b82fe 	.word	0x652b82fe
 800453c:	3ff71547 	.word	0x3ff71547
 8004540:	00000000 	.word	0x00000000
 8004544:	bff00000 	.word	0xbff00000
 8004548:	8800759c 	.word	0x8800759c
 800454c:	7e37e43c 	.word	0x7e37e43c
 8004550:	3ff00000 	.word	0x3ff00000
 8004554:	3fd00000 	.word	0x3fd00000
 8004558:	3fe00000 	.word	0x3fe00000
 800455c:	408fffff 	.word	0x408fffff
 8004560:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8004564:	f04f 0200 	mov.w	r2, #0
 8004568:	da05      	bge.n	8004576 <__ieee754_pow+0x3de>
 800456a:	4bd3      	ldr	r3, [pc, #844]	; (80048b8 <__ieee754_pow+0x720>)
 800456c:	f7fb ffe8 	bl	8000540 <__aeabi_dmul>
 8004570:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8004574:	460c      	mov	r4, r1
 8004576:	1523      	asrs	r3, r4, #20
 8004578:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800457c:	4413      	add	r3, r2
 800457e:	9309      	str	r3, [sp, #36]	; 0x24
 8004580:	4bce      	ldr	r3, [pc, #824]	; (80048bc <__ieee754_pow+0x724>)
 8004582:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8004586:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800458a:	429c      	cmp	r4, r3
 800458c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8004590:	dd08      	ble.n	80045a4 <__ieee754_pow+0x40c>
 8004592:	4bcb      	ldr	r3, [pc, #812]	; (80048c0 <__ieee754_pow+0x728>)
 8004594:	429c      	cmp	r4, r3
 8004596:	f340 815e 	ble.w	8004856 <__ieee754_pow+0x6be>
 800459a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800459c:	3301      	adds	r3, #1
 800459e:	9309      	str	r3, [sp, #36]	; 0x24
 80045a0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80045a4:	f04f 0a00 	mov.w	sl, #0
 80045a8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80045ac:	930c      	str	r3, [sp, #48]	; 0x30
 80045ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80045b0:	4bc4      	ldr	r3, [pc, #784]	; (80048c4 <__ieee754_pow+0x72c>)
 80045b2:	4413      	add	r3, r2
 80045b4:	ed93 7b00 	vldr	d7, [r3]
 80045b8:	4629      	mov	r1, r5
 80045ba:	ec53 2b17 	vmov	r2, r3, d7
 80045be:	ed8d 7b06 	vstr	d7, [sp, #24]
 80045c2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80045c6:	f7fb fe03 	bl	80001d0 <__aeabi_dsub>
 80045ca:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80045ce:	4606      	mov	r6, r0
 80045d0:	460f      	mov	r7, r1
 80045d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80045d6:	f7fb fdfd 	bl	80001d4 <__adddf3>
 80045da:	4602      	mov	r2, r0
 80045dc:	460b      	mov	r3, r1
 80045de:	2000      	movs	r0, #0
 80045e0:	49b9      	ldr	r1, [pc, #740]	; (80048c8 <__ieee754_pow+0x730>)
 80045e2:	f7fc f8d7 	bl	8000794 <__aeabi_ddiv>
 80045e6:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80045ea:	4602      	mov	r2, r0
 80045ec:	460b      	mov	r3, r1
 80045ee:	4630      	mov	r0, r6
 80045f0:	4639      	mov	r1, r7
 80045f2:	f7fb ffa5 	bl	8000540 <__aeabi_dmul>
 80045f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80045fa:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80045fe:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8004602:	2300      	movs	r3, #0
 8004604:	9302      	str	r3, [sp, #8]
 8004606:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800460a:	106d      	asrs	r5, r5, #1
 800460c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8004610:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8004614:	2200      	movs	r2, #0
 8004616:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800461a:	4640      	mov	r0, r8
 800461c:	4649      	mov	r1, r9
 800461e:	4614      	mov	r4, r2
 8004620:	461d      	mov	r5, r3
 8004622:	f7fb ff8d 	bl	8000540 <__aeabi_dmul>
 8004626:	4602      	mov	r2, r0
 8004628:	460b      	mov	r3, r1
 800462a:	4630      	mov	r0, r6
 800462c:	4639      	mov	r1, r7
 800462e:	f7fb fdcf 	bl	80001d0 <__aeabi_dsub>
 8004632:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004636:	4606      	mov	r6, r0
 8004638:	460f      	mov	r7, r1
 800463a:	4620      	mov	r0, r4
 800463c:	4629      	mov	r1, r5
 800463e:	f7fb fdc7 	bl	80001d0 <__aeabi_dsub>
 8004642:	4602      	mov	r2, r0
 8004644:	460b      	mov	r3, r1
 8004646:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800464a:	f7fb fdc1 	bl	80001d0 <__aeabi_dsub>
 800464e:	4642      	mov	r2, r8
 8004650:	464b      	mov	r3, r9
 8004652:	f7fb ff75 	bl	8000540 <__aeabi_dmul>
 8004656:	4602      	mov	r2, r0
 8004658:	460b      	mov	r3, r1
 800465a:	4630      	mov	r0, r6
 800465c:	4639      	mov	r1, r7
 800465e:	f7fb fdb7 	bl	80001d0 <__aeabi_dsub>
 8004662:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8004666:	f7fb ff6b 	bl	8000540 <__aeabi_dmul>
 800466a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800466e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004672:	4610      	mov	r0, r2
 8004674:	4619      	mov	r1, r3
 8004676:	f7fb ff63 	bl	8000540 <__aeabi_dmul>
 800467a:	a37b      	add	r3, pc, #492	; (adr r3, 8004868 <__ieee754_pow+0x6d0>)
 800467c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004680:	4604      	mov	r4, r0
 8004682:	460d      	mov	r5, r1
 8004684:	f7fb ff5c 	bl	8000540 <__aeabi_dmul>
 8004688:	a379      	add	r3, pc, #484	; (adr r3, 8004870 <__ieee754_pow+0x6d8>)
 800468a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800468e:	f7fb fda1 	bl	80001d4 <__adddf3>
 8004692:	4622      	mov	r2, r4
 8004694:	462b      	mov	r3, r5
 8004696:	f7fb ff53 	bl	8000540 <__aeabi_dmul>
 800469a:	a377      	add	r3, pc, #476	; (adr r3, 8004878 <__ieee754_pow+0x6e0>)
 800469c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a0:	f7fb fd98 	bl	80001d4 <__adddf3>
 80046a4:	4622      	mov	r2, r4
 80046a6:	462b      	mov	r3, r5
 80046a8:	f7fb ff4a 	bl	8000540 <__aeabi_dmul>
 80046ac:	a374      	add	r3, pc, #464	; (adr r3, 8004880 <__ieee754_pow+0x6e8>)
 80046ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046b2:	f7fb fd8f 	bl	80001d4 <__adddf3>
 80046b6:	4622      	mov	r2, r4
 80046b8:	462b      	mov	r3, r5
 80046ba:	f7fb ff41 	bl	8000540 <__aeabi_dmul>
 80046be:	a372      	add	r3, pc, #456	; (adr r3, 8004888 <__ieee754_pow+0x6f0>)
 80046c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046c4:	f7fb fd86 	bl	80001d4 <__adddf3>
 80046c8:	4622      	mov	r2, r4
 80046ca:	462b      	mov	r3, r5
 80046cc:	f7fb ff38 	bl	8000540 <__aeabi_dmul>
 80046d0:	a36f      	add	r3, pc, #444	; (adr r3, 8004890 <__ieee754_pow+0x6f8>)
 80046d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046d6:	f7fb fd7d 	bl	80001d4 <__adddf3>
 80046da:	4622      	mov	r2, r4
 80046dc:	4606      	mov	r6, r0
 80046de:	460f      	mov	r7, r1
 80046e0:	462b      	mov	r3, r5
 80046e2:	4620      	mov	r0, r4
 80046e4:	4629      	mov	r1, r5
 80046e6:	f7fb ff2b 	bl	8000540 <__aeabi_dmul>
 80046ea:	4602      	mov	r2, r0
 80046ec:	460b      	mov	r3, r1
 80046ee:	4630      	mov	r0, r6
 80046f0:	4639      	mov	r1, r7
 80046f2:	f7fb ff25 	bl	8000540 <__aeabi_dmul>
 80046f6:	4642      	mov	r2, r8
 80046f8:	4604      	mov	r4, r0
 80046fa:	460d      	mov	r5, r1
 80046fc:	464b      	mov	r3, r9
 80046fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004702:	f7fb fd67 	bl	80001d4 <__adddf3>
 8004706:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800470a:	f7fb ff19 	bl	8000540 <__aeabi_dmul>
 800470e:	4622      	mov	r2, r4
 8004710:	462b      	mov	r3, r5
 8004712:	f7fb fd5f 	bl	80001d4 <__adddf3>
 8004716:	4642      	mov	r2, r8
 8004718:	4606      	mov	r6, r0
 800471a:	460f      	mov	r7, r1
 800471c:	464b      	mov	r3, r9
 800471e:	4640      	mov	r0, r8
 8004720:	4649      	mov	r1, r9
 8004722:	f7fb ff0d 	bl	8000540 <__aeabi_dmul>
 8004726:	2200      	movs	r2, #0
 8004728:	4b68      	ldr	r3, [pc, #416]	; (80048cc <__ieee754_pow+0x734>)
 800472a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800472e:	f7fb fd51 	bl	80001d4 <__adddf3>
 8004732:	4632      	mov	r2, r6
 8004734:	463b      	mov	r3, r7
 8004736:	f7fb fd4d 	bl	80001d4 <__adddf3>
 800473a:	9802      	ldr	r0, [sp, #8]
 800473c:	460d      	mov	r5, r1
 800473e:	4604      	mov	r4, r0
 8004740:	4602      	mov	r2, r0
 8004742:	460b      	mov	r3, r1
 8004744:	4640      	mov	r0, r8
 8004746:	4649      	mov	r1, r9
 8004748:	f7fb fefa 	bl	8000540 <__aeabi_dmul>
 800474c:	2200      	movs	r2, #0
 800474e:	4680      	mov	r8, r0
 8004750:	4689      	mov	r9, r1
 8004752:	4b5e      	ldr	r3, [pc, #376]	; (80048cc <__ieee754_pow+0x734>)
 8004754:	4620      	mov	r0, r4
 8004756:	4629      	mov	r1, r5
 8004758:	f7fb fd3a 	bl	80001d0 <__aeabi_dsub>
 800475c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004760:	f7fb fd36 	bl	80001d0 <__aeabi_dsub>
 8004764:	4602      	mov	r2, r0
 8004766:	460b      	mov	r3, r1
 8004768:	4630      	mov	r0, r6
 800476a:	4639      	mov	r1, r7
 800476c:	f7fb fd30 	bl	80001d0 <__aeabi_dsub>
 8004770:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004774:	f7fb fee4 	bl	8000540 <__aeabi_dmul>
 8004778:	4622      	mov	r2, r4
 800477a:	4606      	mov	r6, r0
 800477c:	460f      	mov	r7, r1
 800477e:	462b      	mov	r3, r5
 8004780:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004784:	f7fb fedc 	bl	8000540 <__aeabi_dmul>
 8004788:	4602      	mov	r2, r0
 800478a:	460b      	mov	r3, r1
 800478c:	4630      	mov	r0, r6
 800478e:	4639      	mov	r1, r7
 8004790:	f7fb fd20 	bl	80001d4 <__adddf3>
 8004794:	4606      	mov	r6, r0
 8004796:	460f      	mov	r7, r1
 8004798:	4602      	mov	r2, r0
 800479a:	460b      	mov	r3, r1
 800479c:	4640      	mov	r0, r8
 800479e:	4649      	mov	r1, r9
 80047a0:	f7fb fd18 	bl	80001d4 <__adddf3>
 80047a4:	9802      	ldr	r0, [sp, #8]
 80047a6:	a33c      	add	r3, pc, #240	; (adr r3, 8004898 <__ieee754_pow+0x700>)
 80047a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ac:	4604      	mov	r4, r0
 80047ae:	460d      	mov	r5, r1
 80047b0:	f7fb fec6 	bl	8000540 <__aeabi_dmul>
 80047b4:	4642      	mov	r2, r8
 80047b6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80047ba:	464b      	mov	r3, r9
 80047bc:	4620      	mov	r0, r4
 80047be:	4629      	mov	r1, r5
 80047c0:	f7fb fd06 	bl	80001d0 <__aeabi_dsub>
 80047c4:	4602      	mov	r2, r0
 80047c6:	460b      	mov	r3, r1
 80047c8:	4630      	mov	r0, r6
 80047ca:	4639      	mov	r1, r7
 80047cc:	f7fb fd00 	bl	80001d0 <__aeabi_dsub>
 80047d0:	a333      	add	r3, pc, #204	; (adr r3, 80048a0 <__ieee754_pow+0x708>)
 80047d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047d6:	f7fb feb3 	bl	8000540 <__aeabi_dmul>
 80047da:	a333      	add	r3, pc, #204	; (adr r3, 80048a8 <__ieee754_pow+0x710>)
 80047dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047e0:	4606      	mov	r6, r0
 80047e2:	460f      	mov	r7, r1
 80047e4:	4620      	mov	r0, r4
 80047e6:	4629      	mov	r1, r5
 80047e8:	f7fb feaa 	bl	8000540 <__aeabi_dmul>
 80047ec:	4602      	mov	r2, r0
 80047ee:	460b      	mov	r3, r1
 80047f0:	4630      	mov	r0, r6
 80047f2:	4639      	mov	r1, r7
 80047f4:	f7fb fcee 	bl	80001d4 <__adddf3>
 80047f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80047fa:	4b35      	ldr	r3, [pc, #212]	; (80048d0 <__ieee754_pow+0x738>)
 80047fc:	4413      	add	r3, r2
 80047fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004802:	f7fb fce7 	bl	80001d4 <__adddf3>
 8004806:	4604      	mov	r4, r0
 8004808:	9809      	ldr	r0, [sp, #36]	; 0x24
 800480a:	460d      	mov	r5, r1
 800480c:	f7fb fe2e 	bl	800046c <__aeabi_i2d>
 8004810:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004812:	4b30      	ldr	r3, [pc, #192]	; (80048d4 <__ieee754_pow+0x73c>)
 8004814:	4413      	add	r3, r2
 8004816:	e9d3 8900 	ldrd	r8, r9, [r3]
 800481a:	4606      	mov	r6, r0
 800481c:	460f      	mov	r7, r1
 800481e:	4622      	mov	r2, r4
 8004820:	462b      	mov	r3, r5
 8004822:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004826:	f7fb fcd5 	bl	80001d4 <__adddf3>
 800482a:	4642      	mov	r2, r8
 800482c:	464b      	mov	r3, r9
 800482e:	f7fb fcd1 	bl	80001d4 <__adddf3>
 8004832:	4632      	mov	r2, r6
 8004834:	463b      	mov	r3, r7
 8004836:	f7fb fccd 	bl	80001d4 <__adddf3>
 800483a:	9802      	ldr	r0, [sp, #8]
 800483c:	4632      	mov	r2, r6
 800483e:	463b      	mov	r3, r7
 8004840:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004844:	f7fb fcc4 	bl	80001d0 <__aeabi_dsub>
 8004848:	4642      	mov	r2, r8
 800484a:	464b      	mov	r3, r9
 800484c:	f7fb fcc0 	bl	80001d0 <__aeabi_dsub>
 8004850:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004854:	e607      	b.n	8004466 <__ieee754_pow+0x2ce>
 8004856:	f04f 0a01 	mov.w	sl, #1
 800485a:	e6a5      	b.n	80045a8 <__ieee754_pow+0x410>
 800485c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 80048b0 <__ieee754_pow+0x718>
 8004860:	e613      	b.n	800448a <__ieee754_pow+0x2f2>
 8004862:	bf00      	nop
 8004864:	f3af 8000 	nop.w
 8004868:	4a454eef 	.word	0x4a454eef
 800486c:	3fca7e28 	.word	0x3fca7e28
 8004870:	93c9db65 	.word	0x93c9db65
 8004874:	3fcd864a 	.word	0x3fcd864a
 8004878:	a91d4101 	.word	0xa91d4101
 800487c:	3fd17460 	.word	0x3fd17460
 8004880:	518f264d 	.word	0x518f264d
 8004884:	3fd55555 	.word	0x3fd55555
 8004888:	db6fabff 	.word	0xdb6fabff
 800488c:	3fdb6db6 	.word	0x3fdb6db6
 8004890:	33333303 	.word	0x33333303
 8004894:	3fe33333 	.word	0x3fe33333
 8004898:	e0000000 	.word	0xe0000000
 800489c:	3feec709 	.word	0x3feec709
 80048a0:	dc3a03fd 	.word	0xdc3a03fd
 80048a4:	3feec709 	.word	0x3feec709
 80048a8:	145b01f5 	.word	0x145b01f5
 80048ac:	be3e2fe0 	.word	0xbe3e2fe0
 80048b0:	00000000 	.word	0x00000000
 80048b4:	3ff00000 	.word	0x3ff00000
 80048b8:	43400000 	.word	0x43400000
 80048bc:	0003988e 	.word	0x0003988e
 80048c0:	000bb679 	.word	0x000bb679
 80048c4:	08004fc8 	.word	0x08004fc8
 80048c8:	3ff00000 	.word	0x3ff00000
 80048cc:	40080000 	.word	0x40080000
 80048d0:	08004fe8 	.word	0x08004fe8
 80048d4:	08004fd8 	.word	0x08004fd8
 80048d8:	a3b4      	add	r3, pc, #720	; (adr r3, 8004bac <__ieee754_pow+0xa14>)
 80048da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048de:	4640      	mov	r0, r8
 80048e0:	4649      	mov	r1, r9
 80048e2:	f7fb fc77 	bl	80001d4 <__adddf3>
 80048e6:	4622      	mov	r2, r4
 80048e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80048ec:	462b      	mov	r3, r5
 80048ee:	4630      	mov	r0, r6
 80048f0:	4639      	mov	r1, r7
 80048f2:	f7fb fc6d 	bl	80001d0 <__aeabi_dsub>
 80048f6:	4602      	mov	r2, r0
 80048f8:	460b      	mov	r3, r1
 80048fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80048fe:	f7fc f8af 	bl	8000a60 <__aeabi_dcmpgt>
 8004902:	2800      	cmp	r0, #0
 8004904:	f47f adfe 	bne.w	8004504 <__ieee754_pow+0x36c>
 8004908:	4aa3      	ldr	r2, [pc, #652]	; (8004b98 <__ieee754_pow+0xa00>)
 800490a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800490e:	4293      	cmp	r3, r2
 8004910:	f340 810a 	ble.w	8004b28 <__ieee754_pow+0x990>
 8004914:	151b      	asrs	r3, r3, #20
 8004916:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800491a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800491e:	fa4a f303 	asr.w	r3, sl, r3
 8004922:	445b      	add	r3, fp
 8004924:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8004928:	4e9c      	ldr	r6, [pc, #624]	; (8004b9c <__ieee754_pow+0xa04>)
 800492a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800492e:	4116      	asrs	r6, r2
 8004930:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8004934:	2000      	movs	r0, #0
 8004936:	ea23 0106 	bic.w	r1, r3, r6
 800493a:	f1c2 0214 	rsb	r2, r2, #20
 800493e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8004942:	fa4a fa02 	asr.w	sl, sl, r2
 8004946:	f1bb 0f00 	cmp.w	fp, #0
 800494a:	4602      	mov	r2, r0
 800494c:	460b      	mov	r3, r1
 800494e:	4620      	mov	r0, r4
 8004950:	4629      	mov	r1, r5
 8004952:	bfb8      	it	lt
 8004954:	f1ca 0a00 	rsblt	sl, sl, #0
 8004958:	f7fb fc3a 	bl	80001d0 <__aeabi_dsub>
 800495c:	e9cd 0100 	strd	r0, r1, [sp]
 8004960:	4642      	mov	r2, r8
 8004962:	464b      	mov	r3, r9
 8004964:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004968:	f7fb fc34 	bl	80001d4 <__adddf3>
 800496c:	2000      	movs	r0, #0
 800496e:	a378      	add	r3, pc, #480	; (adr r3, 8004b50 <__ieee754_pow+0x9b8>)
 8004970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004974:	4604      	mov	r4, r0
 8004976:	460d      	mov	r5, r1
 8004978:	f7fb fde2 	bl	8000540 <__aeabi_dmul>
 800497c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004980:	4606      	mov	r6, r0
 8004982:	460f      	mov	r7, r1
 8004984:	4620      	mov	r0, r4
 8004986:	4629      	mov	r1, r5
 8004988:	f7fb fc22 	bl	80001d0 <__aeabi_dsub>
 800498c:	4602      	mov	r2, r0
 800498e:	460b      	mov	r3, r1
 8004990:	4640      	mov	r0, r8
 8004992:	4649      	mov	r1, r9
 8004994:	f7fb fc1c 	bl	80001d0 <__aeabi_dsub>
 8004998:	a36f      	add	r3, pc, #444	; (adr r3, 8004b58 <__ieee754_pow+0x9c0>)
 800499a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800499e:	f7fb fdcf 	bl	8000540 <__aeabi_dmul>
 80049a2:	a36f      	add	r3, pc, #444	; (adr r3, 8004b60 <__ieee754_pow+0x9c8>)
 80049a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049a8:	4680      	mov	r8, r0
 80049aa:	4689      	mov	r9, r1
 80049ac:	4620      	mov	r0, r4
 80049ae:	4629      	mov	r1, r5
 80049b0:	f7fb fdc6 	bl	8000540 <__aeabi_dmul>
 80049b4:	4602      	mov	r2, r0
 80049b6:	460b      	mov	r3, r1
 80049b8:	4640      	mov	r0, r8
 80049ba:	4649      	mov	r1, r9
 80049bc:	f7fb fc0a 	bl	80001d4 <__adddf3>
 80049c0:	4604      	mov	r4, r0
 80049c2:	460d      	mov	r5, r1
 80049c4:	4602      	mov	r2, r0
 80049c6:	460b      	mov	r3, r1
 80049c8:	4630      	mov	r0, r6
 80049ca:	4639      	mov	r1, r7
 80049cc:	f7fb fc02 	bl	80001d4 <__adddf3>
 80049d0:	4632      	mov	r2, r6
 80049d2:	463b      	mov	r3, r7
 80049d4:	4680      	mov	r8, r0
 80049d6:	4689      	mov	r9, r1
 80049d8:	f7fb fbfa 	bl	80001d0 <__aeabi_dsub>
 80049dc:	4602      	mov	r2, r0
 80049de:	460b      	mov	r3, r1
 80049e0:	4620      	mov	r0, r4
 80049e2:	4629      	mov	r1, r5
 80049e4:	f7fb fbf4 	bl	80001d0 <__aeabi_dsub>
 80049e8:	4642      	mov	r2, r8
 80049ea:	4606      	mov	r6, r0
 80049ec:	460f      	mov	r7, r1
 80049ee:	464b      	mov	r3, r9
 80049f0:	4640      	mov	r0, r8
 80049f2:	4649      	mov	r1, r9
 80049f4:	f7fb fda4 	bl	8000540 <__aeabi_dmul>
 80049f8:	a35b      	add	r3, pc, #364	; (adr r3, 8004b68 <__ieee754_pow+0x9d0>)
 80049fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049fe:	4604      	mov	r4, r0
 8004a00:	460d      	mov	r5, r1
 8004a02:	f7fb fd9d 	bl	8000540 <__aeabi_dmul>
 8004a06:	a35a      	add	r3, pc, #360	; (adr r3, 8004b70 <__ieee754_pow+0x9d8>)
 8004a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a0c:	f7fb fbe0 	bl	80001d0 <__aeabi_dsub>
 8004a10:	4622      	mov	r2, r4
 8004a12:	462b      	mov	r3, r5
 8004a14:	f7fb fd94 	bl	8000540 <__aeabi_dmul>
 8004a18:	a357      	add	r3, pc, #348	; (adr r3, 8004b78 <__ieee754_pow+0x9e0>)
 8004a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a1e:	f7fb fbd9 	bl	80001d4 <__adddf3>
 8004a22:	4622      	mov	r2, r4
 8004a24:	462b      	mov	r3, r5
 8004a26:	f7fb fd8b 	bl	8000540 <__aeabi_dmul>
 8004a2a:	a355      	add	r3, pc, #340	; (adr r3, 8004b80 <__ieee754_pow+0x9e8>)
 8004a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a30:	f7fb fbce 	bl	80001d0 <__aeabi_dsub>
 8004a34:	4622      	mov	r2, r4
 8004a36:	462b      	mov	r3, r5
 8004a38:	f7fb fd82 	bl	8000540 <__aeabi_dmul>
 8004a3c:	a352      	add	r3, pc, #328	; (adr r3, 8004b88 <__ieee754_pow+0x9f0>)
 8004a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a42:	f7fb fbc7 	bl	80001d4 <__adddf3>
 8004a46:	4622      	mov	r2, r4
 8004a48:	462b      	mov	r3, r5
 8004a4a:	f7fb fd79 	bl	8000540 <__aeabi_dmul>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	460b      	mov	r3, r1
 8004a52:	4640      	mov	r0, r8
 8004a54:	4649      	mov	r1, r9
 8004a56:	f7fb fbbb 	bl	80001d0 <__aeabi_dsub>
 8004a5a:	4604      	mov	r4, r0
 8004a5c:	460d      	mov	r5, r1
 8004a5e:	4602      	mov	r2, r0
 8004a60:	460b      	mov	r3, r1
 8004a62:	4640      	mov	r0, r8
 8004a64:	4649      	mov	r1, r9
 8004a66:	f7fb fd6b 	bl	8000540 <__aeabi_dmul>
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	e9cd 0100 	strd	r0, r1, [sp]
 8004a70:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004a74:	4620      	mov	r0, r4
 8004a76:	4629      	mov	r1, r5
 8004a78:	f7fb fbaa 	bl	80001d0 <__aeabi_dsub>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	460b      	mov	r3, r1
 8004a80:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004a84:	f7fb fe86 	bl	8000794 <__aeabi_ddiv>
 8004a88:	4632      	mov	r2, r6
 8004a8a:	4604      	mov	r4, r0
 8004a8c:	460d      	mov	r5, r1
 8004a8e:	463b      	mov	r3, r7
 8004a90:	4640      	mov	r0, r8
 8004a92:	4649      	mov	r1, r9
 8004a94:	f7fb fd54 	bl	8000540 <__aeabi_dmul>
 8004a98:	4632      	mov	r2, r6
 8004a9a:	463b      	mov	r3, r7
 8004a9c:	f7fb fb9a 	bl	80001d4 <__adddf3>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	460b      	mov	r3, r1
 8004aa4:	4620      	mov	r0, r4
 8004aa6:	4629      	mov	r1, r5
 8004aa8:	f7fb fb92 	bl	80001d0 <__aeabi_dsub>
 8004aac:	4642      	mov	r2, r8
 8004aae:	464b      	mov	r3, r9
 8004ab0:	f7fb fb8e 	bl	80001d0 <__aeabi_dsub>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	460b      	mov	r3, r1
 8004ab8:	2000      	movs	r0, #0
 8004aba:	4939      	ldr	r1, [pc, #228]	; (8004ba0 <__ieee754_pow+0xa08>)
 8004abc:	f7fb fb88 	bl	80001d0 <__aeabi_dsub>
 8004ac0:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8004ac4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8004ac8:	4602      	mov	r2, r0
 8004aca:	460b      	mov	r3, r1
 8004acc:	da2f      	bge.n	8004b2e <__ieee754_pow+0x996>
 8004ace:	4650      	mov	r0, sl
 8004ad0:	ec43 2b10 	vmov	d0, r2, r3
 8004ad4:	f000 f9c0 	bl	8004e58 <scalbn>
 8004ad8:	ec51 0b10 	vmov	r0, r1, d0
 8004adc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004ae0:	f7ff bbf1 	b.w	80042c6 <__ieee754_pow+0x12e>
 8004ae4:	4b2f      	ldr	r3, [pc, #188]	; (8004ba4 <__ieee754_pow+0xa0c>)
 8004ae6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8004aea:	429e      	cmp	r6, r3
 8004aec:	f77f af0c 	ble.w	8004908 <__ieee754_pow+0x770>
 8004af0:	4b2d      	ldr	r3, [pc, #180]	; (8004ba8 <__ieee754_pow+0xa10>)
 8004af2:	440b      	add	r3, r1
 8004af4:	4303      	orrs	r3, r0
 8004af6:	d00b      	beq.n	8004b10 <__ieee754_pow+0x978>
 8004af8:	a325      	add	r3, pc, #148	; (adr r3, 8004b90 <__ieee754_pow+0x9f8>)
 8004afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004afe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b02:	f7fb fd1d 	bl	8000540 <__aeabi_dmul>
 8004b06:	a322      	add	r3, pc, #136	; (adr r3, 8004b90 <__ieee754_pow+0x9f8>)
 8004b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b0c:	f7ff bbdb 	b.w	80042c6 <__ieee754_pow+0x12e>
 8004b10:	4622      	mov	r2, r4
 8004b12:	462b      	mov	r3, r5
 8004b14:	f7fb fb5c 	bl	80001d0 <__aeabi_dsub>
 8004b18:	4642      	mov	r2, r8
 8004b1a:	464b      	mov	r3, r9
 8004b1c:	f7fb ff96 	bl	8000a4c <__aeabi_dcmpge>
 8004b20:	2800      	cmp	r0, #0
 8004b22:	f43f aef1 	beq.w	8004908 <__ieee754_pow+0x770>
 8004b26:	e7e7      	b.n	8004af8 <__ieee754_pow+0x960>
 8004b28:	f04f 0a00 	mov.w	sl, #0
 8004b2c:	e718      	b.n	8004960 <__ieee754_pow+0x7c8>
 8004b2e:	4621      	mov	r1, r4
 8004b30:	e7d4      	b.n	8004adc <__ieee754_pow+0x944>
 8004b32:	2000      	movs	r0, #0
 8004b34:	491a      	ldr	r1, [pc, #104]	; (8004ba0 <__ieee754_pow+0xa08>)
 8004b36:	f7ff bb8f 	b.w	8004258 <__ieee754_pow+0xc0>
 8004b3a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004b3e:	f7ff bb8b 	b.w	8004258 <__ieee754_pow+0xc0>
 8004b42:	4630      	mov	r0, r6
 8004b44:	4639      	mov	r1, r7
 8004b46:	f7ff bb87 	b.w	8004258 <__ieee754_pow+0xc0>
 8004b4a:	4693      	mov	fp, r2
 8004b4c:	f7ff bb98 	b.w	8004280 <__ieee754_pow+0xe8>
 8004b50:	00000000 	.word	0x00000000
 8004b54:	3fe62e43 	.word	0x3fe62e43
 8004b58:	fefa39ef 	.word	0xfefa39ef
 8004b5c:	3fe62e42 	.word	0x3fe62e42
 8004b60:	0ca86c39 	.word	0x0ca86c39
 8004b64:	be205c61 	.word	0xbe205c61
 8004b68:	72bea4d0 	.word	0x72bea4d0
 8004b6c:	3e663769 	.word	0x3e663769
 8004b70:	c5d26bf1 	.word	0xc5d26bf1
 8004b74:	3ebbbd41 	.word	0x3ebbbd41
 8004b78:	af25de2c 	.word	0xaf25de2c
 8004b7c:	3f11566a 	.word	0x3f11566a
 8004b80:	16bebd93 	.word	0x16bebd93
 8004b84:	3f66c16c 	.word	0x3f66c16c
 8004b88:	5555553e 	.word	0x5555553e
 8004b8c:	3fc55555 	.word	0x3fc55555
 8004b90:	c2f8f359 	.word	0xc2f8f359
 8004b94:	01a56e1f 	.word	0x01a56e1f
 8004b98:	3fe00000 	.word	0x3fe00000
 8004b9c:	000fffff 	.word	0x000fffff
 8004ba0:	3ff00000 	.word	0x3ff00000
 8004ba4:	4090cbff 	.word	0x4090cbff
 8004ba8:	3f6f3400 	.word	0x3f6f3400
 8004bac:	652b82fe 	.word	0x652b82fe
 8004bb0:	3c971547 	.word	0x3c971547

08004bb4 <__ieee754_sqrt>:
 8004bb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bb8:	4955      	ldr	r1, [pc, #340]	; (8004d10 <__ieee754_sqrt+0x15c>)
 8004bba:	ec55 4b10 	vmov	r4, r5, d0
 8004bbe:	43a9      	bics	r1, r5
 8004bc0:	462b      	mov	r3, r5
 8004bc2:	462a      	mov	r2, r5
 8004bc4:	d112      	bne.n	8004bec <__ieee754_sqrt+0x38>
 8004bc6:	ee10 2a10 	vmov	r2, s0
 8004bca:	ee10 0a10 	vmov	r0, s0
 8004bce:	4629      	mov	r1, r5
 8004bd0:	f7fb fcb6 	bl	8000540 <__aeabi_dmul>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	460b      	mov	r3, r1
 8004bd8:	4620      	mov	r0, r4
 8004bda:	4629      	mov	r1, r5
 8004bdc:	f7fb fafa 	bl	80001d4 <__adddf3>
 8004be0:	4604      	mov	r4, r0
 8004be2:	460d      	mov	r5, r1
 8004be4:	ec45 4b10 	vmov	d0, r4, r5
 8004be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004bec:	2d00      	cmp	r5, #0
 8004bee:	ee10 0a10 	vmov	r0, s0
 8004bf2:	4621      	mov	r1, r4
 8004bf4:	dc0f      	bgt.n	8004c16 <__ieee754_sqrt+0x62>
 8004bf6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8004bfa:	4330      	orrs	r0, r6
 8004bfc:	d0f2      	beq.n	8004be4 <__ieee754_sqrt+0x30>
 8004bfe:	b155      	cbz	r5, 8004c16 <__ieee754_sqrt+0x62>
 8004c00:	ee10 2a10 	vmov	r2, s0
 8004c04:	4620      	mov	r0, r4
 8004c06:	4629      	mov	r1, r5
 8004c08:	f7fb fae2 	bl	80001d0 <__aeabi_dsub>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	460b      	mov	r3, r1
 8004c10:	f7fb fdc0 	bl	8000794 <__aeabi_ddiv>
 8004c14:	e7e4      	b.n	8004be0 <__ieee754_sqrt+0x2c>
 8004c16:	151b      	asrs	r3, r3, #20
 8004c18:	d073      	beq.n	8004d02 <__ieee754_sqrt+0x14e>
 8004c1a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004c1e:	07dd      	lsls	r5, r3, #31
 8004c20:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8004c24:	bf48      	it	mi
 8004c26:	0fc8      	lsrmi	r0, r1, #31
 8004c28:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004c2c:	bf44      	itt	mi
 8004c2e:	0049      	lslmi	r1, r1, #1
 8004c30:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8004c34:	2500      	movs	r5, #0
 8004c36:	1058      	asrs	r0, r3, #1
 8004c38:	0fcb      	lsrs	r3, r1, #31
 8004c3a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8004c3e:	0049      	lsls	r1, r1, #1
 8004c40:	2316      	movs	r3, #22
 8004c42:	462c      	mov	r4, r5
 8004c44:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8004c48:	19a7      	adds	r7, r4, r6
 8004c4a:	4297      	cmp	r7, r2
 8004c4c:	bfde      	ittt	le
 8004c4e:	19bc      	addle	r4, r7, r6
 8004c50:	1bd2      	suble	r2, r2, r7
 8004c52:	19ad      	addle	r5, r5, r6
 8004c54:	0fcf      	lsrs	r7, r1, #31
 8004c56:	3b01      	subs	r3, #1
 8004c58:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8004c5c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8004c60:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8004c64:	d1f0      	bne.n	8004c48 <__ieee754_sqrt+0x94>
 8004c66:	f04f 0c20 	mov.w	ip, #32
 8004c6a:	469e      	mov	lr, r3
 8004c6c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8004c70:	42a2      	cmp	r2, r4
 8004c72:	eb06 070e 	add.w	r7, r6, lr
 8004c76:	dc02      	bgt.n	8004c7e <__ieee754_sqrt+0xca>
 8004c78:	d112      	bne.n	8004ca0 <__ieee754_sqrt+0xec>
 8004c7a:	428f      	cmp	r7, r1
 8004c7c:	d810      	bhi.n	8004ca0 <__ieee754_sqrt+0xec>
 8004c7e:	2f00      	cmp	r7, #0
 8004c80:	eb07 0e06 	add.w	lr, r7, r6
 8004c84:	da42      	bge.n	8004d0c <__ieee754_sqrt+0x158>
 8004c86:	f1be 0f00 	cmp.w	lr, #0
 8004c8a:	db3f      	blt.n	8004d0c <__ieee754_sqrt+0x158>
 8004c8c:	f104 0801 	add.w	r8, r4, #1
 8004c90:	1b12      	subs	r2, r2, r4
 8004c92:	428f      	cmp	r7, r1
 8004c94:	bf88      	it	hi
 8004c96:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8004c9a:	1bc9      	subs	r1, r1, r7
 8004c9c:	4433      	add	r3, r6
 8004c9e:	4644      	mov	r4, r8
 8004ca0:	0052      	lsls	r2, r2, #1
 8004ca2:	f1bc 0c01 	subs.w	ip, ip, #1
 8004ca6:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8004caa:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8004cae:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8004cb2:	d1dd      	bne.n	8004c70 <__ieee754_sqrt+0xbc>
 8004cb4:	430a      	orrs	r2, r1
 8004cb6:	d006      	beq.n	8004cc6 <__ieee754_sqrt+0x112>
 8004cb8:	1c5c      	adds	r4, r3, #1
 8004cba:	bf13      	iteet	ne
 8004cbc:	3301      	addne	r3, #1
 8004cbe:	3501      	addeq	r5, #1
 8004cc0:	4663      	moveq	r3, ip
 8004cc2:	f023 0301 	bicne.w	r3, r3, #1
 8004cc6:	106a      	asrs	r2, r5, #1
 8004cc8:	085b      	lsrs	r3, r3, #1
 8004cca:	07e9      	lsls	r1, r5, #31
 8004ccc:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8004cd0:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8004cd4:	bf48      	it	mi
 8004cd6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8004cda:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8004cde:	461c      	mov	r4, r3
 8004ce0:	e780      	b.n	8004be4 <__ieee754_sqrt+0x30>
 8004ce2:	0aca      	lsrs	r2, r1, #11
 8004ce4:	3815      	subs	r0, #21
 8004ce6:	0549      	lsls	r1, r1, #21
 8004ce8:	2a00      	cmp	r2, #0
 8004cea:	d0fa      	beq.n	8004ce2 <__ieee754_sqrt+0x12e>
 8004cec:	02d6      	lsls	r6, r2, #11
 8004cee:	d50a      	bpl.n	8004d06 <__ieee754_sqrt+0x152>
 8004cf0:	f1c3 0420 	rsb	r4, r3, #32
 8004cf4:	fa21 f404 	lsr.w	r4, r1, r4
 8004cf8:	1e5d      	subs	r5, r3, #1
 8004cfa:	4099      	lsls	r1, r3
 8004cfc:	4322      	orrs	r2, r4
 8004cfe:	1b43      	subs	r3, r0, r5
 8004d00:	e78b      	b.n	8004c1a <__ieee754_sqrt+0x66>
 8004d02:	4618      	mov	r0, r3
 8004d04:	e7f0      	b.n	8004ce8 <__ieee754_sqrt+0x134>
 8004d06:	0052      	lsls	r2, r2, #1
 8004d08:	3301      	adds	r3, #1
 8004d0a:	e7ef      	b.n	8004cec <__ieee754_sqrt+0x138>
 8004d0c:	46a0      	mov	r8, r4
 8004d0e:	e7bf      	b.n	8004c90 <__ieee754_sqrt+0xdc>
 8004d10:	7ff00000 	.word	0x7ff00000

08004d14 <fabs>:
 8004d14:	ec51 0b10 	vmov	r0, r1, d0
 8004d18:	ee10 2a10 	vmov	r2, s0
 8004d1c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004d20:	ec43 2b10 	vmov	d0, r2, r3
 8004d24:	4770      	bx	lr

08004d26 <finite>:
 8004d26:	ee10 3a90 	vmov	r3, s1
 8004d2a:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8004d2e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8004d32:	0fc0      	lsrs	r0, r0, #31
 8004d34:	4770      	bx	lr

08004d36 <matherr>:
 8004d36:	2000      	movs	r0, #0
 8004d38:	4770      	bx	lr
 8004d3a:	0000      	movs	r0, r0
 8004d3c:	0000      	movs	r0, r0
	...

08004d40 <nan>:
 8004d40:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8004d48 <nan+0x8>
 8004d44:	4770      	bx	lr
 8004d46:	bf00      	nop
 8004d48:	00000000 	.word	0x00000000
 8004d4c:	7ff80000 	.word	0x7ff80000

08004d50 <rint>:
 8004d50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004d52:	ec51 0b10 	vmov	r0, r1, d0
 8004d56:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8004d5a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8004d5e:	2e13      	cmp	r6, #19
 8004d60:	460b      	mov	r3, r1
 8004d62:	ee10 4a10 	vmov	r4, s0
 8004d66:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8004d6a:	dc56      	bgt.n	8004e1a <rint+0xca>
 8004d6c:	2e00      	cmp	r6, #0
 8004d6e:	da2b      	bge.n	8004dc8 <rint+0x78>
 8004d70:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8004d74:	4302      	orrs	r2, r0
 8004d76:	d023      	beq.n	8004dc0 <rint+0x70>
 8004d78:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8004d7c:	4302      	orrs	r2, r0
 8004d7e:	4254      	negs	r4, r2
 8004d80:	4314      	orrs	r4, r2
 8004d82:	0c4b      	lsrs	r3, r1, #17
 8004d84:	0b24      	lsrs	r4, r4, #12
 8004d86:	045b      	lsls	r3, r3, #17
 8004d88:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8004d8c:	ea44 0103 	orr.w	r1, r4, r3
 8004d90:	460b      	mov	r3, r1
 8004d92:	492f      	ldr	r1, [pc, #188]	; (8004e50 <rint+0x100>)
 8004d94:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8004d98:	e9d1 6700 	ldrd	r6, r7, [r1]
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	4639      	mov	r1, r7
 8004da0:	4630      	mov	r0, r6
 8004da2:	f7fb fa17 	bl	80001d4 <__adddf3>
 8004da6:	e9cd 0100 	strd	r0, r1, [sp]
 8004daa:	463b      	mov	r3, r7
 8004dac:	4632      	mov	r2, r6
 8004dae:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004db2:	f7fb fa0d 	bl	80001d0 <__aeabi_dsub>
 8004db6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004dba:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8004dbe:	4639      	mov	r1, r7
 8004dc0:	ec41 0b10 	vmov	d0, r0, r1
 8004dc4:	b003      	add	sp, #12
 8004dc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004dc8:	4a22      	ldr	r2, [pc, #136]	; (8004e54 <rint+0x104>)
 8004dca:	4132      	asrs	r2, r6
 8004dcc:	ea01 0702 	and.w	r7, r1, r2
 8004dd0:	4307      	orrs	r7, r0
 8004dd2:	d0f5      	beq.n	8004dc0 <rint+0x70>
 8004dd4:	0852      	lsrs	r2, r2, #1
 8004dd6:	4011      	ands	r1, r2
 8004dd8:	430c      	orrs	r4, r1
 8004dda:	d00b      	beq.n	8004df4 <rint+0xa4>
 8004ddc:	ea23 0202 	bic.w	r2, r3, r2
 8004de0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004de4:	2e13      	cmp	r6, #19
 8004de6:	fa43 f306 	asr.w	r3, r3, r6
 8004dea:	bf0c      	ite	eq
 8004dec:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8004df0:	2400      	movne	r4, #0
 8004df2:	4313      	orrs	r3, r2
 8004df4:	4916      	ldr	r1, [pc, #88]	; (8004e50 <rint+0x100>)
 8004df6:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8004dfa:	4622      	mov	r2, r4
 8004dfc:	e9d5 4500 	ldrd	r4, r5, [r5]
 8004e00:	4620      	mov	r0, r4
 8004e02:	4629      	mov	r1, r5
 8004e04:	f7fb f9e6 	bl	80001d4 <__adddf3>
 8004e08:	e9cd 0100 	strd	r0, r1, [sp]
 8004e0c:	4622      	mov	r2, r4
 8004e0e:	462b      	mov	r3, r5
 8004e10:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004e14:	f7fb f9dc 	bl	80001d0 <__aeabi_dsub>
 8004e18:	e7d2      	b.n	8004dc0 <rint+0x70>
 8004e1a:	2e33      	cmp	r6, #51	; 0x33
 8004e1c:	dd07      	ble.n	8004e2e <rint+0xde>
 8004e1e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8004e22:	d1cd      	bne.n	8004dc0 <rint+0x70>
 8004e24:	ee10 2a10 	vmov	r2, s0
 8004e28:	f7fb f9d4 	bl	80001d4 <__adddf3>
 8004e2c:	e7c8      	b.n	8004dc0 <rint+0x70>
 8004e2e:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8004e32:	f04f 32ff 	mov.w	r2, #4294967295
 8004e36:	40f2      	lsrs	r2, r6
 8004e38:	4210      	tst	r0, r2
 8004e3a:	d0c1      	beq.n	8004dc0 <rint+0x70>
 8004e3c:	0852      	lsrs	r2, r2, #1
 8004e3e:	4210      	tst	r0, r2
 8004e40:	bf1f      	itttt	ne
 8004e42:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8004e46:	ea20 0202 	bicne.w	r2, r0, r2
 8004e4a:	4134      	asrne	r4, r6
 8004e4c:	4314      	orrne	r4, r2
 8004e4e:	e7d1      	b.n	8004df4 <rint+0xa4>
 8004e50:	08004ff8 	.word	0x08004ff8
 8004e54:	000fffff 	.word	0x000fffff

08004e58 <scalbn>:
 8004e58:	b570      	push	{r4, r5, r6, lr}
 8004e5a:	ec55 4b10 	vmov	r4, r5, d0
 8004e5e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8004e62:	4606      	mov	r6, r0
 8004e64:	462b      	mov	r3, r5
 8004e66:	b9aa      	cbnz	r2, 8004e94 <scalbn+0x3c>
 8004e68:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8004e6c:	4323      	orrs	r3, r4
 8004e6e:	d03b      	beq.n	8004ee8 <scalbn+0x90>
 8004e70:	4b31      	ldr	r3, [pc, #196]	; (8004f38 <scalbn+0xe0>)
 8004e72:	4629      	mov	r1, r5
 8004e74:	2200      	movs	r2, #0
 8004e76:	ee10 0a10 	vmov	r0, s0
 8004e7a:	f7fb fb61 	bl	8000540 <__aeabi_dmul>
 8004e7e:	4b2f      	ldr	r3, [pc, #188]	; (8004f3c <scalbn+0xe4>)
 8004e80:	429e      	cmp	r6, r3
 8004e82:	4604      	mov	r4, r0
 8004e84:	460d      	mov	r5, r1
 8004e86:	da12      	bge.n	8004eae <scalbn+0x56>
 8004e88:	a327      	add	r3, pc, #156	; (adr r3, 8004f28 <scalbn+0xd0>)
 8004e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e8e:	f7fb fb57 	bl	8000540 <__aeabi_dmul>
 8004e92:	e009      	b.n	8004ea8 <scalbn+0x50>
 8004e94:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8004e98:	428a      	cmp	r2, r1
 8004e9a:	d10c      	bne.n	8004eb6 <scalbn+0x5e>
 8004e9c:	ee10 2a10 	vmov	r2, s0
 8004ea0:	4620      	mov	r0, r4
 8004ea2:	4629      	mov	r1, r5
 8004ea4:	f7fb f996 	bl	80001d4 <__adddf3>
 8004ea8:	4604      	mov	r4, r0
 8004eaa:	460d      	mov	r5, r1
 8004eac:	e01c      	b.n	8004ee8 <scalbn+0x90>
 8004eae:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8004eb2:	460b      	mov	r3, r1
 8004eb4:	3a36      	subs	r2, #54	; 0x36
 8004eb6:	4432      	add	r2, r6
 8004eb8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8004ebc:	428a      	cmp	r2, r1
 8004ebe:	dd0b      	ble.n	8004ed8 <scalbn+0x80>
 8004ec0:	ec45 4b11 	vmov	d1, r4, r5
 8004ec4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8004f30 <scalbn+0xd8>
 8004ec8:	f000 f83c 	bl	8004f44 <copysign>
 8004ecc:	a318      	add	r3, pc, #96	; (adr r3, 8004f30 <scalbn+0xd8>)
 8004ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ed2:	ec51 0b10 	vmov	r0, r1, d0
 8004ed6:	e7da      	b.n	8004e8e <scalbn+0x36>
 8004ed8:	2a00      	cmp	r2, #0
 8004eda:	dd08      	ble.n	8004eee <scalbn+0x96>
 8004edc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004ee0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004ee4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004ee8:	ec45 4b10 	vmov	d0, r4, r5
 8004eec:	bd70      	pop	{r4, r5, r6, pc}
 8004eee:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8004ef2:	da0d      	bge.n	8004f10 <scalbn+0xb8>
 8004ef4:	f24c 3350 	movw	r3, #50000	; 0xc350
 8004ef8:	429e      	cmp	r6, r3
 8004efa:	ec45 4b11 	vmov	d1, r4, r5
 8004efe:	dce1      	bgt.n	8004ec4 <scalbn+0x6c>
 8004f00:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8004f28 <scalbn+0xd0>
 8004f04:	f000 f81e 	bl	8004f44 <copysign>
 8004f08:	a307      	add	r3, pc, #28	; (adr r3, 8004f28 <scalbn+0xd0>)
 8004f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f0e:	e7e0      	b.n	8004ed2 <scalbn+0x7a>
 8004f10:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004f14:	3236      	adds	r2, #54	; 0x36
 8004f16:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004f1a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004f1e:	4620      	mov	r0, r4
 8004f20:	4629      	mov	r1, r5
 8004f22:	2200      	movs	r2, #0
 8004f24:	4b06      	ldr	r3, [pc, #24]	; (8004f40 <scalbn+0xe8>)
 8004f26:	e7b2      	b.n	8004e8e <scalbn+0x36>
 8004f28:	c2f8f359 	.word	0xc2f8f359
 8004f2c:	01a56e1f 	.word	0x01a56e1f
 8004f30:	8800759c 	.word	0x8800759c
 8004f34:	7e37e43c 	.word	0x7e37e43c
 8004f38:	43500000 	.word	0x43500000
 8004f3c:	ffff3cb0 	.word	0xffff3cb0
 8004f40:	3c900000 	.word	0x3c900000

08004f44 <copysign>:
 8004f44:	ec51 0b10 	vmov	r0, r1, d0
 8004f48:	ee11 0a90 	vmov	r0, s3
 8004f4c:	ee10 2a10 	vmov	r2, s0
 8004f50:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8004f54:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8004f58:	ea41 0300 	orr.w	r3, r1, r0
 8004f5c:	ec43 2b10 	vmov	d0, r2, r3
 8004f60:	4770      	bx	lr
	...

08004f64 <_init>:
 8004f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f66:	bf00      	nop
 8004f68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f6a:	bc08      	pop	{r3}
 8004f6c:	469e      	mov	lr, r3
 8004f6e:	4770      	bx	lr

08004f70 <_fini>:
 8004f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f72:	bf00      	nop
 8004f74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f76:	bc08      	pop	{r3}
 8004f78:	469e      	mov	lr, r3
 8004f7a:	4770      	bx	lr
