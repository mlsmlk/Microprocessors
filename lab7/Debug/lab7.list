
lab7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f78  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  08007108  08007108  00017108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080072a0  080072a0  000200f8  2**0
                  CONTENTS
  4 .ARM          00000008  080072a0  080072a0  000172a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080072a8  080072a8  000200f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080072a8  080072a8  000172a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080072ac  080072ac  000172ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f8  20000000  080072b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001278  200000f8  080073a8  000200f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001370  080073a8  00021370  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d568  00000000  00000000  00020128  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003c87  00000000  00000000  0003d690  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001900  00000000  00000000  00041318  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000016f8  00000000  00000000  00042c18  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002a999  00000000  00000000  00044310  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000152bc  00000000  00000000  0006eca9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00101178  00000000  00000000  00083f65  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001850dd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006998  00000000  00000000  00185158  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000f8 	.word	0x200000f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080070f0 	.word	0x080070f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000fc 	.word	0x200000fc
 80001cc:	080070f0 	.word	0x080070f0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000576:	2300      	movs	r3, #0
 8000578:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800057a:	2003      	movs	r0, #3
 800057c:	f000 f8dd 	bl	800073a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000580:	2000      	movs	r0, #0
 8000582:	f006 f863 	bl	800664c <HAL_InitTick>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d002      	beq.n	8000592 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800058c:	2301      	movs	r3, #1
 800058e:	71fb      	strb	r3, [r7, #7]
 8000590:	e001      	b.n	8000596 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000592:	f005 ff8b 	bl	80064ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000596:	79fb      	ldrb	r3, [r7, #7]
}
 8000598:	4618      	mov	r0, r3
 800059a:	3708      	adds	r7, #8
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}

080005a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80005a4:	4b06      	ldr	r3, [pc, #24]	; (80005c0 <HAL_IncTick+0x20>)
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	461a      	mov	r2, r3
 80005aa:	4b06      	ldr	r3, [pc, #24]	; (80005c4 <HAL_IncTick+0x24>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	4413      	add	r3, r2
 80005b0:	4a04      	ldr	r2, [pc, #16]	; (80005c4 <HAL_IncTick+0x24>)
 80005b2:	6013      	str	r3, [r2, #0]
}
 80005b4:	bf00      	nop
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	20000004 	.word	0x20000004
 80005c4:	20001088 	.word	0x20001088

080005c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  return uwTick;
 80005cc:	4b03      	ldr	r3, [pc, #12]	; (80005dc <HAL_GetTick+0x14>)
 80005ce:	681b      	ldr	r3, [r3, #0]
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	20001088 	.word	0x20001088

080005e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b085      	sub	sp, #20
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	f003 0307 	and.w	r3, r3, #7
 80005ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005f0:	4b0c      	ldr	r3, [pc, #48]	; (8000624 <__NVIC_SetPriorityGrouping+0x44>)
 80005f2:	68db      	ldr	r3, [r3, #12]
 80005f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005f6:	68ba      	ldr	r2, [r7, #8]
 80005f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005fc:	4013      	ands	r3, r2
 80005fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000604:	68bb      	ldr	r3, [r7, #8]
 8000606:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000608:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800060c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000610:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000612:	4a04      	ldr	r2, [pc, #16]	; (8000624 <__NVIC_SetPriorityGrouping+0x44>)
 8000614:	68bb      	ldr	r3, [r7, #8]
 8000616:	60d3      	str	r3, [r2, #12]
}
 8000618:	bf00      	nop
 800061a:	3714      	adds	r7, #20
 800061c:	46bd      	mov	sp, r7
 800061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000622:	4770      	bx	lr
 8000624:	e000ed00 	.word	0xe000ed00

08000628 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800062c:	4b04      	ldr	r3, [pc, #16]	; (8000640 <__NVIC_GetPriorityGrouping+0x18>)
 800062e:	68db      	ldr	r3, [r3, #12]
 8000630:	0a1b      	lsrs	r3, r3, #8
 8000632:	f003 0307 	and.w	r3, r3, #7
}
 8000636:	4618      	mov	r0, r3
 8000638:	46bd      	mov	sp, r7
 800063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063e:	4770      	bx	lr
 8000640:	e000ed00 	.word	0xe000ed00

08000644 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
 800064a:	4603      	mov	r3, r0
 800064c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800064e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000652:	2b00      	cmp	r3, #0
 8000654:	db0b      	blt.n	800066e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000656:	79fb      	ldrb	r3, [r7, #7]
 8000658:	f003 021f 	and.w	r2, r3, #31
 800065c:	4907      	ldr	r1, [pc, #28]	; (800067c <__NVIC_EnableIRQ+0x38>)
 800065e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000662:	095b      	lsrs	r3, r3, #5
 8000664:	2001      	movs	r0, #1
 8000666:	fa00 f202 	lsl.w	r2, r0, r2
 800066a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800066e:	bf00      	nop
 8000670:	370c      	adds	r7, #12
 8000672:	46bd      	mov	sp, r7
 8000674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop
 800067c:	e000e100 	.word	0xe000e100

08000680 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000680:	b480      	push	{r7}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0
 8000686:	4603      	mov	r3, r0
 8000688:	6039      	str	r1, [r7, #0]
 800068a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800068c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000690:	2b00      	cmp	r3, #0
 8000692:	db0a      	blt.n	80006aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000694:	683b      	ldr	r3, [r7, #0]
 8000696:	b2da      	uxtb	r2, r3
 8000698:	490c      	ldr	r1, [pc, #48]	; (80006cc <__NVIC_SetPriority+0x4c>)
 800069a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800069e:	0112      	lsls	r2, r2, #4
 80006a0:	b2d2      	uxtb	r2, r2
 80006a2:	440b      	add	r3, r1
 80006a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006a8:	e00a      	b.n	80006c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	b2da      	uxtb	r2, r3
 80006ae:	4908      	ldr	r1, [pc, #32]	; (80006d0 <__NVIC_SetPriority+0x50>)
 80006b0:	79fb      	ldrb	r3, [r7, #7]
 80006b2:	f003 030f 	and.w	r3, r3, #15
 80006b6:	3b04      	subs	r3, #4
 80006b8:	0112      	lsls	r2, r2, #4
 80006ba:	b2d2      	uxtb	r2, r2
 80006bc:	440b      	add	r3, r1
 80006be:	761a      	strb	r2, [r3, #24]
}
 80006c0:	bf00      	nop
 80006c2:	370c      	adds	r7, #12
 80006c4:	46bd      	mov	sp, r7
 80006c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ca:	4770      	bx	lr
 80006cc:	e000e100 	.word	0xe000e100
 80006d0:	e000ed00 	.word	0xe000ed00

080006d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b089      	sub	sp, #36	; 0x24
 80006d8:	af00      	add	r7, sp, #0
 80006da:	60f8      	str	r0, [r7, #12]
 80006dc:	60b9      	str	r1, [r7, #8]
 80006de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	f003 0307 	and.w	r3, r3, #7
 80006e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006e8:	69fb      	ldr	r3, [r7, #28]
 80006ea:	f1c3 0307 	rsb	r3, r3, #7
 80006ee:	2b04      	cmp	r3, #4
 80006f0:	bf28      	it	cs
 80006f2:	2304      	movcs	r3, #4
 80006f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006f6:	69fb      	ldr	r3, [r7, #28]
 80006f8:	3304      	adds	r3, #4
 80006fa:	2b06      	cmp	r3, #6
 80006fc:	d902      	bls.n	8000704 <NVIC_EncodePriority+0x30>
 80006fe:	69fb      	ldr	r3, [r7, #28]
 8000700:	3b03      	subs	r3, #3
 8000702:	e000      	b.n	8000706 <NVIC_EncodePriority+0x32>
 8000704:	2300      	movs	r3, #0
 8000706:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000708:	f04f 32ff 	mov.w	r2, #4294967295
 800070c:	69bb      	ldr	r3, [r7, #24]
 800070e:	fa02 f303 	lsl.w	r3, r2, r3
 8000712:	43da      	mvns	r2, r3
 8000714:	68bb      	ldr	r3, [r7, #8]
 8000716:	401a      	ands	r2, r3
 8000718:	697b      	ldr	r3, [r7, #20]
 800071a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800071c:	f04f 31ff 	mov.w	r1, #4294967295
 8000720:	697b      	ldr	r3, [r7, #20]
 8000722:	fa01 f303 	lsl.w	r3, r1, r3
 8000726:	43d9      	mvns	r1, r3
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800072c:	4313      	orrs	r3, r2
         );
}
 800072e:	4618      	mov	r0, r3
 8000730:	3724      	adds	r7, #36	; 0x24
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr

0800073a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800073a:	b580      	push	{r7, lr}
 800073c:	b082      	sub	sp, #8
 800073e:	af00      	add	r7, sp, #0
 8000740:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000742:	6878      	ldr	r0, [r7, #4]
 8000744:	f7ff ff4c 	bl	80005e0 <__NVIC_SetPriorityGrouping>
}
 8000748:	bf00      	nop
 800074a:	3708      	adds	r7, #8
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}

08000750 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b086      	sub	sp, #24
 8000754:	af00      	add	r7, sp, #0
 8000756:	4603      	mov	r3, r0
 8000758:	60b9      	str	r1, [r7, #8]
 800075a:	607a      	str	r2, [r7, #4]
 800075c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800075e:	2300      	movs	r3, #0
 8000760:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000762:	f7ff ff61 	bl	8000628 <__NVIC_GetPriorityGrouping>
 8000766:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000768:	687a      	ldr	r2, [r7, #4]
 800076a:	68b9      	ldr	r1, [r7, #8]
 800076c:	6978      	ldr	r0, [r7, #20]
 800076e:	f7ff ffb1 	bl	80006d4 <NVIC_EncodePriority>
 8000772:	4602      	mov	r2, r0
 8000774:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000778:	4611      	mov	r1, r2
 800077a:	4618      	mov	r0, r3
 800077c:	f7ff ff80 	bl	8000680 <__NVIC_SetPriority>
}
 8000780:	bf00      	nop
 8000782:	3718      	adds	r7, #24
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}

08000788 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	4603      	mov	r3, r0
 8000790:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000796:	4618      	mov	r0, r3
 8000798:	f7ff ff54 	bl	8000644 <__NVIC_EnableIRQ>
}
 800079c:	bf00      	nop
 800079e:	3708      	adds	r7, #8
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}

080007a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b087      	sub	sp, #28
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
 80007ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80007ae:	2300      	movs	r3, #0
 80007b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007b2:	e17f      	b.n	8000ab4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	681a      	ldr	r2, [r3, #0]
 80007b8:	2101      	movs	r1, #1
 80007ba:	697b      	ldr	r3, [r7, #20]
 80007bc:	fa01 f303 	lsl.w	r3, r1, r3
 80007c0:	4013      	ands	r3, r2
 80007c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	f000 8171 	beq.w	8000aae <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007cc:	683b      	ldr	r3, [r7, #0]
 80007ce:	685b      	ldr	r3, [r3, #4]
 80007d0:	2b01      	cmp	r3, #1
 80007d2:	d00b      	beq.n	80007ec <HAL_GPIO_Init+0x48>
 80007d4:	683b      	ldr	r3, [r7, #0]
 80007d6:	685b      	ldr	r3, [r3, #4]
 80007d8:	2b02      	cmp	r3, #2
 80007da:	d007      	beq.n	80007ec <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007dc:	683b      	ldr	r3, [r7, #0]
 80007de:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007e0:	2b11      	cmp	r3, #17
 80007e2:	d003      	beq.n	80007ec <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	685b      	ldr	r3, [r3, #4]
 80007e8:	2b12      	cmp	r3, #18
 80007ea:	d130      	bne.n	800084e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	689b      	ldr	r3, [r3, #8]
 80007f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80007f2:	697b      	ldr	r3, [r7, #20]
 80007f4:	005b      	lsls	r3, r3, #1
 80007f6:	2203      	movs	r2, #3
 80007f8:	fa02 f303 	lsl.w	r3, r2, r3
 80007fc:	43db      	mvns	r3, r3
 80007fe:	693a      	ldr	r2, [r7, #16]
 8000800:	4013      	ands	r3, r2
 8000802:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	68da      	ldr	r2, [r3, #12]
 8000808:	697b      	ldr	r3, [r7, #20]
 800080a:	005b      	lsls	r3, r3, #1
 800080c:	fa02 f303 	lsl.w	r3, r2, r3
 8000810:	693a      	ldr	r2, [r7, #16]
 8000812:	4313      	orrs	r3, r2
 8000814:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	693a      	ldr	r2, [r7, #16]
 800081a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	685b      	ldr	r3, [r3, #4]
 8000820:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000822:	2201      	movs	r2, #1
 8000824:	697b      	ldr	r3, [r7, #20]
 8000826:	fa02 f303 	lsl.w	r3, r2, r3
 800082a:	43db      	mvns	r3, r3
 800082c:	693a      	ldr	r2, [r7, #16]
 800082e:	4013      	ands	r3, r2
 8000830:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000832:	683b      	ldr	r3, [r7, #0]
 8000834:	685b      	ldr	r3, [r3, #4]
 8000836:	091b      	lsrs	r3, r3, #4
 8000838:	f003 0201 	and.w	r2, r3, #1
 800083c:	697b      	ldr	r3, [r7, #20]
 800083e:	fa02 f303 	lsl.w	r3, r2, r3
 8000842:	693a      	ldr	r2, [r7, #16]
 8000844:	4313      	orrs	r3, r2
 8000846:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	693a      	ldr	r2, [r7, #16]
 800084c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	685b      	ldr	r3, [r3, #4]
 8000852:	f003 0303 	and.w	r3, r3, #3
 8000856:	2b03      	cmp	r3, #3
 8000858:	d118      	bne.n	800088c <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800085e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000860:	2201      	movs	r2, #1
 8000862:	697b      	ldr	r3, [r7, #20]
 8000864:	fa02 f303 	lsl.w	r3, r2, r3
 8000868:	43db      	mvns	r3, r3
 800086a:	693a      	ldr	r2, [r7, #16]
 800086c:	4013      	ands	r3, r2
 800086e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	685b      	ldr	r3, [r3, #4]
 8000874:	08db      	lsrs	r3, r3, #3
 8000876:	f003 0201 	and.w	r2, r3, #1
 800087a:	697b      	ldr	r3, [r7, #20]
 800087c:	fa02 f303 	lsl.w	r3, r2, r3
 8000880:	693a      	ldr	r2, [r7, #16]
 8000882:	4313      	orrs	r3, r2
 8000884:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	693a      	ldr	r2, [r7, #16]
 800088a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	68db      	ldr	r3, [r3, #12]
 8000890:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000892:	697b      	ldr	r3, [r7, #20]
 8000894:	005b      	lsls	r3, r3, #1
 8000896:	2203      	movs	r2, #3
 8000898:	fa02 f303 	lsl.w	r3, r2, r3
 800089c:	43db      	mvns	r3, r3
 800089e:	693a      	ldr	r2, [r7, #16]
 80008a0:	4013      	ands	r3, r2
 80008a2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	689a      	ldr	r2, [r3, #8]
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	005b      	lsls	r3, r3, #1
 80008ac:	fa02 f303 	lsl.w	r3, r2, r3
 80008b0:	693a      	ldr	r2, [r7, #16]
 80008b2:	4313      	orrs	r3, r2
 80008b4:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	693a      	ldr	r2, [r7, #16]
 80008ba:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	685b      	ldr	r3, [r3, #4]
 80008c0:	2b02      	cmp	r3, #2
 80008c2:	d003      	beq.n	80008cc <HAL_GPIO_Init+0x128>
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	685b      	ldr	r3, [r3, #4]
 80008c8:	2b12      	cmp	r3, #18
 80008ca:	d123      	bne.n	8000914 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80008cc:	697b      	ldr	r3, [r7, #20]
 80008ce:	08da      	lsrs	r2, r3, #3
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	3208      	adds	r2, #8
 80008d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80008da:	697b      	ldr	r3, [r7, #20]
 80008dc:	f003 0307 	and.w	r3, r3, #7
 80008e0:	009b      	lsls	r3, r3, #2
 80008e2:	220f      	movs	r2, #15
 80008e4:	fa02 f303 	lsl.w	r3, r2, r3
 80008e8:	43db      	mvns	r3, r3
 80008ea:	693a      	ldr	r2, [r7, #16]
 80008ec:	4013      	ands	r3, r2
 80008ee:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	691a      	ldr	r2, [r3, #16]
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	f003 0307 	and.w	r3, r3, #7
 80008fa:	009b      	lsls	r3, r3, #2
 80008fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000900:	693a      	ldr	r2, [r7, #16]
 8000902:	4313      	orrs	r3, r2
 8000904:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000906:	697b      	ldr	r3, [r7, #20]
 8000908:	08da      	lsrs	r2, r3, #3
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	3208      	adds	r2, #8
 800090e:	6939      	ldr	r1, [r7, #16]
 8000910:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800091a:	697b      	ldr	r3, [r7, #20]
 800091c:	005b      	lsls	r3, r3, #1
 800091e:	2203      	movs	r2, #3
 8000920:	fa02 f303 	lsl.w	r3, r2, r3
 8000924:	43db      	mvns	r3, r3
 8000926:	693a      	ldr	r2, [r7, #16]
 8000928:	4013      	ands	r3, r2
 800092a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	685b      	ldr	r3, [r3, #4]
 8000930:	f003 0203 	and.w	r2, r3, #3
 8000934:	697b      	ldr	r3, [r7, #20]
 8000936:	005b      	lsls	r3, r3, #1
 8000938:	fa02 f303 	lsl.w	r3, r2, r3
 800093c:	693a      	ldr	r2, [r7, #16]
 800093e:	4313      	orrs	r3, r2
 8000940:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	693a      	ldr	r2, [r7, #16]
 8000946:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	685b      	ldr	r3, [r3, #4]
 800094c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000950:	2b00      	cmp	r3, #0
 8000952:	f000 80ac 	beq.w	8000aae <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000956:	4b5e      	ldr	r3, [pc, #376]	; (8000ad0 <HAL_GPIO_Init+0x32c>)
 8000958:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800095a:	4a5d      	ldr	r2, [pc, #372]	; (8000ad0 <HAL_GPIO_Init+0x32c>)
 800095c:	f043 0301 	orr.w	r3, r3, #1
 8000960:	6613      	str	r3, [r2, #96]	; 0x60
 8000962:	4b5b      	ldr	r3, [pc, #364]	; (8000ad0 <HAL_GPIO_Init+0x32c>)
 8000964:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000966:	f003 0301 	and.w	r3, r3, #1
 800096a:	60bb      	str	r3, [r7, #8]
 800096c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800096e:	4a59      	ldr	r2, [pc, #356]	; (8000ad4 <HAL_GPIO_Init+0x330>)
 8000970:	697b      	ldr	r3, [r7, #20]
 8000972:	089b      	lsrs	r3, r3, #2
 8000974:	3302      	adds	r3, #2
 8000976:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800097a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	f003 0303 	and.w	r3, r3, #3
 8000982:	009b      	lsls	r3, r3, #2
 8000984:	220f      	movs	r2, #15
 8000986:	fa02 f303 	lsl.w	r3, r2, r3
 800098a:	43db      	mvns	r3, r3
 800098c:	693a      	ldr	r2, [r7, #16]
 800098e:	4013      	ands	r3, r2
 8000990:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000998:	d025      	beq.n	80009e6 <HAL_GPIO_Init+0x242>
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	4a4e      	ldr	r2, [pc, #312]	; (8000ad8 <HAL_GPIO_Init+0x334>)
 800099e:	4293      	cmp	r3, r2
 80009a0:	d01f      	beq.n	80009e2 <HAL_GPIO_Init+0x23e>
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	4a4d      	ldr	r2, [pc, #308]	; (8000adc <HAL_GPIO_Init+0x338>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d019      	beq.n	80009de <HAL_GPIO_Init+0x23a>
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	4a4c      	ldr	r2, [pc, #304]	; (8000ae0 <HAL_GPIO_Init+0x33c>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d013      	beq.n	80009da <HAL_GPIO_Init+0x236>
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	4a4b      	ldr	r2, [pc, #300]	; (8000ae4 <HAL_GPIO_Init+0x340>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d00d      	beq.n	80009d6 <HAL_GPIO_Init+0x232>
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	4a4a      	ldr	r2, [pc, #296]	; (8000ae8 <HAL_GPIO_Init+0x344>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d007      	beq.n	80009d2 <HAL_GPIO_Init+0x22e>
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	4a49      	ldr	r2, [pc, #292]	; (8000aec <HAL_GPIO_Init+0x348>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d101      	bne.n	80009ce <HAL_GPIO_Init+0x22a>
 80009ca:	2306      	movs	r3, #6
 80009cc:	e00c      	b.n	80009e8 <HAL_GPIO_Init+0x244>
 80009ce:	2307      	movs	r3, #7
 80009d0:	e00a      	b.n	80009e8 <HAL_GPIO_Init+0x244>
 80009d2:	2305      	movs	r3, #5
 80009d4:	e008      	b.n	80009e8 <HAL_GPIO_Init+0x244>
 80009d6:	2304      	movs	r3, #4
 80009d8:	e006      	b.n	80009e8 <HAL_GPIO_Init+0x244>
 80009da:	2303      	movs	r3, #3
 80009dc:	e004      	b.n	80009e8 <HAL_GPIO_Init+0x244>
 80009de:	2302      	movs	r3, #2
 80009e0:	e002      	b.n	80009e8 <HAL_GPIO_Init+0x244>
 80009e2:	2301      	movs	r3, #1
 80009e4:	e000      	b.n	80009e8 <HAL_GPIO_Init+0x244>
 80009e6:	2300      	movs	r3, #0
 80009e8:	697a      	ldr	r2, [r7, #20]
 80009ea:	f002 0203 	and.w	r2, r2, #3
 80009ee:	0092      	lsls	r2, r2, #2
 80009f0:	4093      	lsls	r3, r2
 80009f2:	693a      	ldr	r2, [r7, #16]
 80009f4:	4313      	orrs	r3, r2
 80009f6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80009f8:	4936      	ldr	r1, [pc, #216]	; (8000ad4 <HAL_GPIO_Init+0x330>)
 80009fa:	697b      	ldr	r3, [r7, #20]
 80009fc:	089b      	lsrs	r3, r3, #2
 80009fe:	3302      	adds	r3, #2
 8000a00:	693a      	ldr	r2, [r7, #16]
 8000a02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000a06:	4b3a      	ldr	r3, [pc, #232]	; (8000af0 <HAL_GPIO_Init+0x34c>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	43db      	mvns	r3, r3
 8000a10:	693a      	ldr	r2, [r7, #16]
 8000a12:	4013      	ands	r3, r2
 8000a14:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	685b      	ldr	r3, [r3, #4]
 8000a1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d003      	beq.n	8000a2a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000a22:	693a      	ldr	r2, [r7, #16]
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	4313      	orrs	r3, r2
 8000a28:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000a2a:	4a31      	ldr	r2, [pc, #196]	; (8000af0 <HAL_GPIO_Init+0x34c>)
 8000a2c:	693b      	ldr	r3, [r7, #16]
 8000a2e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000a30:	4b2f      	ldr	r3, [pc, #188]	; (8000af0 <HAL_GPIO_Init+0x34c>)
 8000a32:	685b      	ldr	r3, [r3, #4]
 8000a34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	43db      	mvns	r3, r3
 8000a3a:	693a      	ldr	r2, [r7, #16]
 8000a3c:	4013      	ands	r3, r2
 8000a3e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	685b      	ldr	r3, [r3, #4]
 8000a44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d003      	beq.n	8000a54 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000a4c:	693a      	ldr	r2, [r7, #16]
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	4313      	orrs	r3, r2
 8000a52:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000a54:	4a26      	ldr	r2, [pc, #152]	; (8000af0 <HAL_GPIO_Init+0x34c>)
 8000a56:	693b      	ldr	r3, [r7, #16]
 8000a58:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000a5a:	4b25      	ldr	r3, [pc, #148]	; (8000af0 <HAL_GPIO_Init+0x34c>)
 8000a5c:	689b      	ldr	r3, [r3, #8]
 8000a5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	43db      	mvns	r3, r3
 8000a64:	693a      	ldr	r2, [r7, #16]
 8000a66:	4013      	ands	r3, r2
 8000a68:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	685b      	ldr	r3, [r3, #4]
 8000a6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d003      	beq.n	8000a7e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000a76:	693a      	ldr	r2, [r7, #16]
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	4313      	orrs	r3, r2
 8000a7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000a7e:	4a1c      	ldr	r2, [pc, #112]	; (8000af0 <HAL_GPIO_Init+0x34c>)
 8000a80:	693b      	ldr	r3, [r7, #16]
 8000a82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000a84:	4b1a      	ldr	r3, [pc, #104]	; (8000af0 <HAL_GPIO_Init+0x34c>)
 8000a86:	68db      	ldr	r3, [r3, #12]
 8000a88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	43db      	mvns	r3, r3
 8000a8e:	693a      	ldr	r2, [r7, #16]
 8000a90:	4013      	ands	r3, r2
 8000a92:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d003      	beq.n	8000aa8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000aa0:	693a      	ldr	r2, [r7, #16]
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	4313      	orrs	r3, r2
 8000aa6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000aa8:	4a11      	ldr	r2, [pc, #68]	; (8000af0 <HAL_GPIO_Init+0x34c>)
 8000aaa:	693b      	ldr	r3, [r7, #16]
 8000aac:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000aae:	697b      	ldr	r3, [r7, #20]
 8000ab0:	3301      	adds	r3, #1
 8000ab2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	681a      	ldr	r2, [r3, #0]
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	fa22 f303 	lsr.w	r3, r2, r3
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	f47f ae78 	bne.w	80007b4 <HAL_GPIO_Init+0x10>
  }
}
 8000ac4:	bf00      	nop
 8000ac6:	371c      	adds	r7, #28
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr
 8000ad0:	40021000 	.word	0x40021000
 8000ad4:	40010000 	.word	0x40010000
 8000ad8:	48000400 	.word	0x48000400
 8000adc:	48000800 	.word	0x48000800
 8000ae0:	48000c00 	.word	0x48000c00
 8000ae4:	48001000 	.word	0x48001000
 8000ae8:	48001400 	.word	0x48001400
 8000aec:	48001800 	.word	0x48001800
 8000af0:	40010400 	.word	0x40010400

08000af4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b087      	sub	sp, #28
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
 8000afc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000afe:	2300      	movs	r3, #0
 8000b00:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8000b02:	e0cd      	b.n	8000ca0 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8000b04:	2201      	movs	r2, #1
 8000b06:	697b      	ldr	r3, [r7, #20]
 8000b08:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0c:	683a      	ldr	r2, [r7, #0]
 8000b0e:	4013      	ands	r3, r2
 8000b10:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8000b12:	693b      	ldr	r3, [r7, #16]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	f000 80c0 	beq.w	8000c9a <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8000b1a:	4a68      	ldr	r2, [pc, #416]	; (8000cbc <HAL_GPIO_DeInit+0x1c8>)
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	089b      	lsrs	r3, r3, #2
 8000b20:	3302      	adds	r3, #2
 8000b22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b26:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	f003 0303 	and.w	r3, r3, #3
 8000b2e:	009b      	lsls	r3, r3, #2
 8000b30:	220f      	movs	r2, #15
 8000b32:	fa02 f303 	lsl.w	r3, r2, r3
 8000b36:	68fa      	ldr	r2, [r7, #12]
 8000b38:	4013      	ands	r3, r2
 8000b3a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000b42:	d025      	beq.n	8000b90 <HAL_GPIO_DeInit+0x9c>
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4a5e      	ldr	r2, [pc, #376]	; (8000cc0 <HAL_GPIO_DeInit+0x1cc>)
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	d01f      	beq.n	8000b8c <HAL_GPIO_DeInit+0x98>
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	4a5d      	ldr	r2, [pc, #372]	; (8000cc4 <HAL_GPIO_DeInit+0x1d0>)
 8000b50:	4293      	cmp	r3, r2
 8000b52:	d019      	beq.n	8000b88 <HAL_GPIO_DeInit+0x94>
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	4a5c      	ldr	r2, [pc, #368]	; (8000cc8 <HAL_GPIO_DeInit+0x1d4>)
 8000b58:	4293      	cmp	r3, r2
 8000b5a:	d013      	beq.n	8000b84 <HAL_GPIO_DeInit+0x90>
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	4a5b      	ldr	r2, [pc, #364]	; (8000ccc <HAL_GPIO_DeInit+0x1d8>)
 8000b60:	4293      	cmp	r3, r2
 8000b62:	d00d      	beq.n	8000b80 <HAL_GPIO_DeInit+0x8c>
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	4a5a      	ldr	r2, [pc, #360]	; (8000cd0 <HAL_GPIO_DeInit+0x1dc>)
 8000b68:	4293      	cmp	r3, r2
 8000b6a:	d007      	beq.n	8000b7c <HAL_GPIO_DeInit+0x88>
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	4a59      	ldr	r2, [pc, #356]	; (8000cd4 <HAL_GPIO_DeInit+0x1e0>)
 8000b70:	4293      	cmp	r3, r2
 8000b72:	d101      	bne.n	8000b78 <HAL_GPIO_DeInit+0x84>
 8000b74:	2306      	movs	r3, #6
 8000b76:	e00c      	b.n	8000b92 <HAL_GPIO_DeInit+0x9e>
 8000b78:	2307      	movs	r3, #7
 8000b7a:	e00a      	b.n	8000b92 <HAL_GPIO_DeInit+0x9e>
 8000b7c:	2305      	movs	r3, #5
 8000b7e:	e008      	b.n	8000b92 <HAL_GPIO_DeInit+0x9e>
 8000b80:	2304      	movs	r3, #4
 8000b82:	e006      	b.n	8000b92 <HAL_GPIO_DeInit+0x9e>
 8000b84:	2303      	movs	r3, #3
 8000b86:	e004      	b.n	8000b92 <HAL_GPIO_DeInit+0x9e>
 8000b88:	2302      	movs	r3, #2
 8000b8a:	e002      	b.n	8000b92 <HAL_GPIO_DeInit+0x9e>
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	e000      	b.n	8000b92 <HAL_GPIO_DeInit+0x9e>
 8000b90:	2300      	movs	r3, #0
 8000b92:	697a      	ldr	r2, [r7, #20]
 8000b94:	f002 0203 	and.w	r2, r2, #3
 8000b98:	0092      	lsls	r2, r2, #2
 8000b9a:	4093      	lsls	r3, r2
 8000b9c:	68fa      	ldr	r2, [r7, #12]
 8000b9e:	429a      	cmp	r2, r3
 8000ba0:	d132      	bne.n	8000c08 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8000ba2:	4b4d      	ldr	r3, [pc, #308]	; (8000cd8 <HAL_GPIO_DeInit+0x1e4>)
 8000ba4:	681a      	ldr	r2, [r3, #0]
 8000ba6:	693b      	ldr	r3, [r7, #16]
 8000ba8:	43db      	mvns	r3, r3
 8000baa:	494b      	ldr	r1, [pc, #300]	; (8000cd8 <HAL_GPIO_DeInit+0x1e4>)
 8000bac:	4013      	ands	r3, r2
 8000bae:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8000bb0:	4b49      	ldr	r3, [pc, #292]	; (8000cd8 <HAL_GPIO_DeInit+0x1e4>)
 8000bb2:	685a      	ldr	r2, [r3, #4]
 8000bb4:	693b      	ldr	r3, [r7, #16]
 8000bb6:	43db      	mvns	r3, r3
 8000bb8:	4947      	ldr	r1, [pc, #284]	; (8000cd8 <HAL_GPIO_DeInit+0x1e4>)
 8000bba:	4013      	ands	r3, r2
 8000bbc:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8000bbe:	4b46      	ldr	r3, [pc, #280]	; (8000cd8 <HAL_GPIO_DeInit+0x1e4>)
 8000bc0:	689a      	ldr	r2, [r3, #8]
 8000bc2:	693b      	ldr	r3, [r7, #16]
 8000bc4:	43db      	mvns	r3, r3
 8000bc6:	4944      	ldr	r1, [pc, #272]	; (8000cd8 <HAL_GPIO_DeInit+0x1e4>)
 8000bc8:	4013      	ands	r3, r2
 8000bca:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8000bcc:	4b42      	ldr	r3, [pc, #264]	; (8000cd8 <HAL_GPIO_DeInit+0x1e4>)
 8000bce:	68da      	ldr	r2, [r3, #12]
 8000bd0:	693b      	ldr	r3, [r7, #16]
 8000bd2:	43db      	mvns	r3, r3
 8000bd4:	4940      	ldr	r1, [pc, #256]	; (8000cd8 <HAL_GPIO_DeInit+0x1e4>)
 8000bd6:	4013      	ands	r3, r2
 8000bd8:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	f003 0303 	and.w	r3, r3, #3
 8000be0:	009b      	lsls	r3, r3, #2
 8000be2:	220f      	movs	r2, #15
 8000be4:	fa02 f303 	lsl.w	r3, r2, r3
 8000be8:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8000bea:	4a34      	ldr	r2, [pc, #208]	; (8000cbc <HAL_GPIO_DeInit+0x1c8>)
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	089b      	lsrs	r3, r3, #2
 8000bf0:	3302      	adds	r3, #2
 8000bf2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	43da      	mvns	r2, r3
 8000bfa:	4830      	ldr	r0, [pc, #192]	; (8000cbc <HAL_GPIO_DeInit+0x1c8>)
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	089b      	lsrs	r3, r3, #2
 8000c00:	400a      	ands	r2, r1
 8000c02:	3302      	adds	r3, #2
 8000c04:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681a      	ldr	r2, [r3, #0]
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	005b      	lsls	r3, r3, #1
 8000c10:	2103      	movs	r1, #3
 8000c12:	fa01 f303 	lsl.w	r3, r1, r3
 8000c16:	431a      	orrs	r2, r3
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	08da      	lsrs	r2, r3, #3
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	3208      	adds	r2, #8
 8000c24:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	f003 0307 	and.w	r3, r3, #7
 8000c2e:	009b      	lsls	r3, r3, #2
 8000c30:	220f      	movs	r2, #15
 8000c32:	fa02 f303 	lsl.w	r3, r2, r3
 8000c36:	43db      	mvns	r3, r3
 8000c38:	697a      	ldr	r2, [r7, #20]
 8000c3a:	08d2      	lsrs	r2, r2, #3
 8000c3c:	4019      	ands	r1, r3
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	3208      	adds	r2, #8
 8000c42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	689a      	ldr	r2, [r3, #8]
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	005b      	lsls	r3, r3, #1
 8000c4e:	2103      	movs	r1, #3
 8000c50:	fa01 f303 	lsl.w	r3, r1, r3
 8000c54:	43db      	mvns	r3, r3
 8000c56:	401a      	ands	r2, r3
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	685a      	ldr	r2, [r3, #4]
 8000c60:	2101      	movs	r1, #1
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	fa01 f303 	lsl.w	r3, r1, r3
 8000c68:	43db      	mvns	r3, r3
 8000c6a:	401a      	ands	r2, r3
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	68da      	ldr	r2, [r3, #12]
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	005b      	lsls	r3, r3, #1
 8000c78:	2103      	movs	r1, #3
 8000c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c7e:	43db      	mvns	r3, r3
 8000c80:	401a      	ands	r2, r3
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c8a:	2101      	movs	r1, #1
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c92:	43db      	mvns	r3, r3
 8000c94:	401a      	ands	r2, r3
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8000ca0:	683a      	ldr	r2, [r7, #0]
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	fa22 f303 	lsr.w	r3, r2, r3
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	f47f af2b 	bne.w	8000b04 <HAL_GPIO_DeInit+0x10>
  }
}
 8000cae:	bf00      	nop
 8000cb0:	371c      	adds	r7, #28
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	40010000 	.word	0x40010000
 8000cc0:	48000400 	.word	0x48000400
 8000cc4:	48000800 	.word	0x48000800
 8000cc8:	48000c00 	.word	0x48000c00
 8000ccc:	48001000 	.word	0x48001000
 8000cd0:	48001400 	.word	0x48001400
 8000cd4:	48001800 	.word	0x48001800
 8000cd8:	40010400 	.word	0x40010400

08000cdc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b085      	sub	sp, #20
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
 8000ce4:	460b      	mov	r3, r1
 8000ce6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	691a      	ldr	r2, [r3, #16]
 8000cec:	887b      	ldrh	r3, [r7, #2]
 8000cee:	4013      	ands	r3, r2
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d002      	beq.n	8000cfa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	73fb      	strb	r3, [r7, #15]
 8000cf8:	e001      	b.n	8000cfe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000cfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	3714      	adds	r7, #20
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr

08000d0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
 8000d14:	460b      	mov	r3, r1
 8000d16:	807b      	strh	r3, [r7, #2]
 8000d18:	4613      	mov	r3, r2
 8000d1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d1c:	787b      	ldrb	r3, [r7, #1]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d003      	beq.n	8000d2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d22:	887a      	ldrh	r2, [r7, #2]
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d28:	e002      	b.n	8000d30 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d2a:	887a      	ldrh	r2, [r7, #2]
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d30:	bf00      	nop
 8000d32:	370c      	adds	r7, #12
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr

08000d3c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000d46:	4b08      	ldr	r3, [pc, #32]	; (8000d68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000d48:	695a      	ldr	r2, [r3, #20]
 8000d4a:	88fb      	ldrh	r3, [r7, #6]
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d006      	beq.n	8000d60 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000d52:	4a05      	ldr	r2, [pc, #20]	; (8000d68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000d54:	88fb      	ldrh	r3, [r7, #6]
 8000d56:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000d58:	88fb      	ldrh	r3, [r7, #6]
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f000 f806 	bl	8000d6c <HAL_GPIO_EXTI_Callback>
  }
}
 8000d60:	bf00      	nop
 8000d62:	3708      	adds	r7, #8
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	40010400 	.word	0x40010400

08000d6c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000d76:	bf00      	nop
 8000d78:	370c      	adds	r7, #12
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr

08000d82 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b082      	sub	sp, #8
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d101      	bne.n	8000d94 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000d90:	2301      	movs	r3, #1
 8000d92:	e081      	b.n	8000e98 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d106      	bne.n	8000dae <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2200      	movs	r2, #0
 8000da4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000da8:	6878      	ldr	r0, [r7, #4]
 8000daa:	f005 fba3 	bl	80064f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	2224      	movs	r2, #36	; 0x24
 8000db2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f022 0201 	bic.w	r2, r2, #1
 8000dc4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	685a      	ldr	r2, [r3, #4]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000dd2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	689a      	ldr	r2, [r3, #8]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000de2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	68db      	ldr	r3, [r3, #12]
 8000de8:	2b01      	cmp	r3, #1
 8000dea:	d107      	bne.n	8000dfc <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	689a      	ldr	r2, [r3, #8]
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000df8:	609a      	str	r2, [r3, #8]
 8000dfa:	e006      	b.n	8000e0a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	689a      	ldr	r2, [r3, #8]
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000e08:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	68db      	ldr	r3, [r3, #12]
 8000e0e:	2b02      	cmp	r3, #2
 8000e10:	d104      	bne.n	8000e1c <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e1a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	687a      	ldr	r2, [r7, #4]
 8000e24:	6812      	ldr	r2, [r2, #0]
 8000e26:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e2e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	68da      	ldr	r2, [r3, #12]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000e3e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	691a      	ldr	r2, [r3, #16]
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	695b      	ldr	r3, [r3, #20]
 8000e48:	ea42 0103 	orr.w	r1, r2, r3
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	699b      	ldr	r3, [r3, #24]
 8000e50:	021a      	lsls	r2, r3, #8
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	430a      	orrs	r2, r1
 8000e58:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	69d9      	ldr	r1, [r3, #28]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	6a1a      	ldr	r2, [r3, #32]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	430a      	orrs	r2, r1
 8000e68:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f042 0201 	orr.w	r2, r2, #1
 8000e78:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2220      	movs	r2, #32
 8000e84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2200      	movs	r2, #0
 8000e92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8000e96:	2300      	movs	r3, #0
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	3708      	adds	r7, #8
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d101      	bne.n	8000eb2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	e021      	b.n	8000ef6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2224      	movs	r2, #36	; 0x24
 8000eb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f022 0201 	bic.w	r2, r2, #1
 8000ec8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8000eca:	6878      	ldr	r0, [r7, #4]
 8000ecc:	f005 fb56 	bl	800657c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	2200      	movs	r2, #0
 8000eda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2200      	movs	r2, #0
 8000ef0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8000ef4:	2300      	movs	r3, #0
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
	...

08000f00 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b088      	sub	sp, #32
 8000f04:	af02      	add	r7, sp, #8
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	4608      	mov	r0, r1
 8000f0a:	4611      	mov	r1, r2
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	4603      	mov	r3, r0
 8000f10:	817b      	strh	r3, [r7, #10]
 8000f12:	460b      	mov	r3, r1
 8000f14:	813b      	strh	r3, [r7, #8]
 8000f16:	4613      	mov	r3, r2
 8000f18:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	2b20      	cmp	r3, #32
 8000f24:	f040 80f9 	bne.w	800111a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8000f28:	6a3b      	ldr	r3, [r7, #32]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d002      	beq.n	8000f34 <HAL_I2C_Mem_Write+0x34>
 8000f2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d105      	bne.n	8000f40 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f3a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	e0ed      	b.n	800111c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000f46:	2b01      	cmp	r3, #1
 8000f48:	d101      	bne.n	8000f4e <HAL_I2C_Mem_Write+0x4e>
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	e0e6      	b.n	800111c <HAL_I2C_Mem_Write+0x21c>
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	2201      	movs	r2, #1
 8000f52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000f56:	f7ff fb37 	bl	80005c8 <HAL_GetTick>
 8000f5a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	9300      	str	r3, [sp, #0]
 8000f60:	2319      	movs	r3, #25
 8000f62:	2201      	movs	r2, #1
 8000f64:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f68:	68f8      	ldr	r0, [r7, #12]
 8000f6a:	f000 fac3 	bl	80014f4 <I2C_WaitOnFlagUntilTimeout>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8000f74:	2301      	movs	r3, #1
 8000f76:	e0d1      	b.n	800111c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	2221      	movs	r2, #33	; 0x21
 8000f7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	2240      	movs	r2, #64	; 0x40
 8000f84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	6a3a      	ldr	r2, [r7, #32]
 8000f92:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000f98:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000fa0:	88f8      	ldrh	r0, [r7, #6]
 8000fa2:	893a      	ldrh	r2, [r7, #8]
 8000fa4:	8979      	ldrh	r1, [r7, #10]
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	9301      	str	r3, [sp, #4]
 8000faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fac:	9300      	str	r3, [sp, #0]
 8000fae:	4603      	mov	r3, r0
 8000fb0:	68f8      	ldr	r0, [r7, #12]
 8000fb2:	f000 f9d3 	bl	800135c <I2C_RequestMemoryWrite>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d005      	beq.n	8000fc8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	e0a9      	b.n	800111c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000fcc:	b29b      	uxth	r3, r3
 8000fce:	2bff      	cmp	r3, #255	; 0xff
 8000fd0:	d90e      	bls.n	8000ff0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	22ff      	movs	r2, #255	; 0xff
 8000fd6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000fdc:	b2da      	uxtb	r2, r3
 8000fde:	8979      	ldrh	r1, [r7, #10]
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	9300      	str	r3, [sp, #0]
 8000fe4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000fe8:	68f8      	ldr	r0, [r7, #12]
 8000fea:	f000 fba5 	bl	8001738 <I2C_TransferConfig>
 8000fee:	e00f      	b.n	8001010 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000ff4:	b29a      	uxth	r2, r3
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000ffe:	b2da      	uxtb	r2, r3
 8001000:	8979      	ldrh	r1, [r7, #10]
 8001002:	2300      	movs	r3, #0
 8001004:	9300      	str	r3, [sp, #0]
 8001006:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800100a:	68f8      	ldr	r0, [r7, #12]
 800100c:	f000 fb94 	bl	8001738 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001010:	697a      	ldr	r2, [r7, #20]
 8001012:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001014:	68f8      	ldr	r0, [r7, #12]
 8001016:	f000 faad 	bl	8001574 <I2C_WaitOnTXISFlagUntilTimeout>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001020:	2301      	movs	r3, #1
 8001022:	e07b      	b.n	800111c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001028:	781a      	ldrb	r2, [r3, #0]
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001034:	1c5a      	adds	r2, r3, #1
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800103e:	b29b      	uxth	r3, r3
 8001040:	3b01      	subs	r3, #1
 8001042:	b29a      	uxth	r2, r3
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800104c:	3b01      	subs	r3, #1
 800104e:	b29a      	uxth	r2, r3
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001058:	b29b      	uxth	r3, r3
 800105a:	2b00      	cmp	r3, #0
 800105c:	d034      	beq.n	80010c8 <HAL_I2C_Mem_Write+0x1c8>
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001062:	2b00      	cmp	r3, #0
 8001064:	d130      	bne.n	80010c8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	9300      	str	r3, [sp, #0]
 800106a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800106c:	2200      	movs	r2, #0
 800106e:	2180      	movs	r1, #128	; 0x80
 8001070:	68f8      	ldr	r0, [r7, #12]
 8001072:	f000 fa3f 	bl	80014f4 <I2C_WaitOnFlagUntilTimeout>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800107c:	2301      	movs	r3, #1
 800107e:	e04d      	b.n	800111c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001084:	b29b      	uxth	r3, r3
 8001086:	2bff      	cmp	r3, #255	; 0xff
 8001088:	d90e      	bls.n	80010a8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	22ff      	movs	r2, #255	; 0xff
 800108e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001094:	b2da      	uxtb	r2, r3
 8001096:	8979      	ldrh	r1, [r7, #10]
 8001098:	2300      	movs	r3, #0
 800109a:	9300      	str	r3, [sp, #0]
 800109c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80010a0:	68f8      	ldr	r0, [r7, #12]
 80010a2:	f000 fb49 	bl	8001738 <I2C_TransferConfig>
 80010a6:	e00f      	b.n	80010c8 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010ac:	b29a      	uxth	r2, r3
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010b6:	b2da      	uxtb	r2, r3
 80010b8:	8979      	ldrh	r1, [r7, #10]
 80010ba:	2300      	movs	r3, #0
 80010bc:	9300      	str	r3, [sp, #0]
 80010be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80010c2:	68f8      	ldr	r0, [r7, #12]
 80010c4:	f000 fb38 	bl	8001738 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010cc:	b29b      	uxth	r3, r3
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d19e      	bne.n	8001010 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80010d2:	697a      	ldr	r2, [r7, #20]
 80010d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80010d6:	68f8      	ldr	r0, [r7, #12]
 80010d8:	f000 fa8c 	bl	80015f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
 80010e4:	e01a      	b.n	800111c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	2220      	movs	r2, #32
 80010ec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	6859      	ldr	r1, [r3, #4]
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	4b0a      	ldr	r3, [pc, #40]	; (8001124 <HAL_I2C_Mem_Write+0x224>)
 80010fa:	400b      	ands	r3, r1
 80010fc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	2220      	movs	r2, #32
 8001102:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	2200      	movs	r2, #0
 800110a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	2200      	movs	r2, #0
 8001112:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001116:	2300      	movs	r3, #0
 8001118:	e000      	b.n	800111c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800111a:	2302      	movs	r3, #2
  }
}
 800111c:	4618      	mov	r0, r3
 800111e:	3718      	adds	r7, #24
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	fe00e800 	.word	0xfe00e800

08001128 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b088      	sub	sp, #32
 800112c:	af02      	add	r7, sp, #8
 800112e:	60f8      	str	r0, [r7, #12]
 8001130:	4608      	mov	r0, r1
 8001132:	4611      	mov	r1, r2
 8001134:	461a      	mov	r2, r3
 8001136:	4603      	mov	r3, r0
 8001138:	817b      	strh	r3, [r7, #10]
 800113a:	460b      	mov	r3, r1
 800113c:	813b      	strh	r3, [r7, #8]
 800113e:	4613      	mov	r3, r2
 8001140:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001148:	b2db      	uxtb	r3, r3
 800114a:	2b20      	cmp	r3, #32
 800114c:	f040 80fd 	bne.w	800134a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001150:	6a3b      	ldr	r3, [r7, #32]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d002      	beq.n	800115c <HAL_I2C_Mem_Read+0x34>
 8001156:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001158:	2b00      	cmp	r3, #0
 800115a:	d105      	bne.n	8001168 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001162:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001164:	2301      	movs	r3, #1
 8001166:	e0f1      	b.n	800134c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800116e:	2b01      	cmp	r3, #1
 8001170:	d101      	bne.n	8001176 <HAL_I2C_Mem_Read+0x4e>
 8001172:	2302      	movs	r3, #2
 8001174:	e0ea      	b.n	800134c <HAL_I2C_Mem_Read+0x224>
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	2201      	movs	r2, #1
 800117a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800117e:	f7ff fa23 	bl	80005c8 <HAL_GetTick>
 8001182:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	9300      	str	r3, [sp, #0]
 8001188:	2319      	movs	r3, #25
 800118a:	2201      	movs	r2, #1
 800118c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001190:	68f8      	ldr	r0, [r7, #12]
 8001192:	f000 f9af 	bl	80014f4 <I2C_WaitOnFlagUntilTimeout>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800119c:	2301      	movs	r3, #1
 800119e:	e0d5      	b.n	800134c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	2222      	movs	r2, #34	; 0x22
 80011a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	2240      	movs	r2, #64	; 0x40
 80011ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	2200      	movs	r2, #0
 80011b4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	6a3a      	ldr	r2, [r7, #32]
 80011ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80011c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	2200      	movs	r2, #0
 80011c6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80011c8:	88f8      	ldrh	r0, [r7, #6]
 80011ca:	893a      	ldrh	r2, [r7, #8]
 80011cc:	8979      	ldrh	r1, [r7, #10]
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	9301      	str	r3, [sp, #4]
 80011d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011d4:	9300      	str	r3, [sp, #0]
 80011d6:	4603      	mov	r3, r0
 80011d8:	68f8      	ldr	r0, [r7, #12]
 80011da:	f000 f913 	bl	8001404 <I2C_RequestMemoryRead>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d005      	beq.n	80011f0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	2200      	movs	r2, #0
 80011e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80011ec:	2301      	movs	r3, #1
 80011ee:	e0ad      	b.n	800134c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011f4:	b29b      	uxth	r3, r3
 80011f6:	2bff      	cmp	r3, #255	; 0xff
 80011f8:	d90e      	bls.n	8001218 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	22ff      	movs	r2, #255	; 0xff
 80011fe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001204:	b2da      	uxtb	r2, r3
 8001206:	8979      	ldrh	r1, [r7, #10]
 8001208:	4b52      	ldr	r3, [pc, #328]	; (8001354 <HAL_I2C_Mem_Read+0x22c>)
 800120a:	9300      	str	r3, [sp, #0]
 800120c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001210:	68f8      	ldr	r0, [r7, #12]
 8001212:	f000 fa91 	bl	8001738 <I2C_TransferConfig>
 8001216:	e00f      	b.n	8001238 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800121c:	b29a      	uxth	r2, r3
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001226:	b2da      	uxtb	r2, r3
 8001228:	8979      	ldrh	r1, [r7, #10]
 800122a:	4b4a      	ldr	r3, [pc, #296]	; (8001354 <HAL_I2C_Mem_Read+0x22c>)
 800122c:	9300      	str	r3, [sp, #0]
 800122e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001232:	68f8      	ldr	r0, [r7, #12]
 8001234:	f000 fa80 	bl	8001738 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	9300      	str	r3, [sp, #0]
 800123c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800123e:	2200      	movs	r2, #0
 8001240:	2104      	movs	r1, #4
 8001242:	68f8      	ldr	r0, [r7, #12]
 8001244:	f000 f956 	bl	80014f4 <I2C_WaitOnFlagUntilTimeout>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	e07c      	b.n	800134c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800125c:	b2d2      	uxtb	r2, r2
 800125e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001264:	1c5a      	adds	r2, r3, #1
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800126e:	3b01      	subs	r3, #1
 8001270:	b29a      	uxth	r2, r3
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800127a:	b29b      	uxth	r3, r3
 800127c:	3b01      	subs	r3, #1
 800127e:	b29a      	uxth	r2, r3
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001288:	b29b      	uxth	r3, r3
 800128a:	2b00      	cmp	r3, #0
 800128c:	d034      	beq.n	80012f8 <HAL_I2C_Mem_Read+0x1d0>
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001292:	2b00      	cmp	r3, #0
 8001294:	d130      	bne.n	80012f8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	9300      	str	r3, [sp, #0]
 800129a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800129c:	2200      	movs	r2, #0
 800129e:	2180      	movs	r1, #128	; 0x80
 80012a0:	68f8      	ldr	r0, [r7, #12]
 80012a2:	f000 f927 	bl	80014f4 <I2C_WaitOnFlagUntilTimeout>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80012ac:	2301      	movs	r3, #1
 80012ae:	e04d      	b.n	800134c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012b4:	b29b      	uxth	r3, r3
 80012b6:	2bff      	cmp	r3, #255	; 0xff
 80012b8:	d90e      	bls.n	80012d8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	22ff      	movs	r2, #255	; 0xff
 80012be:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012c4:	b2da      	uxtb	r2, r3
 80012c6:	8979      	ldrh	r1, [r7, #10]
 80012c8:	2300      	movs	r3, #0
 80012ca:	9300      	str	r3, [sp, #0]
 80012cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80012d0:	68f8      	ldr	r0, [r7, #12]
 80012d2:	f000 fa31 	bl	8001738 <I2C_TransferConfig>
 80012d6:	e00f      	b.n	80012f8 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012dc:	b29a      	uxth	r2, r3
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012e6:	b2da      	uxtb	r2, r3
 80012e8:	8979      	ldrh	r1, [r7, #10]
 80012ea:	2300      	movs	r3, #0
 80012ec:	9300      	str	r3, [sp, #0]
 80012ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80012f2:	68f8      	ldr	r0, [r7, #12]
 80012f4:	f000 fa20 	bl	8001738 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012fc:	b29b      	uxth	r3, r3
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d19a      	bne.n	8001238 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001302:	697a      	ldr	r2, [r7, #20]
 8001304:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001306:	68f8      	ldr	r0, [r7, #12]
 8001308:	f000 f974 	bl	80015f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	e01a      	b.n	800134c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	2220      	movs	r2, #32
 800131c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	6859      	ldr	r1, [r3, #4]
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	4b0b      	ldr	r3, [pc, #44]	; (8001358 <HAL_I2C_Mem_Read+0x230>)
 800132a:	400b      	ands	r3, r1
 800132c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	2220      	movs	r2, #32
 8001332:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	2200      	movs	r2, #0
 800133a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	2200      	movs	r2, #0
 8001342:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001346:	2300      	movs	r3, #0
 8001348:	e000      	b.n	800134c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800134a:	2302      	movs	r3, #2
  }
}
 800134c:	4618      	mov	r0, r3
 800134e:	3718      	adds	r7, #24
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	80002400 	.word	0x80002400
 8001358:	fe00e800 	.word	0xfe00e800

0800135c <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b086      	sub	sp, #24
 8001360:	af02      	add	r7, sp, #8
 8001362:	60f8      	str	r0, [r7, #12]
 8001364:	4608      	mov	r0, r1
 8001366:	4611      	mov	r1, r2
 8001368:	461a      	mov	r2, r3
 800136a:	4603      	mov	r3, r0
 800136c:	817b      	strh	r3, [r7, #10]
 800136e:	460b      	mov	r3, r1
 8001370:	813b      	strh	r3, [r7, #8]
 8001372:	4613      	mov	r3, r2
 8001374:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001376:	88fb      	ldrh	r3, [r7, #6]
 8001378:	b2da      	uxtb	r2, r3
 800137a:	8979      	ldrh	r1, [r7, #10]
 800137c:	4b20      	ldr	r3, [pc, #128]	; (8001400 <I2C_RequestMemoryWrite+0xa4>)
 800137e:	9300      	str	r3, [sp, #0]
 8001380:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001384:	68f8      	ldr	r0, [r7, #12]
 8001386:	f000 f9d7 	bl	8001738 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800138a:	69fa      	ldr	r2, [r7, #28]
 800138c:	69b9      	ldr	r1, [r7, #24]
 800138e:	68f8      	ldr	r0, [r7, #12]
 8001390:	f000 f8f0 	bl	8001574 <I2C_WaitOnTXISFlagUntilTimeout>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e02c      	b.n	80013f8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800139e:	88fb      	ldrh	r3, [r7, #6]
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d105      	bne.n	80013b0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80013a4:	893b      	ldrh	r3, [r7, #8]
 80013a6:	b2da      	uxtb	r2, r3
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	629a      	str	r2, [r3, #40]	; 0x28
 80013ae:	e015      	b.n	80013dc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80013b0:	893b      	ldrh	r3, [r7, #8]
 80013b2:	0a1b      	lsrs	r3, r3, #8
 80013b4:	b29b      	uxth	r3, r3
 80013b6:	b2da      	uxtb	r2, r3
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80013be:	69fa      	ldr	r2, [r7, #28]
 80013c0:	69b9      	ldr	r1, [r7, #24]
 80013c2:	68f8      	ldr	r0, [r7, #12]
 80013c4:	f000 f8d6 	bl	8001574 <I2C_WaitOnTXISFlagUntilTimeout>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	e012      	b.n	80013f8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80013d2:	893b      	ldrh	r3, [r7, #8]
 80013d4:	b2da      	uxtb	r2, r3
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	9300      	str	r3, [sp, #0]
 80013e0:	69bb      	ldr	r3, [r7, #24]
 80013e2:	2200      	movs	r2, #0
 80013e4:	2180      	movs	r1, #128	; 0x80
 80013e6:	68f8      	ldr	r0, [r7, #12]
 80013e8:	f000 f884 	bl	80014f4 <I2C_WaitOnFlagUntilTimeout>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e000      	b.n	80013f8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80013f6:	2300      	movs	r3, #0
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3710      	adds	r7, #16
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	80002000 	.word	0x80002000

08001404 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b086      	sub	sp, #24
 8001408:	af02      	add	r7, sp, #8
 800140a:	60f8      	str	r0, [r7, #12]
 800140c:	4608      	mov	r0, r1
 800140e:	4611      	mov	r1, r2
 8001410:	461a      	mov	r2, r3
 8001412:	4603      	mov	r3, r0
 8001414:	817b      	strh	r3, [r7, #10]
 8001416:	460b      	mov	r3, r1
 8001418:	813b      	strh	r3, [r7, #8]
 800141a:	4613      	mov	r3, r2
 800141c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800141e:	88fb      	ldrh	r3, [r7, #6]
 8001420:	b2da      	uxtb	r2, r3
 8001422:	8979      	ldrh	r1, [r7, #10]
 8001424:	4b20      	ldr	r3, [pc, #128]	; (80014a8 <I2C_RequestMemoryRead+0xa4>)
 8001426:	9300      	str	r3, [sp, #0]
 8001428:	2300      	movs	r3, #0
 800142a:	68f8      	ldr	r0, [r7, #12]
 800142c:	f000 f984 	bl	8001738 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001430:	69fa      	ldr	r2, [r7, #28]
 8001432:	69b9      	ldr	r1, [r7, #24]
 8001434:	68f8      	ldr	r0, [r7, #12]
 8001436:	f000 f89d 	bl	8001574 <I2C_WaitOnTXISFlagUntilTimeout>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001440:	2301      	movs	r3, #1
 8001442:	e02c      	b.n	800149e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001444:	88fb      	ldrh	r3, [r7, #6]
 8001446:	2b01      	cmp	r3, #1
 8001448:	d105      	bne.n	8001456 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800144a:	893b      	ldrh	r3, [r7, #8]
 800144c:	b2da      	uxtb	r2, r3
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	629a      	str	r2, [r3, #40]	; 0x28
 8001454:	e015      	b.n	8001482 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001456:	893b      	ldrh	r3, [r7, #8]
 8001458:	0a1b      	lsrs	r3, r3, #8
 800145a:	b29b      	uxth	r3, r3
 800145c:	b2da      	uxtb	r2, r3
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001464:	69fa      	ldr	r2, [r7, #28]
 8001466:	69b9      	ldr	r1, [r7, #24]
 8001468:	68f8      	ldr	r0, [r7, #12]
 800146a:	f000 f883 	bl	8001574 <I2C_WaitOnTXISFlagUntilTimeout>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001474:	2301      	movs	r3, #1
 8001476:	e012      	b.n	800149e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001478:	893b      	ldrh	r3, [r7, #8]
 800147a:	b2da      	uxtb	r2, r3
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	9300      	str	r3, [sp, #0]
 8001486:	69bb      	ldr	r3, [r7, #24]
 8001488:	2200      	movs	r2, #0
 800148a:	2140      	movs	r1, #64	; 0x40
 800148c:	68f8      	ldr	r0, [r7, #12]
 800148e:	f000 f831 	bl	80014f4 <I2C_WaitOnFlagUntilTimeout>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001498:	2301      	movs	r3, #1
 800149a:	e000      	b.n	800149e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800149c:	2300      	movs	r3, #0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3710      	adds	r7, #16
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	80002000 	.word	0x80002000

080014ac <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	699b      	ldr	r3, [r3, #24]
 80014ba:	f003 0302 	and.w	r3, r3, #2
 80014be:	2b02      	cmp	r3, #2
 80014c0:	d103      	bne.n	80014ca <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	2200      	movs	r2, #0
 80014c8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	699b      	ldr	r3, [r3, #24]
 80014d0:	f003 0301 	and.w	r3, r3, #1
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d007      	beq.n	80014e8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	699a      	ldr	r2, [r3, #24]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f042 0201 	orr.w	r2, r2, #1
 80014e6:	619a      	str	r2, [r3, #24]
  }
}
 80014e8:	bf00      	nop
 80014ea:	370c      	adds	r7, #12
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr

080014f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	60f8      	str	r0, [r7, #12]
 80014fc:	60b9      	str	r1, [r7, #8]
 80014fe:	603b      	str	r3, [r7, #0]
 8001500:	4613      	mov	r3, r2
 8001502:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001504:	e022      	b.n	800154c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800150c:	d01e      	beq.n	800154c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800150e:	f7ff f85b 	bl	80005c8 <HAL_GetTick>
 8001512:	4602      	mov	r2, r0
 8001514:	69bb      	ldr	r3, [r7, #24]
 8001516:	1ad3      	subs	r3, r2, r3
 8001518:	683a      	ldr	r2, [r7, #0]
 800151a:	429a      	cmp	r2, r3
 800151c:	d302      	bcc.n	8001524 <I2C_WaitOnFlagUntilTimeout+0x30>
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d113      	bne.n	800154c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001528:	f043 0220 	orr.w	r2, r3, #32
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	2220      	movs	r2, #32
 8001534:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	2200      	movs	r2, #0
 800153c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	2200      	movs	r2, #0
 8001544:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001548:	2301      	movs	r3, #1
 800154a:	e00f      	b.n	800156c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	699a      	ldr	r2, [r3, #24]
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	4013      	ands	r3, r2
 8001556:	68ba      	ldr	r2, [r7, #8]
 8001558:	429a      	cmp	r2, r3
 800155a:	bf0c      	ite	eq
 800155c:	2301      	moveq	r3, #1
 800155e:	2300      	movne	r3, #0
 8001560:	b2db      	uxtb	r3, r3
 8001562:	461a      	mov	r2, r3
 8001564:	79fb      	ldrb	r3, [r7, #7]
 8001566:	429a      	cmp	r2, r3
 8001568:	d0cd      	beq.n	8001506 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800156a:	2300      	movs	r3, #0
}
 800156c:	4618      	mov	r0, r3
 800156e:	3710      	adds	r7, #16
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}

08001574 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	60f8      	str	r0, [r7, #12]
 800157c:	60b9      	str	r1, [r7, #8]
 800157e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001580:	e02c      	b.n	80015dc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001582:	687a      	ldr	r2, [r7, #4]
 8001584:	68b9      	ldr	r1, [r7, #8]
 8001586:	68f8      	ldr	r0, [r7, #12]
 8001588:	f000 f870 	bl	800166c <I2C_IsAcknowledgeFailed>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e02a      	b.n	80015ec <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800159c:	d01e      	beq.n	80015dc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800159e:	f7ff f813 	bl	80005c8 <HAL_GetTick>
 80015a2:	4602      	mov	r2, r0
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	68ba      	ldr	r2, [r7, #8]
 80015aa:	429a      	cmp	r2, r3
 80015ac:	d302      	bcc.n	80015b4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80015ae:	68bb      	ldr	r3, [r7, #8]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d113      	bne.n	80015dc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b8:	f043 0220 	orr.w	r2, r3, #32
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	2220      	movs	r2, #32
 80015c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	2200      	movs	r2, #0
 80015cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	2200      	movs	r2, #0
 80015d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
 80015da:	e007      	b.n	80015ec <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	699b      	ldr	r3, [r3, #24]
 80015e2:	f003 0302 	and.w	r3, r3, #2
 80015e6:	2b02      	cmp	r3, #2
 80015e8:	d1cb      	bne.n	8001582 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80015ea:	2300      	movs	r3, #0
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3710      	adds	r7, #16
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	60f8      	str	r0, [r7, #12]
 80015fc:	60b9      	str	r1, [r7, #8]
 80015fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001600:	e028      	b.n	8001654 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001602:	687a      	ldr	r2, [r7, #4]
 8001604:	68b9      	ldr	r1, [r7, #8]
 8001606:	68f8      	ldr	r0, [r7, #12]
 8001608:	f000 f830 	bl	800166c <I2C_IsAcknowledgeFailed>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e026      	b.n	8001664 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001616:	f7fe ffd7 	bl	80005c8 <HAL_GetTick>
 800161a:	4602      	mov	r2, r0
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	68ba      	ldr	r2, [r7, #8]
 8001622:	429a      	cmp	r2, r3
 8001624:	d302      	bcc.n	800162c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001626:	68bb      	ldr	r3, [r7, #8]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d113      	bne.n	8001654 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001630:	f043 0220 	orr.w	r2, r3, #32
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	2220      	movs	r2, #32
 800163c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	2200      	movs	r2, #0
 8001644:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	2200      	movs	r2, #0
 800164c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	e007      	b.n	8001664 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	699b      	ldr	r3, [r3, #24]
 800165a:	f003 0320 	and.w	r3, r3, #32
 800165e:	2b20      	cmp	r3, #32
 8001660:	d1cf      	bne.n	8001602 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001662:	2300      	movs	r3, #0
}
 8001664:	4618      	mov	r0, r3
 8001666:	3710      	adds	r7, #16
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}

0800166c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	60f8      	str	r0, [r7, #12]
 8001674:	60b9      	str	r1, [r7, #8]
 8001676:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	699b      	ldr	r3, [r3, #24]
 800167e:	f003 0310 	and.w	r3, r3, #16
 8001682:	2b10      	cmp	r3, #16
 8001684:	d151      	bne.n	800172a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001686:	e022      	b.n	80016ce <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800168e:	d01e      	beq.n	80016ce <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001690:	f7fe ff9a 	bl	80005c8 <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	68ba      	ldr	r2, [r7, #8]
 800169c:	429a      	cmp	r2, r3
 800169e:	d302      	bcc.n	80016a6 <I2C_IsAcknowledgeFailed+0x3a>
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d113      	bne.n	80016ce <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016aa:	f043 0220 	orr.w	r2, r3, #32
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	2220      	movs	r2, #32
 80016b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	2200      	movs	r2, #0
 80016be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	2200      	movs	r2, #0
 80016c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e02e      	b.n	800172c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	699b      	ldr	r3, [r3, #24]
 80016d4:	f003 0320 	and.w	r3, r3, #32
 80016d8:	2b20      	cmp	r3, #32
 80016da:	d1d5      	bne.n	8001688 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	2210      	movs	r2, #16
 80016e2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2220      	movs	r2, #32
 80016ea:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80016ec:	68f8      	ldr	r0, [r7, #12]
 80016ee:	f7ff fedd 	bl	80014ac <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	6859      	ldr	r1, [r3, #4]
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	4b0d      	ldr	r3, [pc, #52]	; (8001734 <I2C_IsAcknowledgeFailed+0xc8>)
 80016fe:	400b      	ands	r3, r1
 8001700:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001706:	f043 0204 	orr.w	r2, r3, #4
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	2220      	movs	r2, #32
 8001712:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	2200      	movs	r2, #0
 800171a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	2200      	movs	r2, #0
 8001722:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e000      	b.n	800172c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800172a:	2300      	movs	r3, #0
}
 800172c:	4618      	mov	r0, r3
 800172e:	3710      	adds	r7, #16
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	fe00e800 	.word	0xfe00e800

08001738 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001738:	b480      	push	{r7}
 800173a:	b085      	sub	sp, #20
 800173c:	af00      	add	r7, sp, #0
 800173e:	60f8      	str	r0, [r7, #12]
 8001740:	607b      	str	r3, [r7, #4]
 8001742:	460b      	mov	r3, r1
 8001744:	817b      	strh	r3, [r7, #10]
 8001746:	4613      	mov	r3, r2
 8001748:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	685a      	ldr	r2, [r3, #4]
 8001750:	69bb      	ldr	r3, [r7, #24]
 8001752:	0d5b      	lsrs	r3, r3, #21
 8001754:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001758:	4b0d      	ldr	r3, [pc, #52]	; (8001790 <I2C_TransferConfig+0x58>)
 800175a:	430b      	orrs	r3, r1
 800175c:	43db      	mvns	r3, r3
 800175e:	ea02 0103 	and.w	r1, r2, r3
 8001762:	897b      	ldrh	r3, [r7, #10]
 8001764:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001768:	7a7b      	ldrb	r3, [r7, #9]
 800176a:	041b      	lsls	r3, r3, #16
 800176c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001770:	431a      	orrs	r2, r3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	431a      	orrs	r2, r3
 8001776:	69bb      	ldr	r3, [r7, #24]
 8001778:	431a      	orrs	r2, r3
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	430a      	orrs	r2, r1
 8001780:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8001782:	bf00      	nop
 8001784:	3714      	adds	r7, #20
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	03ff63ff 	.word	0x03ff63ff

08001794 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	2b20      	cmp	r3, #32
 80017a8:	d138      	bne.n	800181c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d101      	bne.n	80017b8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80017b4:	2302      	movs	r3, #2
 80017b6:	e032      	b.n	800181e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2201      	movs	r2, #1
 80017bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2224      	movs	r2, #36	; 0x24
 80017c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f022 0201 	bic.w	r2, r2, #1
 80017d6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80017e6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	6819      	ldr	r1, [r3, #0]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	683a      	ldr	r2, [r7, #0]
 80017f4:	430a      	orrs	r2, r1
 80017f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f042 0201 	orr.w	r2, r2, #1
 8001806:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2220      	movs	r2, #32
 800180c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2200      	movs	r2, #0
 8001814:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001818:	2300      	movs	r3, #0
 800181a:	e000      	b.n	800181e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800181c:	2302      	movs	r3, #2
  }
}
 800181e:	4618      	mov	r0, r3
 8001820:	370c      	adds	r7, #12
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr

0800182a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800182a:	b480      	push	{r7}
 800182c:	b085      	sub	sp, #20
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]
 8001832:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800183a:	b2db      	uxtb	r3, r3
 800183c:	2b20      	cmp	r3, #32
 800183e:	d139      	bne.n	80018b4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001846:	2b01      	cmp	r3, #1
 8001848:	d101      	bne.n	800184e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800184a:	2302      	movs	r3, #2
 800184c:	e033      	b.n	80018b6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2201      	movs	r2, #1
 8001852:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2224      	movs	r2, #36	; 0x24
 800185a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f022 0201 	bic.w	r2, r2, #1
 800186c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800187c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	021b      	lsls	r3, r3, #8
 8001882:	68fa      	ldr	r2, [r7, #12]
 8001884:	4313      	orrs	r3, r2
 8001886:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	68fa      	ldr	r2, [r7, #12]
 800188e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f042 0201 	orr.w	r2, r2, #1
 800189e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2220      	movs	r2, #32
 80018a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2200      	movs	r2, #0
 80018ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80018b0:	2300      	movs	r3, #0
 80018b2:	e000      	b.n	80018b6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80018b4:	2302      	movs	r3, #2
  }
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3714      	adds	r7, #20
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
	...

080018c4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80018c8:	4b04      	ldr	r3, [pc, #16]	; (80018dc <HAL_PWREx_GetVoltageRange+0x18>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	40007000 	.word	0x40007000

080018e0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b085      	sub	sp, #20
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018ee:	d130      	bne.n	8001952 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80018f0:	4b23      	ldr	r3, [pc, #140]	; (8001980 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80018f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018fc:	d038      	beq.n	8001970 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80018fe:	4b20      	ldr	r3, [pc, #128]	; (8001980 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001906:	4a1e      	ldr	r2, [pc, #120]	; (8001980 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001908:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800190c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800190e:	4b1d      	ldr	r3, [pc, #116]	; (8001984 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	2232      	movs	r2, #50	; 0x32
 8001914:	fb02 f303 	mul.w	r3, r2, r3
 8001918:	4a1b      	ldr	r2, [pc, #108]	; (8001988 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800191a:	fba2 2303 	umull	r2, r3, r2, r3
 800191e:	0c9b      	lsrs	r3, r3, #18
 8001920:	3301      	adds	r3, #1
 8001922:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001924:	e002      	b.n	800192c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	3b01      	subs	r3, #1
 800192a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800192c:	4b14      	ldr	r3, [pc, #80]	; (8001980 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800192e:	695b      	ldr	r3, [r3, #20]
 8001930:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001934:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001938:	d102      	bne.n	8001940 <HAL_PWREx_ControlVoltageScaling+0x60>
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d1f2      	bne.n	8001926 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001940:	4b0f      	ldr	r3, [pc, #60]	; (8001980 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001942:	695b      	ldr	r3, [r3, #20]
 8001944:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001948:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800194c:	d110      	bne.n	8001970 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e00f      	b.n	8001972 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001952:	4b0b      	ldr	r3, [pc, #44]	; (8001980 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800195a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800195e:	d007      	beq.n	8001970 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001960:	4b07      	ldr	r3, [pc, #28]	; (8001980 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001968:	4a05      	ldr	r2, [pc, #20]	; (8001980 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800196a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800196e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001970:	2300      	movs	r3, #0
}
 8001972:	4618      	mov	r0, r3
 8001974:	3714      	adds	r7, #20
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	40007000 	.word	0x40007000
 8001984:	20000090 	.word	0x20000090
 8001988:	431bde83 	.word	0x431bde83

0800198c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b088      	sub	sp, #32
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d101      	bne.n	800199e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e3d4      	b.n	8002148 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800199e:	4ba1      	ldr	r3, [pc, #644]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	f003 030c 	and.w	r3, r3, #12
 80019a6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019a8:	4b9e      	ldr	r3, [pc, #632]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	f003 0303 	and.w	r3, r3, #3
 80019b0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0310 	and.w	r3, r3, #16
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	f000 80e4 	beq.w	8001b88 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80019c0:	69bb      	ldr	r3, [r7, #24]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d007      	beq.n	80019d6 <HAL_RCC_OscConfig+0x4a>
 80019c6:	69bb      	ldr	r3, [r7, #24]
 80019c8:	2b0c      	cmp	r3, #12
 80019ca:	f040 808b 	bne.w	8001ae4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	f040 8087 	bne.w	8001ae4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80019d6:	4b93      	ldr	r3, [pc, #588]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0302 	and.w	r3, r3, #2
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d005      	beq.n	80019ee <HAL_RCC_OscConfig+0x62>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	699b      	ldr	r3, [r3, #24]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d101      	bne.n	80019ee <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e3ac      	b.n	8002148 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6a1a      	ldr	r2, [r3, #32]
 80019f2:	4b8c      	ldr	r3, [pc, #560]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0308 	and.w	r3, r3, #8
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d004      	beq.n	8001a08 <HAL_RCC_OscConfig+0x7c>
 80019fe:	4b89      	ldr	r3, [pc, #548]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a06:	e005      	b.n	8001a14 <HAL_RCC_OscConfig+0x88>
 8001a08:	4b86      	ldr	r3, [pc, #536]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 8001a0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a0e:	091b      	lsrs	r3, r3, #4
 8001a10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d223      	bcs.n	8001a60 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6a1b      	ldr	r3, [r3, #32]
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f000 fd71 	bl	8002504 <RCC_SetFlashLatencyFromMSIRange>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e38d      	b.n	8002148 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a2c:	4b7d      	ldr	r3, [pc, #500]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a7c      	ldr	r2, [pc, #496]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 8001a32:	f043 0308 	orr.w	r3, r3, #8
 8001a36:	6013      	str	r3, [r2, #0]
 8001a38:	4b7a      	ldr	r3, [pc, #488]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6a1b      	ldr	r3, [r3, #32]
 8001a44:	4977      	ldr	r1, [pc, #476]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 8001a46:	4313      	orrs	r3, r2
 8001a48:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a4a:	4b76      	ldr	r3, [pc, #472]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	69db      	ldr	r3, [r3, #28]
 8001a56:	021b      	lsls	r3, r3, #8
 8001a58:	4972      	ldr	r1, [pc, #456]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	604b      	str	r3, [r1, #4]
 8001a5e:	e025      	b.n	8001aac <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a60:	4b70      	ldr	r3, [pc, #448]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a6f      	ldr	r2, [pc, #444]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 8001a66:	f043 0308 	orr.w	r3, r3, #8
 8001a6a:	6013      	str	r3, [r2, #0]
 8001a6c:	4b6d      	ldr	r3, [pc, #436]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6a1b      	ldr	r3, [r3, #32]
 8001a78:	496a      	ldr	r1, [pc, #424]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a7e:	4b69      	ldr	r3, [pc, #420]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	69db      	ldr	r3, [r3, #28]
 8001a8a:	021b      	lsls	r3, r3, #8
 8001a8c:	4965      	ldr	r1, [pc, #404]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d109      	bne.n	8001aac <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6a1b      	ldr	r3, [r3, #32]
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f000 fd31 	bl	8002504 <RCC_SetFlashLatencyFromMSIRange>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d001      	beq.n	8001aac <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e34d      	b.n	8002148 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001aac:	f000 fc36 	bl	800231c <HAL_RCC_GetSysClockFreq>
 8001ab0:	4601      	mov	r1, r0
 8001ab2:	4b5c      	ldr	r3, [pc, #368]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	091b      	lsrs	r3, r3, #4
 8001ab8:	f003 030f 	and.w	r3, r3, #15
 8001abc:	4a5a      	ldr	r2, [pc, #360]	; (8001c28 <HAL_RCC_OscConfig+0x29c>)
 8001abe:	5cd3      	ldrb	r3, [r2, r3]
 8001ac0:	f003 031f 	and.w	r3, r3, #31
 8001ac4:	fa21 f303 	lsr.w	r3, r1, r3
 8001ac8:	4a58      	ldr	r2, [pc, #352]	; (8001c2c <HAL_RCC_OscConfig+0x2a0>)
 8001aca:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001acc:	4b58      	ldr	r3, [pc, #352]	; (8001c30 <HAL_RCC_OscConfig+0x2a4>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f004 fdbb 	bl	800664c <HAL_InitTick>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001ada:	7bfb      	ldrb	r3, [r7, #15]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d052      	beq.n	8001b86 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001ae0:	7bfb      	ldrb	r3, [r7, #15]
 8001ae2:	e331      	b.n	8002148 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	699b      	ldr	r3, [r3, #24]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d032      	beq.n	8001b52 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001aec:	4b4d      	ldr	r3, [pc, #308]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a4c      	ldr	r2, [pc, #304]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 8001af2:	f043 0301 	orr.w	r3, r3, #1
 8001af6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001af8:	f7fe fd66 	bl	80005c8 <HAL_GetTick>
 8001afc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001afe:	e008      	b.n	8001b12 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b00:	f7fe fd62 	bl	80005c8 <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d901      	bls.n	8001b12 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e31a      	b.n	8002148 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b12:	4b44      	ldr	r3, [pc, #272]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0302 	and.w	r3, r3, #2
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d0f0      	beq.n	8001b00 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b1e:	4b41      	ldr	r3, [pc, #260]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a40      	ldr	r2, [pc, #256]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 8001b24:	f043 0308 	orr.w	r3, r3, #8
 8001b28:	6013      	str	r3, [r2, #0]
 8001b2a:	4b3e      	ldr	r3, [pc, #248]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6a1b      	ldr	r3, [r3, #32]
 8001b36:	493b      	ldr	r1, [pc, #236]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b3c:	4b39      	ldr	r3, [pc, #228]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	69db      	ldr	r3, [r3, #28]
 8001b48:	021b      	lsls	r3, r3, #8
 8001b4a:	4936      	ldr	r1, [pc, #216]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	604b      	str	r3, [r1, #4]
 8001b50:	e01a      	b.n	8001b88 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001b52:	4b34      	ldr	r3, [pc, #208]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a33      	ldr	r2, [pc, #204]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 8001b58:	f023 0301 	bic.w	r3, r3, #1
 8001b5c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b5e:	f7fe fd33 	bl	80005c8 <HAL_GetTick>
 8001b62:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b64:	e008      	b.n	8001b78 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b66:	f7fe fd2f 	bl	80005c8 <HAL_GetTick>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	1ad3      	subs	r3, r2, r3
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	d901      	bls.n	8001b78 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001b74:	2303      	movs	r3, #3
 8001b76:	e2e7      	b.n	8002148 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b78:	4b2a      	ldr	r3, [pc, #168]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 0302 	and.w	r3, r3, #2
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d1f0      	bne.n	8001b66 <HAL_RCC_OscConfig+0x1da>
 8001b84:	e000      	b.n	8001b88 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b86:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 0301 	and.w	r3, r3, #1
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d074      	beq.n	8001c7e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001b94:	69bb      	ldr	r3, [r7, #24]
 8001b96:	2b08      	cmp	r3, #8
 8001b98:	d005      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x21a>
 8001b9a:	69bb      	ldr	r3, [r7, #24]
 8001b9c:	2b0c      	cmp	r3, #12
 8001b9e:	d10e      	bne.n	8001bbe <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	2b03      	cmp	r3, #3
 8001ba4:	d10b      	bne.n	8001bbe <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ba6:	4b1f      	ldr	r3, [pc, #124]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d064      	beq.n	8001c7c <HAL_RCC_OscConfig+0x2f0>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d160      	bne.n	8001c7c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e2c4      	b.n	8002148 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bc6:	d106      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x24a>
 8001bc8:	4b16      	ldr	r3, [pc, #88]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a15      	ldr	r2, [pc, #84]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 8001bce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bd2:	6013      	str	r3, [r2, #0]
 8001bd4:	e01d      	b.n	8001c12 <HAL_RCC_OscConfig+0x286>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bde:	d10c      	bne.n	8001bfa <HAL_RCC_OscConfig+0x26e>
 8001be0:	4b10      	ldr	r3, [pc, #64]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a0f      	ldr	r2, [pc, #60]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 8001be6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bea:	6013      	str	r3, [r2, #0]
 8001bec:	4b0d      	ldr	r3, [pc, #52]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a0c      	ldr	r2, [pc, #48]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 8001bf2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bf6:	6013      	str	r3, [r2, #0]
 8001bf8:	e00b      	b.n	8001c12 <HAL_RCC_OscConfig+0x286>
 8001bfa:	4b0a      	ldr	r3, [pc, #40]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a09      	ldr	r2, [pc, #36]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 8001c00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c04:	6013      	str	r3, [r2, #0]
 8001c06:	4b07      	ldr	r3, [pc, #28]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a06      	ldr	r2, [pc, #24]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 8001c0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c10:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d01c      	beq.n	8001c54 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c1a:	f7fe fcd5 	bl	80005c8 <HAL_GetTick>
 8001c1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c20:	e011      	b.n	8001c46 <HAL_RCC_OscConfig+0x2ba>
 8001c22:	bf00      	nop
 8001c24:	40021000 	.word	0x40021000
 8001c28:	08007224 	.word	0x08007224
 8001c2c:	20000090 	.word	0x20000090
 8001c30:	20000000 	.word	0x20000000
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c34:	f7fe fcc8 	bl	80005c8 <HAL_GetTick>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	2b64      	cmp	r3, #100	; 0x64
 8001c40:	d901      	bls.n	8001c46 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001c42:	2303      	movs	r3, #3
 8001c44:	e280      	b.n	8002148 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c46:	4baf      	ldr	r3, [pc, #700]	; (8001f04 <HAL_RCC_OscConfig+0x578>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d0f0      	beq.n	8001c34 <HAL_RCC_OscConfig+0x2a8>
 8001c52:	e014      	b.n	8001c7e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c54:	f7fe fcb8 	bl	80005c8 <HAL_GetTick>
 8001c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c5a:	e008      	b.n	8001c6e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c5c:	f7fe fcb4 	bl	80005c8 <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	2b64      	cmp	r3, #100	; 0x64
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e26c      	b.n	8002148 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c6e:	4ba5      	ldr	r3, [pc, #660]	; (8001f04 <HAL_RCC_OscConfig+0x578>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d1f0      	bne.n	8001c5c <HAL_RCC_OscConfig+0x2d0>
 8001c7a:	e000      	b.n	8001c7e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d060      	beq.n	8001d4c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	2b04      	cmp	r3, #4
 8001c8e:	d005      	beq.n	8001c9c <HAL_RCC_OscConfig+0x310>
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	2b0c      	cmp	r3, #12
 8001c94:	d119      	bne.n	8001cca <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d116      	bne.n	8001cca <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c9c:	4b99      	ldr	r3, [pc, #612]	; (8001f04 <HAL_RCC_OscConfig+0x578>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d005      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x328>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d101      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e249      	b.n	8002148 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cb4:	4b93      	ldr	r3, [pc, #588]	; (8001f04 <HAL_RCC_OscConfig+0x578>)
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	691b      	ldr	r3, [r3, #16]
 8001cc0:	061b      	lsls	r3, r3, #24
 8001cc2:	4990      	ldr	r1, [pc, #576]	; (8001f04 <HAL_RCC_OscConfig+0x578>)
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cc8:	e040      	b.n	8001d4c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	68db      	ldr	r3, [r3, #12]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d023      	beq.n	8001d1a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cd2:	4b8c      	ldr	r3, [pc, #560]	; (8001f04 <HAL_RCC_OscConfig+0x578>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a8b      	ldr	r2, [pc, #556]	; (8001f04 <HAL_RCC_OscConfig+0x578>)
 8001cd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cdc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cde:	f7fe fc73 	bl	80005c8 <HAL_GetTick>
 8001ce2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ce4:	e008      	b.n	8001cf8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ce6:	f7fe fc6f 	bl	80005c8 <HAL_GetTick>
 8001cea:	4602      	mov	r2, r0
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	2b02      	cmp	r3, #2
 8001cf2:	d901      	bls.n	8001cf8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	e227      	b.n	8002148 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cf8:	4b82      	ldr	r3, [pc, #520]	; (8001f04 <HAL_RCC_OscConfig+0x578>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d0f0      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d04:	4b7f      	ldr	r3, [pc, #508]	; (8001f04 <HAL_RCC_OscConfig+0x578>)
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	691b      	ldr	r3, [r3, #16]
 8001d10:	061b      	lsls	r3, r3, #24
 8001d12:	497c      	ldr	r1, [pc, #496]	; (8001f04 <HAL_RCC_OscConfig+0x578>)
 8001d14:	4313      	orrs	r3, r2
 8001d16:	604b      	str	r3, [r1, #4]
 8001d18:	e018      	b.n	8001d4c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d1a:	4b7a      	ldr	r3, [pc, #488]	; (8001f04 <HAL_RCC_OscConfig+0x578>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a79      	ldr	r2, [pc, #484]	; (8001f04 <HAL_RCC_OscConfig+0x578>)
 8001d20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d26:	f7fe fc4f 	bl	80005c8 <HAL_GetTick>
 8001d2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d2c:	e008      	b.n	8001d40 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d2e:	f7fe fc4b 	bl	80005c8 <HAL_GetTick>
 8001d32:	4602      	mov	r2, r0
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d901      	bls.n	8001d40 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	e203      	b.n	8002148 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d40:	4b70      	ldr	r3, [pc, #448]	; (8001f04 <HAL_RCC_OscConfig+0x578>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d1f0      	bne.n	8001d2e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 0308 	and.w	r3, r3, #8
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d03c      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	695b      	ldr	r3, [r3, #20]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d01c      	beq.n	8001d9a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d60:	4b68      	ldr	r3, [pc, #416]	; (8001f04 <HAL_RCC_OscConfig+0x578>)
 8001d62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d66:	4a67      	ldr	r2, [pc, #412]	; (8001f04 <HAL_RCC_OscConfig+0x578>)
 8001d68:	f043 0301 	orr.w	r3, r3, #1
 8001d6c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d70:	f7fe fc2a 	bl	80005c8 <HAL_GetTick>
 8001d74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d76:	e008      	b.n	8001d8a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d78:	f7fe fc26 	bl	80005c8 <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d901      	bls.n	8001d8a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	e1de      	b.n	8002148 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d8a:	4b5e      	ldr	r3, [pc, #376]	; (8001f04 <HAL_RCC_OscConfig+0x578>)
 8001d8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d90:	f003 0302 	and.w	r3, r3, #2
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d0ef      	beq.n	8001d78 <HAL_RCC_OscConfig+0x3ec>
 8001d98:	e01b      	b.n	8001dd2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d9a:	4b5a      	ldr	r3, [pc, #360]	; (8001f04 <HAL_RCC_OscConfig+0x578>)
 8001d9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001da0:	4a58      	ldr	r2, [pc, #352]	; (8001f04 <HAL_RCC_OscConfig+0x578>)
 8001da2:	f023 0301 	bic.w	r3, r3, #1
 8001da6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001daa:	f7fe fc0d 	bl	80005c8 <HAL_GetTick>
 8001dae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001db0:	e008      	b.n	8001dc4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001db2:	f7fe fc09 	bl	80005c8 <HAL_GetTick>
 8001db6:	4602      	mov	r2, r0
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	d901      	bls.n	8001dc4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	e1c1      	b.n	8002148 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001dc4:	4b4f      	ldr	r3, [pc, #316]	; (8001f04 <HAL_RCC_OscConfig+0x578>)
 8001dc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dca:	f003 0302 	and.w	r3, r3, #2
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d1ef      	bne.n	8001db2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0304 	and.w	r3, r3, #4
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	f000 80a6 	beq.w	8001f2c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001de0:	2300      	movs	r3, #0
 8001de2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001de4:	4b47      	ldr	r3, [pc, #284]	; (8001f04 <HAL_RCC_OscConfig+0x578>)
 8001de6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001de8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d10d      	bne.n	8001e0c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001df0:	4b44      	ldr	r3, [pc, #272]	; (8001f04 <HAL_RCC_OscConfig+0x578>)
 8001df2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001df4:	4a43      	ldr	r2, [pc, #268]	; (8001f04 <HAL_RCC_OscConfig+0x578>)
 8001df6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dfa:	6593      	str	r3, [r2, #88]	; 0x58
 8001dfc:	4b41      	ldr	r3, [pc, #260]	; (8001f04 <HAL_RCC_OscConfig+0x578>)
 8001dfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e04:	60bb      	str	r3, [r7, #8]
 8001e06:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e0c:	4b3e      	ldr	r3, [pc, #248]	; (8001f08 <HAL_RCC_OscConfig+0x57c>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d118      	bne.n	8001e4a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e18:	4b3b      	ldr	r3, [pc, #236]	; (8001f08 <HAL_RCC_OscConfig+0x57c>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a3a      	ldr	r2, [pc, #232]	; (8001f08 <HAL_RCC_OscConfig+0x57c>)
 8001e1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e22:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e24:	f7fe fbd0 	bl	80005c8 <HAL_GetTick>
 8001e28:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e2a:	e008      	b.n	8001e3e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e2c:	f7fe fbcc 	bl	80005c8 <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d901      	bls.n	8001e3e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e184      	b.n	8002148 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e3e:	4b32      	ldr	r3, [pc, #200]	; (8001f08 <HAL_RCC_OscConfig+0x57c>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d0f0      	beq.n	8001e2c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d108      	bne.n	8001e64 <HAL_RCC_OscConfig+0x4d8>
 8001e52:	4b2c      	ldr	r3, [pc, #176]	; (8001f04 <HAL_RCC_OscConfig+0x578>)
 8001e54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e58:	4a2a      	ldr	r2, [pc, #168]	; (8001f04 <HAL_RCC_OscConfig+0x578>)
 8001e5a:	f043 0301 	orr.w	r3, r3, #1
 8001e5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e62:	e024      	b.n	8001eae <HAL_RCC_OscConfig+0x522>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	2b05      	cmp	r3, #5
 8001e6a:	d110      	bne.n	8001e8e <HAL_RCC_OscConfig+0x502>
 8001e6c:	4b25      	ldr	r3, [pc, #148]	; (8001f04 <HAL_RCC_OscConfig+0x578>)
 8001e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e72:	4a24      	ldr	r2, [pc, #144]	; (8001f04 <HAL_RCC_OscConfig+0x578>)
 8001e74:	f043 0304 	orr.w	r3, r3, #4
 8001e78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e7c:	4b21      	ldr	r3, [pc, #132]	; (8001f04 <HAL_RCC_OscConfig+0x578>)
 8001e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e82:	4a20      	ldr	r2, [pc, #128]	; (8001f04 <HAL_RCC_OscConfig+0x578>)
 8001e84:	f043 0301 	orr.w	r3, r3, #1
 8001e88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e8c:	e00f      	b.n	8001eae <HAL_RCC_OscConfig+0x522>
 8001e8e:	4b1d      	ldr	r3, [pc, #116]	; (8001f04 <HAL_RCC_OscConfig+0x578>)
 8001e90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e94:	4a1b      	ldr	r2, [pc, #108]	; (8001f04 <HAL_RCC_OscConfig+0x578>)
 8001e96:	f023 0301 	bic.w	r3, r3, #1
 8001e9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e9e:	4b19      	ldr	r3, [pc, #100]	; (8001f04 <HAL_RCC_OscConfig+0x578>)
 8001ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ea4:	4a17      	ldr	r2, [pc, #92]	; (8001f04 <HAL_RCC_OscConfig+0x578>)
 8001ea6:	f023 0304 	bic.w	r3, r3, #4
 8001eaa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d016      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eb6:	f7fe fb87 	bl	80005c8 <HAL_GetTick>
 8001eba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ebc:	e00a      	b.n	8001ed4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ebe:	f7fe fb83 	bl	80005c8 <HAL_GetTick>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d901      	bls.n	8001ed4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	e139      	b.n	8002148 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ed4:	4b0b      	ldr	r3, [pc, #44]	; (8001f04 <HAL_RCC_OscConfig+0x578>)
 8001ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eda:	f003 0302 	and.w	r3, r3, #2
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d0ed      	beq.n	8001ebe <HAL_RCC_OscConfig+0x532>
 8001ee2:	e01a      	b.n	8001f1a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ee4:	f7fe fb70 	bl	80005c8 <HAL_GetTick>
 8001ee8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001eea:	e00f      	b.n	8001f0c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eec:	f7fe fb6c 	bl	80005c8 <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d906      	bls.n	8001f0c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001efe:	2303      	movs	r3, #3
 8001f00:	e122      	b.n	8002148 <HAL_RCC_OscConfig+0x7bc>
 8001f02:	bf00      	nop
 8001f04:	40021000 	.word	0x40021000
 8001f08:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f0c:	4b90      	ldr	r3, [pc, #576]	; (8002150 <HAL_RCC_OscConfig+0x7c4>)
 8001f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f12:	f003 0302 	and.w	r3, r3, #2
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d1e8      	bne.n	8001eec <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f1a:	7ffb      	ldrb	r3, [r7, #31]
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d105      	bne.n	8001f2c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f20:	4b8b      	ldr	r3, [pc, #556]	; (8002150 <HAL_RCC_OscConfig+0x7c4>)
 8001f22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f24:	4a8a      	ldr	r2, [pc, #552]	; (8002150 <HAL_RCC_OscConfig+0x7c4>)
 8001f26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f2a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	f000 8108 	beq.w	8002146 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	f040 80d0 	bne.w	80020e0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001f40:	4b83      	ldr	r3, [pc, #524]	; (8002150 <HAL_RCC_OscConfig+0x7c4>)
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	f003 0203 	and.w	r2, r3, #3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d130      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5e:	3b01      	subs	r3, #1
 8001f60:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d127      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f70:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d11f      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f7c:	687a      	ldr	r2, [r7, #4]
 8001f7e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001f80:	2a07      	cmp	r2, #7
 8001f82:	bf14      	ite	ne
 8001f84:	2201      	movne	r2, #1
 8001f86:	2200      	moveq	r2, #0
 8001f88:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d113      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f98:	085b      	lsrs	r3, r3, #1
 8001f9a:	3b01      	subs	r3, #1
 8001f9c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d109      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fac:	085b      	lsrs	r3, r3, #1
 8001fae:	3b01      	subs	r3, #1
 8001fb0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d06e      	beq.n	8002094 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001fb6:	69bb      	ldr	r3, [r7, #24]
 8001fb8:	2b0c      	cmp	r3, #12
 8001fba:	d069      	beq.n	8002090 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001fbc:	4b64      	ldr	r3, [pc, #400]	; (8002150 <HAL_RCC_OscConfig+0x7c4>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d105      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001fc8:	4b61      	ldr	r3, [pc, #388]	; (8002150 <HAL_RCC_OscConfig+0x7c4>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e0b7      	b.n	8002148 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001fd8:	4b5d      	ldr	r3, [pc, #372]	; (8002150 <HAL_RCC_OscConfig+0x7c4>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a5c      	ldr	r2, [pc, #368]	; (8002150 <HAL_RCC_OscConfig+0x7c4>)
 8001fde:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fe2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001fe4:	f7fe faf0 	bl	80005c8 <HAL_GetTick>
 8001fe8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fea:	e008      	b.n	8001ffe <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fec:	f7fe faec 	bl	80005c8 <HAL_GetTick>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d901      	bls.n	8001ffe <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e0a4      	b.n	8002148 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ffe:	4b54      	ldr	r3, [pc, #336]	; (8002150 <HAL_RCC_OscConfig+0x7c4>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d1f0      	bne.n	8001fec <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800200a:	4b51      	ldr	r3, [pc, #324]	; (8002150 <HAL_RCC_OscConfig+0x7c4>)
 800200c:	68da      	ldr	r2, [r3, #12]
 800200e:	4b51      	ldr	r3, [pc, #324]	; (8002154 <HAL_RCC_OscConfig+0x7c8>)
 8002010:	4013      	ands	r3, r2
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800201a:	3a01      	subs	r2, #1
 800201c:	0112      	lsls	r2, r2, #4
 800201e:	4311      	orrs	r1, r2
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002024:	0212      	lsls	r2, r2, #8
 8002026:	4311      	orrs	r1, r2
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800202c:	0852      	lsrs	r2, r2, #1
 800202e:	3a01      	subs	r2, #1
 8002030:	0552      	lsls	r2, r2, #21
 8002032:	4311      	orrs	r1, r2
 8002034:	687a      	ldr	r2, [r7, #4]
 8002036:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002038:	0852      	lsrs	r2, r2, #1
 800203a:	3a01      	subs	r2, #1
 800203c:	0652      	lsls	r2, r2, #25
 800203e:	4311      	orrs	r1, r2
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002044:	0912      	lsrs	r2, r2, #4
 8002046:	0452      	lsls	r2, r2, #17
 8002048:	430a      	orrs	r2, r1
 800204a:	4941      	ldr	r1, [pc, #260]	; (8002150 <HAL_RCC_OscConfig+0x7c4>)
 800204c:	4313      	orrs	r3, r2
 800204e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002050:	4b3f      	ldr	r3, [pc, #252]	; (8002150 <HAL_RCC_OscConfig+0x7c4>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a3e      	ldr	r2, [pc, #248]	; (8002150 <HAL_RCC_OscConfig+0x7c4>)
 8002056:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800205a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800205c:	4b3c      	ldr	r3, [pc, #240]	; (8002150 <HAL_RCC_OscConfig+0x7c4>)
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	4a3b      	ldr	r2, [pc, #236]	; (8002150 <HAL_RCC_OscConfig+0x7c4>)
 8002062:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002066:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002068:	f7fe faae 	bl	80005c8 <HAL_GetTick>
 800206c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800206e:	e008      	b.n	8002082 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002070:	f7fe faaa 	bl	80005c8 <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	2b02      	cmp	r3, #2
 800207c:	d901      	bls.n	8002082 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800207e:	2303      	movs	r3, #3
 8002080:	e062      	b.n	8002148 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002082:	4b33      	ldr	r3, [pc, #204]	; (8002150 <HAL_RCC_OscConfig+0x7c4>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d0f0      	beq.n	8002070 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800208e:	e05a      	b.n	8002146 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e059      	b.n	8002148 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002094:	4b2e      	ldr	r3, [pc, #184]	; (8002150 <HAL_RCC_OscConfig+0x7c4>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d152      	bne.n	8002146 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80020a0:	4b2b      	ldr	r3, [pc, #172]	; (8002150 <HAL_RCC_OscConfig+0x7c4>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a2a      	ldr	r2, [pc, #168]	; (8002150 <HAL_RCC_OscConfig+0x7c4>)
 80020a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020aa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80020ac:	4b28      	ldr	r3, [pc, #160]	; (8002150 <HAL_RCC_OscConfig+0x7c4>)
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	4a27      	ldr	r2, [pc, #156]	; (8002150 <HAL_RCC_OscConfig+0x7c4>)
 80020b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020b6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80020b8:	f7fe fa86 	bl	80005c8 <HAL_GetTick>
 80020bc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020be:	e008      	b.n	80020d2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020c0:	f7fe fa82 	bl	80005c8 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e03a      	b.n	8002148 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020d2:	4b1f      	ldr	r3, [pc, #124]	; (8002150 <HAL_RCC_OscConfig+0x7c4>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d0f0      	beq.n	80020c0 <HAL_RCC_OscConfig+0x734>
 80020de:	e032      	b.n	8002146 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	2b0c      	cmp	r3, #12
 80020e4:	d02d      	beq.n	8002142 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020e6:	4b1a      	ldr	r3, [pc, #104]	; (8002150 <HAL_RCC_OscConfig+0x7c4>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a19      	ldr	r2, [pc, #100]	; (8002150 <HAL_RCC_OscConfig+0x7c4>)
 80020ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020f0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80020f2:	4b17      	ldr	r3, [pc, #92]	; (8002150 <HAL_RCC_OscConfig+0x7c4>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d105      	bne.n	800210a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80020fe:	4b14      	ldr	r3, [pc, #80]	; (8002150 <HAL_RCC_OscConfig+0x7c4>)
 8002100:	68db      	ldr	r3, [r3, #12]
 8002102:	4a13      	ldr	r2, [pc, #76]	; (8002150 <HAL_RCC_OscConfig+0x7c4>)
 8002104:	f023 0303 	bic.w	r3, r3, #3
 8002108:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800210a:	4b11      	ldr	r3, [pc, #68]	; (8002150 <HAL_RCC_OscConfig+0x7c4>)
 800210c:	68db      	ldr	r3, [r3, #12]
 800210e:	4a10      	ldr	r2, [pc, #64]	; (8002150 <HAL_RCC_OscConfig+0x7c4>)
 8002110:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002114:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002118:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800211a:	f7fe fa55 	bl	80005c8 <HAL_GetTick>
 800211e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002120:	e008      	b.n	8002134 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002122:	f7fe fa51 	bl	80005c8 <HAL_GetTick>
 8002126:	4602      	mov	r2, r0
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	2b02      	cmp	r3, #2
 800212e:	d901      	bls.n	8002134 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002130:	2303      	movs	r3, #3
 8002132:	e009      	b.n	8002148 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002134:	4b06      	ldr	r3, [pc, #24]	; (8002150 <HAL_RCC_OscConfig+0x7c4>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800213c:	2b00      	cmp	r3, #0
 800213e:	d1f0      	bne.n	8002122 <HAL_RCC_OscConfig+0x796>
 8002140:	e001      	b.n	8002146 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e000      	b.n	8002148 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002146:	2300      	movs	r3, #0
}
 8002148:	4618      	mov	r0, r3
 800214a:	3720      	adds	r7, #32
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	40021000 	.word	0x40021000
 8002154:	f99d808c 	.word	0xf99d808c

08002158 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b084      	sub	sp, #16
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d101      	bne.n	800216c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e0c8      	b.n	80022fe <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800216c:	4b66      	ldr	r3, [pc, #408]	; (8002308 <HAL_RCC_ClockConfig+0x1b0>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0307 	and.w	r3, r3, #7
 8002174:	683a      	ldr	r2, [r7, #0]
 8002176:	429a      	cmp	r2, r3
 8002178:	d910      	bls.n	800219c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800217a:	4b63      	ldr	r3, [pc, #396]	; (8002308 <HAL_RCC_ClockConfig+0x1b0>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f023 0207 	bic.w	r2, r3, #7
 8002182:	4961      	ldr	r1, [pc, #388]	; (8002308 <HAL_RCC_ClockConfig+0x1b0>)
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	4313      	orrs	r3, r2
 8002188:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800218a:	4b5f      	ldr	r3, [pc, #380]	; (8002308 <HAL_RCC_ClockConfig+0x1b0>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0307 	and.w	r3, r3, #7
 8002192:	683a      	ldr	r2, [r7, #0]
 8002194:	429a      	cmp	r2, r3
 8002196:	d001      	beq.n	800219c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e0b0      	b.n	80022fe <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0301 	and.w	r3, r3, #1
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d04c      	beq.n	8002242 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	2b03      	cmp	r3, #3
 80021ae:	d107      	bne.n	80021c0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021b0:	4b56      	ldr	r3, [pc, #344]	; (800230c <HAL_RCC_ClockConfig+0x1b4>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d121      	bne.n	8002200 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e09e      	b.n	80022fe <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d107      	bne.n	80021d8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021c8:	4b50      	ldr	r3, [pc, #320]	; (800230c <HAL_RCC_ClockConfig+0x1b4>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d115      	bne.n	8002200 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e092      	b.n	80022fe <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d107      	bne.n	80021f0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021e0:	4b4a      	ldr	r3, [pc, #296]	; (800230c <HAL_RCC_ClockConfig+0x1b4>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0302 	and.w	r3, r3, #2
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d109      	bne.n	8002200 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e086      	b.n	80022fe <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021f0:	4b46      	ldr	r3, [pc, #280]	; (800230c <HAL_RCC_ClockConfig+0x1b4>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d101      	bne.n	8002200 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e07e      	b.n	80022fe <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002200:	4b42      	ldr	r3, [pc, #264]	; (800230c <HAL_RCC_ClockConfig+0x1b4>)
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	f023 0203 	bic.w	r2, r3, #3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	493f      	ldr	r1, [pc, #252]	; (800230c <HAL_RCC_ClockConfig+0x1b4>)
 800220e:	4313      	orrs	r3, r2
 8002210:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002212:	f7fe f9d9 	bl	80005c8 <HAL_GetTick>
 8002216:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002218:	e00a      	b.n	8002230 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800221a:	f7fe f9d5 	bl	80005c8 <HAL_GetTick>
 800221e:	4602      	mov	r2, r0
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	f241 3288 	movw	r2, #5000	; 0x1388
 8002228:	4293      	cmp	r3, r2
 800222a:	d901      	bls.n	8002230 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800222c:	2303      	movs	r3, #3
 800222e:	e066      	b.n	80022fe <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002230:	4b36      	ldr	r3, [pc, #216]	; (800230c <HAL_RCC_ClockConfig+0x1b4>)
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	f003 020c 	and.w	r2, r3, #12
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	429a      	cmp	r2, r3
 8002240:	d1eb      	bne.n	800221a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	2b00      	cmp	r3, #0
 800224c:	d008      	beq.n	8002260 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800224e:	4b2f      	ldr	r3, [pc, #188]	; (800230c <HAL_RCC_ClockConfig+0x1b4>)
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	492c      	ldr	r1, [pc, #176]	; (800230c <HAL_RCC_ClockConfig+0x1b4>)
 800225c:	4313      	orrs	r3, r2
 800225e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002260:	4b29      	ldr	r3, [pc, #164]	; (8002308 <HAL_RCC_ClockConfig+0x1b0>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0307 	and.w	r3, r3, #7
 8002268:	683a      	ldr	r2, [r7, #0]
 800226a:	429a      	cmp	r2, r3
 800226c:	d210      	bcs.n	8002290 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800226e:	4b26      	ldr	r3, [pc, #152]	; (8002308 <HAL_RCC_ClockConfig+0x1b0>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f023 0207 	bic.w	r2, r3, #7
 8002276:	4924      	ldr	r1, [pc, #144]	; (8002308 <HAL_RCC_ClockConfig+0x1b0>)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	4313      	orrs	r3, r2
 800227c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800227e:	4b22      	ldr	r3, [pc, #136]	; (8002308 <HAL_RCC_ClockConfig+0x1b0>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0307 	and.w	r3, r3, #7
 8002286:	683a      	ldr	r2, [r7, #0]
 8002288:	429a      	cmp	r2, r3
 800228a:	d001      	beq.n	8002290 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e036      	b.n	80022fe <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0304 	and.w	r3, r3, #4
 8002298:	2b00      	cmp	r3, #0
 800229a:	d008      	beq.n	80022ae <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800229c:	4b1b      	ldr	r3, [pc, #108]	; (800230c <HAL_RCC_ClockConfig+0x1b4>)
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	4918      	ldr	r1, [pc, #96]	; (800230c <HAL_RCC_ClockConfig+0x1b4>)
 80022aa:	4313      	orrs	r3, r2
 80022ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0308 	and.w	r3, r3, #8
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d009      	beq.n	80022ce <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022ba:	4b14      	ldr	r3, [pc, #80]	; (800230c <HAL_RCC_ClockConfig+0x1b4>)
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	691b      	ldr	r3, [r3, #16]
 80022c6:	00db      	lsls	r3, r3, #3
 80022c8:	4910      	ldr	r1, [pc, #64]	; (800230c <HAL_RCC_ClockConfig+0x1b4>)
 80022ca:	4313      	orrs	r3, r2
 80022cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80022ce:	f000 f825 	bl	800231c <HAL_RCC_GetSysClockFreq>
 80022d2:	4601      	mov	r1, r0
 80022d4:	4b0d      	ldr	r3, [pc, #52]	; (800230c <HAL_RCC_ClockConfig+0x1b4>)
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	091b      	lsrs	r3, r3, #4
 80022da:	f003 030f 	and.w	r3, r3, #15
 80022de:	4a0c      	ldr	r2, [pc, #48]	; (8002310 <HAL_RCC_ClockConfig+0x1b8>)
 80022e0:	5cd3      	ldrb	r3, [r2, r3]
 80022e2:	f003 031f 	and.w	r3, r3, #31
 80022e6:	fa21 f303 	lsr.w	r3, r1, r3
 80022ea:	4a0a      	ldr	r2, [pc, #40]	; (8002314 <HAL_RCC_ClockConfig+0x1bc>)
 80022ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80022ee:	4b0a      	ldr	r3, [pc, #40]	; (8002318 <HAL_RCC_ClockConfig+0x1c0>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4618      	mov	r0, r3
 80022f4:	f004 f9aa 	bl	800664c <HAL_InitTick>
 80022f8:	4603      	mov	r3, r0
 80022fa:	72fb      	strb	r3, [r7, #11]

  return status;
 80022fc:	7afb      	ldrb	r3, [r7, #11]
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3710      	adds	r7, #16
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	40022000 	.word	0x40022000
 800230c:	40021000 	.word	0x40021000
 8002310:	08007224 	.word	0x08007224
 8002314:	20000090 	.word	0x20000090
 8002318:	20000000 	.word	0x20000000

0800231c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800231c:	b480      	push	{r7}
 800231e:	b089      	sub	sp, #36	; 0x24
 8002320:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002322:	2300      	movs	r3, #0
 8002324:	61fb      	str	r3, [r7, #28]
 8002326:	2300      	movs	r3, #0
 8002328:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800232a:	4b3d      	ldr	r3, [pc, #244]	; (8002420 <HAL_RCC_GetSysClockFreq+0x104>)
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	f003 030c 	and.w	r3, r3, #12
 8002332:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002334:	4b3a      	ldr	r3, [pc, #232]	; (8002420 <HAL_RCC_GetSysClockFreq+0x104>)
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	f003 0303 	and.w	r3, r3, #3
 800233c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d005      	beq.n	8002350 <HAL_RCC_GetSysClockFreq+0x34>
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	2b0c      	cmp	r3, #12
 8002348:	d121      	bne.n	800238e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2b01      	cmp	r3, #1
 800234e:	d11e      	bne.n	800238e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002350:	4b33      	ldr	r3, [pc, #204]	; (8002420 <HAL_RCC_GetSysClockFreq+0x104>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0308 	and.w	r3, r3, #8
 8002358:	2b00      	cmp	r3, #0
 800235a:	d107      	bne.n	800236c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800235c:	4b30      	ldr	r3, [pc, #192]	; (8002420 <HAL_RCC_GetSysClockFreq+0x104>)
 800235e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002362:	0a1b      	lsrs	r3, r3, #8
 8002364:	f003 030f 	and.w	r3, r3, #15
 8002368:	61fb      	str	r3, [r7, #28]
 800236a:	e005      	b.n	8002378 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800236c:	4b2c      	ldr	r3, [pc, #176]	; (8002420 <HAL_RCC_GetSysClockFreq+0x104>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	091b      	lsrs	r3, r3, #4
 8002372:	f003 030f 	and.w	r3, r3, #15
 8002376:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002378:	4a2a      	ldr	r2, [pc, #168]	; (8002424 <HAL_RCC_GetSysClockFreq+0x108>)
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002380:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d10d      	bne.n	80023a4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800238c:	e00a      	b.n	80023a4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	2b04      	cmp	r3, #4
 8002392:	d102      	bne.n	800239a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002394:	4b24      	ldr	r3, [pc, #144]	; (8002428 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002396:	61bb      	str	r3, [r7, #24]
 8002398:	e004      	b.n	80023a4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	2b08      	cmp	r3, #8
 800239e:	d101      	bne.n	80023a4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80023a0:	4b22      	ldr	r3, [pc, #136]	; (800242c <HAL_RCC_GetSysClockFreq+0x110>)
 80023a2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	2b0c      	cmp	r3, #12
 80023a8:	d133      	bne.n	8002412 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80023aa:	4b1d      	ldr	r3, [pc, #116]	; (8002420 <HAL_RCC_GetSysClockFreq+0x104>)
 80023ac:	68db      	ldr	r3, [r3, #12]
 80023ae:	f003 0303 	and.w	r3, r3, #3
 80023b2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d002      	beq.n	80023c0 <HAL_RCC_GetSysClockFreq+0xa4>
 80023ba:	2b03      	cmp	r3, #3
 80023bc:	d003      	beq.n	80023c6 <HAL_RCC_GetSysClockFreq+0xaa>
 80023be:	e005      	b.n	80023cc <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80023c0:	4b19      	ldr	r3, [pc, #100]	; (8002428 <HAL_RCC_GetSysClockFreq+0x10c>)
 80023c2:	617b      	str	r3, [r7, #20]
      break;
 80023c4:	e005      	b.n	80023d2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80023c6:	4b19      	ldr	r3, [pc, #100]	; (800242c <HAL_RCC_GetSysClockFreq+0x110>)
 80023c8:	617b      	str	r3, [r7, #20]
      break;
 80023ca:	e002      	b.n	80023d2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	617b      	str	r3, [r7, #20]
      break;
 80023d0:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80023d2:	4b13      	ldr	r3, [pc, #76]	; (8002420 <HAL_RCC_GetSysClockFreq+0x104>)
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	091b      	lsrs	r3, r3, #4
 80023d8:	f003 0307 	and.w	r3, r3, #7
 80023dc:	3301      	adds	r3, #1
 80023de:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80023e0:	4b0f      	ldr	r3, [pc, #60]	; (8002420 <HAL_RCC_GetSysClockFreq+0x104>)
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	0a1b      	lsrs	r3, r3, #8
 80023e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80023ea:	697a      	ldr	r2, [r7, #20]
 80023ec:	fb02 f203 	mul.w	r2, r2, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80023f6:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80023f8:	4b09      	ldr	r3, [pc, #36]	; (8002420 <HAL_RCC_GetSysClockFreq+0x104>)
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	0e5b      	lsrs	r3, r3, #25
 80023fe:	f003 0303 	and.w	r3, r3, #3
 8002402:	3301      	adds	r3, #1
 8002404:	005b      	lsls	r3, r3, #1
 8002406:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002408:	697a      	ldr	r2, [r7, #20]
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002410:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002412:	69bb      	ldr	r3, [r7, #24]
}
 8002414:	4618      	mov	r0, r3
 8002416:	3724      	adds	r7, #36	; 0x24
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr
 8002420:	40021000 	.word	0x40021000
 8002424:	0800723c 	.word	0x0800723c
 8002428:	00f42400 	.word	0x00f42400
 800242c:	007a1200 	.word	0x007a1200

08002430 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002434:	4b03      	ldr	r3, [pc, #12]	; (8002444 <HAL_RCC_GetHCLKFreq+0x14>)
 8002436:	681b      	ldr	r3, [r3, #0]
}
 8002438:	4618      	mov	r0, r3
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	20000090 	.word	0x20000090

08002448 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800244c:	f7ff fff0 	bl	8002430 <HAL_RCC_GetHCLKFreq>
 8002450:	4601      	mov	r1, r0
 8002452:	4b06      	ldr	r3, [pc, #24]	; (800246c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	0a1b      	lsrs	r3, r3, #8
 8002458:	f003 0307 	and.w	r3, r3, #7
 800245c:	4a04      	ldr	r2, [pc, #16]	; (8002470 <HAL_RCC_GetPCLK1Freq+0x28>)
 800245e:	5cd3      	ldrb	r3, [r2, r3]
 8002460:	f003 031f 	and.w	r3, r3, #31
 8002464:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002468:	4618      	mov	r0, r3
 800246a:	bd80      	pop	{r7, pc}
 800246c:	40021000 	.word	0x40021000
 8002470:	08007234 	.word	0x08007234

08002474 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002478:	f7ff ffda 	bl	8002430 <HAL_RCC_GetHCLKFreq>
 800247c:	4601      	mov	r1, r0
 800247e:	4b06      	ldr	r3, [pc, #24]	; (8002498 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	0adb      	lsrs	r3, r3, #11
 8002484:	f003 0307 	and.w	r3, r3, #7
 8002488:	4a04      	ldr	r2, [pc, #16]	; (800249c <HAL_RCC_GetPCLK2Freq+0x28>)
 800248a:	5cd3      	ldrb	r3, [r2, r3]
 800248c:	f003 031f 	and.w	r3, r3, #31
 8002490:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002494:	4618      	mov	r0, r3
 8002496:	bd80      	pop	{r7, pc}
 8002498:	40021000 	.word	0x40021000
 800249c:	08007234 	.word	0x08007234

080024a0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	220f      	movs	r2, #15
 80024ae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80024b0:	4b12      	ldr	r3, [pc, #72]	; (80024fc <HAL_RCC_GetClockConfig+0x5c>)
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	f003 0203 	and.w	r2, r3, #3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80024bc:	4b0f      	ldr	r3, [pc, #60]	; (80024fc <HAL_RCC_GetClockConfig+0x5c>)
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80024c8:	4b0c      	ldr	r3, [pc, #48]	; (80024fc <HAL_RCC_GetClockConfig+0x5c>)
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80024d4:	4b09      	ldr	r3, [pc, #36]	; (80024fc <HAL_RCC_GetClockConfig+0x5c>)
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	08db      	lsrs	r3, r3, #3
 80024da:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80024e2:	4b07      	ldr	r3, [pc, #28]	; (8002500 <HAL_RCC_GetClockConfig+0x60>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0207 	and.w	r2, r3, #7
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	601a      	str	r2, [r3, #0]
}
 80024ee:	bf00      	nop
 80024f0:	370c      	adds	r7, #12
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	40021000 	.word	0x40021000
 8002500:	40022000 	.word	0x40022000

08002504 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b086      	sub	sp, #24
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800250c:	2300      	movs	r3, #0
 800250e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002510:	4b2a      	ldr	r3, [pc, #168]	; (80025bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002512:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002514:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d003      	beq.n	8002524 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800251c:	f7ff f9d2 	bl	80018c4 <HAL_PWREx_GetVoltageRange>
 8002520:	6178      	str	r0, [r7, #20]
 8002522:	e014      	b.n	800254e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002524:	4b25      	ldr	r3, [pc, #148]	; (80025bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002526:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002528:	4a24      	ldr	r2, [pc, #144]	; (80025bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800252a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800252e:	6593      	str	r3, [r2, #88]	; 0x58
 8002530:	4b22      	ldr	r3, [pc, #136]	; (80025bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002532:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002534:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002538:	60fb      	str	r3, [r7, #12]
 800253a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800253c:	f7ff f9c2 	bl	80018c4 <HAL_PWREx_GetVoltageRange>
 8002540:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002542:	4b1e      	ldr	r3, [pc, #120]	; (80025bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002546:	4a1d      	ldr	r2, [pc, #116]	; (80025bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002548:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800254c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002554:	d10b      	bne.n	800256e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2b80      	cmp	r3, #128	; 0x80
 800255a:	d919      	bls.n	8002590 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2ba0      	cmp	r3, #160	; 0xa0
 8002560:	d902      	bls.n	8002568 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002562:	2302      	movs	r3, #2
 8002564:	613b      	str	r3, [r7, #16]
 8002566:	e013      	b.n	8002590 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002568:	2301      	movs	r3, #1
 800256a:	613b      	str	r3, [r7, #16]
 800256c:	e010      	b.n	8002590 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2b80      	cmp	r3, #128	; 0x80
 8002572:	d902      	bls.n	800257a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002574:	2303      	movs	r3, #3
 8002576:	613b      	str	r3, [r7, #16]
 8002578:	e00a      	b.n	8002590 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2b80      	cmp	r3, #128	; 0x80
 800257e:	d102      	bne.n	8002586 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002580:	2302      	movs	r3, #2
 8002582:	613b      	str	r3, [r7, #16]
 8002584:	e004      	b.n	8002590 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2b70      	cmp	r3, #112	; 0x70
 800258a:	d101      	bne.n	8002590 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800258c:	2301      	movs	r3, #1
 800258e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002590:	4b0b      	ldr	r3, [pc, #44]	; (80025c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f023 0207 	bic.w	r2, r3, #7
 8002598:	4909      	ldr	r1, [pc, #36]	; (80025c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	4313      	orrs	r3, r2
 800259e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80025a0:	4b07      	ldr	r3, [pc, #28]	; (80025c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 0307 	and.w	r3, r3, #7
 80025a8:	693a      	ldr	r2, [r7, #16]
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d001      	beq.n	80025b2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e000      	b.n	80025b4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80025b2:	2300      	movs	r3, #0
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3718      	adds	r7, #24
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	40021000 	.word	0x40021000
 80025c0:	40022000 	.word	0x40022000

080025c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b086      	sub	sp, #24
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80025cc:	2300      	movs	r3, #0
 80025ce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80025d0:	2300      	movs	r3, #0
 80025d2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d03f      	beq.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80025e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025e8:	d01c      	beq.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80025ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025ee:	d802      	bhi.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d00e      	beq.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80025f4:	e01f      	b.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x72>
 80025f6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80025fa:	d003      	beq.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80025fc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002600:	d01c      	beq.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x78>
 8002602:	e018      	b.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002604:	4b85      	ldr	r3, [pc, #532]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	4a84      	ldr	r2, [pc, #528]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800260a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800260e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002610:	e015      	b.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	3304      	adds	r3, #4
 8002616:	2100      	movs	r1, #0
 8002618:	4618      	mov	r0, r3
 800261a:	f000 fab9 	bl	8002b90 <RCCEx_PLLSAI1_Config>
 800261e:	4603      	mov	r3, r0
 8002620:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002622:	e00c      	b.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	3320      	adds	r3, #32
 8002628:	2100      	movs	r1, #0
 800262a:	4618      	mov	r0, r3
 800262c:	f000 fba0 	bl	8002d70 <RCCEx_PLLSAI2_Config>
 8002630:	4603      	mov	r3, r0
 8002632:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002634:	e003      	b.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	74fb      	strb	r3, [r7, #19]
      break;
 800263a:	e000      	b.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 800263c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800263e:	7cfb      	ldrb	r3, [r7, #19]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d10b      	bne.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002644:	4b75      	ldr	r3, [pc, #468]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800264a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002652:	4972      	ldr	r1, [pc, #456]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002654:	4313      	orrs	r3, r2
 8002656:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800265a:	e001      	b.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800265c:	7cfb      	ldrb	r3, [r7, #19]
 800265e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d03f      	beq.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002670:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002674:	d01c      	beq.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002676:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800267a:	d802      	bhi.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 800267c:	2b00      	cmp	r3, #0
 800267e:	d00e      	beq.n	800269e <HAL_RCCEx_PeriphCLKConfig+0xda>
 8002680:	e01f      	b.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002682:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002686:	d003      	beq.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8002688:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800268c:	d01c      	beq.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x104>
 800268e:	e018      	b.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002690:	4b62      	ldr	r3, [pc, #392]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	4a61      	ldr	r2, [pc, #388]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002696:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800269a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800269c:	e015      	b.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	3304      	adds	r3, #4
 80026a2:	2100      	movs	r1, #0
 80026a4:	4618      	mov	r0, r3
 80026a6:	f000 fa73 	bl	8002b90 <RCCEx_PLLSAI1_Config>
 80026aa:	4603      	mov	r3, r0
 80026ac:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80026ae:	e00c      	b.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	3320      	adds	r3, #32
 80026b4:	2100      	movs	r1, #0
 80026b6:	4618      	mov	r0, r3
 80026b8:	f000 fb5a 	bl	8002d70 <RCCEx_PLLSAI2_Config>
 80026bc:	4603      	mov	r3, r0
 80026be:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80026c0:	e003      	b.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	74fb      	strb	r3, [r7, #19]
      break;
 80026c6:	e000      	b.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80026c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026ca:	7cfb      	ldrb	r3, [r7, #19]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d10b      	bne.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80026d0:	4b52      	ldr	r3, [pc, #328]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80026d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026d6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80026de:	494f      	ldr	r1, [pc, #316]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80026e0:	4313      	orrs	r3, r2
 80026e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80026e6:	e001      	b.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026e8:	7cfb      	ldrb	r3, [r7, #19]
 80026ea:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	f000 80a0 	beq.w	800283a <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026fa:	2300      	movs	r3, #0
 80026fc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80026fe:	4b47      	ldr	r3, [pc, #284]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002702:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d101      	bne.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x14a>
 800270a:	2301      	movs	r3, #1
 800270c:	e000      	b.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800270e:	2300      	movs	r3, #0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d00d      	beq.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002714:	4b41      	ldr	r3, [pc, #260]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002716:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002718:	4a40      	ldr	r2, [pc, #256]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800271a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800271e:	6593      	str	r3, [r2, #88]	; 0x58
 8002720:	4b3e      	ldr	r3, [pc, #248]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002724:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002728:	60bb      	str	r3, [r7, #8]
 800272a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800272c:	2301      	movs	r3, #1
 800272e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002730:	4b3b      	ldr	r3, [pc, #236]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a3a      	ldr	r2, [pc, #232]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002736:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800273a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800273c:	f7fd ff44 	bl	80005c8 <HAL_GetTick>
 8002740:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002742:	e009      	b.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002744:	f7fd ff40 	bl	80005c8 <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	2b02      	cmp	r3, #2
 8002750:	d902      	bls.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	74fb      	strb	r3, [r7, #19]
        break;
 8002756:	e005      	b.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002758:	4b31      	ldr	r3, [pc, #196]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002760:	2b00      	cmp	r3, #0
 8002762:	d0ef      	beq.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8002764:	7cfb      	ldrb	r3, [r7, #19]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d15c      	bne.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800276a:	4b2c      	ldr	r3, [pc, #176]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800276c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002770:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002774:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d01f      	beq.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002782:	697a      	ldr	r2, [r7, #20]
 8002784:	429a      	cmp	r2, r3
 8002786:	d019      	beq.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002788:	4b24      	ldr	r3, [pc, #144]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800278a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800278e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002792:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002794:	4b21      	ldr	r3, [pc, #132]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002796:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800279a:	4a20      	ldr	r2, [pc, #128]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800279c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80027a4:	4b1d      	ldr	r3, [pc, #116]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80027a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027aa:	4a1c      	ldr	r2, [pc, #112]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80027ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80027b4:	4a19      	ldr	r2, [pc, #100]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	f003 0301 	and.w	r3, r3, #1
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d016      	beq.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c6:	f7fd feff 	bl	80005c8 <HAL_GetTick>
 80027ca:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027cc:	e00b      	b.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027ce:	f7fd fefb 	bl	80005c8 <HAL_GetTick>
 80027d2:	4602      	mov	r2, r0
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80027dc:	4293      	cmp	r3, r2
 80027de:	d902      	bls.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 80027e0:	2303      	movs	r3, #3
 80027e2:	74fb      	strb	r3, [r7, #19]
            break;
 80027e4:	e006      	b.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027e6:	4b0d      	ldr	r3, [pc, #52]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80027e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027ec:	f003 0302 	and.w	r3, r3, #2
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d0ec      	beq.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 80027f4:	7cfb      	ldrb	r3, [r7, #19]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d10c      	bne.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027fa:	4b08      	ldr	r3, [pc, #32]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80027fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002800:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800280a:	4904      	ldr	r1, [pc, #16]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800280c:	4313      	orrs	r3, r2
 800280e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002812:	e009      	b.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002814:	7cfb      	ldrb	r3, [r7, #19]
 8002816:	74bb      	strb	r3, [r7, #18]
 8002818:	e006      	b.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x264>
 800281a:	bf00      	nop
 800281c:	40021000 	.word	0x40021000
 8002820:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002824:	7cfb      	ldrb	r3, [r7, #19]
 8002826:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002828:	7c7b      	ldrb	r3, [r7, #17]
 800282a:	2b01      	cmp	r3, #1
 800282c:	d105      	bne.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800282e:	4b9e      	ldr	r3, [pc, #632]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002832:	4a9d      	ldr	r2, [pc, #628]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002834:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002838:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0301 	and.w	r3, r3, #1
 8002842:	2b00      	cmp	r3, #0
 8002844:	d00a      	beq.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002846:	4b98      	ldr	r3, [pc, #608]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002848:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800284c:	f023 0203 	bic.w	r2, r3, #3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002854:	4994      	ldr	r1, [pc, #592]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002856:	4313      	orrs	r3, r2
 8002858:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0302 	and.w	r3, r3, #2
 8002864:	2b00      	cmp	r3, #0
 8002866:	d00a      	beq.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002868:	4b8f      	ldr	r3, [pc, #572]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800286a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800286e:	f023 020c 	bic.w	r2, r3, #12
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002876:	498c      	ldr	r1, [pc, #560]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002878:	4313      	orrs	r3, r2
 800287a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0304 	and.w	r3, r3, #4
 8002886:	2b00      	cmp	r3, #0
 8002888:	d00a      	beq.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800288a:	4b87      	ldr	r3, [pc, #540]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800288c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002890:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002898:	4983      	ldr	r1, [pc, #524]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800289a:	4313      	orrs	r3, r2
 800289c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0308 	and.w	r3, r3, #8
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d00a      	beq.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80028ac:	4b7e      	ldr	r3, [pc, #504]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028b2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ba:	497b      	ldr	r1, [pc, #492]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028bc:	4313      	orrs	r3, r2
 80028be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0310 	and.w	r3, r3, #16
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d00a      	beq.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80028ce:	4b76      	ldr	r3, [pc, #472]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028dc:	4972      	ldr	r1, [pc, #456]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028de:	4313      	orrs	r3, r2
 80028e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0320 	and.w	r3, r3, #32
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d00a      	beq.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80028f0:	4b6d      	ldr	r3, [pc, #436]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028f6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028fe:	496a      	ldr	r1, [pc, #424]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002900:	4313      	orrs	r3, r2
 8002902:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800290e:	2b00      	cmp	r3, #0
 8002910:	d00a      	beq.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002912:	4b65      	ldr	r3, [pc, #404]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002914:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002918:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002920:	4961      	ldr	r1, [pc, #388]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002922:	4313      	orrs	r3, r2
 8002924:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002930:	2b00      	cmp	r3, #0
 8002932:	d00a      	beq.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002934:	4b5c      	ldr	r3, [pc, #368]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002936:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800293a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002942:	4959      	ldr	r1, [pc, #356]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002944:	4313      	orrs	r3, r2
 8002946:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002952:	2b00      	cmp	r3, #0
 8002954:	d00a      	beq.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002956:	4b54      	ldr	r3, [pc, #336]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002958:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800295c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002964:	4950      	ldr	r1, [pc, #320]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002966:	4313      	orrs	r3, r2
 8002968:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002974:	2b00      	cmp	r3, #0
 8002976:	d00a      	beq.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002978:	4b4b      	ldr	r3, [pc, #300]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800297a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800297e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002986:	4948      	ldr	r1, [pc, #288]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002988:	4313      	orrs	r3, r2
 800298a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002996:	2b00      	cmp	r3, #0
 8002998:	d00a      	beq.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800299a:	4b43      	ldr	r3, [pc, #268]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800299c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029a8:	493f      	ldr	r1, [pc, #252]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d028      	beq.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80029bc:	4b3a      	ldr	r3, [pc, #232]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029c2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029ca:	4937      	ldr	r1, [pc, #220]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029cc:	4313      	orrs	r3, r2
 80029ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029da:	d106      	bne.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029dc:	4b32      	ldr	r3, [pc, #200]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	4a31      	ldr	r2, [pc, #196]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029e6:	60d3      	str	r3, [r2, #12]
 80029e8:	e011      	b.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029ee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80029f2:	d10c      	bne.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	3304      	adds	r3, #4
 80029f8:	2101      	movs	r1, #1
 80029fa:	4618      	mov	r0, r3
 80029fc:	f000 f8c8 	bl	8002b90 <RCCEx_PLLSAI1_Config>
 8002a00:	4603      	mov	r3, r0
 8002a02:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002a04:	7cfb      	ldrb	r3, [r7, #19]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d001      	beq.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8002a0a:	7cfb      	ldrb	r3, [r7, #19]
 8002a0c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d028      	beq.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002a1a:	4b23      	ldr	r3, [pc, #140]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a20:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a28:	491f      	ldr	r1, [pc, #124]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a34:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a38:	d106      	bne.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a3a:	4b1b      	ldr	r3, [pc, #108]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	4a1a      	ldr	r2, [pc, #104]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a40:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a44:	60d3      	str	r3, [r2, #12]
 8002a46:	e011      	b.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a4c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a50:	d10c      	bne.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	3304      	adds	r3, #4
 8002a56:	2101      	movs	r1, #1
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f000 f899 	bl	8002b90 <RCCEx_PLLSAI1_Config>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a62:	7cfb      	ldrb	r3, [r7, #19]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d001      	beq.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8002a68:	7cfb      	ldrb	r3, [r7, #19]
 8002a6a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d02b      	beq.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002a78:	4b0b      	ldr	r3, [pc, #44]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a7e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a86:	4908      	ldr	r1, [pc, #32]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a92:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a96:	d109      	bne.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a98:	4b03      	ldr	r3, [pc, #12]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	4a02      	ldr	r2, [pc, #8]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002aa2:	60d3      	str	r3, [r2, #12]
 8002aa4:	e014      	b.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8002aa6:	bf00      	nop
 8002aa8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ab0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ab4:	d10c      	bne.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	3304      	adds	r3, #4
 8002aba:	2101      	movs	r1, #1
 8002abc:	4618      	mov	r0, r3
 8002abe:	f000 f867 	bl	8002b90 <RCCEx_PLLSAI1_Config>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ac6:	7cfb      	ldrb	r3, [r7, #19]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d001      	beq.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8002acc:	7cfb      	ldrb	r3, [r7, #19]
 8002ace:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d02f      	beq.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002adc:	4b2b      	ldr	r3, [pc, #172]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ae2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002aea:	4928      	ldr	r1, [pc, #160]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002aec:	4313      	orrs	r3, r2
 8002aee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002af6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002afa:	d10d      	bne.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	3304      	adds	r3, #4
 8002b00:	2102      	movs	r1, #2
 8002b02:	4618      	mov	r0, r3
 8002b04:	f000 f844 	bl	8002b90 <RCCEx_PLLSAI1_Config>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b0c:	7cfb      	ldrb	r3, [r7, #19]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d014      	beq.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002b12:	7cfb      	ldrb	r3, [r7, #19]
 8002b14:	74bb      	strb	r3, [r7, #18]
 8002b16:	e011      	b.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b20:	d10c      	bne.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	3320      	adds	r3, #32
 8002b26:	2102      	movs	r1, #2
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f000 f921 	bl	8002d70 <RCCEx_PLLSAI2_Config>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b32:	7cfb      	ldrb	r3, [r7, #19]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d001      	beq.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002b38:	7cfb      	ldrb	r3, [r7, #19]
 8002b3a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d00a      	beq.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002b48:	4b10      	ldr	r3, [pc, #64]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b4e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b56:	490d      	ldr	r1, [pc, #52]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d00b      	beq.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002b6a:	4b08      	ldr	r3, [pc, #32]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b70:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b7a:	4904      	ldr	r1, [pc, #16]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002b82:	7cbb      	ldrb	r3, [r7, #18]
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3718      	adds	r7, #24
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	40021000 	.word	0x40021000

08002b90 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002b9e:	4b73      	ldr	r3, [pc, #460]	; (8002d6c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ba0:	68db      	ldr	r3, [r3, #12]
 8002ba2:	f003 0303 	and.w	r3, r3, #3
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d018      	beq.n	8002bdc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002baa:	4b70      	ldr	r3, [pc, #448]	; (8002d6c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	f003 0203 	and.w	r2, r3, #3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d10d      	bne.n	8002bd6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
       ||
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d009      	beq.n	8002bd6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002bc2:	4b6a      	ldr	r3, [pc, #424]	; (8002d6c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	091b      	lsrs	r3, r3, #4
 8002bc8:	f003 0307 	and.w	r3, r3, #7
 8002bcc:	1c5a      	adds	r2, r3, #1
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	685b      	ldr	r3, [r3, #4]
       ||
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d044      	beq.n	8002c60 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	73fb      	strb	r3, [r7, #15]
 8002bda:	e041      	b.n	8002c60 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	d00c      	beq.n	8002bfe <RCCEx_PLLSAI1_Config+0x6e>
 8002be4:	2b03      	cmp	r3, #3
 8002be6:	d013      	beq.n	8002c10 <RCCEx_PLLSAI1_Config+0x80>
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d120      	bne.n	8002c2e <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002bec:	4b5f      	ldr	r3, [pc, #380]	; (8002d6c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 0302 	and.w	r3, r3, #2
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d11d      	bne.n	8002c34 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bfc:	e01a      	b.n	8002c34 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002bfe:	4b5b      	ldr	r3, [pc, #364]	; (8002d6c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d116      	bne.n	8002c38 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c0e:	e013      	b.n	8002c38 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002c10:	4b56      	ldr	r3, [pc, #344]	; (8002d6c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d10f      	bne.n	8002c3c <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002c1c:	4b53      	ldr	r3, [pc, #332]	; (8002d6c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d109      	bne.n	8002c3c <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002c2c:	e006      	b.n	8002c3c <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	73fb      	strb	r3, [r7, #15]
      break;
 8002c32:	e004      	b.n	8002c3e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002c34:	bf00      	nop
 8002c36:	e002      	b.n	8002c3e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002c38:	bf00      	nop
 8002c3a:	e000      	b.n	8002c3e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002c3c:	bf00      	nop
    }

    if(status == HAL_OK)
 8002c3e:	7bfb      	ldrb	r3, [r7, #15]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d10d      	bne.n	8002c60 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002c44:	4b49      	ldr	r3, [pc, #292]	; (8002d6c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6819      	ldr	r1, [r3, #0]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	3b01      	subs	r3, #1
 8002c56:	011b      	lsls	r3, r3, #4
 8002c58:	430b      	orrs	r3, r1
 8002c5a:	4944      	ldr	r1, [pc, #272]	; (8002d6c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002c60:	7bfb      	ldrb	r3, [r7, #15]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d17d      	bne.n	8002d62 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002c66:	4b41      	ldr	r3, [pc, #260]	; (8002d6c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a40      	ldr	r2, [pc, #256]	; (8002d6c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c6c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002c70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c72:	f7fd fca9 	bl	80005c8 <HAL_GetTick>
 8002c76:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c78:	e009      	b.n	8002c8e <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c7a:	f7fd fca5 	bl	80005c8 <HAL_GetTick>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	d902      	bls.n	8002c8e <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002c88:	2303      	movs	r3, #3
 8002c8a:	73fb      	strb	r3, [r7, #15]
        break;
 8002c8c:	e005      	b.n	8002c9a <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c8e:	4b37      	ldr	r3, [pc, #220]	; (8002d6c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d1ef      	bne.n	8002c7a <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002c9a:	7bfb      	ldrb	r3, [r7, #15]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d160      	bne.n	8002d62 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d111      	bne.n	8002cca <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ca6:	4b31      	ldr	r3, [pc, #196]	; (8002d6c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ca8:	691b      	ldr	r3, [r3, #16]
 8002caa:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002cae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	6892      	ldr	r2, [r2, #8]
 8002cb6:	0211      	lsls	r1, r2, #8
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	68d2      	ldr	r2, [r2, #12]
 8002cbc:	0912      	lsrs	r2, r2, #4
 8002cbe:	0452      	lsls	r2, r2, #17
 8002cc0:	430a      	orrs	r2, r1
 8002cc2:	492a      	ldr	r1, [pc, #168]	; (8002d6c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	610b      	str	r3, [r1, #16]
 8002cc8:	e027      	b.n	8002d1a <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d112      	bne.n	8002cf6 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002cd0:	4b26      	ldr	r3, [pc, #152]	; (8002d6c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002cd2:	691b      	ldr	r3, [r3, #16]
 8002cd4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002cd8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	6892      	ldr	r2, [r2, #8]
 8002ce0:	0211      	lsls	r1, r2, #8
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	6912      	ldr	r2, [r2, #16]
 8002ce6:	0852      	lsrs	r2, r2, #1
 8002ce8:	3a01      	subs	r2, #1
 8002cea:	0552      	lsls	r2, r2, #21
 8002cec:	430a      	orrs	r2, r1
 8002cee:	491f      	ldr	r1, [pc, #124]	; (8002d6c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	610b      	str	r3, [r1, #16]
 8002cf4:	e011      	b.n	8002d1a <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002cf6:	4b1d      	ldr	r3, [pc, #116]	; (8002d6c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002cf8:	691b      	ldr	r3, [r3, #16]
 8002cfa:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002cfe:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	6892      	ldr	r2, [r2, #8]
 8002d06:	0211      	lsls	r1, r2, #8
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	6952      	ldr	r2, [r2, #20]
 8002d0c:	0852      	lsrs	r2, r2, #1
 8002d0e:	3a01      	subs	r2, #1
 8002d10:	0652      	lsls	r2, r2, #25
 8002d12:	430a      	orrs	r2, r1
 8002d14:	4915      	ldr	r1, [pc, #84]	; (8002d6c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d16:	4313      	orrs	r3, r2
 8002d18:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002d1a:	4b14      	ldr	r3, [pc, #80]	; (8002d6c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a13      	ldr	r2, [pc, #76]	; (8002d6c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d20:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002d24:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d26:	f7fd fc4f 	bl	80005c8 <HAL_GetTick>
 8002d2a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d2c:	e009      	b.n	8002d42 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d2e:	f7fd fc4b 	bl	80005c8 <HAL_GetTick>
 8002d32:	4602      	mov	r2, r0
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d902      	bls.n	8002d42 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	73fb      	strb	r3, [r7, #15]
          break;
 8002d40:	e005      	b.n	8002d4e <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d42:	4b0a      	ldr	r3, [pc, #40]	; (8002d6c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d0ef      	beq.n	8002d2e <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8002d4e:	7bfb      	ldrb	r3, [r7, #15]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d106      	bne.n	8002d62 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002d54:	4b05      	ldr	r3, [pc, #20]	; (8002d6c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d56:	691a      	ldr	r2, [r3, #16]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	699b      	ldr	r3, [r3, #24]
 8002d5c:	4903      	ldr	r1, [pc, #12]	; (8002d6c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002d62:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3710      	adds	r7, #16
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	40021000 	.word	0x40021000

08002d70 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002d7e:	4b68      	ldr	r3, [pc, #416]	; (8002f20 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	f003 0303 	and.w	r3, r3, #3
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d018      	beq.n	8002dbc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002d8a:	4b65      	ldr	r3, [pc, #404]	; (8002f20 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	f003 0203 	and.w	r2, r3, #3
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d10d      	bne.n	8002db6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
       ||
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d009      	beq.n	8002db6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002da2:	4b5f      	ldr	r3, [pc, #380]	; (8002f20 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	091b      	lsrs	r3, r3, #4
 8002da8:	f003 0307 	and.w	r3, r3, #7
 8002dac:	1c5a      	adds	r2, r3, #1
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
       ||
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d044      	beq.n	8002e40 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	73fb      	strb	r3, [r7, #15]
 8002dba:	e041      	b.n	8002e40 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	d00c      	beq.n	8002dde <RCCEx_PLLSAI2_Config+0x6e>
 8002dc4:	2b03      	cmp	r3, #3
 8002dc6:	d013      	beq.n	8002df0 <RCCEx_PLLSAI2_Config+0x80>
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d120      	bne.n	8002e0e <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002dcc:	4b54      	ldr	r3, [pc, #336]	; (8002f20 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0302 	and.w	r3, r3, #2
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d11d      	bne.n	8002e14 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ddc:	e01a      	b.n	8002e14 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002dde:	4b50      	ldr	r3, [pc, #320]	; (8002f20 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d116      	bne.n	8002e18 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dee:	e013      	b.n	8002e18 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002df0:	4b4b      	ldr	r3, [pc, #300]	; (8002f20 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d10f      	bne.n	8002e1c <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002dfc:	4b48      	ldr	r3, [pc, #288]	; (8002f20 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d109      	bne.n	8002e1c <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002e0c:	e006      	b.n	8002e1c <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	73fb      	strb	r3, [r7, #15]
      break;
 8002e12:	e004      	b.n	8002e1e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002e14:	bf00      	nop
 8002e16:	e002      	b.n	8002e1e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002e18:	bf00      	nop
 8002e1a:	e000      	b.n	8002e1e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002e1c:	bf00      	nop
    }

    if(status == HAL_OK)
 8002e1e:	7bfb      	ldrb	r3, [r7, #15]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d10d      	bne.n	8002e40 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002e24:	4b3e      	ldr	r3, [pc, #248]	; (8002f20 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6819      	ldr	r1, [r3, #0]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	3b01      	subs	r3, #1
 8002e36:	011b      	lsls	r3, r3, #4
 8002e38:	430b      	orrs	r3, r1
 8002e3a:	4939      	ldr	r1, [pc, #228]	; (8002f20 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002e40:	7bfb      	ldrb	r3, [r7, #15]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d167      	bne.n	8002f16 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002e46:	4b36      	ldr	r3, [pc, #216]	; (8002f20 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a35      	ldr	r2, [pc, #212]	; (8002f20 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e50:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e52:	f7fd fbb9 	bl	80005c8 <HAL_GetTick>
 8002e56:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002e58:	e009      	b.n	8002e6e <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002e5a:	f7fd fbb5 	bl	80005c8 <HAL_GetTick>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d902      	bls.n	8002e6e <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	73fb      	strb	r3, [r7, #15]
        break;
 8002e6c:	e005      	b.n	8002e7a <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002e6e:	4b2c      	ldr	r3, [pc, #176]	; (8002f20 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d1ef      	bne.n	8002e5a <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002e7a:	7bfb      	ldrb	r3, [r7, #15]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d14a      	bne.n	8002f16 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d111      	bne.n	8002eaa <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002e86:	4b26      	ldr	r3, [pc, #152]	; (8002f20 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e88:	695b      	ldr	r3, [r3, #20]
 8002e8a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002e8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	6892      	ldr	r2, [r2, #8]
 8002e96:	0211      	lsls	r1, r2, #8
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	68d2      	ldr	r2, [r2, #12]
 8002e9c:	0912      	lsrs	r2, r2, #4
 8002e9e:	0452      	lsls	r2, r2, #17
 8002ea0:	430a      	orrs	r2, r1
 8002ea2:	491f      	ldr	r1, [pc, #124]	; (8002f20 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	614b      	str	r3, [r1, #20]
 8002ea8:	e011      	b.n	8002ece <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002eaa:	4b1d      	ldr	r3, [pc, #116]	; (8002f20 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002eac:	695b      	ldr	r3, [r3, #20]
 8002eae:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002eb2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	6892      	ldr	r2, [r2, #8]
 8002eba:	0211      	lsls	r1, r2, #8
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	6912      	ldr	r2, [r2, #16]
 8002ec0:	0852      	lsrs	r2, r2, #1
 8002ec2:	3a01      	subs	r2, #1
 8002ec4:	0652      	lsls	r2, r2, #25
 8002ec6:	430a      	orrs	r2, r1
 8002ec8:	4915      	ldr	r1, [pc, #84]	; (8002f20 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002ece:	4b14      	ldr	r3, [pc, #80]	; (8002f20 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a13      	ldr	r2, [pc, #76]	; (8002f20 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ed4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ed8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eda:	f7fd fb75 	bl	80005c8 <HAL_GetTick>
 8002ede:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002ee0:	e009      	b.n	8002ef6 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002ee2:	f7fd fb71 	bl	80005c8 <HAL_GetTick>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d902      	bls.n	8002ef6 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	73fb      	strb	r3, [r7, #15]
          break;
 8002ef4:	e005      	b.n	8002f02 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002ef6:	4b0a      	ldr	r3, [pc, #40]	; (8002f20 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d0ef      	beq.n	8002ee2 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8002f02:	7bfb      	ldrb	r3, [r7, #15]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d106      	bne.n	8002f16 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002f08:	4b05      	ldr	r3, [pc, #20]	; (8002f20 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f0a:	695a      	ldr	r2, [r3, #20]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	695b      	ldr	r3, [r3, #20]
 8002f10:	4903      	ldr	r1, [pc, #12]	; (8002f20 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f12:	4313      	orrs	r3, r2
 8002f14:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002f16:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3710      	adds	r7, #16
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	40021000 	.word	0x40021000

08002f24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d101      	bne.n	8002f36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e049      	b.n	8002fca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d106      	bne.n	8002f50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2200      	movs	r2, #0
 8002f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f000 f841 	bl	8002fd2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2202      	movs	r2, #2
 8002f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	3304      	adds	r3, #4
 8002f60:	4619      	mov	r1, r3
 8002f62:	4610      	mov	r0, r2
 8002f64:	f000 f9f8 	bl	8003358 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2201      	movs	r2, #1
 8002f94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2201      	movs	r2, #1
 8002fac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002fc8:	2300      	movs	r3, #0
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3708      	adds	r7, #8
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}

08002fd2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002fd2:	b480      	push	{r7}
 8002fd4:	b083      	sub	sp, #12
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002fda:	bf00      	nop
 8002fdc:	370c      	adds	r7, #12
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
	...

08002fe8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b085      	sub	sp, #20
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d001      	beq.n	8003000 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e04f      	b.n	80030a0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2202      	movs	r2, #2
 8003004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	68da      	ldr	r2, [r3, #12]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f042 0201 	orr.w	r2, r2, #1
 8003016:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a23      	ldr	r2, [pc, #140]	; (80030ac <HAL_TIM_Base_Start_IT+0xc4>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d01d      	beq.n	800305e <HAL_TIM_Base_Start_IT+0x76>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800302a:	d018      	beq.n	800305e <HAL_TIM_Base_Start_IT+0x76>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a1f      	ldr	r2, [pc, #124]	; (80030b0 <HAL_TIM_Base_Start_IT+0xc8>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d013      	beq.n	800305e <HAL_TIM_Base_Start_IT+0x76>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a1e      	ldr	r2, [pc, #120]	; (80030b4 <HAL_TIM_Base_Start_IT+0xcc>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d00e      	beq.n	800305e <HAL_TIM_Base_Start_IT+0x76>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a1c      	ldr	r2, [pc, #112]	; (80030b8 <HAL_TIM_Base_Start_IT+0xd0>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d009      	beq.n	800305e <HAL_TIM_Base_Start_IT+0x76>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a1b      	ldr	r2, [pc, #108]	; (80030bc <HAL_TIM_Base_Start_IT+0xd4>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d004      	beq.n	800305e <HAL_TIM_Base_Start_IT+0x76>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a19      	ldr	r2, [pc, #100]	; (80030c0 <HAL_TIM_Base_Start_IT+0xd8>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d115      	bne.n	800308a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	689a      	ldr	r2, [r3, #8]
 8003064:	4b17      	ldr	r3, [pc, #92]	; (80030c4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003066:	4013      	ands	r3, r2
 8003068:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2b06      	cmp	r3, #6
 800306e:	d015      	beq.n	800309c <HAL_TIM_Base_Start_IT+0xb4>
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003076:	d011      	beq.n	800309c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f042 0201 	orr.w	r2, r2, #1
 8003086:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003088:	e008      	b.n	800309c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f042 0201 	orr.w	r2, r2, #1
 8003098:	601a      	str	r2, [r3, #0]
 800309a:	e000      	b.n	800309e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800309c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800309e:	2300      	movs	r3, #0
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3714      	adds	r7, #20
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr
 80030ac:	40012c00 	.word	0x40012c00
 80030b0:	40000400 	.word	0x40000400
 80030b4:	40000800 	.word	0x40000800
 80030b8:	40000c00 	.word	0x40000c00
 80030bc:	40013400 	.word	0x40013400
 80030c0:	40014000 	.word	0x40014000
 80030c4:	00010007 	.word	0x00010007

080030c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	691b      	ldr	r3, [r3, #16]
 80030d6:	f003 0302 	and.w	r3, r3, #2
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d122      	bne.n	8003124 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	f003 0302 	and.w	r3, r3, #2
 80030e8:	2b02      	cmp	r3, #2
 80030ea:	d11b      	bne.n	8003124 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f06f 0202 	mvn.w	r2, #2
 80030f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2201      	movs	r2, #1
 80030fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	699b      	ldr	r3, [r3, #24]
 8003102:	f003 0303 	and.w	r3, r3, #3
 8003106:	2b00      	cmp	r3, #0
 8003108:	d003      	beq.n	8003112 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f000 f905 	bl	800331a <HAL_TIM_IC_CaptureCallback>
 8003110:	e005      	b.n	800311e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f000 f8f7 	bl	8003306 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	f000 f908 	bl	800332e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	691b      	ldr	r3, [r3, #16]
 800312a:	f003 0304 	and.w	r3, r3, #4
 800312e:	2b04      	cmp	r3, #4
 8003130:	d122      	bne.n	8003178 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	f003 0304 	and.w	r3, r3, #4
 800313c:	2b04      	cmp	r3, #4
 800313e:	d11b      	bne.n	8003178 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f06f 0204 	mvn.w	r2, #4
 8003148:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2202      	movs	r2, #2
 800314e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	699b      	ldr	r3, [r3, #24]
 8003156:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800315a:	2b00      	cmp	r3, #0
 800315c:	d003      	beq.n	8003166 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f000 f8db 	bl	800331a <HAL_TIM_IC_CaptureCallback>
 8003164:	e005      	b.n	8003172 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f000 f8cd 	bl	8003306 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	f000 f8de 	bl	800332e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	691b      	ldr	r3, [r3, #16]
 800317e:	f003 0308 	and.w	r3, r3, #8
 8003182:	2b08      	cmp	r3, #8
 8003184:	d122      	bne.n	80031cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	f003 0308 	and.w	r3, r3, #8
 8003190:	2b08      	cmp	r3, #8
 8003192:	d11b      	bne.n	80031cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f06f 0208 	mvn.w	r2, #8
 800319c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2204      	movs	r2, #4
 80031a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	69db      	ldr	r3, [r3, #28]
 80031aa:	f003 0303 	and.w	r3, r3, #3
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d003      	beq.n	80031ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f000 f8b1 	bl	800331a <HAL_TIM_IC_CaptureCallback>
 80031b8:	e005      	b.n	80031c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f000 f8a3 	bl	8003306 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f000 f8b4 	bl	800332e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	691b      	ldr	r3, [r3, #16]
 80031d2:	f003 0310 	and.w	r3, r3, #16
 80031d6:	2b10      	cmp	r3, #16
 80031d8:	d122      	bne.n	8003220 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	f003 0310 	and.w	r3, r3, #16
 80031e4:	2b10      	cmp	r3, #16
 80031e6:	d11b      	bne.n	8003220 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f06f 0210 	mvn.w	r2, #16
 80031f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2208      	movs	r2, #8
 80031f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	69db      	ldr	r3, [r3, #28]
 80031fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003202:	2b00      	cmp	r3, #0
 8003204:	d003      	beq.n	800320e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f000 f887 	bl	800331a <HAL_TIM_IC_CaptureCallback>
 800320c:	e005      	b.n	800321a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f000 f879 	bl	8003306 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f000 f88a 	bl	800332e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	691b      	ldr	r3, [r3, #16]
 8003226:	f003 0301 	and.w	r3, r3, #1
 800322a:	2b01      	cmp	r3, #1
 800322c:	d10e      	bne.n	800324c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	f003 0301 	and.w	r3, r3, #1
 8003238:	2b01      	cmp	r3, #1
 800323a:	d107      	bne.n	800324c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f06f 0201 	mvn.w	r2, #1
 8003244:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f002 fea0 	bl	8005f8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	691b      	ldr	r3, [r3, #16]
 8003252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003256:	2b80      	cmp	r3, #128	; 0x80
 8003258:	d10e      	bne.n	8003278 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003264:	2b80      	cmp	r3, #128	; 0x80
 8003266:	d107      	bne.n	8003278 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003270:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f000 f914 	bl	80034a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	691b      	ldr	r3, [r3, #16]
 800327e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003282:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003286:	d10e      	bne.n	80032a6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003292:	2b80      	cmp	r3, #128	; 0x80
 8003294:	d107      	bne.n	80032a6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800329e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	f000 f907 	bl	80034b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	691b      	ldr	r3, [r3, #16]
 80032ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032b0:	2b40      	cmp	r3, #64	; 0x40
 80032b2:	d10e      	bne.n	80032d2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032be:	2b40      	cmp	r3, #64	; 0x40
 80032c0:	d107      	bne.n	80032d2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80032ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f000 f838 	bl	8003342 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	691b      	ldr	r3, [r3, #16]
 80032d8:	f003 0320 	and.w	r3, r3, #32
 80032dc:	2b20      	cmp	r3, #32
 80032de:	d10e      	bne.n	80032fe <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	68db      	ldr	r3, [r3, #12]
 80032e6:	f003 0320 	and.w	r3, r3, #32
 80032ea:	2b20      	cmp	r3, #32
 80032ec:	d107      	bne.n	80032fe <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f06f 0220 	mvn.w	r2, #32
 80032f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f000 f8c7 	bl	800348c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80032fe:	bf00      	nop
 8003300:	3708      	adds	r7, #8
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}

08003306 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003306:	b480      	push	{r7}
 8003308:	b083      	sub	sp, #12
 800330a:	af00      	add	r7, sp, #0
 800330c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800330e:	bf00      	nop
 8003310:	370c      	adds	r7, #12
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr

0800331a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800331a:	b480      	push	{r7}
 800331c:	b083      	sub	sp, #12
 800331e:	af00      	add	r7, sp, #0
 8003320:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003322:	bf00      	nop
 8003324:	370c      	adds	r7, #12
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr

0800332e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800332e:	b480      	push	{r7}
 8003330:	b083      	sub	sp, #12
 8003332:	af00      	add	r7, sp, #0
 8003334:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003336:	bf00      	nop
 8003338:	370c      	adds	r7, #12
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr

08003342 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003342:	b480      	push	{r7}
 8003344:	b083      	sub	sp, #12
 8003346:	af00      	add	r7, sp, #0
 8003348:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800334a:	bf00      	nop
 800334c:	370c      	adds	r7, #12
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr
	...

08003358 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003358:	b480      	push	{r7}
 800335a:	b085      	sub	sp, #20
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	4a40      	ldr	r2, [pc, #256]	; (800346c <TIM_Base_SetConfig+0x114>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d013      	beq.n	8003398 <TIM_Base_SetConfig+0x40>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003376:	d00f      	beq.n	8003398 <TIM_Base_SetConfig+0x40>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	4a3d      	ldr	r2, [pc, #244]	; (8003470 <TIM_Base_SetConfig+0x118>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d00b      	beq.n	8003398 <TIM_Base_SetConfig+0x40>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	4a3c      	ldr	r2, [pc, #240]	; (8003474 <TIM_Base_SetConfig+0x11c>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d007      	beq.n	8003398 <TIM_Base_SetConfig+0x40>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	4a3b      	ldr	r2, [pc, #236]	; (8003478 <TIM_Base_SetConfig+0x120>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d003      	beq.n	8003398 <TIM_Base_SetConfig+0x40>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	4a3a      	ldr	r2, [pc, #232]	; (800347c <TIM_Base_SetConfig+0x124>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d108      	bne.n	80033aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800339e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	68fa      	ldr	r2, [r7, #12]
 80033a6:	4313      	orrs	r3, r2
 80033a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a2f      	ldr	r2, [pc, #188]	; (800346c <TIM_Base_SetConfig+0x114>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d01f      	beq.n	80033f2 <TIM_Base_SetConfig+0x9a>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033b8:	d01b      	beq.n	80033f2 <TIM_Base_SetConfig+0x9a>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4a2c      	ldr	r2, [pc, #176]	; (8003470 <TIM_Base_SetConfig+0x118>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d017      	beq.n	80033f2 <TIM_Base_SetConfig+0x9a>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4a2b      	ldr	r2, [pc, #172]	; (8003474 <TIM_Base_SetConfig+0x11c>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d013      	beq.n	80033f2 <TIM_Base_SetConfig+0x9a>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a2a      	ldr	r2, [pc, #168]	; (8003478 <TIM_Base_SetConfig+0x120>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d00f      	beq.n	80033f2 <TIM_Base_SetConfig+0x9a>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a29      	ldr	r2, [pc, #164]	; (800347c <TIM_Base_SetConfig+0x124>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d00b      	beq.n	80033f2 <TIM_Base_SetConfig+0x9a>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a28      	ldr	r2, [pc, #160]	; (8003480 <TIM_Base_SetConfig+0x128>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d007      	beq.n	80033f2 <TIM_Base_SetConfig+0x9a>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4a27      	ldr	r2, [pc, #156]	; (8003484 <TIM_Base_SetConfig+0x12c>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d003      	beq.n	80033f2 <TIM_Base_SetConfig+0x9a>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4a26      	ldr	r2, [pc, #152]	; (8003488 <TIM_Base_SetConfig+0x130>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d108      	bne.n	8003404 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	68fa      	ldr	r2, [r7, #12]
 8003400:	4313      	orrs	r3, r2
 8003402:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	695b      	ldr	r3, [r3, #20]
 800340e:	4313      	orrs	r3, r2
 8003410:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	68fa      	ldr	r2, [r7, #12]
 8003416:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	689a      	ldr	r2, [r3, #8]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	4a10      	ldr	r2, [pc, #64]	; (800346c <TIM_Base_SetConfig+0x114>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d00f      	beq.n	8003450 <TIM_Base_SetConfig+0xf8>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	4a12      	ldr	r2, [pc, #72]	; (800347c <TIM_Base_SetConfig+0x124>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d00b      	beq.n	8003450 <TIM_Base_SetConfig+0xf8>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	4a11      	ldr	r2, [pc, #68]	; (8003480 <TIM_Base_SetConfig+0x128>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d007      	beq.n	8003450 <TIM_Base_SetConfig+0xf8>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	4a10      	ldr	r2, [pc, #64]	; (8003484 <TIM_Base_SetConfig+0x12c>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d003      	beq.n	8003450 <TIM_Base_SetConfig+0xf8>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	4a0f      	ldr	r2, [pc, #60]	; (8003488 <TIM_Base_SetConfig+0x130>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d103      	bne.n	8003458 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	691a      	ldr	r2, [r3, #16]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2201      	movs	r2, #1
 800345c:	615a      	str	r2, [r3, #20]
}
 800345e:	bf00      	nop
 8003460:	3714      	adds	r7, #20
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr
 800346a:	bf00      	nop
 800346c:	40012c00 	.word	0x40012c00
 8003470:	40000400 	.word	0x40000400
 8003474:	40000800 	.word	0x40000800
 8003478:	40000c00 	.word	0x40000c00
 800347c:	40013400 	.word	0x40013400
 8003480:	40014000 	.word	0x40014000
 8003484:	40014400 	.word	0x40014400
 8003488:	40014800 	.word	0x40014800

0800348c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003494:	bf00      	nop
 8003496:	370c      	adds	r7, #12
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr

080034a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80034a8:	bf00      	nop
 80034aa:	370c      	adds	r7, #12
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr

080034b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80034bc:	bf00      	nop
 80034be:	370c      	adds	r7, #12
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr

080034c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b082      	sub	sp, #8
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d101      	bne.n	80034da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e040      	b.n	800355c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d106      	bne.n	80034f0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f003 f86a 	bl	80065c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2224      	movs	r2, #36	; 0x24
 80034f4:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f022 0201 	bic.w	r2, r2, #1
 8003504:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f000 f8c0 	bl	800368c <UART_SetConfig>
 800350c:	4603      	mov	r3, r0
 800350e:	2b01      	cmp	r3, #1
 8003510:	d101      	bne.n	8003516 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e022      	b.n	800355c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351a:	2b00      	cmp	r3, #0
 800351c:	d002      	beq.n	8003524 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f000 fb3e 	bl	8003ba0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	685a      	ldr	r2, [r3, #4]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003532:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	689a      	ldr	r2, [r3, #8]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003542:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f042 0201 	orr.w	r2, r2, #1
 8003552:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f000 fbc5 	bl	8003ce4 <UART_CheckIdleState>
 800355a:	4603      	mov	r3, r0
}
 800355c:	4618      	mov	r0, r3
 800355e:	3708      	adds	r7, #8
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}

08003564 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b08a      	sub	sp, #40	; 0x28
 8003568:	af02      	add	r7, sp, #8
 800356a:	60f8      	str	r0, [r7, #12]
 800356c:	60b9      	str	r1, [r7, #8]
 800356e:	603b      	str	r3, [r7, #0]
 8003570:	4613      	mov	r3, r2
 8003572:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003578:	2b20      	cmp	r3, #32
 800357a:	f040 8081 	bne.w	8003680 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d002      	beq.n	800358a <HAL_UART_Transmit+0x26>
 8003584:	88fb      	ldrh	r3, [r7, #6]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d101      	bne.n	800358e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e079      	b.n	8003682 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003594:	2b01      	cmp	r3, #1
 8003596:	d101      	bne.n	800359c <HAL_UART_Transmit+0x38>
 8003598:	2302      	movs	r3, #2
 800359a:	e072      	b.n	8003682 <HAL_UART_Transmit+0x11e>
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2200      	movs	r2, #0
 80035a8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2221      	movs	r2, #33	; 0x21
 80035ae:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80035b0:	f7fd f80a 	bl	80005c8 <HAL_GetTick>
 80035b4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	88fa      	ldrh	r2, [r7, #6]
 80035ba:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	88fa      	ldrh	r2, [r7, #6]
 80035c2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035ce:	d108      	bne.n	80035e2 <HAL_UART_Transmit+0x7e>
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	691b      	ldr	r3, [r3, #16]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d104      	bne.n	80035e2 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 80035d8:	2300      	movs	r3, #0
 80035da:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	61bb      	str	r3, [r7, #24]
 80035e0:	e003      	b.n	80035ea <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035e6:	2300      	movs	r3, #0
 80035e8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2200      	movs	r2, #0
 80035ee:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 80035f2:	e02d      	b.n	8003650 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	9300      	str	r3, [sp, #0]
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	2200      	movs	r2, #0
 80035fc:	2180      	movs	r1, #128	; 0x80
 80035fe:	68f8      	ldr	r0, [r7, #12]
 8003600:	f000 fbb5 	bl	8003d6e <UART_WaitOnFlagUntilTimeout>
 8003604:	4603      	mov	r3, r0
 8003606:	2b00      	cmp	r3, #0
 8003608:	d001      	beq.n	800360e <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e039      	b.n	8003682 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800360e:	69fb      	ldr	r3, [r7, #28]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d10b      	bne.n	800362c <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003614:	69bb      	ldr	r3, [r7, #24]
 8003616:	881a      	ldrh	r2, [r3, #0]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003620:	b292      	uxth	r2, r2
 8003622:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003624:	69bb      	ldr	r3, [r7, #24]
 8003626:	3302      	adds	r3, #2
 8003628:	61bb      	str	r3, [r7, #24]
 800362a:	e008      	b.n	800363e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	781a      	ldrb	r2, [r3, #0]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	b292      	uxth	r2, r2
 8003636:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	3301      	adds	r3, #1
 800363c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003644:	b29b      	uxth	r3, r3
 8003646:	3b01      	subs	r3, #1
 8003648:	b29a      	uxth	r2, r3
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003656:	b29b      	uxth	r3, r3
 8003658:	2b00      	cmp	r3, #0
 800365a:	d1cb      	bne.n	80035f4 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	9300      	str	r3, [sp, #0]
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	2200      	movs	r2, #0
 8003664:	2140      	movs	r1, #64	; 0x40
 8003666:	68f8      	ldr	r0, [r7, #12]
 8003668:	f000 fb81 	bl	8003d6e <UART_WaitOnFlagUntilTimeout>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d001      	beq.n	8003676 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e005      	b.n	8003682 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2220      	movs	r2, #32
 800367a:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 800367c:	2300      	movs	r3, #0
 800367e:	e000      	b.n	8003682 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003680:	2302      	movs	r3, #2
  }
}
 8003682:	4618      	mov	r0, r3
 8003684:	3720      	adds	r7, #32
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
	...

0800368c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800368c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003690:	b088      	sub	sp, #32
 8003692:	af00      	add	r7, sp, #0
 8003694:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003696:	2300      	movs	r3, #0
 8003698:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	689a      	ldr	r2, [r3, #8]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	691b      	ldr	r3, [r3, #16]
 80036a2:	431a      	orrs	r2, r3
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	695b      	ldr	r3, [r3, #20]
 80036a8:	431a      	orrs	r2, r3
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	69db      	ldr	r3, [r3, #28]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	4bac      	ldr	r3, [pc, #688]	; (800396c <UART_SetConfig+0x2e0>)
 80036ba:	4013      	ands	r3, r2
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	6812      	ldr	r2, [r2, #0]
 80036c0:	69f9      	ldr	r1, [r7, #28]
 80036c2:	430b      	orrs	r3, r1
 80036c4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	68da      	ldr	r2, [r3, #12]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	430a      	orrs	r2, r1
 80036da:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	699b      	ldr	r3, [r3, #24]
 80036e0:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4aa2      	ldr	r2, [pc, #648]	; (8003970 <UART_SetConfig+0x2e4>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d004      	beq.n	80036f6 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6a1b      	ldr	r3, [r3, #32]
 80036f0:	69fa      	ldr	r2, [r7, #28]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	69fa      	ldr	r2, [r7, #28]
 8003706:	430a      	orrs	r2, r1
 8003708:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a99      	ldr	r2, [pc, #612]	; (8003974 <UART_SetConfig+0x2e8>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d121      	bne.n	8003758 <UART_SetConfig+0xcc>
 8003714:	4b98      	ldr	r3, [pc, #608]	; (8003978 <UART_SetConfig+0x2ec>)
 8003716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800371a:	f003 0303 	and.w	r3, r3, #3
 800371e:	2b03      	cmp	r3, #3
 8003720:	d816      	bhi.n	8003750 <UART_SetConfig+0xc4>
 8003722:	a201      	add	r2, pc, #4	; (adr r2, 8003728 <UART_SetConfig+0x9c>)
 8003724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003728:	08003739 	.word	0x08003739
 800372c:	08003745 	.word	0x08003745
 8003730:	0800373f 	.word	0x0800373f
 8003734:	0800374b 	.word	0x0800374b
 8003738:	2301      	movs	r3, #1
 800373a:	76fb      	strb	r3, [r7, #27]
 800373c:	e0e8      	b.n	8003910 <UART_SetConfig+0x284>
 800373e:	2302      	movs	r3, #2
 8003740:	76fb      	strb	r3, [r7, #27]
 8003742:	e0e5      	b.n	8003910 <UART_SetConfig+0x284>
 8003744:	2304      	movs	r3, #4
 8003746:	76fb      	strb	r3, [r7, #27]
 8003748:	e0e2      	b.n	8003910 <UART_SetConfig+0x284>
 800374a:	2308      	movs	r3, #8
 800374c:	76fb      	strb	r3, [r7, #27]
 800374e:	e0df      	b.n	8003910 <UART_SetConfig+0x284>
 8003750:	2310      	movs	r3, #16
 8003752:	76fb      	strb	r3, [r7, #27]
 8003754:	bf00      	nop
 8003756:	e0db      	b.n	8003910 <UART_SetConfig+0x284>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a87      	ldr	r2, [pc, #540]	; (800397c <UART_SetConfig+0x2f0>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d134      	bne.n	80037cc <UART_SetConfig+0x140>
 8003762:	4b85      	ldr	r3, [pc, #532]	; (8003978 <UART_SetConfig+0x2ec>)
 8003764:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003768:	f003 030c 	and.w	r3, r3, #12
 800376c:	2b0c      	cmp	r3, #12
 800376e:	d829      	bhi.n	80037c4 <UART_SetConfig+0x138>
 8003770:	a201      	add	r2, pc, #4	; (adr r2, 8003778 <UART_SetConfig+0xec>)
 8003772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003776:	bf00      	nop
 8003778:	080037ad 	.word	0x080037ad
 800377c:	080037c5 	.word	0x080037c5
 8003780:	080037c5 	.word	0x080037c5
 8003784:	080037c5 	.word	0x080037c5
 8003788:	080037b9 	.word	0x080037b9
 800378c:	080037c5 	.word	0x080037c5
 8003790:	080037c5 	.word	0x080037c5
 8003794:	080037c5 	.word	0x080037c5
 8003798:	080037b3 	.word	0x080037b3
 800379c:	080037c5 	.word	0x080037c5
 80037a0:	080037c5 	.word	0x080037c5
 80037a4:	080037c5 	.word	0x080037c5
 80037a8:	080037bf 	.word	0x080037bf
 80037ac:	2300      	movs	r3, #0
 80037ae:	76fb      	strb	r3, [r7, #27]
 80037b0:	e0ae      	b.n	8003910 <UART_SetConfig+0x284>
 80037b2:	2302      	movs	r3, #2
 80037b4:	76fb      	strb	r3, [r7, #27]
 80037b6:	e0ab      	b.n	8003910 <UART_SetConfig+0x284>
 80037b8:	2304      	movs	r3, #4
 80037ba:	76fb      	strb	r3, [r7, #27]
 80037bc:	e0a8      	b.n	8003910 <UART_SetConfig+0x284>
 80037be:	2308      	movs	r3, #8
 80037c0:	76fb      	strb	r3, [r7, #27]
 80037c2:	e0a5      	b.n	8003910 <UART_SetConfig+0x284>
 80037c4:	2310      	movs	r3, #16
 80037c6:	76fb      	strb	r3, [r7, #27]
 80037c8:	bf00      	nop
 80037ca:	e0a1      	b.n	8003910 <UART_SetConfig+0x284>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a6b      	ldr	r2, [pc, #428]	; (8003980 <UART_SetConfig+0x2f4>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d120      	bne.n	8003818 <UART_SetConfig+0x18c>
 80037d6:	4b68      	ldr	r3, [pc, #416]	; (8003978 <UART_SetConfig+0x2ec>)
 80037d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037dc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80037e0:	2b10      	cmp	r3, #16
 80037e2:	d00f      	beq.n	8003804 <UART_SetConfig+0x178>
 80037e4:	2b10      	cmp	r3, #16
 80037e6:	d802      	bhi.n	80037ee <UART_SetConfig+0x162>
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d005      	beq.n	80037f8 <UART_SetConfig+0x16c>
 80037ec:	e010      	b.n	8003810 <UART_SetConfig+0x184>
 80037ee:	2b20      	cmp	r3, #32
 80037f0:	d005      	beq.n	80037fe <UART_SetConfig+0x172>
 80037f2:	2b30      	cmp	r3, #48	; 0x30
 80037f4:	d009      	beq.n	800380a <UART_SetConfig+0x17e>
 80037f6:	e00b      	b.n	8003810 <UART_SetConfig+0x184>
 80037f8:	2300      	movs	r3, #0
 80037fa:	76fb      	strb	r3, [r7, #27]
 80037fc:	e088      	b.n	8003910 <UART_SetConfig+0x284>
 80037fe:	2302      	movs	r3, #2
 8003800:	76fb      	strb	r3, [r7, #27]
 8003802:	e085      	b.n	8003910 <UART_SetConfig+0x284>
 8003804:	2304      	movs	r3, #4
 8003806:	76fb      	strb	r3, [r7, #27]
 8003808:	e082      	b.n	8003910 <UART_SetConfig+0x284>
 800380a:	2308      	movs	r3, #8
 800380c:	76fb      	strb	r3, [r7, #27]
 800380e:	e07f      	b.n	8003910 <UART_SetConfig+0x284>
 8003810:	2310      	movs	r3, #16
 8003812:	76fb      	strb	r3, [r7, #27]
 8003814:	bf00      	nop
 8003816:	e07b      	b.n	8003910 <UART_SetConfig+0x284>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a59      	ldr	r2, [pc, #356]	; (8003984 <UART_SetConfig+0x2f8>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d120      	bne.n	8003864 <UART_SetConfig+0x1d8>
 8003822:	4b55      	ldr	r3, [pc, #340]	; (8003978 <UART_SetConfig+0x2ec>)
 8003824:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003828:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800382c:	2b40      	cmp	r3, #64	; 0x40
 800382e:	d00f      	beq.n	8003850 <UART_SetConfig+0x1c4>
 8003830:	2b40      	cmp	r3, #64	; 0x40
 8003832:	d802      	bhi.n	800383a <UART_SetConfig+0x1ae>
 8003834:	2b00      	cmp	r3, #0
 8003836:	d005      	beq.n	8003844 <UART_SetConfig+0x1b8>
 8003838:	e010      	b.n	800385c <UART_SetConfig+0x1d0>
 800383a:	2b80      	cmp	r3, #128	; 0x80
 800383c:	d005      	beq.n	800384a <UART_SetConfig+0x1be>
 800383e:	2bc0      	cmp	r3, #192	; 0xc0
 8003840:	d009      	beq.n	8003856 <UART_SetConfig+0x1ca>
 8003842:	e00b      	b.n	800385c <UART_SetConfig+0x1d0>
 8003844:	2300      	movs	r3, #0
 8003846:	76fb      	strb	r3, [r7, #27]
 8003848:	e062      	b.n	8003910 <UART_SetConfig+0x284>
 800384a:	2302      	movs	r3, #2
 800384c:	76fb      	strb	r3, [r7, #27]
 800384e:	e05f      	b.n	8003910 <UART_SetConfig+0x284>
 8003850:	2304      	movs	r3, #4
 8003852:	76fb      	strb	r3, [r7, #27]
 8003854:	e05c      	b.n	8003910 <UART_SetConfig+0x284>
 8003856:	2308      	movs	r3, #8
 8003858:	76fb      	strb	r3, [r7, #27]
 800385a:	e059      	b.n	8003910 <UART_SetConfig+0x284>
 800385c:	2310      	movs	r3, #16
 800385e:	76fb      	strb	r3, [r7, #27]
 8003860:	bf00      	nop
 8003862:	e055      	b.n	8003910 <UART_SetConfig+0x284>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a47      	ldr	r2, [pc, #284]	; (8003988 <UART_SetConfig+0x2fc>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d124      	bne.n	80038b8 <UART_SetConfig+0x22c>
 800386e:	4b42      	ldr	r3, [pc, #264]	; (8003978 <UART_SetConfig+0x2ec>)
 8003870:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003874:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003878:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800387c:	d012      	beq.n	80038a4 <UART_SetConfig+0x218>
 800387e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003882:	d802      	bhi.n	800388a <UART_SetConfig+0x1fe>
 8003884:	2b00      	cmp	r3, #0
 8003886:	d007      	beq.n	8003898 <UART_SetConfig+0x20c>
 8003888:	e012      	b.n	80038b0 <UART_SetConfig+0x224>
 800388a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800388e:	d006      	beq.n	800389e <UART_SetConfig+0x212>
 8003890:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003894:	d009      	beq.n	80038aa <UART_SetConfig+0x21e>
 8003896:	e00b      	b.n	80038b0 <UART_SetConfig+0x224>
 8003898:	2300      	movs	r3, #0
 800389a:	76fb      	strb	r3, [r7, #27]
 800389c:	e038      	b.n	8003910 <UART_SetConfig+0x284>
 800389e:	2302      	movs	r3, #2
 80038a0:	76fb      	strb	r3, [r7, #27]
 80038a2:	e035      	b.n	8003910 <UART_SetConfig+0x284>
 80038a4:	2304      	movs	r3, #4
 80038a6:	76fb      	strb	r3, [r7, #27]
 80038a8:	e032      	b.n	8003910 <UART_SetConfig+0x284>
 80038aa:	2308      	movs	r3, #8
 80038ac:	76fb      	strb	r3, [r7, #27]
 80038ae:	e02f      	b.n	8003910 <UART_SetConfig+0x284>
 80038b0:	2310      	movs	r3, #16
 80038b2:	76fb      	strb	r3, [r7, #27]
 80038b4:	bf00      	nop
 80038b6:	e02b      	b.n	8003910 <UART_SetConfig+0x284>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a2c      	ldr	r2, [pc, #176]	; (8003970 <UART_SetConfig+0x2e4>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d124      	bne.n	800390c <UART_SetConfig+0x280>
 80038c2:	4b2d      	ldr	r3, [pc, #180]	; (8003978 <UART_SetConfig+0x2ec>)
 80038c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038c8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80038cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038d0:	d012      	beq.n	80038f8 <UART_SetConfig+0x26c>
 80038d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038d6:	d802      	bhi.n	80038de <UART_SetConfig+0x252>
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d007      	beq.n	80038ec <UART_SetConfig+0x260>
 80038dc:	e012      	b.n	8003904 <UART_SetConfig+0x278>
 80038de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038e2:	d006      	beq.n	80038f2 <UART_SetConfig+0x266>
 80038e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80038e8:	d009      	beq.n	80038fe <UART_SetConfig+0x272>
 80038ea:	e00b      	b.n	8003904 <UART_SetConfig+0x278>
 80038ec:	2300      	movs	r3, #0
 80038ee:	76fb      	strb	r3, [r7, #27]
 80038f0:	e00e      	b.n	8003910 <UART_SetConfig+0x284>
 80038f2:	2302      	movs	r3, #2
 80038f4:	76fb      	strb	r3, [r7, #27]
 80038f6:	e00b      	b.n	8003910 <UART_SetConfig+0x284>
 80038f8:	2304      	movs	r3, #4
 80038fa:	76fb      	strb	r3, [r7, #27]
 80038fc:	e008      	b.n	8003910 <UART_SetConfig+0x284>
 80038fe:	2308      	movs	r3, #8
 8003900:	76fb      	strb	r3, [r7, #27]
 8003902:	e005      	b.n	8003910 <UART_SetConfig+0x284>
 8003904:	2310      	movs	r3, #16
 8003906:	76fb      	strb	r3, [r7, #27]
 8003908:	bf00      	nop
 800390a:	e001      	b.n	8003910 <UART_SetConfig+0x284>
 800390c:	2310      	movs	r3, #16
 800390e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a16      	ldr	r2, [pc, #88]	; (8003970 <UART_SetConfig+0x2e4>)
 8003916:	4293      	cmp	r3, r2
 8003918:	f040 8087 	bne.w	8003a2a <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800391c:	7efb      	ldrb	r3, [r7, #27]
 800391e:	2b08      	cmp	r3, #8
 8003920:	d836      	bhi.n	8003990 <UART_SetConfig+0x304>
 8003922:	a201      	add	r2, pc, #4	; (adr r2, 8003928 <UART_SetConfig+0x29c>)
 8003924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003928:	0800394d 	.word	0x0800394d
 800392c:	08003991 	.word	0x08003991
 8003930:	08003955 	.word	0x08003955
 8003934:	08003991 	.word	0x08003991
 8003938:	0800395b 	.word	0x0800395b
 800393c:	08003991 	.word	0x08003991
 8003940:	08003991 	.word	0x08003991
 8003944:	08003991 	.word	0x08003991
 8003948:	08003963 	.word	0x08003963
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800394c:	f7fe fd7c 	bl	8002448 <HAL_RCC_GetPCLK1Freq>
 8003950:	6178      	str	r0, [r7, #20]
        break;
 8003952:	e022      	b.n	800399a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003954:	4b0d      	ldr	r3, [pc, #52]	; (800398c <UART_SetConfig+0x300>)
 8003956:	617b      	str	r3, [r7, #20]
        break;
 8003958:	e01f      	b.n	800399a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800395a:	f7fe fcdf 	bl	800231c <HAL_RCC_GetSysClockFreq>
 800395e:	6178      	str	r0, [r7, #20]
        break;
 8003960:	e01b      	b.n	800399a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003962:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003966:	617b      	str	r3, [r7, #20]
        break;
 8003968:	e017      	b.n	800399a <UART_SetConfig+0x30e>
 800396a:	bf00      	nop
 800396c:	efff69f3 	.word	0xefff69f3
 8003970:	40008000 	.word	0x40008000
 8003974:	40013800 	.word	0x40013800
 8003978:	40021000 	.word	0x40021000
 800397c:	40004400 	.word	0x40004400
 8003980:	40004800 	.word	0x40004800
 8003984:	40004c00 	.word	0x40004c00
 8003988:	40005000 	.word	0x40005000
 800398c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003990:	2300      	movs	r3, #0
 8003992:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	76bb      	strb	r3, [r7, #26]
        break;
 8003998:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	2b00      	cmp	r3, #0
 800399e:	f000 80f1 	beq.w	8003b84 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	685a      	ldr	r2, [r3, #4]
 80039a6:	4613      	mov	r3, r2
 80039a8:	005b      	lsls	r3, r3, #1
 80039aa:	4413      	add	r3, r2
 80039ac:	697a      	ldr	r2, [r7, #20]
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d305      	bcc.n	80039be <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80039b8:	697a      	ldr	r2, [r7, #20]
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d902      	bls.n	80039c4 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	76bb      	strb	r3, [r7, #26]
 80039c2:	e0df      	b.n	8003b84 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	4619      	mov	r1, r3
 80039c8:	f04f 0200 	mov.w	r2, #0
 80039cc:	f04f 0300 	mov.w	r3, #0
 80039d0:	f04f 0400 	mov.w	r4, #0
 80039d4:	0214      	lsls	r4, r2, #8
 80039d6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80039da:	020b      	lsls	r3, r1, #8
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	6852      	ldr	r2, [r2, #4]
 80039e0:	0852      	lsrs	r2, r2, #1
 80039e2:	4611      	mov	r1, r2
 80039e4:	f04f 0200 	mov.w	r2, #0
 80039e8:	eb13 0b01 	adds.w	fp, r3, r1
 80039ec:	eb44 0c02 	adc.w	ip, r4, r2
 80039f0:	4658      	mov	r0, fp
 80039f2:	4661      	mov	r1, ip
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	f04f 0400 	mov.w	r4, #0
 80039fc:	461a      	mov	r2, r3
 80039fe:	4623      	mov	r3, r4
 8003a00:	f7fc fc36 	bl	8000270 <__aeabi_uldivmod>
 8003a04:	4603      	mov	r3, r0
 8003a06:	460c      	mov	r4, r1
 8003a08:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a10:	d308      	bcc.n	8003a24 <UART_SetConfig+0x398>
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a18:	d204      	bcs.n	8003a24 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	693a      	ldr	r2, [r7, #16]
 8003a20:	60da      	str	r2, [r3, #12]
 8003a22:	e0af      	b.n	8003b84 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	76bb      	strb	r3, [r7, #26]
 8003a28:	e0ac      	b.n	8003b84 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	69db      	ldr	r3, [r3, #28]
 8003a2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a32:	d15b      	bne.n	8003aec <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8003a34:	7efb      	ldrb	r3, [r7, #27]
 8003a36:	2b08      	cmp	r3, #8
 8003a38:	d827      	bhi.n	8003a8a <UART_SetConfig+0x3fe>
 8003a3a:	a201      	add	r2, pc, #4	; (adr r2, 8003a40 <UART_SetConfig+0x3b4>)
 8003a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a40:	08003a65 	.word	0x08003a65
 8003a44:	08003a6d 	.word	0x08003a6d
 8003a48:	08003a75 	.word	0x08003a75
 8003a4c:	08003a8b 	.word	0x08003a8b
 8003a50:	08003a7b 	.word	0x08003a7b
 8003a54:	08003a8b 	.word	0x08003a8b
 8003a58:	08003a8b 	.word	0x08003a8b
 8003a5c:	08003a8b 	.word	0x08003a8b
 8003a60:	08003a83 	.word	0x08003a83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a64:	f7fe fcf0 	bl	8002448 <HAL_RCC_GetPCLK1Freq>
 8003a68:	6178      	str	r0, [r7, #20]
        break;
 8003a6a:	e013      	b.n	8003a94 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a6c:	f7fe fd02 	bl	8002474 <HAL_RCC_GetPCLK2Freq>
 8003a70:	6178      	str	r0, [r7, #20]
        break;
 8003a72:	e00f      	b.n	8003a94 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a74:	4b49      	ldr	r3, [pc, #292]	; (8003b9c <UART_SetConfig+0x510>)
 8003a76:	617b      	str	r3, [r7, #20]
        break;
 8003a78:	e00c      	b.n	8003a94 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a7a:	f7fe fc4f 	bl	800231c <HAL_RCC_GetSysClockFreq>
 8003a7e:	6178      	str	r0, [r7, #20]
        break;
 8003a80:	e008      	b.n	8003a94 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a86:	617b      	str	r3, [r7, #20]
        break;
 8003a88:	e004      	b.n	8003a94 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	76bb      	strb	r3, [r7, #26]
        break;
 8003a92:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d074      	beq.n	8003b84 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	005a      	lsls	r2, r3, #1
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	085b      	lsrs	r3, r3, #1
 8003aa4:	441a      	add	r2, r3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	2b0f      	cmp	r3, #15
 8003ab6:	d916      	bls.n	8003ae6 <UART_SetConfig+0x45a>
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003abe:	d212      	bcs.n	8003ae6 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	f023 030f 	bic.w	r3, r3, #15
 8003ac8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	085b      	lsrs	r3, r3, #1
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	f003 0307 	and.w	r3, r3, #7
 8003ad4:	b29a      	uxth	r2, r3
 8003ad6:	89fb      	ldrh	r3, [r7, #14]
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	89fa      	ldrh	r2, [r7, #14]
 8003ae2:	60da      	str	r2, [r3, #12]
 8003ae4:	e04e      	b.n	8003b84 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	76bb      	strb	r3, [r7, #26]
 8003aea:	e04b      	b.n	8003b84 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003aec:	7efb      	ldrb	r3, [r7, #27]
 8003aee:	2b08      	cmp	r3, #8
 8003af0:	d827      	bhi.n	8003b42 <UART_SetConfig+0x4b6>
 8003af2:	a201      	add	r2, pc, #4	; (adr r2, 8003af8 <UART_SetConfig+0x46c>)
 8003af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003af8:	08003b1d 	.word	0x08003b1d
 8003afc:	08003b25 	.word	0x08003b25
 8003b00:	08003b2d 	.word	0x08003b2d
 8003b04:	08003b43 	.word	0x08003b43
 8003b08:	08003b33 	.word	0x08003b33
 8003b0c:	08003b43 	.word	0x08003b43
 8003b10:	08003b43 	.word	0x08003b43
 8003b14:	08003b43 	.word	0x08003b43
 8003b18:	08003b3b 	.word	0x08003b3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b1c:	f7fe fc94 	bl	8002448 <HAL_RCC_GetPCLK1Freq>
 8003b20:	6178      	str	r0, [r7, #20]
        break;
 8003b22:	e013      	b.n	8003b4c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b24:	f7fe fca6 	bl	8002474 <HAL_RCC_GetPCLK2Freq>
 8003b28:	6178      	str	r0, [r7, #20]
        break;
 8003b2a:	e00f      	b.n	8003b4c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b2c:	4b1b      	ldr	r3, [pc, #108]	; (8003b9c <UART_SetConfig+0x510>)
 8003b2e:	617b      	str	r3, [r7, #20]
        break;
 8003b30:	e00c      	b.n	8003b4c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b32:	f7fe fbf3 	bl	800231c <HAL_RCC_GetSysClockFreq>
 8003b36:	6178      	str	r0, [r7, #20]
        break;
 8003b38:	e008      	b.n	8003b4c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b3e:	617b      	str	r3, [r7, #20]
        break;
 8003b40:	e004      	b.n	8003b4c <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8003b42:	2300      	movs	r3, #0
 8003b44:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	76bb      	strb	r3, [r7, #26]
        break;
 8003b4a:	bf00      	nop
    }

    if (pclk != 0U)
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d018      	beq.n	8003b84 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	085a      	lsrs	r2, r3, #1
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	441a      	add	r2, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	2b0f      	cmp	r3, #15
 8003b6c:	d908      	bls.n	8003b80 <UART_SetConfig+0x4f4>
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b74:	d204      	bcs.n	8003b80 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	693a      	ldr	r2, [r7, #16]
 8003b7c:	60da      	str	r2, [r3, #12]
 8003b7e:	e001      	b.n	8003b84 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003b90:	7ebb      	ldrb	r3, [r7, #26]
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3720      	adds	r7, #32
 8003b96:	46bd      	mov	sp, r7
 8003b98:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8003b9c:	00f42400 	.word	0x00f42400

08003ba0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b083      	sub	sp, #12
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bac:	f003 0301 	and.w	r3, r3, #1
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d00a      	beq.n	8003bca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	430a      	orrs	r2, r1
 8003bc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bce:	f003 0302 	and.w	r3, r3, #2
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d00a      	beq.n	8003bec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	430a      	orrs	r2, r1
 8003bea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf0:	f003 0304 	and.w	r3, r3, #4
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d00a      	beq.n	8003c0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	430a      	orrs	r2, r1
 8003c0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c12:	f003 0308 	and.w	r3, r3, #8
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d00a      	beq.n	8003c30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	430a      	orrs	r2, r1
 8003c2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c34:	f003 0310 	and.w	r3, r3, #16
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d00a      	beq.n	8003c52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	430a      	orrs	r2, r1
 8003c50:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c56:	f003 0320 	and.w	r3, r3, #32
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d00a      	beq.n	8003c74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	430a      	orrs	r2, r1
 8003c72:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d01a      	beq.n	8003cb6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	430a      	orrs	r2, r1
 8003c94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c9e:	d10a      	bne.n	8003cb6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	430a      	orrs	r2, r1
 8003cb4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d00a      	beq.n	8003cd8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	430a      	orrs	r2, r1
 8003cd6:	605a      	str	r2, [r3, #4]
  }
}
 8003cd8:	bf00      	nop
 8003cda:	370c      	adds	r7, #12
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr

08003ce4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b086      	sub	sp, #24
 8003ce8:	af02      	add	r7, sp, #8
 8003cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003cf2:	f7fc fc69 	bl	80005c8 <HAL_GetTick>
 8003cf6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0308 	and.w	r3, r3, #8
 8003d02:	2b08      	cmp	r3, #8
 8003d04:	d10e      	bne.n	8003d24 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d06:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003d0a:	9300      	str	r3, [sp, #0]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f000 f82a 	bl	8003d6e <UART_WaitOnFlagUntilTimeout>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d001      	beq.n	8003d24 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d20:	2303      	movs	r3, #3
 8003d22:	e020      	b.n	8003d66 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 0304 	and.w	r3, r3, #4
 8003d2e:	2b04      	cmp	r3, #4
 8003d30:	d10e      	bne.n	8003d50 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d32:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003d36:	9300      	str	r3, [sp, #0]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f000 f814 	bl	8003d6e <UART_WaitOnFlagUntilTimeout>
 8003d46:	4603      	mov	r3, r0
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d001      	beq.n	8003d50 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	e00a      	b.n	8003d66 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2220      	movs	r2, #32
 8003d54:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2220      	movs	r2, #32
 8003d5a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003d64:	2300      	movs	r3, #0
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3710      	adds	r7, #16
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}

08003d6e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d6e:	b580      	push	{r7, lr}
 8003d70:	b084      	sub	sp, #16
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	60f8      	str	r0, [r7, #12]
 8003d76:	60b9      	str	r1, [r7, #8]
 8003d78:	603b      	str	r3, [r7, #0]
 8003d7a:	4613      	mov	r3, r2
 8003d7c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d7e:	e05d      	b.n	8003e3c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d80:	69bb      	ldr	r3, [r7, #24]
 8003d82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d86:	d059      	beq.n	8003e3c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d88:	f7fc fc1e 	bl	80005c8 <HAL_GetTick>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	69ba      	ldr	r2, [r7, #24]
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d302      	bcc.n	8003d9e <UART_WaitOnFlagUntilTimeout+0x30>
 8003d98:	69bb      	ldr	r3, [r7, #24]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d11b      	bne.n	8003dd6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003dac:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	689a      	ldr	r2, [r3, #8]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f022 0201 	bic.w	r2, r2, #1
 8003dbc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2220      	movs	r2, #32
 8003dc2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2220      	movs	r2, #32
 8003dc8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e042      	b.n	8003e5c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0304 	and.w	r3, r3, #4
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d02b      	beq.n	8003e3c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	69db      	ldr	r3, [r3, #28]
 8003dea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003dee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003df2:	d123      	bne.n	8003e3c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003dfc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003e0c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	689a      	ldr	r2, [r3, #8]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f022 0201 	bic.w	r2, r2, #1
 8003e1c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2220      	movs	r2, #32
 8003e22:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2220      	movs	r2, #32
 8003e28:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2220      	movs	r2, #32
 8003e2e:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2200      	movs	r2, #0
 8003e34:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8003e38:	2303      	movs	r3, #3
 8003e3a:	e00f      	b.n	8003e5c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	69da      	ldr	r2, [r3, #28]
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	4013      	ands	r3, r2
 8003e46:	68ba      	ldr	r2, [r7, #8]
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	bf0c      	ite	eq
 8003e4c:	2301      	moveq	r3, #1
 8003e4e:	2300      	movne	r3, #0
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	461a      	mov	r2, r3
 8003e54:	79fb      	ldrb	r3, [r7, #7]
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d092      	beq.n	8003d80 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e5a:	2300      	movs	r3, #0
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3710      	adds	r7, #16
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}

08003e64 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b085      	sub	sp, #20
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003e72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e76:	2b84      	cmp	r3, #132	; 0x84
 8003e78:	d005      	beq.n	8003e86 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003e7a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	4413      	add	r3, r2
 8003e82:	3303      	adds	r3, #3
 8003e84:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003e86:	68fb      	ldr	r3, [r7, #12]
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3714      	adds	r7, #20
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr

08003e94 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003e98:	f000 fada 	bl	8004450 <vTaskStartScheduler>
  
  return osOK;
 8003e9c:	2300      	movs	r3, #0
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	bd80      	pop	{r7, pc}

08003ea2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003ea2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ea4:	b089      	sub	sp, #36	; 0x24
 8003ea6:	af04      	add	r7, sp, #16
 8003ea8:	6078      	str	r0, [r7, #4]
 8003eaa:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	695b      	ldr	r3, [r3, #20]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d020      	beq.n	8003ef6 <osThreadCreate+0x54>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	699b      	ldr	r3, [r3, #24]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d01c      	beq.n	8003ef6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	685c      	ldr	r4, [r3, #4]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681d      	ldr	r5, [r3, #0]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	691e      	ldr	r6, [r3, #16]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f7ff ffc8 	bl	8003e64 <makeFreeRtosPriority>
 8003ed4:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	695b      	ldr	r3, [r3, #20]
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003ede:	9202      	str	r2, [sp, #8]
 8003ee0:	9301      	str	r3, [sp, #4]
 8003ee2:	9100      	str	r1, [sp, #0]
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	4632      	mov	r2, r6
 8003ee8:	4629      	mov	r1, r5
 8003eea:	4620      	mov	r0, r4
 8003eec:	f000 f8ed 	bl	80040ca <xTaskCreateStatic>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	60fb      	str	r3, [r7, #12]
 8003ef4:	e01c      	b.n	8003f30 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	685c      	ldr	r4, [r3, #4]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003f02:	b29e      	uxth	r6, r3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f7ff ffaa 	bl	8003e64 <makeFreeRtosPriority>
 8003f10:	4602      	mov	r2, r0
 8003f12:	f107 030c 	add.w	r3, r7, #12
 8003f16:	9301      	str	r3, [sp, #4]
 8003f18:	9200      	str	r2, [sp, #0]
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	4632      	mov	r2, r6
 8003f1e:	4629      	mov	r1, r5
 8003f20:	4620      	mov	r0, r4
 8003f22:	f000 f92c 	bl	800417e <xTaskCreate>
 8003f26:	4603      	mov	r3, r0
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d001      	beq.n	8003f30 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	e000      	b.n	8003f32 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003f30:	68fb      	ldr	r3, [r7, #12]
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3714      	adds	r7, #20
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003f3a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003f3a:	b580      	push	{r7, lr}
 8003f3c:	b084      	sub	sp, #16
 8003f3e:	af00      	add	r7, sp, #0
 8003f40:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d001      	beq.n	8003f50 <osDelay+0x16>
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	e000      	b.n	8003f52 <osDelay+0x18>
 8003f50:	2301      	movs	r3, #1
 8003f52:	4618      	mov	r0, r3
 8003f54:	f000 fa48 	bl	80043e8 <vTaskDelay>
  
  return osOK;
 8003f58:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3710      	adds	r7, #16
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}

08003f62 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003f62:	b480      	push	{r7}
 8003f64:	b083      	sub	sp, #12
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f103 0208 	add.w	r2, r3, #8
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f04f 32ff 	mov.w	r2, #4294967295
 8003f7a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f103 0208 	add.w	r2, r3, #8
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f103 0208 	add.w	r2, r3, #8
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003f96:	bf00      	nop
 8003f98:	370c      	adds	r7, #12
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr

08003fa2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003fa2:	b480      	push	{r7}
 8003fa4:	b083      	sub	sp, #12
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2200      	movs	r2, #0
 8003fae:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003fb0:	bf00      	nop
 8003fb2:	370c      	adds	r7, #12
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr

08003fbc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b085      	sub	sp, #20
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	68fa      	ldr	r2, [r7, #12]
 8003fd0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	689a      	ldr	r2, [r3, #8]
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	683a      	ldr	r2, [r7, #0]
 8003fe0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	683a      	ldr	r2, [r7, #0]
 8003fe6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	1c5a      	adds	r2, r3, #1
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	601a      	str	r2, [r3, #0]
}
 8003ff8:	bf00      	nop
 8003ffa:	3714      	adds	r7, #20
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr

08004004 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004004:	b480      	push	{r7}
 8004006:	b085      	sub	sp, #20
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	f1b3 3fff 	cmp.w	r3, #4294967295
 800401a:	d103      	bne.n	8004024 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	691b      	ldr	r3, [r3, #16]
 8004020:	60fb      	str	r3, [r7, #12]
 8004022:	e00c      	b.n	800403e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	3308      	adds	r3, #8
 8004028:	60fb      	str	r3, [r7, #12]
 800402a:	e002      	b.n	8004032 <vListInsert+0x2e>
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	60fb      	str	r3, [r7, #12]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	68ba      	ldr	r2, [r7, #8]
 800403a:	429a      	cmp	r2, r3
 800403c:	d2f6      	bcs.n	800402c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	685a      	ldr	r2, [r3, #4]
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	683a      	ldr	r2, [r7, #0]
 800404c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	68fa      	ldr	r2, [r7, #12]
 8004052:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	683a      	ldr	r2, [r7, #0]
 8004058:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	687a      	ldr	r2, [r7, #4]
 800405e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	1c5a      	adds	r2, r3, #1
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	601a      	str	r2, [r3, #0]
}
 800406a:	bf00      	nop
 800406c:	3714      	adds	r7, #20
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr

08004076 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004076:	b480      	push	{r7}
 8004078:	b085      	sub	sp, #20
 800407a:	af00      	add	r7, sp, #0
 800407c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	691b      	ldr	r3, [r3, #16]
 8004082:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	687a      	ldr	r2, [r7, #4]
 800408a:	6892      	ldr	r2, [r2, #8]
 800408c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	6852      	ldr	r2, [r2, #4]
 8004096:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	429a      	cmp	r2, r3
 80040a0:	d103      	bne.n	80040aa <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	689a      	ldr	r2, [r3, #8]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2200      	movs	r2, #0
 80040ae:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	1e5a      	subs	r2, r3, #1
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3714      	adds	r7, #20
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr

080040ca <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80040ca:	b580      	push	{r7, lr}
 80040cc:	b08e      	sub	sp, #56	; 0x38
 80040ce:	af04      	add	r7, sp, #16
 80040d0:	60f8      	str	r0, [r7, #12]
 80040d2:	60b9      	str	r1, [r7, #8]
 80040d4:	607a      	str	r2, [r7, #4]
 80040d6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80040d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d109      	bne.n	80040f2 <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80040de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040e2:	f383 8811 	msr	BASEPRI, r3
 80040e6:	f3bf 8f6f 	isb	sy
 80040ea:	f3bf 8f4f 	dsb	sy
 80040ee:	623b      	str	r3, [r7, #32]
 80040f0:	e7fe      	b.n	80040f0 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80040f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d109      	bne.n	800410c <xTaskCreateStatic+0x42>
 80040f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040fc:	f383 8811 	msr	BASEPRI, r3
 8004100:	f3bf 8f6f 	isb	sy
 8004104:	f3bf 8f4f 	dsb	sy
 8004108:	61fb      	str	r3, [r7, #28]
 800410a:	e7fe      	b.n	800410a <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800410c:	2354      	movs	r3, #84	; 0x54
 800410e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	2b54      	cmp	r3, #84	; 0x54
 8004114:	d009      	beq.n	800412a <xTaskCreateStatic+0x60>
 8004116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800411a:	f383 8811 	msr	BASEPRI, r3
 800411e:	f3bf 8f6f 	isb	sy
 8004122:	f3bf 8f4f 	dsb	sy
 8004126:	61bb      	str	r3, [r7, #24]
 8004128:	e7fe      	b.n	8004128 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800412a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800412c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800412e:	2b00      	cmp	r3, #0
 8004130:	d01e      	beq.n	8004170 <xTaskCreateStatic+0xa6>
 8004132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004134:	2b00      	cmp	r3, #0
 8004136:	d01b      	beq.n	8004170 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800413a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800413c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800413e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004140:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004144:	2202      	movs	r2, #2
 8004146:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800414a:	2300      	movs	r3, #0
 800414c:	9303      	str	r3, [sp, #12]
 800414e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004150:	9302      	str	r3, [sp, #8]
 8004152:	f107 0314 	add.w	r3, r7, #20
 8004156:	9301      	str	r3, [sp, #4]
 8004158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800415a:	9300      	str	r3, [sp, #0]
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	68b9      	ldr	r1, [r7, #8]
 8004162:	68f8      	ldr	r0, [r7, #12]
 8004164:	f000 f850 	bl	8004208 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004168:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800416a:	f000 f8d3 	bl	8004314 <prvAddNewTaskToReadyList>
 800416e:	e001      	b.n	8004174 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8004170:	2300      	movs	r3, #0
 8004172:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004174:	697b      	ldr	r3, [r7, #20]
	}
 8004176:	4618      	mov	r0, r3
 8004178:	3728      	adds	r7, #40	; 0x28
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}

0800417e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800417e:	b580      	push	{r7, lr}
 8004180:	b08c      	sub	sp, #48	; 0x30
 8004182:	af04      	add	r7, sp, #16
 8004184:	60f8      	str	r0, [r7, #12]
 8004186:	60b9      	str	r1, [r7, #8]
 8004188:	603b      	str	r3, [r7, #0]
 800418a:	4613      	mov	r3, r2
 800418c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800418e:	88fb      	ldrh	r3, [r7, #6]
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	4618      	mov	r0, r3
 8004194:	f000 feae 	bl	8004ef4 <pvPortMalloc>
 8004198:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d00e      	beq.n	80041be <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80041a0:	2054      	movs	r0, #84	; 0x54
 80041a2:	f000 fea7 	bl	8004ef4 <pvPortMalloc>
 80041a6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80041a8:	69fb      	ldr	r3, [r7, #28]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d003      	beq.n	80041b6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80041ae:	69fb      	ldr	r3, [r7, #28]
 80041b0:	697a      	ldr	r2, [r7, #20]
 80041b2:	631a      	str	r2, [r3, #48]	; 0x30
 80041b4:	e005      	b.n	80041c2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80041b6:	6978      	ldr	r0, [r7, #20]
 80041b8:	f000 ff5e 	bl	8005078 <vPortFree>
 80041bc:	e001      	b.n	80041c2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80041be:	2300      	movs	r3, #0
 80041c0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80041c2:	69fb      	ldr	r3, [r7, #28]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d017      	beq.n	80041f8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80041c8:	69fb      	ldr	r3, [r7, #28]
 80041ca:	2200      	movs	r2, #0
 80041cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80041d0:	88fa      	ldrh	r2, [r7, #6]
 80041d2:	2300      	movs	r3, #0
 80041d4:	9303      	str	r3, [sp, #12]
 80041d6:	69fb      	ldr	r3, [r7, #28]
 80041d8:	9302      	str	r3, [sp, #8]
 80041da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041dc:	9301      	str	r3, [sp, #4]
 80041de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041e0:	9300      	str	r3, [sp, #0]
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	68b9      	ldr	r1, [r7, #8]
 80041e6:	68f8      	ldr	r0, [r7, #12]
 80041e8:	f000 f80e 	bl	8004208 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80041ec:	69f8      	ldr	r0, [r7, #28]
 80041ee:	f000 f891 	bl	8004314 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80041f2:	2301      	movs	r3, #1
 80041f4:	61bb      	str	r3, [r7, #24]
 80041f6:	e002      	b.n	80041fe <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80041f8:	f04f 33ff 	mov.w	r3, #4294967295
 80041fc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80041fe:	69bb      	ldr	r3, [r7, #24]
	}
 8004200:	4618      	mov	r0, r3
 8004202:	3720      	adds	r7, #32
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}

08004208 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b088      	sub	sp, #32
 800420c:	af00      	add	r7, sp, #0
 800420e:	60f8      	str	r0, [r7, #12]
 8004210:	60b9      	str	r1, [r7, #8]
 8004212:	607a      	str	r2, [r7, #4]
 8004214:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004218:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004220:	3b01      	subs	r3, #1
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	4413      	add	r3, r2
 8004226:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004228:	69bb      	ldr	r3, [r7, #24]
 800422a:	f023 0307 	bic.w	r3, r3, #7
 800422e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004230:	69bb      	ldr	r3, [r7, #24]
 8004232:	f003 0307 	and.w	r3, r3, #7
 8004236:	2b00      	cmp	r3, #0
 8004238:	d009      	beq.n	800424e <prvInitialiseNewTask+0x46>
 800423a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800423e:	f383 8811 	msr	BASEPRI, r3
 8004242:	f3bf 8f6f 	isb	sy
 8004246:	f3bf 8f4f 	dsb	sy
 800424a:	617b      	str	r3, [r7, #20]
 800424c:	e7fe      	b.n	800424c <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d01f      	beq.n	8004294 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004254:	2300      	movs	r3, #0
 8004256:	61fb      	str	r3, [r7, #28]
 8004258:	e012      	b.n	8004280 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800425a:	68ba      	ldr	r2, [r7, #8]
 800425c:	69fb      	ldr	r3, [r7, #28]
 800425e:	4413      	add	r3, r2
 8004260:	7819      	ldrb	r1, [r3, #0]
 8004262:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004264:	69fb      	ldr	r3, [r7, #28]
 8004266:	4413      	add	r3, r2
 8004268:	3334      	adds	r3, #52	; 0x34
 800426a:	460a      	mov	r2, r1
 800426c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800426e:	68ba      	ldr	r2, [r7, #8]
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	4413      	add	r3, r2
 8004274:	781b      	ldrb	r3, [r3, #0]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d006      	beq.n	8004288 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	3301      	adds	r3, #1
 800427e:	61fb      	str	r3, [r7, #28]
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	2b0f      	cmp	r3, #15
 8004284:	d9e9      	bls.n	800425a <prvInitialiseNewTask+0x52>
 8004286:	e000      	b.n	800428a <prvInitialiseNewTask+0x82>
			{
				break;
 8004288:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800428a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800428c:	2200      	movs	r2, #0
 800428e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004292:	e003      	b.n	800429c <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004296:	2200      	movs	r2, #0
 8004298:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800429c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800429e:	2b06      	cmp	r3, #6
 80042a0:	d901      	bls.n	80042a6 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80042a2:	2306      	movs	r3, #6
 80042a4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80042a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042aa:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80042ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042b0:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80042b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042b4:	2200      	movs	r2, #0
 80042b6:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80042b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ba:	3304      	adds	r3, #4
 80042bc:	4618      	mov	r0, r3
 80042be:	f7ff fe70 	bl	8003fa2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80042c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042c4:	3318      	adds	r3, #24
 80042c6:	4618      	mov	r0, r3
 80042c8:	f7ff fe6b 	bl	8003fa2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80042cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042d0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042d4:	f1c3 0207 	rsb	r2, r3, #7
 80042d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042da:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80042dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042e0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80042e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042e4:	2200      	movs	r2, #0
 80042e6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80042e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ea:	2200      	movs	r2, #0
 80042ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80042f0:	683a      	ldr	r2, [r7, #0]
 80042f2:	68f9      	ldr	r1, [r7, #12]
 80042f4:	69b8      	ldr	r0, [r7, #24]
 80042f6:	f000 fbfd 	bl	8004af4 <pxPortInitialiseStack>
 80042fa:	4602      	mov	r2, r0
 80042fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042fe:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004302:	2b00      	cmp	r3, #0
 8004304:	d002      	beq.n	800430c <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004308:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800430a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800430c:	bf00      	nop
 800430e:	3720      	adds	r7, #32
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}

08004314 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b082      	sub	sp, #8
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800431c:	f000 fd0e 	bl	8004d3c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004320:	4b2a      	ldr	r3, [pc, #168]	; (80043cc <prvAddNewTaskToReadyList+0xb8>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	3301      	adds	r3, #1
 8004326:	4a29      	ldr	r2, [pc, #164]	; (80043cc <prvAddNewTaskToReadyList+0xb8>)
 8004328:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800432a:	4b29      	ldr	r3, [pc, #164]	; (80043d0 <prvAddNewTaskToReadyList+0xbc>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d109      	bne.n	8004346 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004332:	4a27      	ldr	r2, [pc, #156]	; (80043d0 <prvAddNewTaskToReadyList+0xbc>)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004338:	4b24      	ldr	r3, [pc, #144]	; (80043cc <prvAddNewTaskToReadyList+0xb8>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	2b01      	cmp	r3, #1
 800433e:	d110      	bne.n	8004362 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004340:	f000 fab8 	bl	80048b4 <prvInitialiseTaskLists>
 8004344:	e00d      	b.n	8004362 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004346:	4b23      	ldr	r3, [pc, #140]	; (80043d4 <prvAddNewTaskToReadyList+0xc0>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d109      	bne.n	8004362 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800434e:	4b20      	ldr	r3, [pc, #128]	; (80043d0 <prvAddNewTaskToReadyList+0xbc>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004358:	429a      	cmp	r2, r3
 800435a:	d802      	bhi.n	8004362 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800435c:	4a1c      	ldr	r2, [pc, #112]	; (80043d0 <prvAddNewTaskToReadyList+0xbc>)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004362:	4b1d      	ldr	r3, [pc, #116]	; (80043d8 <prvAddNewTaskToReadyList+0xc4>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	3301      	adds	r3, #1
 8004368:	4a1b      	ldr	r2, [pc, #108]	; (80043d8 <prvAddNewTaskToReadyList+0xc4>)
 800436a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004370:	2201      	movs	r2, #1
 8004372:	409a      	lsls	r2, r3
 8004374:	4b19      	ldr	r3, [pc, #100]	; (80043dc <prvAddNewTaskToReadyList+0xc8>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4313      	orrs	r3, r2
 800437a:	4a18      	ldr	r2, [pc, #96]	; (80043dc <prvAddNewTaskToReadyList+0xc8>)
 800437c:	6013      	str	r3, [r2, #0]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004382:	4613      	mov	r3, r2
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	4413      	add	r3, r2
 8004388:	009b      	lsls	r3, r3, #2
 800438a:	4a15      	ldr	r2, [pc, #84]	; (80043e0 <prvAddNewTaskToReadyList+0xcc>)
 800438c:	441a      	add	r2, r3
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	3304      	adds	r3, #4
 8004392:	4619      	mov	r1, r3
 8004394:	4610      	mov	r0, r2
 8004396:	f7ff fe11 	bl	8003fbc <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800439a:	f000 fcfd 	bl	8004d98 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800439e:	4b0d      	ldr	r3, [pc, #52]	; (80043d4 <prvAddNewTaskToReadyList+0xc0>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d00e      	beq.n	80043c4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80043a6:	4b0a      	ldr	r3, [pc, #40]	; (80043d0 <prvAddNewTaskToReadyList+0xbc>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d207      	bcs.n	80043c4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80043b4:	4b0b      	ldr	r3, [pc, #44]	; (80043e4 <prvAddNewTaskToReadyList+0xd0>)
 80043b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043ba:	601a      	str	r2, [r3, #0]
 80043bc:	f3bf 8f4f 	dsb	sy
 80043c0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80043c4:	bf00      	nop
 80043c6:	3708      	adds	r7, #8
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}
 80043cc:	20000214 	.word	0x20000214
 80043d0:	20000114 	.word	0x20000114
 80043d4:	20000220 	.word	0x20000220
 80043d8:	20000230 	.word	0x20000230
 80043dc:	2000021c 	.word	0x2000021c
 80043e0:	20000118 	.word	0x20000118
 80043e4:	e000ed04 	.word	0xe000ed04

080043e8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b084      	sub	sp, #16
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80043f0:	2300      	movs	r3, #0
 80043f2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d016      	beq.n	8004428 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80043fa:	4b13      	ldr	r3, [pc, #76]	; (8004448 <vTaskDelay+0x60>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d009      	beq.n	8004416 <vTaskDelay+0x2e>
 8004402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004406:	f383 8811 	msr	BASEPRI, r3
 800440a:	f3bf 8f6f 	isb	sy
 800440e:	f3bf 8f4f 	dsb	sy
 8004412:	60bb      	str	r3, [r7, #8]
 8004414:	e7fe      	b.n	8004414 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8004416:	f000 f879 	bl	800450c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800441a:	2100      	movs	r1, #0
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f000 fb03 	bl	8004a28 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004422:	f000 f881 	bl	8004528 <xTaskResumeAll>
 8004426:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d107      	bne.n	800443e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800442e:	4b07      	ldr	r3, [pc, #28]	; (800444c <vTaskDelay+0x64>)
 8004430:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004434:	601a      	str	r2, [r3, #0]
 8004436:	f3bf 8f4f 	dsb	sy
 800443a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800443e:	bf00      	nop
 8004440:	3710      	adds	r7, #16
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	2000023c 	.word	0x2000023c
 800444c:	e000ed04 	.word	0xe000ed04

08004450 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b08a      	sub	sp, #40	; 0x28
 8004454:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004456:	2300      	movs	r3, #0
 8004458:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800445a:	2300      	movs	r3, #0
 800445c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800445e:	463a      	mov	r2, r7
 8004460:	1d39      	adds	r1, r7, #4
 8004462:	f107 0308 	add.w	r3, r7, #8
 8004466:	4618      	mov	r0, r3
 8004468:	f000 ff1a 	bl	80052a0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800446c:	6839      	ldr	r1, [r7, #0]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	68ba      	ldr	r2, [r7, #8]
 8004472:	9202      	str	r2, [sp, #8]
 8004474:	9301      	str	r3, [sp, #4]
 8004476:	2300      	movs	r3, #0
 8004478:	9300      	str	r3, [sp, #0]
 800447a:	2300      	movs	r3, #0
 800447c:	460a      	mov	r2, r1
 800447e:	491d      	ldr	r1, [pc, #116]	; (80044f4 <vTaskStartScheduler+0xa4>)
 8004480:	481d      	ldr	r0, [pc, #116]	; (80044f8 <vTaskStartScheduler+0xa8>)
 8004482:	f7ff fe22 	bl	80040ca <xTaskCreateStatic>
 8004486:	4602      	mov	r2, r0
 8004488:	4b1c      	ldr	r3, [pc, #112]	; (80044fc <vTaskStartScheduler+0xac>)
 800448a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800448c:	4b1b      	ldr	r3, [pc, #108]	; (80044fc <vTaskStartScheduler+0xac>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d002      	beq.n	800449a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004494:	2301      	movs	r3, #1
 8004496:	617b      	str	r3, [r7, #20]
 8004498:	e001      	b.n	800449e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800449a:	2300      	movs	r3, #0
 800449c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d115      	bne.n	80044d0 <vTaskStartScheduler+0x80>
 80044a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a8:	f383 8811 	msr	BASEPRI, r3
 80044ac:	f3bf 8f6f 	isb	sy
 80044b0:	f3bf 8f4f 	dsb	sy
 80044b4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80044b6:	4b12      	ldr	r3, [pc, #72]	; (8004500 <vTaskStartScheduler+0xb0>)
 80044b8:	f04f 32ff 	mov.w	r2, #4294967295
 80044bc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80044be:	4b11      	ldr	r3, [pc, #68]	; (8004504 <vTaskStartScheduler+0xb4>)
 80044c0:	2201      	movs	r2, #1
 80044c2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80044c4:	4b10      	ldr	r3, [pc, #64]	; (8004508 <vTaskStartScheduler+0xb8>)
 80044c6:	2200      	movs	r2, #0
 80044c8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80044ca:	f000 fb99 	bl	8004c00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80044ce:	e00d      	b.n	80044ec <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044d6:	d109      	bne.n	80044ec <vTaskStartScheduler+0x9c>
 80044d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044dc:	f383 8811 	msr	BASEPRI, r3
 80044e0:	f3bf 8f6f 	isb	sy
 80044e4:	f3bf 8f4f 	dsb	sy
 80044e8:	60fb      	str	r3, [r7, #12]
 80044ea:	e7fe      	b.n	80044ea <vTaskStartScheduler+0x9a>
}
 80044ec:	bf00      	nop
 80044ee:	3718      	adds	r7, #24
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}
 80044f4:	08007108 	.word	0x08007108
 80044f8:	08004885 	.word	0x08004885
 80044fc:	20000238 	.word	0x20000238
 8004500:	20000234 	.word	0x20000234
 8004504:	20000220 	.word	0x20000220
 8004508:	20000218 	.word	0x20000218

0800450c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800450c:	b480      	push	{r7}
 800450e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004510:	4b04      	ldr	r3, [pc, #16]	; (8004524 <vTaskSuspendAll+0x18>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	3301      	adds	r3, #1
 8004516:	4a03      	ldr	r2, [pc, #12]	; (8004524 <vTaskSuspendAll+0x18>)
 8004518:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800451a:	bf00      	nop
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr
 8004524:	2000023c 	.word	0x2000023c

08004528 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800452e:	2300      	movs	r3, #0
 8004530:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004532:	2300      	movs	r3, #0
 8004534:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004536:	4b41      	ldr	r3, [pc, #260]	; (800463c <xTaskResumeAll+0x114>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d109      	bne.n	8004552 <xTaskResumeAll+0x2a>
 800453e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004542:	f383 8811 	msr	BASEPRI, r3
 8004546:	f3bf 8f6f 	isb	sy
 800454a:	f3bf 8f4f 	dsb	sy
 800454e:	603b      	str	r3, [r7, #0]
 8004550:	e7fe      	b.n	8004550 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004552:	f000 fbf3 	bl	8004d3c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004556:	4b39      	ldr	r3, [pc, #228]	; (800463c <xTaskResumeAll+0x114>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	3b01      	subs	r3, #1
 800455c:	4a37      	ldr	r2, [pc, #220]	; (800463c <xTaskResumeAll+0x114>)
 800455e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004560:	4b36      	ldr	r3, [pc, #216]	; (800463c <xTaskResumeAll+0x114>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d161      	bne.n	800462c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004568:	4b35      	ldr	r3, [pc, #212]	; (8004640 <xTaskResumeAll+0x118>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d05d      	beq.n	800462c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004570:	e02e      	b.n	80045d0 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004572:	4b34      	ldr	r3, [pc, #208]	; (8004644 <xTaskResumeAll+0x11c>)
 8004574:	68db      	ldr	r3, [r3, #12]
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	3318      	adds	r3, #24
 800457e:	4618      	mov	r0, r3
 8004580:	f7ff fd79 	bl	8004076 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	3304      	adds	r3, #4
 8004588:	4618      	mov	r0, r3
 800458a:	f7ff fd74 	bl	8004076 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004592:	2201      	movs	r2, #1
 8004594:	409a      	lsls	r2, r3
 8004596:	4b2c      	ldr	r3, [pc, #176]	; (8004648 <xTaskResumeAll+0x120>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4313      	orrs	r3, r2
 800459c:	4a2a      	ldr	r2, [pc, #168]	; (8004648 <xTaskResumeAll+0x120>)
 800459e:	6013      	str	r3, [r2, #0]
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045a4:	4613      	mov	r3, r2
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	4413      	add	r3, r2
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	4a27      	ldr	r2, [pc, #156]	; (800464c <xTaskResumeAll+0x124>)
 80045ae:	441a      	add	r2, r3
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	3304      	adds	r3, #4
 80045b4:	4619      	mov	r1, r3
 80045b6:	4610      	mov	r0, r2
 80045b8:	f7ff fd00 	bl	8003fbc <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045c0:	4b23      	ldr	r3, [pc, #140]	; (8004650 <xTaskResumeAll+0x128>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d302      	bcc.n	80045d0 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80045ca:	4b22      	ldr	r3, [pc, #136]	; (8004654 <xTaskResumeAll+0x12c>)
 80045cc:	2201      	movs	r2, #1
 80045ce:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80045d0:	4b1c      	ldr	r3, [pc, #112]	; (8004644 <xTaskResumeAll+0x11c>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d1cc      	bne.n	8004572 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d001      	beq.n	80045e2 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80045de:	f000 fa03 	bl	80049e8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80045e2:	4b1d      	ldr	r3, [pc, #116]	; (8004658 <xTaskResumeAll+0x130>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d010      	beq.n	8004610 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80045ee:	f000 f837 	bl	8004660 <xTaskIncrementTick>
 80045f2:	4603      	mov	r3, r0
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d002      	beq.n	80045fe <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80045f8:	4b16      	ldr	r3, [pc, #88]	; (8004654 <xTaskResumeAll+0x12c>)
 80045fa:	2201      	movs	r2, #1
 80045fc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	3b01      	subs	r3, #1
 8004602:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d1f1      	bne.n	80045ee <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800460a:	4b13      	ldr	r3, [pc, #76]	; (8004658 <xTaskResumeAll+0x130>)
 800460c:	2200      	movs	r2, #0
 800460e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004610:	4b10      	ldr	r3, [pc, #64]	; (8004654 <xTaskResumeAll+0x12c>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d009      	beq.n	800462c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004618:	2301      	movs	r3, #1
 800461a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800461c:	4b0f      	ldr	r3, [pc, #60]	; (800465c <xTaskResumeAll+0x134>)
 800461e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004622:	601a      	str	r2, [r3, #0]
 8004624:	f3bf 8f4f 	dsb	sy
 8004628:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800462c:	f000 fbb4 	bl	8004d98 <vPortExitCritical>

	return xAlreadyYielded;
 8004630:	68bb      	ldr	r3, [r7, #8]
}
 8004632:	4618      	mov	r0, r3
 8004634:	3710      	adds	r7, #16
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}
 800463a:	bf00      	nop
 800463c:	2000023c 	.word	0x2000023c
 8004640:	20000214 	.word	0x20000214
 8004644:	200001d4 	.word	0x200001d4
 8004648:	2000021c 	.word	0x2000021c
 800464c:	20000118 	.word	0x20000118
 8004650:	20000114 	.word	0x20000114
 8004654:	20000228 	.word	0x20000228
 8004658:	20000224 	.word	0x20000224
 800465c:	e000ed04 	.word	0xe000ed04

08004660 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b086      	sub	sp, #24
 8004664:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004666:	2300      	movs	r3, #0
 8004668:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800466a:	4b4e      	ldr	r3, [pc, #312]	; (80047a4 <xTaskIncrementTick+0x144>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	2b00      	cmp	r3, #0
 8004670:	f040 8087 	bne.w	8004782 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004674:	4b4c      	ldr	r3, [pc, #304]	; (80047a8 <xTaskIncrementTick+0x148>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	3301      	adds	r3, #1
 800467a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800467c:	4a4a      	ldr	r2, [pc, #296]	; (80047a8 <xTaskIncrementTick+0x148>)
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d11f      	bne.n	80046c8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004688:	4b48      	ldr	r3, [pc, #288]	; (80047ac <xTaskIncrementTick+0x14c>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d009      	beq.n	80046a6 <xTaskIncrementTick+0x46>
 8004692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004696:	f383 8811 	msr	BASEPRI, r3
 800469a:	f3bf 8f6f 	isb	sy
 800469e:	f3bf 8f4f 	dsb	sy
 80046a2:	603b      	str	r3, [r7, #0]
 80046a4:	e7fe      	b.n	80046a4 <xTaskIncrementTick+0x44>
 80046a6:	4b41      	ldr	r3, [pc, #260]	; (80047ac <xTaskIncrementTick+0x14c>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	60fb      	str	r3, [r7, #12]
 80046ac:	4b40      	ldr	r3, [pc, #256]	; (80047b0 <xTaskIncrementTick+0x150>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a3e      	ldr	r2, [pc, #248]	; (80047ac <xTaskIncrementTick+0x14c>)
 80046b2:	6013      	str	r3, [r2, #0]
 80046b4:	4a3e      	ldr	r2, [pc, #248]	; (80047b0 <xTaskIncrementTick+0x150>)
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	6013      	str	r3, [r2, #0]
 80046ba:	4b3e      	ldr	r3, [pc, #248]	; (80047b4 <xTaskIncrementTick+0x154>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	3301      	adds	r3, #1
 80046c0:	4a3c      	ldr	r2, [pc, #240]	; (80047b4 <xTaskIncrementTick+0x154>)
 80046c2:	6013      	str	r3, [r2, #0]
 80046c4:	f000 f990 	bl	80049e8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80046c8:	4b3b      	ldr	r3, [pc, #236]	; (80047b8 <xTaskIncrementTick+0x158>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	693a      	ldr	r2, [r7, #16]
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d348      	bcc.n	8004764 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80046d2:	4b36      	ldr	r3, [pc, #216]	; (80047ac <xTaskIncrementTick+0x14c>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d104      	bne.n	80046e6 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046dc:	4b36      	ldr	r3, [pc, #216]	; (80047b8 <xTaskIncrementTick+0x158>)
 80046de:	f04f 32ff 	mov.w	r2, #4294967295
 80046e2:	601a      	str	r2, [r3, #0]
					break;
 80046e4:	e03e      	b.n	8004764 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046e6:	4b31      	ldr	r3, [pc, #196]	; (80047ac <xTaskIncrementTick+0x14c>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	68db      	ldr	r3, [r3, #12]
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80046f6:	693a      	ldr	r2, [r7, #16]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	429a      	cmp	r2, r3
 80046fc:	d203      	bcs.n	8004706 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80046fe:	4a2e      	ldr	r2, [pc, #184]	; (80047b8 <xTaskIncrementTick+0x158>)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004704:	e02e      	b.n	8004764 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	3304      	adds	r3, #4
 800470a:	4618      	mov	r0, r3
 800470c:	f7ff fcb3 	bl	8004076 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004714:	2b00      	cmp	r3, #0
 8004716:	d004      	beq.n	8004722 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	3318      	adds	r3, #24
 800471c:	4618      	mov	r0, r3
 800471e:	f7ff fcaa 	bl	8004076 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004726:	2201      	movs	r2, #1
 8004728:	409a      	lsls	r2, r3
 800472a:	4b24      	ldr	r3, [pc, #144]	; (80047bc <xTaskIncrementTick+0x15c>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4313      	orrs	r3, r2
 8004730:	4a22      	ldr	r2, [pc, #136]	; (80047bc <xTaskIncrementTick+0x15c>)
 8004732:	6013      	str	r3, [r2, #0]
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004738:	4613      	mov	r3, r2
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	4413      	add	r3, r2
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	4a1f      	ldr	r2, [pc, #124]	; (80047c0 <xTaskIncrementTick+0x160>)
 8004742:	441a      	add	r2, r3
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	3304      	adds	r3, #4
 8004748:	4619      	mov	r1, r3
 800474a:	4610      	mov	r0, r2
 800474c:	f7ff fc36 	bl	8003fbc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004754:	4b1b      	ldr	r3, [pc, #108]	; (80047c4 <xTaskIncrementTick+0x164>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800475a:	429a      	cmp	r2, r3
 800475c:	d3b9      	bcc.n	80046d2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800475e:	2301      	movs	r3, #1
 8004760:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004762:	e7b6      	b.n	80046d2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004764:	4b17      	ldr	r3, [pc, #92]	; (80047c4 <xTaskIncrementTick+0x164>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800476a:	4915      	ldr	r1, [pc, #84]	; (80047c0 <xTaskIncrementTick+0x160>)
 800476c:	4613      	mov	r3, r2
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	4413      	add	r3, r2
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	440b      	add	r3, r1
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	2b01      	cmp	r3, #1
 800477a:	d907      	bls.n	800478c <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 800477c:	2301      	movs	r3, #1
 800477e:	617b      	str	r3, [r7, #20]
 8004780:	e004      	b.n	800478c <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004782:	4b11      	ldr	r3, [pc, #68]	; (80047c8 <xTaskIncrementTick+0x168>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	3301      	adds	r3, #1
 8004788:	4a0f      	ldr	r2, [pc, #60]	; (80047c8 <xTaskIncrementTick+0x168>)
 800478a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800478c:	4b0f      	ldr	r3, [pc, #60]	; (80047cc <xTaskIncrementTick+0x16c>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d001      	beq.n	8004798 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8004794:	2301      	movs	r3, #1
 8004796:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004798:	697b      	ldr	r3, [r7, #20]
}
 800479a:	4618      	mov	r0, r3
 800479c:	3718      	adds	r7, #24
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	bf00      	nop
 80047a4:	2000023c 	.word	0x2000023c
 80047a8:	20000218 	.word	0x20000218
 80047ac:	200001cc 	.word	0x200001cc
 80047b0:	200001d0 	.word	0x200001d0
 80047b4:	2000022c 	.word	0x2000022c
 80047b8:	20000234 	.word	0x20000234
 80047bc:	2000021c 	.word	0x2000021c
 80047c0:	20000118 	.word	0x20000118
 80047c4:	20000114 	.word	0x20000114
 80047c8:	20000224 	.word	0x20000224
 80047cc:	20000228 	.word	0x20000228

080047d0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80047d0:	b480      	push	{r7}
 80047d2:	b087      	sub	sp, #28
 80047d4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80047d6:	4b26      	ldr	r3, [pc, #152]	; (8004870 <vTaskSwitchContext+0xa0>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d003      	beq.n	80047e6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80047de:	4b25      	ldr	r3, [pc, #148]	; (8004874 <vTaskSwitchContext+0xa4>)
 80047e0:	2201      	movs	r2, #1
 80047e2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80047e4:	e03e      	b.n	8004864 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80047e6:	4b23      	ldr	r3, [pc, #140]	; (8004874 <vTaskSwitchContext+0xa4>)
 80047e8:	2200      	movs	r2, #0
 80047ea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047ec:	4b22      	ldr	r3, [pc, #136]	; (8004878 <vTaskSwitchContext+0xa8>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	fab3 f383 	clz	r3, r3
 80047f8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80047fa:	7afb      	ldrb	r3, [r7, #11]
 80047fc:	f1c3 031f 	rsb	r3, r3, #31
 8004800:	617b      	str	r3, [r7, #20]
 8004802:	491e      	ldr	r1, [pc, #120]	; (800487c <vTaskSwitchContext+0xac>)
 8004804:	697a      	ldr	r2, [r7, #20]
 8004806:	4613      	mov	r3, r2
 8004808:	009b      	lsls	r3, r3, #2
 800480a:	4413      	add	r3, r2
 800480c:	009b      	lsls	r3, r3, #2
 800480e:	440b      	add	r3, r1
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d109      	bne.n	800482a <vTaskSwitchContext+0x5a>
	__asm volatile
 8004816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800481a:	f383 8811 	msr	BASEPRI, r3
 800481e:	f3bf 8f6f 	isb	sy
 8004822:	f3bf 8f4f 	dsb	sy
 8004826:	607b      	str	r3, [r7, #4]
 8004828:	e7fe      	b.n	8004828 <vTaskSwitchContext+0x58>
 800482a:	697a      	ldr	r2, [r7, #20]
 800482c:	4613      	mov	r3, r2
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	4413      	add	r3, r2
 8004832:	009b      	lsls	r3, r3, #2
 8004834:	4a11      	ldr	r2, [pc, #68]	; (800487c <vTaskSwitchContext+0xac>)
 8004836:	4413      	add	r3, r2
 8004838:	613b      	str	r3, [r7, #16]
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	685a      	ldr	r2, [r3, #4]
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	605a      	str	r2, [r3, #4]
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	685a      	ldr	r2, [r3, #4]
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	3308      	adds	r3, #8
 800484c:	429a      	cmp	r2, r3
 800484e:	d104      	bne.n	800485a <vTaskSwitchContext+0x8a>
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	685a      	ldr	r2, [r3, #4]
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	605a      	str	r2, [r3, #4]
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	4a07      	ldr	r2, [pc, #28]	; (8004880 <vTaskSwitchContext+0xb0>)
 8004862:	6013      	str	r3, [r2, #0]
}
 8004864:	bf00      	nop
 8004866:	371c      	adds	r7, #28
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr
 8004870:	2000023c 	.word	0x2000023c
 8004874:	20000228 	.word	0x20000228
 8004878:	2000021c 	.word	0x2000021c
 800487c:	20000118 	.word	0x20000118
 8004880:	20000114 	.word	0x20000114

08004884 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b082      	sub	sp, #8
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800488c:	f000 f852 	bl	8004934 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004890:	4b06      	ldr	r3, [pc, #24]	; (80048ac <prvIdleTask+0x28>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	2b01      	cmp	r3, #1
 8004896:	d9f9      	bls.n	800488c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004898:	4b05      	ldr	r3, [pc, #20]	; (80048b0 <prvIdleTask+0x2c>)
 800489a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800489e:	601a      	str	r2, [r3, #0]
 80048a0:	f3bf 8f4f 	dsb	sy
 80048a4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80048a8:	e7f0      	b.n	800488c <prvIdleTask+0x8>
 80048aa:	bf00      	nop
 80048ac:	20000118 	.word	0x20000118
 80048b0:	e000ed04 	.word	0xe000ed04

080048b4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b082      	sub	sp, #8
 80048b8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80048ba:	2300      	movs	r3, #0
 80048bc:	607b      	str	r3, [r7, #4]
 80048be:	e00c      	b.n	80048da <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80048c0:	687a      	ldr	r2, [r7, #4]
 80048c2:	4613      	mov	r3, r2
 80048c4:	009b      	lsls	r3, r3, #2
 80048c6:	4413      	add	r3, r2
 80048c8:	009b      	lsls	r3, r3, #2
 80048ca:	4a12      	ldr	r2, [pc, #72]	; (8004914 <prvInitialiseTaskLists+0x60>)
 80048cc:	4413      	add	r3, r2
 80048ce:	4618      	mov	r0, r3
 80048d0:	f7ff fb47 	bl	8003f62 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	3301      	adds	r3, #1
 80048d8:	607b      	str	r3, [r7, #4]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2b06      	cmp	r3, #6
 80048de:	d9ef      	bls.n	80048c0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80048e0:	480d      	ldr	r0, [pc, #52]	; (8004918 <prvInitialiseTaskLists+0x64>)
 80048e2:	f7ff fb3e 	bl	8003f62 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80048e6:	480d      	ldr	r0, [pc, #52]	; (800491c <prvInitialiseTaskLists+0x68>)
 80048e8:	f7ff fb3b 	bl	8003f62 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80048ec:	480c      	ldr	r0, [pc, #48]	; (8004920 <prvInitialiseTaskLists+0x6c>)
 80048ee:	f7ff fb38 	bl	8003f62 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80048f2:	480c      	ldr	r0, [pc, #48]	; (8004924 <prvInitialiseTaskLists+0x70>)
 80048f4:	f7ff fb35 	bl	8003f62 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80048f8:	480b      	ldr	r0, [pc, #44]	; (8004928 <prvInitialiseTaskLists+0x74>)
 80048fa:	f7ff fb32 	bl	8003f62 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80048fe:	4b0b      	ldr	r3, [pc, #44]	; (800492c <prvInitialiseTaskLists+0x78>)
 8004900:	4a05      	ldr	r2, [pc, #20]	; (8004918 <prvInitialiseTaskLists+0x64>)
 8004902:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004904:	4b0a      	ldr	r3, [pc, #40]	; (8004930 <prvInitialiseTaskLists+0x7c>)
 8004906:	4a05      	ldr	r2, [pc, #20]	; (800491c <prvInitialiseTaskLists+0x68>)
 8004908:	601a      	str	r2, [r3, #0]
}
 800490a:	bf00      	nop
 800490c:	3708      	adds	r7, #8
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}
 8004912:	bf00      	nop
 8004914:	20000118 	.word	0x20000118
 8004918:	200001a4 	.word	0x200001a4
 800491c:	200001b8 	.word	0x200001b8
 8004920:	200001d4 	.word	0x200001d4
 8004924:	200001e8 	.word	0x200001e8
 8004928:	20000200 	.word	0x20000200
 800492c:	200001cc 	.word	0x200001cc
 8004930:	200001d0 	.word	0x200001d0

08004934 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b082      	sub	sp, #8
 8004938:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800493a:	e019      	b.n	8004970 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800493c:	f000 f9fe 	bl	8004d3c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004940:	4b0f      	ldr	r3, [pc, #60]	; (8004980 <prvCheckTasksWaitingTermination+0x4c>)
 8004942:	68db      	ldr	r3, [r3, #12]
 8004944:	68db      	ldr	r3, [r3, #12]
 8004946:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	3304      	adds	r3, #4
 800494c:	4618      	mov	r0, r3
 800494e:	f7ff fb92 	bl	8004076 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004952:	4b0c      	ldr	r3, [pc, #48]	; (8004984 <prvCheckTasksWaitingTermination+0x50>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	3b01      	subs	r3, #1
 8004958:	4a0a      	ldr	r2, [pc, #40]	; (8004984 <prvCheckTasksWaitingTermination+0x50>)
 800495a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800495c:	4b0a      	ldr	r3, [pc, #40]	; (8004988 <prvCheckTasksWaitingTermination+0x54>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	3b01      	subs	r3, #1
 8004962:	4a09      	ldr	r2, [pc, #36]	; (8004988 <prvCheckTasksWaitingTermination+0x54>)
 8004964:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004966:	f000 fa17 	bl	8004d98 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f000 f80e 	bl	800498c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004970:	4b05      	ldr	r3, [pc, #20]	; (8004988 <prvCheckTasksWaitingTermination+0x54>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d1e1      	bne.n	800493c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004978:	bf00      	nop
 800497a:	3708      	adds	r7, #8
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}
 8004980:	200001e8 	.word	0x200001e8
 8004984:	20000214 	.word	0x20000214
 8004988:	200001fc 	.word	0x200001fc

0800498c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800498c:	b580      	push	{r7, lr}
 800498e:	b084      	sub	sp, #16
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800499a:	2b00      	cmp	r3, #0
 800499c:	d108      	bne.n	80049b0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049a2:	4618      	mov	r0, r3
 80049a4:	f000 fb68 	bl	8005078 <vPortFree>
				vPortFree( pxTCB );
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	f000 fb65 	bl	8005078 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80049ae:	e017      	b.n	80049e0 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d103      	bne.n	80049c2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f000 fb5c 	bl	8005078 <vPortFree>
	}
 80049c0:	e00e      	b.n	80049e0 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049c8:	2b02      	cmp	r3, #2
 80049ca:	d009      	beq.n	80049e0 <prvDeleteTCB+0x54>
 80049cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d0:	f383 8811 	msr	BASEPRI, r3
 80049d4:	f3bf 8f6f 	isb	sy
 80049d8:	f3bf 8f4f 	dsb	sy
 80049dc:	60fb      	str	r3, [r7, #12]
 80049de:	e7fe      	b.n	80049de <prvDeleteTCB+0x52>
	}
 80049e0:	bf00      	nop
 80049e2:	3710      	adds	r7, #16
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}

080049e8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80049e8:	b480      	push	{r7}
 80049ea:	b083      	sub	sp, #12
 80049ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80049ee:	4b0c      	ldr	r3, [pc, #48]	; (8004a20 <prvResetNextTaskUnblockTime+0x38>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d104      	bne.n	8004a02 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80049f8:	4b0a      	ldr	r3, [pc, #40]	; (8004a24 <prvResetNextTaskUnblockTime+0x3c>)
 80049fa:	f04f 32ff 	mov.w	r2, #4294967295
 80049fe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004a00:	e008      	b.n	8004a14 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a02:	4b07      	ldr	r3, [pc, #28]	; (8004a20 <prvResetNextTaskUnblockTime+0x38>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	68db      	ldr	r3, [r3, #12]
 8004a0a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	4a04      	ldr	r2, [pc, #16]	; (8004a24 <prvResetNextTaskUnblockTime+0x3c>)
 8004a12:	6013      	str	r3, [r2, #0]
}
 8004a14:	bf00      	nop
 8004a16:	370c      	adds	r7, #12
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr
 8004a20:	200001cc 	.word	0x200001cc
 8004a24:	20000234 	.word	0x20000234

08004a28 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b084      	sub	sp, #16
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004a32:	4b29      	ldr	r3, [pc, #164]	; (8004ad8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004a38:	4b28      	ldr	r3, [pc, #160]	; (8004adc <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	3304      	adds	r3, #4
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f7ff fb19 	bl	8004076 <uxListRemove>
 8004a44:	4603      	mov	r3, r0
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d10b      	bne.n	8004a62 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004a4a:	4b24      	ldr	r3, [pc, #144]	; (8004adc <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a50:	2201      	movs	r2, #1
 8004a52:	fa02 f303 	lsl.w	r3, r2, r3
 8004a56:	43da      	mvns	r2, r3
 8004a58:	4b21      	ldr	r3, [pc, #132]	; (8004ae0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	4a20      	ldr	r2, [pc, #128]	; (8004ae0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004a60:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a68:	d10a      	bne.n	8004a80 <prvAddCurrentTaskToDelayedList+0x58>
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d007      	beq.n	8004a80 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a70:	4b1a      	ldr	r3, [pc, #104]	; (8004adc <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	3304      	adds	r3, #4
 8004a76:	4619      	mov	r1, r3
 8004a78:	481a      	ldr	r0, [pc, #104]	; (8004ae4 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004a7a:	f7ff fa9f 	bl	8003fbc <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004a7e:	e026      	b.n	8004ace <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004a80:	68fa      	ldr	r2, [r7, #12]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	4413      	add	r3, r2
 8004a86:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004a88:	4b14      	ldr	r3, [pc, #80]	; (8004adc <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	68ba      	ldr	r2, [r7, #8]
 8004a8e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004a90:	68ba      	ldr	r2, [r7, #8]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d209      	bcs.n	8004aac <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a98:	4b13      	ldr	r3, [pc, #76]	; (8004ae8 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	4b0f      	ldr	r3, [pc, #60]	; (8004adc <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	3304      	adds	r3, #4
 8004aa2:	4619      	mov	r1, r3
 8004aa4:	4610      	mov	r0, r2
 8004aa6:	f7ff faad 	bl	8004004 <vListInsert>
}
 8004aaa:	e010      	b.n	8004ace <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004aac:	4b0f      	ldr	r3, [pc, #60]	; (8004aec <prvAddCurrentTaskToDelayedList+0xc4>)
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	4b0a      	ldr	r3, [pc, #40]	; (8004adc <prvAddCurrentTaskToDelayedList+0xb4>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	3304      	adds	r3, #4
 8004ab6:	4619      	mov	r1, r3
 8004ab8:	4610      	mov	r0, r2
 8004aba:	f7ff faa3 	bl	8004004 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004abe:	4b0c      	ldr	r3, [pc, #48]	; (8004af0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	68ba      	ldr	r2, [r7, #8]
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d202      	bcs.n	8004ace <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004ac8:	4a09      	ldr	r2, [pc, #36]	; (8004af0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	6013      	str	r3, [r2, #0]
}
 8004ace:	bf00      	nop
 8004ad0:	3710      	adds	r7, #16
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}
 8004ad6:	bf00      	nop
 8004ad8:	20000218 	.word	0x20000218
 8004adc:	20000114 	.word	0x20000114
 8004ae0:	2000021c 	.word	0x2000021c
 8004ae4:	20000200 	.word	0x20000200
 8004ae8:	200001d0 	.word	0x200001d0
 8004aec:	200001cc 	.word	0x200001cc
 8004af0:	20000234 	.word	0x20000234

08004af4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004af4:	b480      	push	{r7}
 8004af6:	b085      	sub	sp, #20
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	60f8      	str	r0, [r7, #12]
 8004afc:	60b9      	str	r1, [r7, #8]
 8004afe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	3b04      	subs	r3, #4
 8004b04:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004b0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	3b04      	subs	r3, #4
 8004b12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	f023 0201 	bic.w	r2, r3, #1
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	3b04      	subs	r3, #4
 8004b22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004b24:	4a0c      	ldr	r2, [pc, #48]	; (8004b58 <pxPortInitialiseStack+0x64>)
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	3b14      	subs	r3, #20
 8004b2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004b30:	687a      	ldr	r2, [r7, #4]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	3b04      	subs	r3, #4
 8004b3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f06f 0202 	mvn.w	r2, #2
 8004b42:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	3b20      	subs	r3, #32
 8004b48:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3714      	adds	r7, #20
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr
 8004b58:	08004b5d 	.word	0x08004b5d

08004b5c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b085      	sub	sp, #20
 8004b60:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004b62:	2300      	movs	r3, #0
 8004b64:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004b66:	4b11      	ldr	r3, [pc, #68]	; (8004bac <prvTaskExitError+0x50>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b6e:	d009      	beq.n	8004b84 <prvTaskExitError+0x28>
 8004b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b74:	f383 8811 	msr	BASEPRI, r3
 8004b78:	f3bf 8f6f 	isb	sy
 8004b7c:	f3bf 8f4f 	dsb	sy
 8004b80:	60fb      	str	r3, [r7, #12]
 8004b82:	e7fe      	b.n	8004b82 <prvTaskExitError+0x26>
 8004b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b88:	f383 8811 	msr	BASEPRI, r3
 8004b8c:	f3bf 8f6f 	isb	sy
 8004b90:	f3bf 8f4f 	dsb	sy
 8004b94:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004b96:	bf00      	nop
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d0fc      	beq.n	8004b98 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004b9e:	bf00      	nop
 8004ba0:	3714      	adds	r7, #20
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr
 8004baa:	bf00      	nop
 8004bac:	20000008 	.word	0x20000008

08004bb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004bb0:	4b07      	ldr	r3, [pc, #28]	; (8004bd0 <pxCurrentTCBConst2>)
 8004bb2:	6819      	ldr	r1, [r3, #0]
 8004bb4:	6808      	ldr	r0, [r1, #0]
 8004bb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bba:	f380 8809 	msr	PSP, r0
 8004bbe:	f3bf 8f6f 	isb	sy
 8004bc2:	f04f 0000 	mov.w	r0, #0
 8004bc6:	f380 8811 	msr	BASEPRI, r0
 8004bca:	4770      	bx	lr
 8004bcc:	f3af 8000 	nop.w

08004bd0 <pxCurrentTCBConst2>:
 8004bd0:	20000114 	.word	0x20000114
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004bd4:	bf00      	nop
 8004bd6:	bf00      	nop

08004bd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004bd8:	4808      	ldr	r0, [pc, #32]	; (8004bfc <prvPortStartFirstTask+0x24>)
 8004bda:	6800      	ldr	r0, [r0, #0]
 8004bdc:	6800      	ldr	r0, [r0, #0]
 8004bde:	f380 8808 	msr	MSP, r0
 8004be2:	f04f 0000 	mov.w	r0, #0
 8004be6:	f380 8814 	msr	CONTROL, r0
 8004bea:	b662      	cpsie	i
 8004bec:	b661      	cpsie	f
 8004bee:	f3bf 8f4f 	dsb	sy
 8004bf2:	f3bf 8f6f 	isb	sy
 8004bf6:	df00      	svc	0
 8004bf8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004bfa:	bf00      	nop
 8004bfc:	e000ed08 	.word	0xe000ed08

08004c00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b086      	sub	sp, #24
 8004c04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004c06:	4b44      	ldr	r3, [pc, #272]	; (8004d18 <xPortStartScheduler+0x118>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a44      	ldr	r2, [pc, #272]	; (8004d1c <xPortStartScheduler+0x11c>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d109      	bne.n	8004c24 <xPortStartScheduler+0x24>
 8004c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c14:	f383 8811 	msr	BASEPRI, r3
 8004c18:	f3bf 8f6f 	isb	sy
 8004c1c:	f3bf 8f4f 	dsb	sy
 8004c20:	613b      	str	r3, [r7, #16]
 8004c22:	e7fe      	b.n	8004c22 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004c24:	4b3c      	ldr	r3, [pc, #240]	; (8004d18 <xPortStartScheduler+0x118>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a3d      	ldr	r2, [pc, #244]	; (8004d20 <xPortStartScheduler+0x120>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d109      	bne.n	8004c42 <xPortStartScheduler+0x42>
 8004c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c32:	f383 8811 	msr	BASEPRI, r3
 8004c36:	f3bf 8f6f 	isb	sy
 8004c3a:	f3bf 8f4f 	dsb	sy
 8004c3e:	60fb      	str	r3, [r7, #12]
 8004c40:	e7fe      	b.n	8004c40 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004c42:	4b38      	ldr	r3, [pc, #224]	; (8004d24 <xPortStartScheduler+0x124>)
 8004c44:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	781b      	ldrb	r3, [r3, #0]
 8004c4a:	b2db      	uxtb	r3, r3
 8004c4c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	22ff      	movs	r2, #255	; 0xff
 8004c52:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	781b      	ldrb	r3, [r3, #0]
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004c5c:	78fb      	ldrb	r3, [r7, #3]
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004c64:	b2da      	uxtb	r2, r3
 8004c66:	4b30      	ldr	r3, [pc, #192]	; (8004d28 <xPortStartScheduler+0x128>)
 8004c68:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004c6a:	4b30      	ldr	r3, [pc, #192]	; (8004d2c <xPortStartScheduler+0x12c>)
 8004c6c:	2207      	movs	r2, #7
 8004c6e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004c70:	e009      	b.n	8004c86 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8004c72:	4b2e      	ldr	r3, [pc, #184]	; (8004d2c <xPortStartScheduler+0x12c>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	3b01      	subs	r3, #1
 8004c78:	4a2c      	ldr	r2, [pc, #176]	; (8004d2c <xPortStartScheduler+0x12c>)
 8004c7a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004c7c:	78fb      	ldrb	r3, [r7, #3]
 8004c7e:	b2db      	uxtb	r3, r3
 8004c80:	005b      	lsls	r3, r3, #1
 8004c82:	b2db      	uxtb	r3, r3
 8004c84:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004c86:	78fb      	ldrb	r3, [r7, #3]
 8004c88:	b2db      	uxtb	r3, r3
 8004c8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c8e:	2b80      	cmp	r3, #128	; 0x80
 8004c90:	d0ef      	beq.n	8004c72 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004c92:	4b26      	ldr	r3, [pc, #152]	; (8004d2c <xPortStartScheduler+0x12c>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f1c3 0307 	rsb	r3, r3, #7
 8004c9a:	2b04      	cmp	r3, #4
 8004c9c:	d009      	beq.n	8004cb2 <xPortStartScheduler+0xb2>
 8004c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ca2:	f383 8811 	msr	BASEPRI, r3
 8004ca6:	f3bf 8f6f 	isb	sy
 8004caa:	f3bf 8f4f 	dsb	sy
 8004cae:	60bb      	str	r3, [r7, #8]
 8004cb0:	e7fe      	b.n	8004cb0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004cb2:	4b1e      	ldr	r3, [pc, #120]	; (8004d2c <xPortStartScheduler+0x12c>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	021b      	lsls	r3, r3, #8
 8004cb8:	4a1c      	ldr	r2, [pc, #112]	; (8004d2c <xPortStartScheduler+0x12c>)
 8004cba:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004cbc:	4b1b      	ldr	r3, [pc, #108]	; (8004d2c <xPortStartScheduler+0x12c>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004cc4:	4a19      	ldr	r2, [pc, #100]	; (8004d2c <xPortStartScheduler+0x12c>)
 8004cc6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	b2da      	uxtb	r2, r3
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004cd0:	4b17      	ldr	r3, [pc, #92]	; (8004d30 <xPortStartScheduler+0x130>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a16      	ldr	r2, [pc, #88]	; (8004d30 <xPortStartScheduler+0x130>)
 8004cd6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004cda:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004cdc:	4b14      	ldr	r3, [pc, #80]	; (8004d30 <xPortStartScheduler+0x130>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a13      	ldr	r2, [pc, #76]	; (8004d30 <xPortStartScheduler+0x130>)
 8004ce2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004ce6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004ce8:	f000 f8d6 	bl	8004e98 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004cec:	4b11      	ldr	r3, [pc, #68]	; (8004d34 <xPortStartScheduler+0x134>)
 8004cee:	2200      	movs	r2, #0
 8004cf0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004cf2:	f000 f8f5 	bl	8004ee0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004cf6:	4b10      	ldr	r3, [pc, #64]	; (8004d38 <xPortStartScheduler+0x138>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a0f      	ldr	r2, [pc, #60]	; (8004d38 <xPortStartScheduler+0x138>)
 8004cfc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004d00:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004d02:	f7ff ff69 	bl	8004bd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004d06:	f7ff fd63 	bl	80047d0 <vTaskSwitchContext>
	prvTaskExitError();
 8004d0a:	f7ff ff27 	bl	8004b5c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004d0e:	2300      	movs	r3, #0
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	3718      	adds	r7, #24
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}
 8004d18:	e000ed00 	.word	0xe000ed00
 8004d1c:	410fc271 	.word	0x410fc271
 8004d20:	410fc270 	.word	0x410fc270
 8004d24:	e000e400 	.word	0xe000e400
 8004d28:	20000240 	.word	0x20000240
 8004d2c:	20000244 	.word	0x20000244
 8004d30:	e000ed20 	.word	0xe000ed20
 8004d34:	20000008 	.word	0x20000008
 8004d38:	e000ef34 	.word	0xe000ef34

08004d3c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b083      	sub	sp, #12
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d46:	f383 8811 	msr	BASEPRI, r3
 8004d4a:	f3bf 8f6f 	isb	sy
 8004d4e:	f3bf 8f4f 	dsb	sy
 8004d52:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004d54:	4b0e      	ldr	r3, [pc, #56]	; (8004d90 <vPortEnterCritical+0x54>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	3301      	adds	r3, #1
 8004d5a:	4a0d      	ldr	r2, [pc, #52]	; (8004d90 <vPortEnterCritical+0x54>)
 8004d5c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004d5e:	4b0c      	ldr	r3, [pc, #48]	; (8004d90 <vPortEnterCritical+0x54>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d10e      	bne.n	8004d84 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004d66:	4b0b      	ldr	r3, [pc, #44]	; (8004d94 <vPortEnterCritical+0x58>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	b2db      	uxtb	r3, r3
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d009      	beq.n	8004d84 <vPortEnterCritical+0x48>
 8004d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d74:	f383 8811 	msr	BASEPRI, r3
 8004d78:	f3bf 8f6f 	isb	sy
 8004d7c:	f3bf 8f4f 	dsb	sy
 8004d80:	603b      	str	r3, [r7, #0]
 8004d82:	e7fe      	b.n	8004d82 <vPortEnterCritical+0x46>
	}
}
 8004d84:	bf00      	nop
 8004d86:	370c      	adds	r7, #12
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr
 8004d90:	20000008 	.word	0x20000008
 8004d94:	e000ed04 	.word	0xe000ed04

08004d98 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b083      	sub	sp, #12
 8004d9c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004d9e:	4b11      	ldr	r3, [pc, #68]	; (8004de4 <vPortExitCritical+0x4c>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d109      	bne.n	8004dba <vPortExitCritical+0x22>
 8004da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004daa:	f383 8811 	msr	BASEPRI, r3
 8004dae:	f3bf 8f6f 	isb	sy
 8004db2:	f3bf 8f4f 	dsb	sy
 8004db6:	607b      	str	r3, [r7, #4]
 8004db8:	e7fe      	b.n	8004db8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8004dba:	4b0a      	ldr	r3, [pc, #40]	; (8004de4 <vPortExitCritical+0x4c>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	3b01      	subs	r3, #1
 8004dc0:	4a08      	ldr	r2, [pc, #32]	; (8004de4 <vPortExitCritical+0x4c>)
 8004dc2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004dc4:	4b07      	ldr	r3, [pc, #28]	; (8004de4 <vPortExitCritical+0x4c>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d104      	bne.n	8004dd6 <vPortExitCritical+0x3e>
 8004dcc:	2300      	movs	r3, #0
 8004dce:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004dd6:	bf00      	nop
 8004dd8:	370c      	adds	r7, #12
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr
 8004de2:	bf00      	nop
 8004de4:	20000008 	.word	0x20000008
	...

08004df0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004df0:	f3ef 8009 	mrs	r0, PSP
 8004df4:	f3bf 8f6f 	isb	sy
 8004df8:	4b15      	ldr	r3, [pc, #84]	; (8004e50 <pxCurrentTCBConst>)
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	f01e 0f10 	tst.w	lr, #16
 8004e00:	bf08      	it	eq
 8004e02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004e06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e0a:	6010      	str	r0, [r2, #0]
 8004e0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004e10:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004e14:	f380 8811 	msr	BASEPRI, r0
 8004e18:	f3bf 8f4f 	dsb	sy
 8004e1c:	f3bf 8f6f 	isb	sy
 8004e20:	f7ff fcd6 	bl	80047d0 <vTaskSwitchContext>
 8004e24:	f04f 0000 	mov.w	r0, #0
 8004e28:	f380 8811 	msr	BASEPRI, r0
 8004e2c:	bc09      	pop	{r0, r3}
 8004e2e:	6819      	ldr	r1, [r3, #0]
 8004e30:	6808      	ldr	r0, [r1, #0]
 8004e32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e36:	f01e 0f10 	tst.w	lr, #16
 8004e3a:	bf08      	it	eq
 8004e3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004e40:	f380 8809 	msr	PSP, r0
 8004e44:	f3bf 8f6f 	isb	sy
 8004e48:	4770      	bx	lr
 8004e4a:	bf00      	nop
 8004e4c:	f3af 8000 	nop.w

08004e50 <pxCurrentTCBConst>:
 8004e50:	20000114 	.word	0x20000114
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004e54:	bf00      	nop
 8004e56:	bf00      	nop

08004e58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b082      	sub	sp, #8
 8004e5c:	af00      	add	r7, sp, #0
	__asm volatile
 8004e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e62:	f383 8811 	msr	BASEPRI, r3
 8004e66:	f3bf 8f6f 	isb	sy
 8004e6a:	f3bf 8f4f 	dsb	sy
 8004e6e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004e70:	f7ff fbf6 	bl	8004660 <xTaskIncrementTick>
 8004e74:	4603      	mov	r3, r0
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d003      	beq.n	8004e82 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004e7a:	4b06      	ldr	r3, [pc, #24]	; (8004e94 <SysTick_Handler+0x3c>)
 8004e7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e80:	601a      	str	r2, [r3, #0]
 8004e82:	2300      	movs	r3, #0
 8004e84:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8004e8c:	bf00      	nop
 8004e8e:	3708      	adds	r7, #8
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}
 8004e94:	e000ed04 	.word	0xe000ed04

08004e98 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004e98:	b480      	push	{r7}
 8004e9a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004e9c:	4b0b      	ldr	r3, [pc, #44]	; (8004ecc <vPortSetupTimerInterrupt+0x34>)
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004ea2:	4b0b      	ldr	r3, [pc, #44]	; (8004ed0 <vPortSetupTimerInterrupt+0x38>)
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004ea8:	4b0a      	ldr	r3, [pc, #40]	; (8004ed4 <vPortSetupTimerInterrupt+0x3c>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a0a      	ldr	r2, [pc, #40]	; (8004ed8 <vPortSetupTimerInterrupt+0x40>)
 8004eae:	fba2 2303 	umull	r2, r3, r2, r3
 8004eb2:	099b      	lsrs	r3, r3, #6
 8004eb4:	4a09      	ldr	r2, [pc, #36]	; (8004edc <vPortSetupTimerInterrupt+0x44>)
 8004eb6:	3b01      	subs	r3, #1
 8004eb8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004eba:	4b04      	ldr	r3, [pc, #16]	; (8004ecc <vPortSetupTimerInterrupt+0x34>)
 8004ebc:	2207      	movs	r2, #7
 8004ebe:	601a      	str	r2, [r3, #0]
}
 8004ec0:	bf00      	nop
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec8:	4770      	bx	lr
 8004eca:	bf00      	nop
 8004ecc:	e000e010 	.word	0xe000e010
 8004ed0:	e000e018 	.word	0xe000e018
 8004ed4:	20000090 	.word	0x20000090
 8004ed8:	10624dd3 	.word	0x10624dd3
 8004edc:	e000e014 	.word	0xe000e014

08004ee0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004ee0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004ef0 <vPortEnableVFP+0x10>
 8004ee4:	6801      	ldr	r1, [r0, #0]
 8004ee6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004eea:	6001      	str	r1, [r0, #0]
 8004eec:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004eee:	bf00      	nop
 8004ef0:	e000ed88 	.word	0xe000ed88

08004ef4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b08a      	sub	sp, #40	; 0x28
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004efc:	2300      	movs	r3, #0
 8004efe:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004f00:	f7ff fb04 	bl	800450c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004f04:	4b57      	ldr	r3, [pc, #348]	; (8005064 <pvPortMalloc+0x170>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d101      	bne.n	8004f10 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004f0c:	f000 f90c 	bl	8005128 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004f10:	4b55      	ldr	r3, [pc, #340]	; (8005068 <pvPortMalloc+0x174>)
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	4013      	ands	r3, r2
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	f040 808c 	bne.w	8005036 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d01c      	beq.n	8004f5e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8004f24:	2208      	movs	r2, #8
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	4413      	add	r3, r2
 8004f2a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f003 0307 	and.w	r3, r3, #7
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d013      	beq.n	8004f5e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	f023 0307 	bic.w	r3, r3, #7
 8004f3c:	3308      	adds	r3, #8
 8004f3e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f003 0307 	and.w	r3, r3, #7
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d009      	beq.n	8004f5e <pvPortMalloc+0x6a>
	__asm volatile
 8004f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f4e:	f383 8811 	msr	BASEPRI, r3
 8004f52:	f3bf 8f6f 	isb	sy
 8004f56:	f3bf 8f4f 	dsb	sy
 8004f5a:	617b      	str	r3, [r7, #20]
 8004f5c:	e7fe      	b.n	8004f5c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d068      	beq.n	8005036 <pvPortMalloc+0x142>
 8004f64:	4b41      	ldr	r3, [pc, #260]	; (800506c <pvPortMalloc+0x178>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	687a      	ldr	r2, [r7, #4]
 8004f6a:	429a      	cmp	r2, r3
 8004f6c:	d863      	bhi.n	8005036 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004f6e:	4b40      	ldr	r3, [pc, #256]	; (8005070 <pvPortMalloc+0x17c>)
 8004f70:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004f72:	4b3f      	ldr	r3, [pc, #252]	; (8005070 <pvPortMalloc+0x17c>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004f78:	e004      	b.n	8004f84 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8004f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	687a      	ldr	r2, [r7, #4]
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d903      	bls.n	8004f96 <pvPortMalloc+0xa2>
 8004f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d1f1      	bne.n	8004f7a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004f96:	4b33      	ldr	r3, [pc, #204]	; (8005064 <pvPortMalloc+0x170>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d04a      	beq.n	8005036 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004fa0:	6a3b      	ldr	r3, [r7, #32]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	2208      	movs	r2, #8
 8004fa6:	4413      	add	r3, r2
 8004fa8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	6a3b      	ldr	r3, [r7, #32]
 8004fb0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb4:	685a      	ldr	r2, [r3, #4]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	1ad2      	subs	r2, r2, r3
 8004fba:	2308      	movs	r3, #8
 8004fbc:	005b      	lsls	r3, r3, #1
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d91e      	bls.n	8005000 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004fc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	4413      	add	r3, r2
 8004fc8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004fca:	69bb      	ldr	r3, [r7, #24]
 8004fcc:	f003 0307 	and.w	r3, r3, #7
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d009      	beq.n	8004fe8 <pvPortMalloc+0xf4>
 8004fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fd8:	f383 8811 	msr	BASEPRI, r3
 8004fdc:	f3bf 8f6f 	isb	sy
 8004fe0:	f3bf 8f4f 	dsb	sy
 8004fe4:	613b      	str	r3, [r7, #16]
 8004fe6:	e7fe      	b.n	8004fe6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fea:	685a      	ldr	r2, [r3, #4]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	1ad2      	subs	r2, r2, r3
 8004ff0:	69bb      	ldr	r3, [r7, #24]
 8004ff2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004ffa:	69b8      	ldr	r0, [r7, #24]
 8004ffc:	f000 f8f6 	bl	80051ec <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005000:	4b1a      	ldr	r3, [pc, #104]	; (800506c <pvPortMalloc+0x178>)
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	1ad3      	subs	r3, r2, r3
 800500a:	4a18      	ldr	r2, [pc, #96]	; (800506c <pvPortMalloc+0x178>)
 800500c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800500e:	4b17      	ldr	r3, [pc, #92]	; (800506c <pvPortMalloc+0x178>)
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	4b18      	ldr	r3, [pc, #96]	; (8005074 <pvPortMalloc+0x180>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	429a      	cmp	r2, r3
 8005018:	d203      	bcs.n	8005022 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800501a:	4b14      	ldr	r3, [pc, #80]	; (800506c <pvPortMalloc+0x178>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a15      	ldr	r2, [pc, #84]	; (8005074 <pvPortMalloc+0x180>)
 8005020:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005024:	685a      	ldr	r2, [r3, #4]
 8005026:	4b10      	ldr	r3, [pc, #64]	; (8005068 <pvPortMalloc+0x174>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	431a      	orrs	r2, r3
 800502c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800502e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005032:	2200      	movs	r2, #0
 8005034:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005036:	f7ff fa77 	bl	8004528 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800503a:	69fb      	ldr	r3, [r7, #28]
 800503c:	f003 0307 	and.w	r3, r3, #7
 8005040:	2b00      	cmp	r3, #0
 8005042:	d009      	beq.n	8005058 <pvPortMalloc+0x164>
 8005044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005048:	f383 8811 	msr	BASEPRI, r3
 800504c:	f3bf 8f6f 	isb	sy
 8005050:	f3bf 8f4f 	dsb	sy
 8005054:	60fb      	str	r3, [r7, #12]
 8005056:	e7fe      	b.n	8005056 <pvPortMalloc+0x162>
	return pvReturn;
 8005058:	69fb      	ldr	r3, [r7, #28]
}
 800505a:	4618      	mov	r0, r3
 800505c:	3728      	adds	r7, #40	; 0x28
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}
 8005062:	bf00      	nop
 8005064:	20000e08 	.word	0x20000e08
 8005068:	20000e14 	.word	0x20000e14
 800506c:	20000e0c 	.word	0x20000e0c
 8005070:	20000e00 	.word	0x20000e00
 8005074:	20000e10 	.word	0x20000e10

08005078 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b086      	sub	sp, #24
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d046      	beq.n	8005118 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800508a:	2308      	movs	r3, #8
 800508c:	425b      	negs	r3, r3
 800508e:	697a      	ldr	r2, [r7, #20]
 8005090:	4413      	add	r3, r2
 8005092:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	685a      	ldr	r2, [r3, #4]
 800509c:	4b20      	ldr	r3, [pc, #128]	; (8005120 <vPortFree+0xa8>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4013      	ands	r3, r2
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d109      	bne.n	80050ba <vPortFree+0x42>
 80050a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050aa:	f383 8811 	msr	BASEPRI, r3
 80050ae:	f3bf 8f6f 	isb	sy
 80050b2:	f3bf 8f4f 	dsb	sy
 80050b6:	60fb      	str	r3, [r7, #12]
 80050b8:	e7fe      	b.n	80050b8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d009      	beq.n	80050d6 <vPortFree+0x5e>
 80050c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050c6:	f383 8811 	msr	BASEPRI, r3
 80050ca:	f3bf 8f6f 	isb	sy
 80050ce:	f3bf 8f4f 	dsb	sy
 80050d2:	60bb      	str	r3, [r7, #8]
 80050d4:	e7fe      	b.n	80050d4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	685a      	ldr	r2, [r3, #4]
 80050da:	4b11      	ldr	r3, [pc, #68]	; (8005120 <vPortFree+0xa8>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4013      	ands	r3, r2
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d019      	beq.n	8005118 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d115      	bne.n	8005118 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	685a      	ldr	r2, [r3, #4]
 80050f0:	4b0b      	ldr	r3, [pc, #44]	; (8005120 <vPortFree+0xa8>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	43db      	mvns	r3, r3
 80050f6:	401a      	ands	r2, r3
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80050fc:	f7ff fa06 	bl	800450c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	685a      	ldr	r2, [r3, #4]
 8005104:	4b07      	ldr	r3, [pc, #28]	; (8005124 <vPortFree+0xac>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4413      	add	r3, r2
 800510a:	4a06      	ldr	r2, [pc, #24]	; (8005124 <vPortFree+0xac>)
 800510c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800510e:	6938      	ldr	r0, [r7, #16]
 8005110:	f000 f86c 	bl	80051ec <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005114:	f7ff fa08 	bl	8004528 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005118:	bf00      	nop
 800511a:	3718      	adds	r7, #24
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}
 8005120:	20000e14 	.word	0x20000e14
 8005124:	20000e0c 	.word	0x20000e0c

08005128 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005128:	b480      	push	{r7}
 800512a:	b085      	sub	sp, #20
 800512c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800512e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8005132:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005134:	4b27      	ldr	r3, [pc, #156]	; (80051d4 <prvHeapInit+0xac>)
 8005136:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f003 0307 	and.w	r3, r3, #7
 800513e:	2b00      	cmp	r3, #0
 8005140:	d00c      	beq.n	800515c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	3307      	adds	r3, #7
 8005146:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f023 0307 	bic.w	r3, r3, #7
 800514e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005150:	68ba      	ldr	r2, [r7, #8]
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	1ad3      	subs	r3, r2, r3
 8005156:	4a1f      	ldr	r2, [pc, #124]	; (80051d4 <prvHeapInit+0xac>)
 8005158:	4413      	add	r3, r2
 800515a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005160:	4a1d      	ldr	r2, [pc, #116]	; (80051d8 <prvHeapInit+0xb0>)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005166:	4b1c      	ldr	r3, [pc, #112]	; (80051d8 <prvHeapInit+0xb0>)
 8005168:	2200      	movs	r2, #0
 800516a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	68ba      	ldr	r2, [r7, #8]
 8005170:	4413      	add	r3, r2
 8005172:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005174:	2208      	movs	r2, #8
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	1a9b      	subs	r3, r3, r2
 800517a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f023 0307 	bic.w	r3, r3, #7
 8005182:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	4a15      	ldr	r2, [pc, #84]	; (80051dc <prvHeapInit+0xb4>)
 8005188:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800518a:	4b14      	ldr	r3, [pc, #80]	; (80051dc <prvHeapInit+0xb4>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	2200      	movs	r2, #0
 8005190:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005192:	4b12      	ldr	r3, [pc, #72]	; (80051dc <prvHeapInit+0xb4>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	2200      	movs	r2, #0
 8005198:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	68fa      	ldr	r2, [r7, #12]
 80051a2:	1ad2      	subs	r2, r2, r3
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80051a8:	4b0c      	ldr	r3, [pc, #48]	; (80051dc <prvHeapInit+0xb4>)
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	4a0a      	ldr	r2, [pc, #40]	; (80051e0 <prvHeapInit+0xb8>)
 80051b6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	4a09      	ldr	r2, [pc, #36]	; (80051e4 <prvHeapInit+0xbc>)
 80051be:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80051c0:	4b09      	ldr	r3, [pc, #36]	; (80051e8 <prvHeapInit+0xc0>)
 80051c2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80051c6:	601a      	str	r2, [r3, #0]
}
 80051c8:	bf00      	nop
 80051ca:	3714      	adds	r7, #20
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr
 80051d4:	20000248 	.word	0x20000248
 80051d8:	20000e00 	.word	0x20000e00
 80051dc:	20000e08 	.word	0x20000e08
 80051e0:	20000e10 	.word	0x20000e10
 80051e4:	20000e0c 	.word	0x20000e0c
 80051e8:	20000e14 	.word	0x20000e14

080051ec <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80051ec:	b480      	push	{r7}
 80051ee:	b085      	sub	sp, #20
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80051f4:	4b28      	ldr	r3, [pc, #160]	; (8005298 <prvInsertBlockIntoFreeList+0xac>)
 80051f6:	60fb      	str	r3, [r7, #12]
 80051f8:	e002      	b.n	8005200 <prvInsertBlockIntoFreeList+0x14>
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	60fb      	str	r3, [r7, #12]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	687a      	ldr	r2, [r7, #4]
 8005206:	429a      	cmp	r2, r3
 8005208:	d8f7      	bhi.n	80051fa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	68ba      	ldr	r2, [r7, #8]
 8005214:	4413      	add	r3, r2
 8005216:	687a      	ldr	r2, [r7, #4]
 8005218:	429a      	cmp	r2, r3
 800521a:	d108      	bne.n	800522e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	685a      	ldr	r2, [r3, #4]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	441a      	add	r2, r3
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	68ba      	ldr	r2, [r7, #8]
 8005238:	441a      	add	r2, r3
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	429a      	cmp	r2, r3
 8005240:	d118      	bne.n	8005274 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681a      	ldr	r2, [r3, #0]
 8005246:	4b15      	ldr	r3, [pc, #84]	; (800529c <prvInsertBlockIntoFreeList+0xb0>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	429a      	cmp	r2, r3
 800524c:	d00d      	beq.n	800526a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	685a      	ldr	r2, [r3, #4]
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	441a      	add	r2, r3
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	601a      	str	r2, [r3, #0]
 8005268:	e008      	b.n	800527c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800526a:	4b0c      	ldr	r3, [pc, #48]	; (800529c <prvInsertBlockIntoFreeList+0xb0>)
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	601a      	str	r2, [r3, #0]
 8005272:	e003      	b.n	800527c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800527c:	68fa      	ldr	r2, [r7, #12]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	429a      	cmp	r2, r3
 8005282:	d002      	beq.n	800528a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	687a      	ldr	r2, [r7, #4]
 8005288:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800528a:	bf00      	nop
 800528c:	3714      	adds	r7, #20
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr
 8005296:	bf00      	nop
 8005298:	20000e00 	.word	0x20000e00
 800529c:	20000e08 	.word	0x20000e08

080052a0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80052a0:	b480      	push	{r7}
 80052a2:	b085      	sub	sp, #20
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	60f8      	str	r0, [r7, #12]
 80052a8:	60b9      	str	r1, [r7, #8]
 80052aa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	4a07      	ldr	r2, [pc, #28]	; (80052cc <vApplicationGetIdleTaskMemory+0x2c>)
 80052b0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	4a06      	ldr	r2, [pc, #24]	; (80052d0 <vApplicationGetIdleTaskMemory+0x30>)
 80052b6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2280      	movs	r2, #128	; 0x80
 80052bc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80052be:	bf00      	nop
 80052c0:	3714      	adds	r7, #20
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr
 80052ca:	bf00      	nop
 80052cc:	20000e18 	.word	0x20000e18
 80052d0:	20000e6c 	.word	0x20000e6c

080052d4 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b084      	sub	sp, #16
 80052d8:	af00      	add	r7, sp, #0
 80052da:	4603      	mov	r3, r0
 80052dc:	6039      	str	r1, [r7, #0]
 80052de:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 80052e0:	88fb      	ldrh	r3, [r7, #6]
 80052e2:	b2db      	uxtb	r3, r3
 80052e4:	2120      	movs	r1, #32
 80052e6:	4618      	mov	r0, r3
 80052e8:	f000 ff7e 	bl	80061e8 <SENSOR_IO_Read>
 80052ec:	4603      	mov	r3, r0
 80052ee:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 80052f0:	7bfb      	ldrb	r3, [r7, #15]
 80052f2:	f023 0304 	bic.w	r3, r3, #4
 80052f6:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 80052f8:	7bfb      	ldrb	r3, [r7, #15]
 80052fa:	f043 0304 	orr.w	r3, r3, #4
 80052fe:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8005300:	7bfb      	ldrb	r3, [r7, #15]
 8005302:	f023 0303 	bic.w	r3, r3, #3
 8005306:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8005308:	7bfb      	ldrb	r3, [r7, #15]
 800530a:	f043 0301 	orr.w	r3, r3, #1
 800530e:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8005310:	7bfb      	ldrb	r3, [r7, #15]
 8005312:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005316:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8005318:	88fb      	ldrh	r3, [r7, #6]
 800531a:	b2db      	uxtb	r3, r3
 800531c:	7bfa      	ldrb	r2, [r7, #15]
 800531e:	2120      	movs	r1, #32
 8005320:	4618      	mov	r0, r3
 8005322:	f000 ff47 	bl	80061b4 <SENSOR_IO_Write>
}
 8005326:	bf00      	nop
 8005328:	3710      	adds	r7, #16
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}

0800532e <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 800532e:	b580      	push	{r7, lr}
 8005330:	b088      	sub	sp, #32
 8005332:	af00      	add	r7, sp, #0
 8005334:	4603      	mov	r3, r0
 8005336:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8005338:	88fb      	ldrh	r3, [r7, #6]
 800533a:	b2d8      	uxtb	r0, r3
 800533c:	f107 0208 	add.w	r2, r7, #8
 8005340:	2302      	movs	r3, #2
 8005342:	21b2      	movs	r1, #178	; 0xb2
 8005344:	f000 ff6e 	bl	8006224 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8005348:	88fb      	ldrh	r3, [r7, #6]
 800534a:	b2db      	uxtb	r3, r3
 800534c:	2135      	movs	r1, #53	; 0x35
 800534e:	4618      	mov	r0, r3
 8005350:	f000 ff4a 	bl	80061e8 <SENSOR_IO_Read>
 8005354:	4603      	mov	r3, r0
 8005356:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8005358:	7ffb      	ldrb	r3, [r7, #31]
 800535a:	021b      	lsls	r3, r3, #8
 800535c:	b21b      	sxth	r3, r3
 800535e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005362:	b21a      	sxth	r2, r3
 8005364:	7a3b      	ldrb	r3, [r7, #8]
 8005366:	b21b      	sxth	r3, r3
 8005368:	4313      	orrs	r3, r2
 800536a:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 800536c:	7ffb      	ldrb	r3, [r7, #31]
 800536e:	019b      	lsls	r3, r3, #6
 8005370:	b21b      	sxth	r3, r3
 8005372:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005376:	b21a      	sxth	r2, r3
 8005378:	7a7b      	ldrb	r3, [r7, #9]
 800537a:	b21b      	sxth	r3, r3
 800537c:	4313      	orrs	r3, r2
 800537e:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 8005380:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8005384:	10db      	asrs	r3, r3, #3
 8005386:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 8005388:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800538c:	10db      	asrs	r3, r3, #3
 800538e:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8005390:	88fb      	ldrh	r3, [r7, #6]
 8005392:	b2d8      	uxtb	r0, r3
 8005394:	f107 0208 	add.w	r2, r7, #8
 8005398:	2304      	movs	r3, #4
 800539a:	21bc      	movs	r1, #188	; 0xbc
 800539c:	f000 ff42 	bl	8006224 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80053a0:	7a7b      	ldrb	r3, [r7, #9]
 80053a2:	021b      	lsls	r3, r3, #8
 80053a4:	b21a      	sxth	r2, r3
 80053a6:	7a3b      	ldrb	r3, [r7, #8]
 80053a8:	b21b      	sxth	r3, r3
 80053aa:	4313      	orrs	r3, r2
 80053ac:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 80053ae:	7afb      	ldrb	r3, [r7, #11]
 80053b0:	021b      	lsls	r3, r3, #8
 80053b2:	b21a      	sxth	r2, r3
 80053b4:	7abb      	ldrb	r3, [r7, #10]
 80053b6:	b21b      	sxth	r3, r3
 80053b8:	4313      	orrs	r3, r2
 80053ba:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 80053bc:	88fb      	ldrh	r3, [r7, #6]
 80053be:	b2d8      	uxtb	r0, r3
 80053c0:	f107 0208 	add.w	r2, r7, #8
 80053c4:	2302      	movs	r3, #2
 80053c6:	21aa      	movs	r1, #170	; 0xaa
 80053c8:	f000 ff2c 	bl	8006224 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80053cc:	7a7b      	ldrb	r3, [r7, #9]
 80053ce:	021b      	lsls	r3, r3, #8
 80053d0:	b21a      	sxth	r2, r3
 80053d2:	7a3b      	ldrb	r3, [r7, #8]
 80053d4:	b21b      	sxth	r3, r3
 80053d6:	4313      	orrs	r3, r2
 80053d8:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 80053da:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80053de:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80053e2:	1ad3      	subs	r3, r2, r3
 80053e4:	ee07 3a90 	vmov	s15, r3
 80053e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80053ec:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80053f0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80053f4:	1ad3      	subs	r3, r2, r3
 80053f6:	ee07 3a90 	vmov	s15, r3
 80053fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80053fe:	ee67 6a27 	vmul.f32	s13, s14, s15
 8005402:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8005406:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800540a:	1ad3      	subs	r3, r2, r3
 800540c:	ee07 3a90 	vmov	s15, r3
 8005410:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005414:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005418:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800541c:	ee07 3a90 	vmov	s15, r3
 8005420:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005424:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005428:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	ee07 3a90 	vmov	s15, r3
}
 8005432:	eeb0 0a67 	vmov.f32	s0, s15
 8005436:	3720      	adds	r7, #32
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}

0800543c <LIS3MDL_MagInit>:
  * @brief  Set LIS3MDL Magnetometer Initialization.
  * @param  LIS3MDL_InitStruct: pointer to a LIS3MDL_MagInitTypeDef structure 
  *         that contains the configuration setting for the LIS3MDL.
  */
void LIS3MDL_MagInit(MAGNETO_InitTypeDef LIS3MDL_InitStruct)
{  
 800543c:	b580      	push	{r7, lr}
 800543e:	b082      	sub	sp, #8
 8005440:	af00      	add	r7, sp, #0
 8005442:	463b      	mov	r3, r7
 8005444:	e883 0003 	stmia.w	r3, {r0, r1}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG1, LIS3MDL_InitStruct.Register1);
 8005448:	783b      	ldrb	r3, [r7, #0]
 800544a:	461a      	mov	r2, r3
 800544c:	2120      	movs	r1, #32
 800544e:	203c      	movs	r0, #60	; 0x3c
 8005450:	f000 feb0 	bl	80061b4 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2, LIS3MDL_InitStruct.Register2);
 8005454:	787b      	ldrb	r3, [r7, #1]
 8005456:	461a      	mov	r2, r3
 8005458:	2121      	movs	r1, #33	; 0x21
 800545a:	203c      	movs	r0, #60	; 0x3c
 800545c:	f000 feaa 	bl	80061b4 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, LIS3MDL_InitStruct.Register3);
 8005460:	78bb      	ldrb	r3, [r7, #2]
 8005462:	461a      	mov	r2, r3
 8005464:	2122      	movs	r1, #34	; 0x22
 8005466:	203c      	movs	r0, #60	; 0x3c
 8005468:	f000 fea4 	bl	80061b4 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG4, LIS3MDL_InitStruct.Register4);
 800546c:	78fb      	ldrb	r3, [r7, #3]
 800546e:	461a      	mov	r2, r3
 8005470:	2123      	movs	r1, #35	; 0x23
 8005472:	203c      	movs	r0, #60	; 0x3c
 8005474:	f000 fe9e 	bl	80061b4 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG5, LIS3MDL_InitStruct.Register5);
 8005478:	793b      	ldrb	r3, [r7, #4]
 800547a:	461a      	mov	r2, r3
 800547c:	2124      	movs	r1, #36	; 0x24
 800547e:	203c      	movs	r0, #60	; 0x3c
 8005480:	f000 fe98 	bl	80061b4 <SENSOR_IO_Write>
}
 8005484:	bf00      	nop
 8005486:	3708      	adds	r7, #8
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}

0800548c <LIS3MDL_MagDeInit>:

/**
  * @brief  LIS3MDL Magnetometer De-initialization.
  */
void LIS3MDL_MagDeInit(void)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b082      	sub	sp, #8
 8005490:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8005492:	2300      	movs	r3, #0
 8005494:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 8005496:	2122      	movs	r1, #34	; 0x22
 8005498:	203c      	movs	r0, #60	; 0x3c
 800549a:	f000 fea5 	bl	80061e8 <SENSOR_IO_Read>
 800549e:	4603      	mov	r3, r0
 80054a0:	71fb      	strb	r3, [r7, #7]

  /* Clear Selection Mode bits */
  ctrl &= ~(LIS3MDL_MAG_SELECTION_MODE);
 80054a2:	79fb      	ldrb	r3, [r7, #7]
 80054a4:	f023 0303 	bic.w	r3, r3, #3
 80054a8:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LIS3MDL_MAG_POWERDOWN2_MODE;
 80054aa:	79fb      	ldrb	r3, [r7, #7]
 80054ac:	f043 0303 	orr.w	r3, r3, #3
 80054b0:	71fb      	strb	r3, [r7, #7]
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 80054b2:	79fb      	ldrb	r3, [r7, #7]
 80054b4:	461a      	mov	r2, r3
 80054b6:	2122      	movs	r1, #34	; 0x22
 80054b8:	203c      	movs	r0, #60	; 0x3c
 80054ba:	f000 fe7b 	bl	80061b4 <SENSOR_IO_Write>
}
 80054be:	bf00      	nop
 80054c0:	3708      	adds	r7, #8
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}

080054c6 <LIS3MDL_MagReadID>:
/**
  * @brief  Read LIS3MDL ID.
  * @retval ID 
  */
uint8_t LIS3MDL_MagReadID(void)
{
 80054c6:	b580      	push	{r7, lr}
 80054c8:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 80054ca:	f000 fe69 	bl	80061a0 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_WHO_AM_I_REG));
 80054ce:	210f      	movs	r1, #15
 80054d0:	203c      	movs	r0, #60	; 0x3c
 80054d2:	f000 fe89 	bl	80061e8 <SENSOR_IO_Read>
 80054d6:	4603      	mov	r3, r0
}
 80054d8:	4618      	mov	r0, r3
 80054da:	bd80      	pop	{r7, pc}

080054dc <LIS3MDL_MagLowPower>:
/**
  * @brief  Set/Unset Magnetometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LIS3MDL_MagLowPower(uint16_t status)
{  
 80054dc:	b580      	push	{r7, lr}
 80054de:	b084      	sub	sp, #16
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	4603      	mov	r3, r0
 80054e4:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0;
 80054e6:	2300      	movs	r3, #0
 80054e8:	73fb      	strb	r3, [r7, #15]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 80054ea:	2122      	movs	r1, #34	; 0x22
 80054ec:	203c      	movs	r0, #60	; 0x3c
 80054ee:	f000 fe7b 	bl	80061e8 <SENSOR_IO_Read>
 80054f2:	4603      	mov	r3, r0
 80054f4:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x20);
 80054f6:	7bfb      	ldrb	r3, [r7, #15]
 80054f8:	f023 0320 	bic.w	r3, r3, #32
 80054fc:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 80054fe:	88fb      	ldrh	r3, [r7, #6]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d003      	beq.n	800550c <LIS3MDL_MagLowPower+0x30>
  {
    ctrl |= LIS3MDL_MAG_CONFIG_LOWPOWER_MODE;
 8005504:	7bfb      	ldrb	r3, [r7, #15]
 8005506:	f043 0320 	orr.w	r3, r3, #32
 800550a:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LIS3MDL_MAG_CONFIG_NORMAL_MODE;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 800550c:	7bfb      	ldrb	r3, [r7, #15]
 800550e:	461a      	mov	r2, r3
 8005510:	2122      	movs	r1, #34	; 0x22
 8005512:	203c      	movs	r0, #60	; 0x3c
 8005514:	f000 fe4e 	bl	80061b4 <SENSOR_IO_Write>
}
 8005518:	bf00      	nop
 800551a:	3710      	adds	r7, #16
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}

08005520 <LIS3MDL_MagReadXYZ>:
/**
  * @brief  Read X, Y & Z Magnetometer values 
  * @param  pData: Data out pointer
  */
void LIS3MDL_MagReadXYZ(int16_t* pData)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b088      	sub	sp, #32
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlm= 0;
 8005528:	2300      	movs	r3, #0
 800552a:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 800552c:	2300      	movs	r3, #0
 800552e:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8005530:	f04f 0300 	mov.w	r3, #0
 8005534:	61bb      	str	r3, [r7, #24]
  
  /* Read the magnetometer control register content */
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 8005536:	2121      	movs	r1, #33	; 0x21
 8005538:	203c      	movs	r0, #60	; 0x3c
 800553a:	f000 fe55 	bl	80061e8 <SENSOR_IO_Read>
 800553e:	4603      	mov	r3, r0
 8005540:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LIS3MDL_MAG_I2C_ADDRESS_HIGH, (LIS3MDL_MAG_OUTX_L | 0x80), buffer, 6);
 8005542:	f107 0208 	add.w	r2, r7, #8
 8005546:	2306      	movs	r3, #6
 8005548:	21a8      	movs	r1, #168	; 0xa8
 800554a:	203c      	movs	r0, #60	; 0x3c
 800554c:	f000 fe6a 	bl	8006224 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8005550:	2300      	movs	r3, #0
 8005552:	77fb      	strb	r3, [r7, #31]
 8005554:	e01f      	b.n	8005596 <LIS3MDL_MagReadXYZ+0x76>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8005556:	7ffb      	ldrb	r3, [r7, #31]
 8005558:	005b      	lsls	r3, r3, #1
 800555a:	3301      	adds	r3, #1
 800555c:	f107 0220 	add.w	r2, r7, #32
 8005560:	4413      	add	r3, r2
 8005562:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8005566:	b29b      	uxth	r3, r3
 8005568:	021b      	lsls	r3, r3, #8
 800556a:	b29a      	uxth	r2, r3
 800556c:	7ffb      	ldrb	r3, [r7, #31]
 800556e:	005b      	lsls	r3, r3, #1
 8005570:	f107 0120 	add.w	r1, r7, #32
 8005574:	440b      	add	r3, r1
 8005576:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800557a:	b29b      	uxth	r3, r3
 800557c:	4413      	add	r3, r2
 800557e:	b29a      	uxth	r2, r3
 8005580:	7ffb      	ldrb	r3, [r7, #31]
 8005582:	b212      	sxth	r2, r2
 8005584:	005b      	lsls	r3, r3, #1
 8005586:	f107 0120 	add.w	r1, r7, #32
 800558a:	440b      	add	r3, r1
 800558c:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8005590:	7ffb      	ldrb	r3, [r7, #31]
 8005592:	3301      	adds	r3, #1
 8005594:	77fb      	strb	r3, [r7, #31]
 8005596:	7ffb      	ldrb	r3, [r7, #31]
 8005598:	2b02      	cmp	r3, #2
 800559a:	d9dc      	bls.n	8005556 <LIS3MDL_MagReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL_REG2 */
  switch(ctrlm & 0x60)
 800559c:	7dfb      	ldrb	r3, [r7, #23]
 800559e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80055a2:	2b20      	cmp	r3, #32
 80055a4:	d00c      	beq.n	80055c0 <LIS3MDL_MagReadXYZ+0xa0>
 80055a6:	2b20      	cmp	r3, #32
 80055a8:	dc02      	bgt.n	80055b0 <LIS3MDL_MagReadXYZ+0x90>
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d005      	beq.n	80055ba <LIS3MDL_MagReadXYZ+0x9a>
 80055ae:	e010      	b.n	80055d2 <LIS3MDL_MagReadXYZ+0xb2>
 80055b0:	2b40      	cmp	r3, #64	; 0x40
 80055b2:	d008      	beq.n	80055c6 <LIS3MDL_MagReadXYZ+0xa6>
 80055b4:	2b60      	cmp	r3, #96	; 0x60
 80055b6:	d009      	beq.n	80055cc <LIS3MDL_MagReadXYZ+0xac>
 80055b8:	e00b      	b.n	80055d2 <LIS3MDL_MagReadXYZ+0xb2>
  {
  case LIS3MDL_MAG_FS_4_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_4GA;
 80055ba:	4b19      	ldr	r3, [pc, #100]	; (8005620 <LIS3MDL_MagReadXYZ+0x100>)
 80055bc:	61bb      	str	r3, [r7, #24]
    break;
 80055be:	e008      	b.n	80055d2 <LIS3MDL_MagReadXYZ+0xb2>
  case LIS3MDL_MAG_FS_8_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_8GA;
 80055c0:	4b18      	ldr	r3, [pc, #96]	; (8005624 <LIS3MDL_MagReadXYZ+0x104>)
 80055c2:	61bb      	str	r3, [r7, #24]
    break;
 80055c4:	e005      	b.n	80055d2 <LIS3MDL_MagReadXYZ+0xb2>
  case LIS3MDL_MAG_FS_12_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_12GA;
 80055c6:	4b18      	ldr	r3, [pc, #96]	; (8005628 <LIS3MDL_MagReadXYZ+0x108>)
 80055c8:	61bb      	str	r3, [r7, #24]
    break;
 80055ca:	e002      	b.n	80055d2 <LIS3MDL_MagReadXYZ+0xb2>
  case LIS3MDL_MAG_FS_16_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_16GA;
 80055cc:	4b17      	ldr	r3, [pc, #92]	; (800562c <LIS3MDL_MagReadXYZ+0x10c>)
 80055ce:	61bb      	str	r3, [r7, #24]
    break;    
 80055d0:	bf00      	nop
  }
  
  /* Obtain the mGauss value for the three axis */
  for(i=0; i<3; i++)
 80055d2:	2300      	movs	r3, #0
 80055d4:	77fb      	strb	r3, [r7, #31]
 80055d6:	e01b      	b.n	8005610 <LIS3MDL_MagReadXYZ+0xf0>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 80055d8:	7ffb      	ldrb	r3, [r7, #31]
 80055da:	005b      	lsls	r3, r3, #1
 80055dc:	f107 0220 	add.w	r2, r7, #32
 80055e0:	4413      	add	r3, r2
 80055e2:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80055e6:	ee07 3a90 	vmov	s15, r3
 80055ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80055ee:	edd7 7a06 	vldr	s15, [r7, #24]
 80055f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055f6:	7ffb      	ldrb	r3, [r7, #31]
 80055f8:	005b      	lsls	r3, r3, #1
 80055fa:	687a      	ldr	r2, [r7, #4]
 80055fc:	4413      	add	r3, r2
 80055fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005602:	ee17 2a90 	vmov	r2, s15
 8005606:	b212      	sxth	r2, r2
 8005608:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 800560a:	7ffb      	ldrb	r3, [r7, #31]
 800560c:	3301      	adds	r3, #1
 800560e:	77fb      	strb	r3, [r7, #31]
 8005610:	7ffb      	ldrb	r3, [r7, #31]
 8005612:	2b02      	cmp	r3, #2
 8005614:	d9e0      	bls.n	80055d8 <LIS3MDL_MagReadXYZ+0xb8>
  }
}
 8005616:	bf00      	nop
 8005618:	3720      	adds	r7, #32
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}
 800561e:	bf00      	nop
 8005620:	3e0f5c29 	.word	0x3e0f5c29
 8005624:	3e947ae1 	.word	0x3e947ae1
 8005628:	3edc28f6 	.word	0x3edc28f6
 800562c:	3f147ae1 	.word	0x3f147ae1

08005630 <LPS22HB_P_Init>:
  */
/**
  * @brief  Set LPS22HB pressure sensor Initialization.
  */
void LPS22HB_P_Init(uint16_t DeviceAddr)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b082      	sub	sp, #8
 8005634:	af00      	add	r7, sp, #0
 8005636:	4603      	mov	r3, r0
 8005638:	80fb      	strh	r3, [r7, #6]
  LPS22HB_Init(DeviceAddr);
 800563a:	88fb      	ldrh	r3, [r7, #6]
 800563c:	4618      	mov	r0, r3
 800563e:	f000 f87b 	bl	8005738 <LPS22HB_Init>
}
 8005642:	bf00      	nop
 8005644:	3708      	adds	r7, #8
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}

0800564a <LPS22HB_P_ReadID>:
/**
  * @brief  Read LPS22HB ID.
  * @retval ID 
  */
uint8_t LPS22HB_P_ReadID(uint16_t DeviceAddr)
{  
 800564a:	b580      	push	{r7, lr}
 800564c:	b084      	sub	sp, #16
 800564e:	af00      	add	r7, sp, #0
 8005650:	4603      	mov	r3, r0
 8005652:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8005654:	2300      	movs	r3, #0
 8005656:	73fb      	strb	r3, [r7, #15]

  /* IO interface initialization */
  SENSOR_IO_Init();  
 8005658:	f000 fda2 	bl	80061a0 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 800565c:	88fb      	ldrh	r3, [r7, #6]
 800565e:	b2db      	uxtb	r3, r3
 8005660:	210f      	movs	r1, #15
 8005662:	4618      	mov	r0, r3
 8005664:	f000 fdc0 	bl	80061e8 <SENSOR_IO_Read>
 8005668:	4603      	mov	r3, r0
 800566a:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 800566c:	7bfb      	ldrb	r3, [r7, #15]
}
 800566e:	4618      	mov	r0, r3
 8005670:	3710      	adds	r7, #16
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}
	...

08005678 <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 8005678:	b590      	push	{r4, r7, lr}
 800567a:	b087      	sub	sp, #28
 800567c:	af00      	add	r7, sp, #0
 800567e:	4603      	mov	r3, r0
 8005680:	80fb      	strh	r3, [r7, #6]
  int32_t raw_press;
  uint8_t buffer[3];
  uint32_t tmp = 0;
 8005682:	2300      	movs	r3, #0
 8005684:	617b      	str	r3, [r7, #20]
  uint8_t i;

  for(i = 0; i < 3; i++)
 8005686:	2300      	movs	r3, #0
 8005688:	74fb      	strb	r3, [r7, #19]
 800568a:	e013      	b.n	80056b4 <LPS22HB_P_ReadPressure+0x3c>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 800568c:	88fb      	ldrh	r3, [r7, #6]
 800568e:	b2da      	uxtb	r2, r3
 8005690:	7cfb      	ldrb	r3, [r7, #19]
 8005692:	3328      	adds	r3, #40	; 0x28
 8005694:	b2db      	uxtb	r3, r3
 8005696:	7cfc      	ldrb	r4, [r7, #19]
 8005698:	4619      	mov	r1, r3
 800569a:	4610      	mov	r0, r2
 800569c:	f000 fda4 	bl	80061e8 <SENSOR_IO_Read>
 80056a0:	4603      	mov	r3, r0
 80056a2:	461a      	mov	r2, r3
 80056a4:	f107 0318 	add.w	r3, r7, #24
 80056a8:	4423      	add	r3, r4
 80056aa:	f803 2c10 	strb.w	r2, [r3, #-16]
  for(i = 0; i < 3; i++)
 80056ae:	7cfb      	ldrb	r3, [r7, #19]
 80056b0:	3301      	adds	r3, #1
 80056b2:	74fb      	strb	r3, [r7, #19]
 80056b4:	7cfb      	ldrb	r3, [r7, #19]
 80056b6:	2b02      	cmp	r3, #2
 80056b8:	d9e8      	bls.n	800568c <LPS22HB_P_ReadPressure+0x14>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
 80056ba:	2300      	movs	r3, #0
 80056bc:	74fb      	strb	r3, [r7, #19]
 80056be:	e010      	b.n	80056e2 <LPS22HB_P_ReadPressure+0x6a>
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 80056c0:	7cfb      	ldrb	r3, [r7, #19]
 80056c2:	f107 0218 	add.w	r2, r7, #24
 80056c6:	4413      	add	r3, r2
 80056c8:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80056cc:	461a      	mov	r2, r3
 80056ce:	7cfb      	ldrb	r3, [r7, #19]
 80056d0:	00db      	lsls	r3, r3, #3
 80056d2:	fa02 f303 	lsl.w	r3, r2, r3
 80056d6:	697a      	ldr	r2, [r7, #20]
 80056d8:	4313      	orrs	r3, r2
 80056da:	617b      	str	r3, [r7, #20]
  for(i = 0; i < 3; i++)
 80056dc:	7cfb      	ldrb	r3, [r7, #19]
 80056de:	3301      	adds	r3, #1
 80056e0:	74fb      	strb	r3, [r7, #19]
 80056e2:	7cfb      	ldrb	r3, [r7, #19]
 80056e4:	2b02      	cmp	r3, #2
 80056e6:	d9eb      	bls.n	80056c0 <LPS22HB_P_ReadPressure+0x48>

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d003      	beq.n	80056fa <LPS22HB_P_ReadPressure+0x82>
    tmp |= 0xFF000000;
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056f8:	617b      	str	r3, [r7, #20]

  raw_press = ((int32_t)tmp);
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	60fb      	str	r3, [r7, #12]

  raw_press = (raw_press * 100) / 4096;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2264      	movs	r2, #100	; 0x64
 8005702:	fb02 f303 	mul.w	r3, r2, r3
 8005706:	2b00      	cmp	r3, #0
 8005708:	da01      	bge.n	800570e <LPS22HB_P_ReadPressure+0x96>
 800570a:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800570e:	131b      	asrs	r3, r3, #12
 8005710:	60fb      	str	r3, [r7, #12]

  return (float)((float)raw_press / 100.0f);
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	ee07 3a90 	vmov	s15, r3
 8005718:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800571c:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8005734 <LPS22HB_P_ReadPressure+0xbc>
 8005720:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005724:	eef0 7a66 	vmov.f32	s15, s13
}
 8005728:	eeb0 0a67 	vmov.f32	s0, s15
 800572c:	371c      	adds	r7, #28
 800572e:	46bd      	mov	sp, r7
 8005730:	bd90      	pop	{r4, r7, pc}
 8005732:	bf00      	nop
 8005734:	42c80000 	.word	0x42c80000

08005738 <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b084      	sub	sp, #16
 800573c:	af00      	add	r7, sp, #0
 800573e:	4603      	mov	r3, r0
 8005740:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 8005742:	88fb      	ldrh	r3, [r7, #6]
 8005744:	b2db      	uxtb	r3, r3
 8005746:	211a      	movs	r1, #26
 8005748:	4618      	mov	r0, r3
 800574a:	f000 fd4d 	bl	80061e8 <SENSOR_IO_Read>
 800574e:	4603      	mov	r3, r0
 8005750:	73fb      	strb	r3, [r7, #15]

  tmp &= ~LPS22HB_LCEN_MASK;
 8005752:	7bfb      	ldrb	r3, [r7, #15]
 8005754:	f023 0301 	bic.w	r3, r3, #1
 8005758:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set low current mode */
 800575a:	7bfb      	ldrb	r3, [r7, #15]
 800575c:	f043 0301 	orr.w	r3, r3, #1
 8005760:	73fb      	strb	r3, [r7, #15]

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 8005762:	88fb      	ldrh	r3, [r7, #6]
 8005764:	b2db      	uxtb	r3, r3
 8005766:	7bfa      	ldrb	r2, [r7, #15]
 8005768:	211a      	movs	r1, #26
 800576a:	4618      	mov	r0, r3
 800576c:	f000 fd22 	bl	80061b4 <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 8005770:	88fb      	ldrh	r3, [r7, #6]
 8005772:	b2db      	uxtb	r3, r3
 8005774:	2110      	movs	r1, #16
 8005776:	4618      	mov	r0, r3
 8005778:	f000 fd36 	bl	80061e8 <SENSOR_IO_Read>
 800577c:	4603      	mov	r3, r0
 800577e:	73fb      	strb	r3, [r7, #15]

  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
 8005780:	7bfb      	ldrb	r3, [r7, #15]
 8005782:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005786:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */
 8005788:	7bfb      	ldrb	r3, [r7, #15]
 800578a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800578e:	73fb      	strb	r3, [r7, #15]

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 8005790:	7bfb      	ldrb	r3, [r7, #15]
 8005792:	f023 0302 	bic.w	r3, r3, #2
 8005796:	73fb      	strb	r3, [r7, #15]
  tmp |= ((uint8_t)0x02);
 8005798:	7bfb      	ldrb	r3, [r7, #15]
 800579a:	f043 0302 	orr.w	r3, r3, #2
 800579e:	73fb      	strb	r3, [r7, #15]

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 80057a0:	88fb      	ldrh	r3, [r7, #6]
 80057a2:	b2db      	uxtb	r3, r3
 80057a4:	7bfa      	ldrb	r2, [r7, #15]
 80057a6:	2110      	movs	r1, #16
 80057a8:	4618      	mov	r0, r3
 80057aa:	f000 fd03 	bl	80061b4 <SENSOR_IO_Write>
}  
 80057ae:	bf00      	nop
 80057b0:	3710      	adds	r7, #16
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}

080057b6 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 80057b6:	b580      	push	{r7, lr}
 80057b8:	b084      	sub	sp, #16
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	4603      	mov	r3, r0
 80057be:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80057c0:	2300      	movs	r3, #0
 80057c2:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80057c4:	2110      	movs	r1, #16
 80057c6:	20d4      	movs	r0, #212	; 0xd4
 80057c8:	f000 fd0e 	bl	80061e8 <SENSOR_IO_Read>
 80057cc:	4603      	mov	r3, r0
 80057ce:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 80057d0:	88fb      	ldrh	r3, [r7, #6]
 80057d2:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 80057d4:	7bbb      	ldrb	r3, [r7, #14]
 80057d6:	f003 0303 	and.w	r3, r3, #3
 80057da:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 80057dc:	7bba      	ldrb	r2, [r7, #14]
 80057de:	7bfb      	ldrb	r3, [r7, #15]
 80057e0:	4313      	orrs	r3, r2
 80057e2:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 80057e4:	7bbb      	ldrb	r3, [r7, #14]
 80057e6:	461a      	mov	r2, r3
 80057e8:	2110      	movs	r1, #16
 80057ea:	20d4      	movs	r0, #212	; 0xd4
 80057ec:	f000 fce2 	bl	80061b4 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 80057f0:	2112      	movs	r1, #18
 80057f2:	20d4      	movs	r0, #212	; 0xd4
 80057f4:	f000 fcf8 	bl	80061e8 <SENSOR_IO_Read>
 80057f8:	4603      	mov	r3, r0
 80057fa:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 80057fc:	88fb      	ldrh	r3, [r7, #6]
 80057fe:	0a1b      	lsrs	r3, r3, #8
 8005800:	b29b      	uxth	r3, r3
 8005802:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8005804:	7bbb      	ldrb	r3, [r7, #14]
 8005806:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 800580a:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 800580c:	7bba      	ldrb	r2, [r7, #14]
 800580e:	7bfb      	ldrb	r3, [r7, #15]
 8005810:	4313      	orrs	r3, r2
 8005812:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8005814:	7bbb      	ldrb	r3, [r7, #14]
 8005816:	461a      	mov	r2, r3
 8005818:	2112      	movs	r1, #18
 800581a:	20d4      	movs	r0, #212	; 0xd4
 800581c:	f000 fcca 	bl	80061b4 <SENSOR_IO_Write>
}
 8005820:	bf00      	nop
 8005822:	3710      	adds	r7, #16
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}

08005828 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b082      	sub	sp, #8
 800582c:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 800582e:	2300      	movs	r3, #0
 8005830:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8005832:	2110      	movs	r1, #16
 8005834:	20d4      	movs	r0, #212	; 0xd4
 8005836:	f000 fcd7 	bl	80061e8 <SENSOR_IO_Read>
 800583a:	4603      	mov	r3, r0
 800583c:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 800583e:	79fb      	ldrb	r3, [r7, #7]
 8005840:	f003 030f 	and.w	r3, r3, #15
 8005844:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8005846:	79fb      	ldrb	r3, [r7, #7]
 8005848:	461a      	mov	r2, r3
 800584a:	2110      	movs	r1, #16
 800584c:	20d4      	movs	r0, #212	; 0xd4
 800584e:	f000 fcb1 	bl	80061b4 <SENSOR_IO_Write>
}
 8005852:	bf00      	nop
 8005854:	3708      	adds	r7, #8
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}

0800585a <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 800585a:	b580      	push	{r7, lr}
 800585c:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 800585e:	f000 fc9f 	bl	80061a0 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 8005862:	210f      	movs	r1, #15
 8005864:	20d4      	movs	r0, #212	; 0xd4
 8005866:	f000 fcbf 	bl	80061e8 <SENSOR_IO_Read>
 800586a:	4603      	mov	r3, r0
}
 800586c:	4618      	mov	r0, r3
 800586e:	bd80      	pop	{r7, pc}

08005870 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b084      	sub	sp, #16
 8005874:	af00      	add	r7, sp, #0
 8005876:	4603      	mov	r3, r0
 8005878:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800587a:	2300      	movs	r3, #0
 800587c:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 800587e:	2115      	movs	r1, #21
 8005880:	20d4      	movs	r0, #212	; 0xd4
 8005882:	f000 fcb1 	bl	80061e8 <SENSOR_IO_Read>
 8005886:	4603      	mov	r3, r0
 8005888:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 800588a:	7bfb      	ldrb	r3, [r7, #15]
 800588c:	f023 0310 	bic.w	r3, r3, #16
 8005890:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8005892:	88fb      	ldrh	r3, [r7, #6]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d003      	beq.n	80058a0 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 8005898:	7bfb      	ldrb	r3, [r7, #15]
 800589a:	f043 0310 	orr.w	r3, r3, #16
 800589e:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 80058a0:	7bfb      	ldrb	r3, [r7, #15]
 80058a2:	461a      	mov	r2, r3
 80058a4:	2115      	movs	r1, #21
 80058a6:	20d4      	movs	r0, #212	; 0xd4
 80058a8:	f000 fc84 	bl	80061b4 <SENSOR_IO_Write>
}
 80058ac:	bf00      	nop
 80058ae:	3710      	adds	r7, #16
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}

080058b4 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b088      	sub	sp, #32
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 80058bc:	2300      	movs	r3, #0
 80058be:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 80058c0:	2300      	movs	r3, #0
 80058c2:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 80058c4:	f04f 0300 	mov.w	r3, #0
 80058c8:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80058ca:	2110      	movs	r1, #16
 80058cc:	20d4      	movs	r0, #212	; 0xd4
 80058ce:	f000 fc8b 	bl	80061e8 <SENSOR_IO_Read>
 80058d2:	4603      	mov	r3, r0
 80058d4:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 80058d6:	f107 0208 	add.w	r2, r7, #8
 80058da:	2306      	movs	r3, #6
 80058dc:	2128      	movs	r1, #40	; 0x28
 80058de:	20d4      	movs	r0, #212	; 0xd4
 80058e0:	f000 fca0 	bl	8006224 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 80058e4:	2300      	movs	r3, #0
 80058e6:	77fb      	strb	r3, [r7, #31]
 80058e8:	e01f      	b.n	800592a <LSM6DSL_AccReadXYZ+0x76>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 80058ea:	7ffb      	ldrb	r3, [r7, #31]
 80058ec:	005b      	lsls	r3, r3, #1
 80058ee:	3301      	adds	r3, #1
 80058f0:	f107 0220 	add.w	r2, r7, #32
 80058f4:	4413      	add	r3, r2
 80058f6:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80058fa:	b29b      	uxth	r3, r3
 80058fc:	021b      	lsls	r3, r3, #8
 80058fe:	b29a      	uxth	r2, r3
 8005900:	7ffb      	ldrb	r3, [r7, #31]
 8005902:	005b      	lsls	r3, r3, #1
 8005904:	f107 0120 	add.w	r1, r7, #32
 8005908:	440b      	add	r3, r1
 800590a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800590e:	b29b      	uxth	r3, r3
 8005910:	4413      	add	r3, r2
 8005912:	b29a      	uxth	r2, r3
 8005914:	7ffb      	ldrb	r3, [r7, #31]
 8005916:	b212      	sxth	r2, r2
 8005918:	005b      	lsls	r3, r3, #1
 800591a:	f107 0120 	add.w	r1, r7, #32
 800591e:	440b      	add	r3, r1
 8005920:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8005924:	7ffb      	ldrb	r3, [r7, #31]
 8005926:	3301      	adds	r3, #1
 8005928:	77fb      	strb	r3, [r7, #31]
 800592a:	7ffb      	ldrb	r3, [r7, #31]
 800592c:	2b02      	cmp	r3, #2
 800592e:	d9dc      	bls.n	80058ea <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8005930:	7dfb      	ldrb	r3, [r7, #23]
 8005932:	f003 030c 	and.w	r3, r3, #12
 8005936:	2b0c      	cmp	r3, #12
 8005938:	d828      	bhi.n	800598c <LSM6DSL_AccReadXYZ+0xd8>
 800593a:	a201      	add	r2, pc, #4	; (adr r2, 8005940 <LSM6DSL_AccReadXYZ+0x8c>)
 800593c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005940:	08005975 	.word	0x08005975
 8005944:	0800598d 	.word	0x0800598d
 8005948:	0800598d 	.word	0x0800598d
 800594c:	0800598d 	.word	0x0800598d
 8005950:	08005987 	.word	0x08005987
 8005954:	0800598d 	.word	0x0800598d
 8005958:	0800598d 	.word	0x0800598d
 800595c:	0800598d 	.word	0x0800598d
 8005960:	0800597b 	.word	0x0800597b
 8005964:	0800598d 	.word	0x0800598d
 8005968:	0800598d 	.word	0x0800598d
 800596c:	0800598d 	.word	0x0800598d
 8005970:	08005981 	.word	0x08005981
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 8005974:	4b18      	ldr	r3, [pc, #96]	; (80059d8 <LSM6DSL_AccReadXYZ+0x124>)
 8005976:	61bb      	str	r3, [r7, #24]
    break;
 8005978:	e008      	b.n	800598c <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 800597a:	4b18      	ldr	r3, [pc, #96]	; (80059dc <LSM6DSL_AccReadXYZ+0x128>)
 800597c:	61bb      	str	r3, [r7, #24]
    break;
 800597e:	e005      	b.n	800598c <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8005980:	4b17      	ldr	r3, [pc, #92]	; (80059e0 <LSM6DSL_AccReadXYZ+0x12c>)
 8005982:	61bb      	str	r3, [r7, #24]
    break;
 8005984:	e002      	b.n	800598c <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 8005986:	4b17      	ldr	r3, [pc, #92]	; (80059e4 <LSM6DSL_AccReadXYZ+0x130>)
 8005988:	61bb      	str	r3, [r7, #24]
    break;    
 800598a:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 800598c:	2300      	movs	r3, #0
 800598e:	77fb      	strb	r3, [r7, #31]
 8005990:	e01b      	b.n	80059ca <LSM6DSL_AccReadXYZ+0x116>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8005992:	7ffb      	ldrb	r3, [r7, #31]
 8005994:	005b      	lsls	r3, r3, #1
 8005996:	f107 0220 	add.w	r2, r7, #32
 800599a:	4413      	add	r3, r2
 800599c:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80059a0:	ee07 3a90 	vmov	s15, r3
 80059a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80059a8:	edd7 7a06 	vldr	s15, [r7, #24]
 80059ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059b0:	7ffb      	ldrb	r3, [r7, #31]
 80059b2:	005b      	lsls	r3, r3, #1
 80059b4:	687a      	ldr	r2, [r7, #4]
 80059b6:	4413      	add	r3, r2
 80059b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80059bc:	ee17 2a90 	vmov	r2, s15
 80059c0:	b212      	sxth	r2, r2
 80059c2:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 80059c4:	7ffb      	ldrb	r3, [r7, #31]
 80059c6:	3301      	adds	r3, #1
 80059c8:	77fb      	strb	r3, [r7, #31]
 80059ca:	7ffb      	ldrb	r3, [r7, #31]
 80059cc:	2b02      	cmp	r3, #2
 80059ce:	d9e0      	bls.n	8005992 <LSM6DSL_AccReadXYZ+0xde>
  }
}
 80059d0:	bf00      	nop
 80059d2:	3720      	adds	r7, #32
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}
 80059d8:	3d79db23 	.word	0x3d79db23
 80059dc:	3df9db23 	.word	0x3df9db23
 80059e0:	3e79db23 	.word	0x3e79db23
 80059e4:	3ef9db23 	.word	0x3ef9db23

080059e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80059e8:	b5b0      	push	{r4, r5, r7, lr}
 80059ea:	b09c      	sub	sp, #112	; 0x70
 80059ec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80059ee:	f7fa fdbf 	bl	8000570 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80059f2:	f000 f871 	bl	8005ad8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80059f6:	f000 f959 	bl	8005cac <MX_GPIO_Init>
  MX_I2C2_Init();
 80059fa:	f000 f8e7 	bl	8005bcc <MX_I2C2_Init>
  MX_USART1_UART_Init();
 80059fe:	f000 f925 	bl	8005c4c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* Initialize I2C sensors */
  BSP_ACCELERO_Init();
 8005a02:	f000 fc2d 	bl	8006260 <BSP_ACCELERO_Init>
  BSP_MAGNETO_Init();
 8005a06:	f000 fc9b 	bl	8006340 <BSP_MAGNETO_Init>
  BSP_PSENSOR_Init();
 8005a0a:	f000 fcf7 	bl	80063fc <BSP_PSENSOR_Init>
  BSP_TSENSOR_Init();
 8005a0e:	f000 fd23 	bl	8006458 <BSP_TSENSOR_Init>

  /* Set low power mode for accelerometer and magnetometer */
  BSP_ACCELERO_LowPower(1);
 8005a12:	2001      	movs	r0, #1
 8005a14:	f000 fc62 	bl	80062dc <BSP_ACCELERO_LowPower>
  BSP_MAGNETO_LowPower(1);
 8005a18:	2001      	movs	r0, #1
 8005a1a:	f000 fcbd 	bl	8006398 <BSP_MAGNETO_LowPower>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8005a1e:	4b26      	ldr	r3, [pc, #152]	; (8005ab8 <main+0xd0>)
 8005a20:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8005a24:	461d      	mov	r5, r3
 8005a26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005a28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005a2a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005a2e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8005a32:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005a36:	2100      	movs	r1, #0
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f7fe fa32 	bl	8003ea2 <osThreadCreate>
 8005a3e:	4602      	mov	r2, r0
 8005a40:	4b1e      	ldr	r3, [pc, #120]	; (8005abc <main+0xd4>)
 8005a42:	601a      	str	r2, [r3, #0]

  /* definition and creation of buttonThread */
  osThreadDef(buttonThread, StartTask02, osPriorityIdle, 0, 128);
 8005a44:	4b1e      	ldr	r3, [pc, #120]	; (8005ac0 <main+0xd8>)
 8005a46:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8005a4a:	461d      	mov	r5, r3
 8005a4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005a4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005a50:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005a54:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  buttonThreadHandle = osThreadCreate(osThread(buttonThread), NULL);
 8005a58:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005a5c:	2100      	movs	r1, #0
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f7fe fa1f 	bl	8003ea2 <osThreadCreate>
 8005a64:	4602      	mov	r2, r0
 8005a66:	4b17      	ldr	r3, [pc, #92]	; (8005ac4 <main+0xdc>)
 8005a68:	601a      	str	r2, [r3, #0]

  /* definition and creation of UARTThread */
  osThreadDef(UARTThread, StartTask03, osPriorityIdle, 0, 128);
 8005a6a:	4b17      	ldr	r3, [pc, #92]	; (8005ac8 <main+0xe0>)
 8005a6c:	f107 041c 	add.w	r4, r7, #28
 8005a70:	461d      	mov	r5, r3
 8005a72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005a74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005a76:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005a7a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  UARTThreadHandle = osThreadCreate(osThread(UARTThread), NULL);
 8005a7e:	f107 031c 	add.w	r3, r7, #28
 8005a82:	2100      	movs	r1, #0
 8005a84:	4618      	mov	r0, r3
 8005a86:	f7fe fa0c 	bl	8003ea2 <osThreadCreate>
 8005a8a:	4602      	mov	r2, r0
 8005a8c:	4b0f      	ldr	r3, [pc, #60]	; (8005acc <main+0xe4>)
 8005a8e:	601a      	str	r2, [r3, #0]

  /* definition and creation of sensorThread */
  osThreadDef(sensorThread, StartTask04, osPriorityIdle, 0, 128);
 8005a90:	4b0f      	ldr	r3, [pc, #60]	; (8005ad0 <main+0xe8>)
 8005a92:	463c      	mov	r4, r7
 8005a94:	461d      	mov	r5, r3
 8005a96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005a98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005a9a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005a9e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  sensorThreadHandle = osThreadCreate(osThread(sensorThread), NULL);
 8005aa2:	463b      	mov	r3, r7
 8005aa4:	2100      	movs	r1, #0
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f7fe f9fb 	bl	8003ea2 <osThreadCreate>
 8005aac:	4602      	mov	r2, r0
 8005aae:	4b09      	ldr	r3, [pc, #36]	; (8005ad4 <main+0xec>)
 8005ab0:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8005ab2:	f7fe f9ef 	bl	8003e94 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8005ab6:	e7fe      	b.n	8005ab6 <main+0xce>
 8005ab8:	0800711c 	.word	0x0800711c
 8005abc:	20001094 	.word	0x20001094
 8005ac0:	08007148 	.word	0x08007148
 8005ac4:	20001098 	.word	0x20001098
 8005ac8:	08007170 	.word	0x08007170
 8005acc:	200011b4 	.word	0x200011b4
 8005ad0:	0800719c 	.word	0x0800719c
 8005ad4:	200010ec 	.word	0x200010ec

08005ad8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b0b8      	sub	sp, #224	; 0xe0
 8005adc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005ade:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005ae2:	2244      	movs	r2, #68	; 0x44
 8005ae4:	2100      	movs	r1, #0
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f000 fefd 	bl	80068e6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005aec:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8005af0:	2200      	movs	r2, #0
 8005af2:	601a      	str	r2, [r3, #0]
 8005af4:	605a      	str	r2, [r3, #4]
 8005af6:	609a      	str	r2, [r3, #8]
 8005af8:	60da      	str	r2, [r3, #12]
 8005afa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005afc:	463b      	mov	r3, r7
 8005afe:	2288      	movs	r2, #136	; 0x88
 8005b00:	2100      	movs	r1, #0
 8005b02:	4618      	mov	r0, r3
 8005b04:	f000 feef 	bl	80068e6 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8005b08:	2310      	movs	r3, #16
 8005b0a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8005b14:	2300      	movs	r3, #0
 8005b16:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8005b1a:	2360      	movs	r3, #96	; 0x60
 8005b1c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005b20:	2302      	movs	r3, #2
 8005b22:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8005b26:	2301      	movs	r3, #1
 8005b28:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 8005b32:	2328      	movs	r3, #40	; 0x28
 8005b34:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8005b38:	2307      	movs	r3, #7
 8005b3a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8005b3e:	2302      	movs	r3, #2
 8005b40:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8005b44:	2302      	movs	r3, #2
 8005b46:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005b4a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f7fb ff1c 	bl	800198c <HAL_RCC_OscConfig>
 8005b54:	4603      	mov	r3, r0
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d001      	beq.n	8005b5e <SystemClock_Config+0x86>
  {
    Error_Handler();
 8005b5a:	f000 fa29 	bl	8005fb0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005b5e:	230f      	movs	r3, #15
 8005b60:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005b64:	2303      	movs	r3, #3
 8005b66:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005b70:	2300      	movs	r3, #0
 8005b72:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005b76:	2300      	movs	r3, #0
 8005b78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8005b7c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8005b80:	2104      	movs	r1, #4
 8005b82:	4618      	mov	r0, r3
 8005b84:	f7fc fae8 	bl	8002158 <HAL_RCC_ClockConfig>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d001      	beq.n	8005b92 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8005b8e:	f000 fa0f 	bl	8005fb0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C2;
 8005b92:	2381      	movs	r3, #129	; 0x81
 8005b94:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8005b96:	2300      	movs	r3, #0
 8005b98:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005b9e:	463b      	mov	r3, r7
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f7fc fd0f 	bl	80025c4 <HAL_RCCEx_PeriphCLKConfig>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d001      	beq.n	8005bb0 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8005bac:	f000 fa00 	bl	8005fb0 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8005bb0:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005bb4:	f7fb fe94 	bl	80018e0 <HAL_PWREx_ControlVoltageScaling>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d001      	beq.n	8005bc2 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8005bbe:	f000 f9f7 	bl	8005fb0 <Error_Handler>
  }
}
 8005bc2:	bf00      	nop
 8005bc4:	37e0      	adds	r7, #224	; 0xe0
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}
	...

08005bcc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8005bd0:	4b1b      	ldr	r3, [pc, #108]	; (8005c40 <MX_I2C2_Init+0x74>)
 8005bd2:	4a1c      	ldr	r2, [pc, #112]	; (8005c44 <MX_I2C2_Init+0x78>)
 8005bd4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8005bd6:	4b1a      	ldr	r3, [pc, #104]	; (8005c40 <MX_I2C2_Init+0x74>)
 8005bd8:	4a1b      	ldr	r2, [pc, #108]	; (8005c48 <MX_I2C2_Init+0x7c>)
 8005bda:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8005bdc:	4b18      	ldr	r3, [pc, #96]	; (8005c40 <MX_I2C2_Init+0x74>)
 8005bde:	2200      	movs	r2, #0
 8005be0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005be2:	4b17      	ldr	r3, [pc, #92]	; (8005c40 <MX_I2C2_Init+0x74>)
 8005be4:	2201      	movs	r2, #1
 8005be6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005be8:	4b15      	ldr	r3, [pc, #84]	; (8005c40 <MX_I2C2_Init+0x74>)
 8005bea:	2200      	movs	r2, #0
 8005bec:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8005bee:	4b14      	ldr	r3, [pc, #80]	; (8005c40 <MX_I2C2_Init+0x74>)
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005bf4:	4b12      	ldr	r3, [pc, #72]	; (8005c40 <MX_I2C2_Init+0x74>)
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005bfa:	4b11      	ldr	r3, [pc, #68]	; (8005c40 <MX_I2C2_Init+0x74>)
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005c00:	4b0f      	ldr	r3, [pc, #60]	; (8005c40 <MX_I2C2_Init+0x74>)
 8005c02:	2200      	movs	r2, #0
 8005c04:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8005c06:	480e      	ldr	r0, [pc, #56]	; (8005c40 <MX_I2C2_Init+0x74>)
 8005c08:	f7fb f8bb 	bl	8000d82 <HAL_I2C_Init>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d001      	beq.n	8005c16 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8005c12:	f000 f9cd 	bl	8005fb0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005c16:	2100      	movs	r1, #0
 8005c18:	4809      	ldr	r0, [pc, #36]	; (8005c40 <MX_I2C2_Init+0x74>)
 8005c1a:	f7fb fdbb 	bl	8001794 <HAL_I2CEx_ConfigAnalogFilter>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d001      	beq.n	8005c28 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8005c24:	f000 f9c4 	bl	8005fb0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8005c28:	2100      	movs	r1, #0
 8005c2a:	4805      	ldr	r0, [pc, #20]	; (8005c40 <MX_I2C2_Init+0x74>)
 8005c2c:	f7fb fdfd 	bl	800182a <HAL_I2CEx_ConfigDigitalFilter>
 8005c30:	4603      	mov	r3, r0
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d001      	beq.n	8005c3a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8005c36:	f000 f9bb 	bl	8005fb0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8005c3a:	bf00      	nop
 8005c3c:	bd80      	pop	{r7, pc}
 8005c3e:	bf00      	nop
 8005c40:	2000109c 	.word	0x2000109c
 8005c44:	40005800 	.word	0x40005800
 8005c48:	10909cec 	.word	0x10909cec

08005c4c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005c50:	4b14      	ldr	r3, [pc, #80]	; (8005ca4 <MX_USART1_UART_Init+0x58>)
 8005c52:	4a15      	ldr	r2, [pc, #84]	; (8005ca8 <MX_USART1_UART_Init+0x5c>)
 8005c54:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8005c56:	4b13      	ldr	r3, [pc, #76]	; (8005ca4 <MX_USART1_UART_Init+0x58>)
 8005c58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005c5c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005c5e:	4b11      	ldr	r3, [pc, #68]	; (8005ca4 <MX_USART1_UART_Init+0x58>)
 8005c60:	2200      	movs	r2, #0
 8005c62:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005c64:	4b0f      	ldr	r3, [pc, #60]	; (8005ca4 <MX_USART1_UART_Init+0x58>)
 8005c66:	2200      	movs	r2, #0
 8005c68:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005c6a:	4b0e      	ldr	r3, [pc, #56]	; (8005ca4 <MX_USART1_UART_Init+0x58>)
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005c70:	4b0c      	ldr	r3, [pc, #48]	; (8005ca4 <MX_USART1_UART_Init+0x58>)
 8005c72:	220c      	movs	r2, #12
 8005c74:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005c76:	4b0b      	ldr	r3, [pc, #44]	; (8005ca4 <MX_USART1_UART_Init+0x58>)
 8005c78:	2200      	movs	r2, #0
 8005c7a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005c7c:	4b09      	ldr	r3, [pc, #36]	; (8005ca4 <MX_USART1_UART_Init+0x58>)
 8005c7e:	2200      	movs	r2, #0
 8005c80:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005c82:	4b08      	ldr	r3, [pc, #32]	; (8005ca4 <MX_USART1_UART_Init+0x58>)
 8005c84:	2200      	movs	r2, #0
 8005c86:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005c88:	4b06      	ldr	r3, [pc, #24]	; (8005ca4 <MX_USART1_UART_Init+0x58>)
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005c8e:	4805      	ldr	r0, [pc, #20]	; (8005ca4 <MX_USART1_UART_Init+0x58>)
 8005c90:	f7fd fc1a 	bl	80034c8 <HAL_UART_Init>
 8005c94:	4603      	mov	r3, r0
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d001      	beq.n	8005c9e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8005c9a:	f000 f989 	bl	8005fb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005c9e:	bf00      	nop
 8005ca0:	bd80      	pop	{r7, pc}
 8005ca2:	bf00      	nop
 8005ca4:	20001134 	.word	0x20001134
 8005ca8:	40013800 	.word	0x40013800

08005cac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b088      	sub	sp, #32
 8005cb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005cb2:	f107 030c 	add.w	r3, r7, #12
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	601a      	str	r2, [r3, #0]
 8005cba:	605a      	str	r2, [r3, #4]
 8005cbc:	609a      	str	r2, [r3, #8]
 8005cbe:	60da      	str	r2, [r3, #12]
 8005cc0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005cc2:	4b32      	ldr	r3, [pc, #200]	; (8005d8c <MX_GPIO_Init+0xe0>)
 8005cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cc6:	4a31      	ldr	r2, [pc, #196]	; (8005d8c <MX_GPIO_Init+0xe0>)
 8005cc8:	f043 0310 	orr.w	r3, r3, #16
 8005ccc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005cce:	4b2f      	ldr	r3, [pc, #188]	; (8005d8c <MX_GPIO_Init+0xe0>)
 8005cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cd2:	f003 0310 	and.w	r3, r3, #16
 8005cd6:	60bb      	str	r3, [r7, #8]
 8005cd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005cda:	4b2c      	ldr	r3, [pc, #176]	; (8005d8c <MX_GPIO_Init+0xe0>)
 8005cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cde:	4a2b      	ldr	r2, [pc, #172]	; (8005d8c <MX_GPIO_Init+0xe0>)
 8005ce0:	f043 0304 	orr.w	r3, r3, #4
 8005ce4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005ce6:	4b29      	ldr	r3, [pc, #164]	; (8005d8c <MX_GPIO_Init+0xe0>)
 8005ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cea:	f003 0304 	and.w	r3, r3, #4
 8005cee:	607b      	str	r3, [r7, #4]
 8005cf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005cf2:	4b26      	ldr	r3, [pc, #152]	; (8005d8c <MX_GPIO_Init+0xe0>)
 8005cf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cf6:	4a25      	ldr	r2, [pc, #148]	; (8005d8c <MX_GPIO_Init+0xe0>)
 8005cf8:	f043 0302 	orr.w	r3, r3, #2
 8005cfc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005cfe:	4b23      	ldr	r3, [pc, #140]	; (8005d8c <MX_GPIO_Init+0xe0>)
 8005d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d02:	f003 0302 	and.w	r3, r3, #2
 8005d06:	603b      	str	r3, [r7, #0]
 8005d08:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ErrorLED_GPIO_Port, ErrorLED_Pin, GPIO_PIN_RESET);
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	2108      	movs	r1, #8
 8005d0e:	4820      	ldr	r0, [pc, #128]	; (8005d90 <MX_GPIO_Init+0xe4>)
 8005d10:	f7fa fffc 	bl	8000d0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FineLED_GPIO_Port, FineLED_Pin, GPIO_PIN_RESET);
 8005d14:	2200      	movs	r2, #0
 8005d16:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005d1a:	481e      	ldr	r0, [pc, #120]	; (8005d94 <MX_GPIO_Init+0xe8>)
 8005d1c:	f7fa fff6 	bl	8000d0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ErrorLED_Pin */
  GPIO_InitStruct.Pin = ErrorLED_Pin;
 8005d20:	2308      	movs	r3, #8
 8005d22:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005d24:	2301      	movs	r3, #1
 8005d26:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ErrorLED_GPIO_Port, &GPIO_InitStruct);
 8005d30:	f107 030c 	add.w	r3, r7, #12
 8005d34:	4619      	mov	r1, r3
 8005d36:	4816      	ldr	r0, [pc, #88]	; (8005d90 <MX_GPIO_Init+0xe4>)
 8005d38:	f7fa fd34 	bl	80007a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8005d3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005d40:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8005d42:	4b15      	ldr	r3, [pc, #84]	; (8005d98 <MX_GPIO_Init+0xec>)
 8005d44:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d46:	2300      	movs	r3, #0
 8005d48:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005d4a:	f107 030c 	add.w	r3, r7, #12
 8005d4e:	4619      	mov	r1, r3
 8005d50:	4812      	ldr	r0, [pc, #72]	; (8005d9c <MX_GPIO_Init+0xf0>)
 8005d52:	f7fa fd27 	bl	80007a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : FineLED_Pin */
  GPIO_InitStruct.Pin = FineLED_Pin;
 8005d56:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005d5a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d60:	2300      	movs	r3, #0
 8005d62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d64:	2300      	movs	r3, #0
 8005d66:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(FineLED_GPIO_Port, &GPIO_InitStruct);
 8005d68:	f107 030c 	add.w	r3, r7, #12
 8005d6c:	4619      	mov	r1, r3
 8005d6e:	4809      	ldr	r0, [pc, #36]	; (8005d94 <MX_GPIO_Init+0xe8>)
 8005d70:	f7fa fd18 	bl	80007a4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8005d74:	2200      	movs	r2, #0
 8005d76:	2100      	movs	r1, #0
 8005d78:	2028      	movs	r0, #40	; 0x28
 8005d7a:	f7fa fce9 	bl	8000750 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8005d7e:	2028      	movs	r0, #40	; 0x28
 8005d80:	f7fa fd02 	bl	8000788 <HAL_NVIC_EnableIRQ>

}
 8005d84:	bf00      	nop
 8005d86:	3720      	adds	r7, #32
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}
 8005d8c:	40021000 	.word	0x40021000
 8005d90:	48001000 	.word	0x48001000
 8005d94:	48000400 	.word	0x48000400
 8005d98:	10210000 	.word	0x10210000
 8005d9c:	48000800 	.word	0x48000800

08005da0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b082      	sub	sp, #8
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8005da8:	2001      	movs	r0, #1
 8005daa:	f7fe f8c6 	bl	8003f3a <osDelay>
 8005dae:	e7fb      	b.n	8005da8 <StartDefaultTask+0x8>

08005db0 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b082      	sub	sp, #8
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(150);
 8005db8:	2096      	movs	r0, #150	; 0x96
 8005dba:	f7fe f8be 	bl	8003f3a <osDelay>
    if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) != GPIO_PIN_SET) {
 8005dbe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005dc2:	4811      	ldr	r0, [pc, #68]	; (8005e08 <StartTask02+0x58>)
 8005dc4:	f7fa ff8a 	bl	8000cdc <HAL_GPIO_ReadPin>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	2b01      	cmp	r3, #1
 8005dcc:	d0f4      	beq.n	8005db8 <StartTask02+0x8>
    	if(sensorType == ACCELOROMETER){
 8005dce:	4b0f      	ldr	r3, [pc, #60]	; (8005e0c <StartTask02+0x5c>)
 8005dd0:	781b      	ldrb	r3, [r3, #0]
 8005dd2:	2b03      	cmp	r3, #3
 8005dd4:	d103      	bne.n	8005dde <StartTask02+0x2e>
    	  sensorType = MAGNETOMETER;
 8005dd6:	4b0d      	ldr	r3, [pc, #52]	; (8005e0c <StartTask02+0x5c>)
 8005dd8:	2200      	movs	r2, #0
 8005dda:	701a      	strb	r2, [r3, #0]
 8005ddc:	e7ec      	b.n	8005db8 <StartTask02+0x8>
    	}else if(sensorType == MAGNETOMETER){
 8005dde:	4b0b      	ldr	r3, [pc, #44]	; (8005e0c <StartTask02+0x5c>)
 8005de0:	781b      	ldrb	r3, [r3, #0]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d103      	bne.n	8005dee <StartTask02+0x3e>
    	  sensorType = TEMPERATURE;
 8005de6:	4b09      	ldr	r3, [pc, #36]	; (8005e0c <StartTask02+0x5c>)
 8005de8:	2202      	movs	r2, #2
 8005dea:	701a      	strb	r2, [r3, #0]
 8005dec:	e7e4      	b.n	8005db8 <StartTask02+0x8>
    	}else if(sensorType == TEMPERATURE){
 8005dee:	4b07      	ldr	r3, [pc, #28]	; (8005e0c <StartTask02+0x5c>)
 8005df0:	781b      	ldrb	r3, [r3, #0]
 8005df2:	2b02      	cmp	r3, #2
 8005df4:	d103      	bne.n	8005dfe <StartTask02+0x4e>
    	  sensorType = PRESSURE;
 8005df6:	4b05      	ldr	r3, [pc, #20]	; (8005e0c <StartTask02+0x5c>)
 8005df8:	2201      	movs	r2, #1
 8005dfa:	701a      	strb	r2, [r3, #0]
 8005dfc:	e7dc      	b.n	8005db8 <StartTask02+0x8>
    	}else{
    	 sensorType =ACCELOROMETER;
 8005dfe:	4b03      	ldr	r3, [pc, #12]	; (8005e0c <StartTask02+0x5c>)
 8005e00:	2203      	movs	r2, #3
 8005e02:	701a      	strb	r2, [r3, #0]
    osDelay(150);
 8005e04:	e7d8      	b.n	8005db8 <StartTask02+0x8>
 8005e06:	bf00      	nop
 8005e08:	48000800 	.word	0x48000800
 8005e0c:	200010f4 	.word	0x200010f4

08005e10 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b084      	sub	sp, #16
 8005e14:	af02      	add	r7, sp, #8
 8005e16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
 8005e18:	2064      	movs	r0, #100	; 0x64
 8005e1a:	f7fe f88e 	bl	8003f3a <osDelay>
	if(sensorType == ACCELOROMETER){
 8005e1e:	4b32      	ldr	r3, [pc, #200]	; (8005ee8 <StartTask03+0xd8>)
 8005e20:	781b      	ldrb	r3, [r3, #0]
 8005e22:	2b03      	cmp	r3, #3
 8005e24:	d118      	bne.n	8005e58 <StartTask03+0x48>
	  sprintf(accelero_XYZ_buffer, "Accelerometer: X:%d Y:%d Z:%d", accelero_XYZ[0],accelero_XYZ[1],accelero_XYZ[2]);
 8005e26:	4b31      	ldr	r3, [pc, #196]	; (8005eec <StartTask03+0xdc>)
 8005e28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005e2c:	461a      	mov	r2, r3
 8005e2e:	4b2f      	ldr	r3, [pc, #188]	; (8005eec <StartTask03+0xdc>)
 8005e30:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005e34:	4619      	mov	r1, r3
 8005e36:	4b2d      	ldr	r3, [pc, #180]	; (8005eec <StartTask03+0xdc>)
 8005e38:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005e3c:	9300      	str	r3, [sp, #0]
 8005e3e:	460b      	mov	r3, r1
 8005e40:	492b      	ldr	r1, [pc, #172]	; (8005ef0 <StartTask03+0xe0>)
 8005e42:	482c      	ldr	r0, [pc, #176]	; (8005ef4 <StartTask03+0xe4>)
 8005e44:	f000 fd58 	bl	80068f8 <siprintf>
	  HAL_UART_Transmit(&huart1,accelero_XYZ_buffer,50,30000);
 8005e48:	f247 5330 	movw	r3, #30000	; 0x7530
 8005e4c:	2232      	movs	r2, #50	; 0x32
 8005e4e:	4929      	ldr	r1, [pc, #164]	; (8005ef4 <StartTask03+0xe4>)
 8005e50:	4829      	ldr	r0, [pc, #164]	; (8005ef8 <StartTask03+0xe8>)
 8005e52:	f7fd fb87 	bl	8003564 <HAL_UART_Transmit>
 8005e56:	e7df      	b.n	8005e18 <StartTask03+0x8>
	 }else if(sensorType == MAGNETOMETER){
 8005e58:	4b23      	ldr	r3, [pc, #140]	; (8005ee8 <StartTask03+0xd8>)
 8005e5a:	781b      	ldrb	r3, [r3, #0]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d118      	bne.n	8005e92 <StartTask03+0x82>
	  sprintf(magneto_XYZ_buffer, "Magnetometer: X:%d Y:%d Z:%d ",magneto_XYZ[0],magneto_XYZ[1],magneto_XYZ[2]);
 8005e60:	4b26      	ldr	r3, [pc, #152]	; (8005efc <StartTask03+0xec>)
 8005e62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005e66:	461a      	mov	r2, r3
 8005e68:	4b24      	ldr	r3, [pc, #144]	; (8005efc <StartTask03+0xec>)
 8005e6a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005e6e:	4619      	mov	r1, r3
 8005e70:	4b22      	ldr	r3, [pc, #136]	; (8005efc <StartTask03+0xec>)
 8005e72:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005e76:	9300      	str	r3, [sp, #0]
 8005e78:	460b      	mov	r3, r1
 8005e7a:	4921      	ldr	r1, [pc, #132]	; (8005f00 <StartTask03+0xf0>)
 8005e7c:	4821      	ldr	r0, [pc, #132]	; (8005f04 <StartTask03+0xf4>)
 8005e7e:	f000 fd3b 	bl	80068f8 <siprintf>
	  HAL_UART_Transmit(&huart1,magneto_XYZ_buffer,50,30000);
 8005e82:	f247 5330 	movw	r3, #30000	; 0x7530
 8005e86:	2232      	movs	r2, #50	; 0x32
 8005e88:	491e      	ldr	r1, [pc, #120]	; (8005f04 <StartTask03+0xf4>)
 8005e8a:	481b      	ldr	r0, [pc, #108]	; (8005ef8 <StartTask03+0xe8>)
 8005e8c:	f7fd fb6a 	bl	8003564 <HAL_UART_Transmit>
 8005e90:	e7c2      	b.n	8005e18 <StartTask03+0x8>
	 }else if(sensorType == TEMPERATURE){
 8005e92:	4b15      	ldr	r3, [pc, #84]	; (8005ee8 <StartTask03+0xd8>)
 8005e94:	781b      	ldrb	r3, [r3, #0]
 8005e96:	2b02      	cmp	r3, #2
 8005e98:	d112      	bne.n	8005ec0 <StartTask03+0xb0>
	  sprintf(temperature_buffer, "Temperature Sensor: %d",(int) temperature);
 8005e9a:	4b1b      	ldr	r3, [pc, #108]	; (8005f08 <StartTask03+0xf8>)
 8005e9c:	edd3 7a00 	vldr	s15, [r3]
 8005ea0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005ea4:	ee17 2a90 	vmov	r2, s15
 8005ea8:	4918      	ldr	r1, [pc, #96]	; (8005f0c <StartTask03+0xfc>)
 8005eaa:	4819      	ldr	r0, [pc, #100]	; (8005f10 <StartTask03+0x100>)
 8005eac:	f000 fd24 	bl	80068f8 <siprintf>
	  HAL_UART_Transmit(&huart1,temperature_buffer,50,30000);
 8005eb0:	f247 5330 	movw	r3, #30000	; 0x7530
 8005eb4:	2232      	movs	r2, #50	; 0x32
 8005eb6:	4916      	ldr	r1, [pc, #88]	; (8005f10 <StartTask03+0x100>)
 8005eb8:	480f      	ldr	r0, [pc, #60]	; (8005ef8 <StartTask03+0xe8>)
 8005eba:	f7fd fb53 	bl	8003564 <HAL_UART_Transmit>
 8005ebe:	e7ab      	b.n	8005e18 <StartTask03+0x8>
	 }else{
	 sprintf(pressure_buffer, "Pressure Sensor: %d",(int) pressure);
 8005ec0:	4b14      	ldr	r3, [pc, #80]	; (8005f14 <StartTask03+0x104>)
 8005ec2:	edd3 7a00 	vldr	s15, [r3]
 8005ec6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005eca:	ee17 2a90 	vmov	r2, s15
 8005ece:	4912      	ldr	r1, [pc, #72]	; (8005f18 <StartTask03+0x108>)
 8005ed0:	4812      	ldr	r0, [pc, #72]	; (8005f1c <StartTask03+0x10c>)
 8005ed2:	f000 fd11 	bl	80068f8 <siprintf>
	 HAL_UART_Transmit(&huart1,pressure_buffer,50,30000);
 8005ed6:	f247 5330 	movw	r3, #30000	; 0x7530
 8005eda:	2232      	movs	r2, #50	; 0x32
 8005edc:	490f      	ldr	r1, [pc, #60]	; (8005f1c <StartTask03+0x10c>)
 8005ede:	4806      	ldr	r0, [pc, #24]	; (8005ef8 <StartTask03+0xe8>)
 8005ee0:	f7fd fb40 	bl	8003564 <HAL_UART_Transmit>
    osDelay(100);
 8005ee4:	e798      	b.n	8005e18 <StartTask03+0x8>
 8005ee6:	bf00      	nop
 8005ee8:	200010f4 	.word	0x200010f4
 8005eec:	2000108c 	.word	0x2000108c
 8005ef0:	080071b8 	.word	0x080071b8
 8005ef4:	20001100 	.word	0x20001100
 8005ef8:	20001134 	.word	0x20001134
 8005efc:	200010f8 	.word	0x200010f8
 8005f00:	080071d8 	.word	0x080071d8
 8005f04:	200011b8 	.word	0x200011b8
 8005f08:	200010e8 	.word	0x200010e8
 8005f0c:	080071f8 	.word	0x080071f8
 8005f10:	20001220 	.word	0x20001220
 8005f14:	200010f0 	.word	0x200010f0
 8005f18:	08007210 	.word	0x08007210
 8005f1c:	200011ec 	.word	0x200011ec

08005f20 <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void const * argument)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b082      	sub	sp, #8
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
 8005f28:	2064      	movs	r0, #100	; 0x64
 8005f2a:	f7fe f806 	bl	8003f3a <osDelay>
    if(sensorType == ACCELOROMETER){
 8005f2e:	4b12      	ldr	r3, [pc, #72]	; (8005f78 <StartTask04+0x58>)
 8005f30:	781b      	ldrb	r3, [r3, #0]
 8005f32:	2b03      	cmp	r3, #3
 8005f34:	d103      	bne.n	8005f3e <StartTask04+0x1e>
    	BSP_ACCELERO_AccGetXYZ(accelero_XYZ);
 8005f36:	4811      	ldr	r0, [pc, #68]	; (8005f7c <StartTask04+0x5c>)
 8005f38:	f000 f9ea 	bl	8006310 <BSP_ACCELERO_AccGetXYZ>
 8005f3c:	e7f4      	b.n	8005f28 <StartTask04+0x8>
	}else if(sensorType == MAGNETOMETER){
 8005f3e:	4b0e      	ldr	r3, [pc, #56]	; (8005f78 <StartTask04+0x58>)
 8005f40:	781b      	ldrb	r3, [r3, #0]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d103      	bne.n	8005f4e <StartTask04+0x2e>
		BSP_MAGNETO_GetXYZ(magneto_XYZ);
 8005f46:	480e      	ldr	r0, [pc, #56]	; (8005f80 <StartTask04+0x60>)
 8005f48:	f000 fa40 	bl	80063cc <BSP_MAGNETO_GetXYZ>
 8005f4c:	e7ec      	b.n	8005f28 <StartTask04+0x8>
	}else if(sensorType == TEMPERATURE){
 8005f4e:	4b0a      	ldr	r3, [pc, #40]	; (8005f78 <StartTask04+0x58>)
 8005f50:	781b      	ldrb	r3, [r3, #0]
 8005f52:	2b02      	cmp	r3, #2
 8005f54:	d107      	bne.n	8005f66 <StartTask04+0x46>
		 pressure = BSP_PSENSOR_ReadPressure();
 8005f56:	f000 fa71 	bl	800643c <BSP_PSENSOR_ReadPressure>
 8005f5a:	eef0 7a40 	vmov.f32	s15, s0
 8005f5e:	4b09      	ldr	r3, [pc, #36]	; (8005f84 <StartTask04+0x64>)
 8005f60:	edc3 7a00 	vstr	s15, [r3]
 8005f64:	e7e0      	b.n	8005f28 <StartTask04+0x8>
	}else{
		temperature = BSP_TSENSOR_ReadTemp();
 8005f66:	f000 fa93 	bl	8006490 <BSP_TSENSOR_ReadTemp>
 8005f6a:	eef0 7a40 	vmov.f32	s15, s0
 8005f6e:	4b06      	ldr	r3, [pc, #24]	; (8005f88 <StartTask04+0x68>)
 8005f70:	edc3 7a00 	vstr	s15, [r3]
    osDelay(100);
 8005f74:	e7d8      	b.n	8005f28 <StartTask04+0x8>
 8005f76:	bf00      	nop
 8005f78:	200010f4 	.word	0x200010f4
 8005f7c:	2000108c 	.word	0x2000108c
 8005f80:	200010f8 	.word	0x200010f8
 8005f84:	200010f0 	.word	0x200010f0
 8005f88:	200010e8 	.word	0x200010e8

08005f8c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b082      	sub	sp, #8
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a04      	ldr	r2, [pc, #16]	; (8005fac <HAL_TIM_PeriodElapsedCallback+0x20>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d101      	bne.n	8005fa2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8005f9e:	f7fa faff 	bl	80005a0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8005fa2:	bf00      	nop
 8005fa4:	3708      	adds	r7, #8
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}
 8005faa:	bf00      	nop
 8005fac:	40001000 	.word	0x40001000

08005fb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005fb4:	bf00      	nop
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbc:	4770      	bx	lr
	...

08005fc0 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b08a      	sub	sp, #40	; 0x28
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8005fc8:	4b27      	ldr	r3, [pc, #156]	; (8006068 <I2Cx_MspInit+0xa8>)
 8005fca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fcc:	4a26      	ldr	r2, [pc, #152]	; (8006068 <I2Cx_MspInit+0xa8>)
 8005fce:	f043 0302 	orr.w	r3, r3, #2
 8005fd2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005fd4:	4b24      	ldr	r3, [pc, #144]	; (8006068 <I2Cx_MspInit+0xa8>)
 8005fd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fd8:	f003 0302 	and.w	r3, r3, #2
 8005fdc:	613b      	str	r3, [r7, #16]
 8005fde:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8005fe0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005fe4:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8005fe6:	2312      	movs	r3, #18
 8005fe8:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8005fea:	2301      	movs	r3, #1
 8005fec:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005fee:	2303      	movs	r3, #3
 8005ff0:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8005ff2:	2304      	movs	r3, #4
 8005ff4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8005ff6:	f107 0314 	add.w	r3, r7, #20
 8005ffa:	4619      	mov	r1, r3
 8005ffc:	481b      	ldr	r0, [pc, #108]	; (800606c <I2Cx_MspInit+0xac>)
 8005ffe:	f7fa fbd1 	bl	80007a4 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8006002:	f107 0314 	add.w	r3, r7, #20
 8006006:	4619      	mov	r1, r3
 8006008:	4818      	ldr	r0, [pc, #96]	; (800606c <I2Cx_MspInit+0xac>)
 800600a:	f7fa fbcb 	bl	80007a4 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 800600e:	4b16      	ldr	r3, [pc, #88]	; (8006068 <I2Cx_MspInit+0xa8>)
 8006010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006012:	4a15      	ldr	r2, [pc, #84]	; (8006068 <I2Cx_MspInit+0xa8>)
 8006014:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006018:	6593      	str	r3, [r2, #88]	; 0x58
 800601a:	4b13      	ldr	r3, [pc, #76]	; (8006068 <I2Cx_MspInit+0xa8>)
 800601c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800601e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006022:	60fb      	str	r3, [r7, #12]
 8006024:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8006026:	4b10      	ldr	r3, [pc, #64]	; (8006068 <I2Cx_MspInit+0xa8>)
 8006028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800602a:	4a0f      	ldr	r2, [pc, #60]	; (8006068 <I2Cx_MspInit+0xa8>)
 800602c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006030:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8006032:	4b0d      	ldr	r3, [pc, #52]	; (8006068 <I2Cx_MspInit+0xa8>)
 8006034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006036:	4a0c      	ldr	r2, [pc, #48]	; (8006068 <I2Cx_MspInit+0xa8>)
 8006038:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800603c:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 800603e:	2200      	movs	r2, #0
 8006040:	210f      	movs	r1, #15
 8006042:	2021      	movs	r0, #33	; 0x21
 8006044:	f7fa fb84 	bl	8000750 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8006048:	2021      	movs	r0, #33	; 0x21
 800604a:	f7fa fb9d 	bl	8000788 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 800604e:	2200      	movs	r2, #0
 8006050:	210f      	movs	r1, #15
 8006052:	2022      	movs	r0, #34	; 0x22
 8006054:	f7fa fb7c 	bl	8000750 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8006058:	2022      	movs	r0, #34	; 0x22
 800605a:	f7fa fb95 	bl	8000788 <HAL_NVIC_EnableIRQ>
}
 800605e:	bf00      	nop
 8006060:	3728      	adds	r7, #40	; 0x28
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}
 8006066:	bf00      	nop
 8006068:	40021000 	.word	0x40021000
 800606c:	48000400 	.word	0x48000400

08006070 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b082      	sub	sp, #8
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	4a12      	ldr	r2, [pc, #72]	; (80060c4 <I2Cx_Init+0x54>)
 800607c:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	4a11      	ldr	r2, [pc, #68]	; (80060c8 <I2Cx_Init+0x58>)
 8006082:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2200      	movs	r2, #0
 8006088:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2201      	movs	r2, #1
 800608e:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2200      	movs	r2, #0
 8006094:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2200      	movs	r2, #0
 800609a:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2200      	movs	r2, #0
 80060a0:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2200      	movs	r2, #0
 80060a6:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f7ff ff89 	bl	8005fc0 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f7fa fe67 	bl	8000d82 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 80060b4:	2100      	movs	r1, #0
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f7fb fb6c 	bl	8001794 <HAL_I2CEx_ConfigAnalogFilter>
}
 80060bc:	bf00      	nop
 80060be:	3708      	adds	r7, #8
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bd80      	pop	{r7, pc}
 80060c4:	40005800 	.word	0x40005800
 80060c8:	00702681 	.word	0x00702681

080060cc <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b08a      	sub	sp, #40	; 0x28
 80060d0:	af04      	add	r7, sp, #16
 80060d2:	60f8      	str	r0, [r7, #12]
 80060d4:	4608      	mov	r0, r1
 80060d6:	4611      	mov	r1, r2
 80060d8:	461a      	mov	r2, r3
 80060da:	4603      	mov	r3, r0
 80060dc:	72fb      	strb	r3, [r7, #11]
 80060de:	460b      	mov	r3, r1
 80060e0:	813b      	strh	r3, [r7, #8]
 80060e2:	4613      	mov	r3, r2
 80060e4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80060e6:	2300      	movs	r3, #0
 80060e8:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80060ea:	7afb      	ldrb	r3, [r7, #11]
 80060ec:	b299      	uxth	r1, r3
 80060ee:	88f8      	ldrh	r0, [r7, #6]
 80060f0:	893a      	ldrh	r2, [r7, #8]
 80060f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80060f6:	9302      	str	r3, [sp, #8]
 80060f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80060fa:	9301      	str	r3, [sp, #4]
 80060fc:	6a3b      	ldr	r3, [r7, #32]
 80060fe:	9300      	str	r3, [sp, #0]
 8006100:	4603      	mov	r3, r0
 8006102:	68f8      	ldr	r0, [r7, #12]
 8006104:	f7fb f810 	bl	8001128 <HAL_I2C_Mem_Read>
 8006108:	4603      	mov	r3, r0
 800610a:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800610c:	7dfb      	ldrb	r3, [r7, #23]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d004      	beq.n	800611c <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 8006112:	7afb      	ldrb	r3, [r7, #11]
 8006114:	4619      	mov	r1, r3
 8006116:	68f8      	ldr	r0, [r7, #12]
 8006118:	f000 f832 	bl	8006180 <I2Cx_Error>
  }
  return status;
 800611c:	7dfb      	ldrb	r3, [r7, #23]
}
 800611e:	4618      	mov	r0, r3
 8006120:	3718      	adds	r7, #24
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}

08006126 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8006126:	b580      	push	{r7, lr}
 8006128:	b08a      	sub	sp, #40	; 0x28
 800612a:	af04      	add	r7, sp, #16
 800612c:	60f8      	str	r0, [r7, #12]
 800612e:	4608      	mov	r0, r1
 8006130:	4611      	mov	r1, r2
 8006132:	461a      	mov	r2, r3
 8006134:	4603      	mov	r3, r0
 8006136:	72fb      	strb	r3, [r7, #11]
 8006138:	460b      	mov	r3, r1
 800613a:	813b      	strh	r3, [r7, #8]
 800613c:	4613      	mov	r3, r2
 800613e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8006140:	2300      	movs	r3, #0
 8006142:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8006144:	7afb      	ldrb	r3, [r7, #11]
 8006146:	b299      	uxth	r1, r3
 8006148:	88f8      	ldrh	r0, [r7, #6]
 800614a:	893a      	ldrh	r2, [r7, #8]
 800614c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006150:	9302      	str	r3, [sp, #8]
 8006152:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006154:	9301      	str	r3, [sp, #4]
 8006156:	6a3b      	ldr	r3, [r7, #32]
 8006158:	9300      	str	r3, [sp, #0]
 800615a:	4603      	mov	r3, r0
 800615c:	68f8      	ldr	r0, [r7, #12]
 800615e:	f7fa fecf 	bl	8000f00 <HAL_I2C_Mem_Write>
 8006162:	4603      	mov	r3, r0
 8006164:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8006166:	7dfb      	ldrb	r3, [r7, #23]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d004      	beq.n	8006176 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 800616c:	7afb      	ldrb	r3, [r7, #11]
 800616e:	4619      	mov	r1, r3
 8006170:	68f8      	ldr	r0, [r7, #12]
 8006172:	f000 f805 	bl	8006180 <I2Cx_Error>
  }
  return status;
 8006176:	7dfb      	ldrb	r3, [r7, #23]
}
 8006178:	4618      	mov	r0, r3
 800617a:	3718      	adds	r7, #24
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}

08006180 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b082      	sub	sp, #8
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
 8006188:	460b      	mov	r3, r1
 800618a:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	f7fa fe87 	bl	8000ea0 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f7ff ff6c 	bl	8006070 <I2Cx_Init>
}
 8006198:	bf00      	nop
 800619a:	3708      	adds	r7, #8
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}

080061a0 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 80061a4:	4802      	ldr	r0, [pc, #8]	; (80061b0 <SENSOR_IO_Init+0x10>)
 80061a6:	f7ff ff63 	bl	8006070 <I2Cx_Init>
}
 80061aa:	bf00      	nop
 80061ac:	bd80      	pop	{r7, pc}
 80061ae:	bf00      	nop
 80061b0:	200012d4 	.word	0x200012d4

080061b4 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b084      	sub	sp, #16
 80061b8:	af02      	add	r7, sp, #8
 80061ba:	4603      	mov	r3, r0
 80061bc:	71fb      	strb	r3, [r7, #7]
 80061be:	460b      	mov	r3, r1
 80061c0:	71bb      	strb	r3, [r7, #6]
 80061c2:	4613      	mov	r3, r2
 80061c4:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80061c6:	79bb      	ldrb	r3, [r7, #6]
 80061c8:	b29a      	uxth	r2, r3
 80061ca:	79f9      	ldrb	r1, [r7, #7]
 80061cc:	2301      	movs	r3, #1
 80061ce:	9301      	str	r3, [sp, #4]
 80061d0:	1d7b      	adds	r3, r7, #5
 80061d2:	9300      	str	r3, [sp, #0]
 80061d4:	2301      	movs	r3, #1
 80061d6:	4803      	ldr	r0, [pc, #12]	; (80061e4 <SENSOR_IO_Write+0x30>)
 80061d8:	f7ff ffa5 	bl	8006126 <I2Cx_WriteMultiple>
}
 80061dc:	bf00      	nop
 80061de:	3708      	adds	r7, #8
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}
 80061e4:	200012d4 	.word	0x200012d4

080061e8 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b086      	sub	sp, #24
 80061ec:	af02      	add	r7, sp, #8
 80061ee:	4603      	mov	r3, r0
 80061f0:	460a      	mov	r2, r1
 80061f2:	71fb      	strb	r3, [r7, #7]
 80061f4:	4613      	mov	r3, r2
 80061f6:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80061f8:	2300      	movs	r3, #0
 80061fa:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80061fc:	79bb      	ldrb	r3, [r7, #6]
 80061fe:	b29a      	uxth	r2, r3
 8006200:	79f9      	ldrb	r1, [r7, #7]
 8006202:	2301      	movs	r3, #1
 8006204:	9301      	str	r3, [sp, #4]
 8006206:	f107 030f 	add.w	r3, r7, #15
 800620a:	9300      	str	r3, [sp, #0]
 800620c:	2301      	movs	r3, #1
 800620e:	4804      	ldr	r0, [pc, #16]	; (8006220 <SENSOR_IO_Read+0x38>)
 8006210:	f7ff ff5c 	bl	80060cc <I2Cx_ReadMultiple>

  return read_value;
 8006214:	7bfb      	ldrb	r3, [r7, #15]
}
 8006216:	4618      	mov	r0, r3
 8006218:	3710      	adds	r7, #16
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}
 800621e:	bf00      	nop
 8006220:	200012d4 	.word	0x200012d4

08006224 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b084      	sub	sp, #16
 8006228:	af02      	add	r7, sp, #8
 800622a:	603a      	str	r2, [r7, #0]
 800622c:	461a      	mov	r2, r3
 800622e:	4603      	mov	r3, r0
 8006230:	71fb      	strb	r3, [r7, #7]
 8006232:	460b      	mov	r3, r1
 8006234:	71bb      	strb	r3, [r7, #6]
 8006236:	4613      	mov	r3, r2
 8006238:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 800623a:	79bb      	ldrb	r3, [r7, #6]
 800623c:	b29a      	uxth	r2, r3
 800623e:	79f9      	ldrb	r1, [r7, #7]
 8006240:	88bb      	ldrh	r3, [r7, #4]
 8006242:	9301      	str	r3, [sp, #4]
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	9300      	str	r3, [sp, #0]
 8006248:	2301      	movs	r3, #1
 800624a:	4804      	ldr	r0, [pc, #16]	; (800625c <SENSOR_IO_ReadMultiple+0x38>)
 800624c:	f7ff ff3e 	bl	80060cc <I2Cx_ReadMultiple>
 8006250:	4603      	mov	r3, r0
 8006252:	b29b      	uxth	r3, r3
}
 8006254:	4618      	mov	r0, r3
 8006256:	3708      	adds	r7, #8
 8006258:	46bd      	mov	sp, r7
 800625a:	bd80      	pop	{r7, pc}
 800625c:	200012d4 	.word	0x200012d4

08006260 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8006260:	b580      	push	{r7, lr}
 8006262:	b084      	sub	sp, #16
 8006264:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 8006266:	2300      	movs	r3, #0
 8006268:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 800626a:	2300      	movs	r3, #0
 800626c:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 800626e:	4b19      	ldr	r3, [pc, #100]	; (80062d4 <BSP_ACCELERO_Init+0x74>)
 8006270:	689b      	ldr	r3, [r3, #8]
 8006272:	4798      	blx	r3
 8006274:	4603      	mov	r3, r0
 8006276:	2b6a      	cmp	r3, #106	; 0x6a
 8006278:	d002      	beq.n	8006280 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 800627a:	2301      	movs	r3, #1
 800627c:	73fb      	strb	r3, [r7, #15]
 800627e:	e024      	b.n	80062ca <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8006280:	4b15      	ldr	r3, [pc, #84]	; (80062d8 <BSP_ACCELERO_Init+0x78>)
 8006282:	4a14      	ldr	r2, [pc, #80]	; (80062d4 <BSP_ACCELERO_Init+0x74>)
 8006284:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 8006286:	2330      	movs	r3, #48	; 0x30
 8006288:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 800628a:	2300      	movs	r3, #0
 800628c:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 800628e:	2300      	movs	r3, #0
 8006290:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8006292:	2340      	movs	r3, #64	; 0x40
 8006294:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 8006296:	2300      	movs	r3, #0
 8006298:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 800629a:	2300      	movs	r3, #0
 800629c:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 800629e:	797a      	ldrb	r2, [r7, #5]
 80062a0:	7abb      	ldrb	r3, [r7, #10]
 80062a2:	4313      	orrs	r3, r2
 80062a4:	b2db      	uxtb	r3, r3
 80062a6:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 80062a8:	7a3b      	ldrb	r3, [r7, #8]
 80062aa:	f043 0304 	orr.w	r3, r3, #4
 80062ae:	b2db      	uxtb	r3, r3
 80062b0:	021b      	lsls	r3, r3, #8
 80062b2:	b21a      	sxth	r2, r3
 80062b4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80062b8:	4313      	orrs	r3, r2
 80062ba:	b21b      	sxth	r3, r3
 80062bc:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 80062be:	4b06      	ldr	r3, [pc, #24]	; (80062d8 <BSP_ACCELERO_Init+0x78>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	89ba      	ldrh	r2, [r7, #12]
 80062c6:	4610      	mov	r0, r2
 80062c8:	4798      	blx	r3
  }  

  return ret;
 80062ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	3710      	adds	r7, #16
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}
 80062d4:	2000005c 	.word	0x2000005c
 80062d8:	2000106c 	.word	0x2000106c

080062dc <BSP_ACCELERO_LowPower>:
  * @brief  Set/Unset the ACCELERO in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  * @retval None
  */
void BSP_ACCELERO_LowPower(uint16_t status)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b082      	sub	sp, #8
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	4603      	mov	r3, r0
 80062e4:	80fb      	strh	r3, [r7, #6]
  /* Set/Unset the ACCELERO in low power mode */
  if(AccelerometerDrv != NULL)
 80062e6:	4b09      	ldr	r3, [pc, #36]	; (800630c <BSP_ACCELERO_LowPower+0x30>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d00a      	beq.n	8006304 <BSP_ACCELERO_LowPower+0x28>
  {
    if(AccelerometerDrv->LowPower != NULL)
 80062ee:	4b07      	ldr	r3, [pc, #28]	; (800630c <BSP_ACCELERO_LowPower+0x30>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	691b      	ldr	r3, [r3, #16]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d005      	beq.n	8006304 <BSP_ACCELERO_LowPower+0x28>
    {
      AccelerometerDrv->LowPower(status);
 80062f8:	4b04      	ldr	r3, [pc, #16]	; (800630c <BSP_ACCELERO_LowPower+0x30>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	691b      	ldr	r3, [r3, #16]
 80062fe:	88fa      	ldrh	r2, [r7, #6]
 8006300:	4610      	mov	r0, r2
 8006302:	4798      	blx	r3
    }
  }
}
 8006304:	bf00      	nop
 8006306:	3708      	adds	r7, #8
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}
 800630c:	2000106c 	.word	0x2000106c

08006310 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b082      	sub	sp, #8
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 8006318:	4b08      	ldr	r3, [pc, #32]	; (800633c <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d009      	beq.n	8006334 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8006320:	4b06      	ldr	r3, [pc, #24]	; (800633c <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006326:	2b00      	cmp	r3, #0
 8006328:	d004      	beq.n	8006334 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 800632a:	4b04      	ldr	r3, [pc, #16]	; (800633c <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	4798      	blx	r3
    }
  }
}
 8006334:	bf00      	nop
 8006336:	3708      	adds	r7, #8
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}
 800633c:	2000106c 	.word	0x2000106c

08006340 <BSP_MAGNETO_Init>:
/**
 * @brief Initialize a magnetometer sensor
 * @retval COMPONENT_ERROR in case of failure
 */
MAGNETO_StatusTypeDef BSP_MAGNETO_Init(void)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b082      	sub	sp, #8
 8006344:	af00      	add	r7, sp, #0
  MAGNETO_StatusTypeDef ret = MAGNETO_OK;
 8006346:	2300      	movs	r3, #0
 8006348:	71fb      	strb	r3, [r7, #7]
  MAGNETO_InitTypeDef LIS3MDL_InitStructureMag;

  if(Lis3mdlMagDrv.ReadID() != I_AM_LIS3MDL)
 800634a:	4b11      	ldr	r3, [pc, #68]	; (8006390 <BSP_MAGNETO_Init+0x50>)
 800634c:	689b      	ldr	r3, [r3, #8]
 800634e:	4798      	blx	r3
 8006350:	4603      	mov	r3, r0
 8006352:	2b3d      	cmp	r3, #61	; 0x3d
 8006354:	d002      	beq.n	800635c <BSP_MAGNETO_Init+0x1c>
  {
    ret = MAGNETO_ERROR;
 8006356:	2301      	movs	r3, #1
 8006358:	71fb      	strb	r3, [r7, #7]
 800635a:	e013      	b.n	8006384 <BSP_MAGNETO_Init+0x44>
  }
  else
  {
    /* Initialize the MAGNETO magnetometer driver structure */
    MagnetoDrv = &Lis3mdlMagDrv;
 800635c:	4b0d      	ldr	r3, [pc, #52]	; (8006394 <BSP_MAGNETO_Init+0x54>)
 800635e:	4a0c      	ldr	r2, [pc, #48]	; (8006390 <BSP_MAGNETO_Init+0x50>)
 8006360:	601a      	str	r2, [r3, #0]
    
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the MAGNETO magnetometer structure */
    LIS3MDL_InitStructureMag.Register1 = LIS3MDL_MAG_TEMPSENSOR_DISABLE | LIS3MDL_MAG_OM_XY_HIGH | LIS3MDL_MAG_ODR_40_HZ;
 8006362:	2358      	movs	r3, #88	; 0x58
 8006364:	703b      	strb	r3, [r7, #0]
    LIS3MDL_InitStructureMag.Register2 = LIS3MDL_MAG_FS_4_GA | LIS3MDL_MAG_REBOOT_DEFAULT | LIS3MDL_MAG_SOFT_RESET_DEFAULT;
 8006366:	2300      	movs	r3, #0
 8006368:	707b      	strb	r3, [r7, #1]
    LIS3MDL_InitStructureMag.Register3 = LIS3MDL_MAG_CONFIG_NORMAL_MODE | LIS3MDL_MAG_CONTINUOUS_MODE;
 800636a:	2300      	movs	r3, #0
 800636c:	70bb      	strb	r3, [r7, #2]
    LIS3MDL_InitStructureMag.Register4 = LIS3MDL_MAG_OM_Z_HIGH | LIS3MDL_MAG_BLE_LSB;
 800636e:	2308      	movs	r3, #8
 8006370:	70fb      	strb	r3, [r7, #3]
    LIS3MDL_InitStructureMag.Register5 = LIS3MDL_MAG_BDU_MSBLSB;
 8006372:	2340      	movs	r3, #64	; 0x40
 8006374:	713b      	strb	r3, [r7, #4]
    /* Configure the MAGNETO magnetometer main parameters */
    MagnetoDrv->Init(LIS3MDL_InitStructureMag);
 8006376:	4b07      	ldr	r3, [pc, #28]	; (8006394 <BSP_MAGNETO_Init+0x54>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	463a      	mov	r2, r7
 800637e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006382:	4798      	blx	r3
  } 

  return ret;  
 8006384:	79fb      	ldrb	r3, [r7, #7]
}
 8006386:	4618      	mov	r0, r3
 8006388:	3708      	adds	r7, #8
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}
 800638e:	bf00      	nop
 8006390:	2000001c 	.word	0x2000001c
 8006394:	20001070 	.word	0x20001070

08006398 <BSP_MAGNETO_LowPower>:

/**
  * @brief  Set/Unset the MAGNETO in low power mode.
  */
void BSP_MAGNETO_LowPower(uint16_t status)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b082      	sub	sp, #8
 800639c:	af00      	add	r7, sp, #0
 800639e:	4603      	mov	r3, r0
 80063a0:	80fb      	strh	r3, [r7, #6]
  /* Put the magnetometer in low power mode */
  if(MagnetoDrv != NULL)
 80063a2:	4b09      	ldr	r3, [pc, #36]	; (80063c8 <BSP_MAGNETO_LowPower+0x30>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d00a      	beq.n	80063c0 <BSP_MAGNETO_LowPower+0x28>
  {
    if(MagnetoDrv->LowPower != NULL)
 80063aa:	4b07      	ldr	r3, [pc, #28]	; (80063c8 <BSP_MAGNETO_LowPower+0x30>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	691b      	ldr	r3, [r3, #16]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d005      	beq.n	80063c0 <BSP_MAGNETO_LowPower+0x28>
    {
      MagnetoDrv->LowPower(status);
 80063b4:	4b04      	ldr	r3, [pc, #16]	; (80063c8 <BSP_MAGNETO_LowPower+0x30>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	691b      	ldr	r3, [r3, #16]
 80063ba:	88fa      	ldrh	r2, [r7, #6]
 80063bc:	4610      	mov	r0, r2
 80063be:	4798      	blx	r3
    }
  }
}
 80063c0:	bf00      	nop
 80063c2:	3708      	adds	r7, #8
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}
 80063c8:	20001070 	.word	0x20001070

080063cc <BSP_MAGNETO_GetXYZ>:
  * @brief  Get XYZ magnetometer values.
  * @param  pDataXYZ Pointer on 3 magnetometer values table with
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis 
  */
void BSP_MAGNETO_GetXYZ(int16_t *pDataXYZ)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b082      	sub	sp, #8
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  if(MagnetoDrv != NULL)
 80063d4:	4b08      	ldr	r3, [pc, #32]	; (80063f8 <BSP_MAGNETO_GetXYZ+0x2c>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d009      	beq.n	80063f0 <BSP_MAGNETO_GetXYZ+0x24>
  {
    if(MagnetoDrv->GetXYZ != NULL)
 80063dc:	4b06      	ldr	r3, [pc, #24]	; (80063f8 <BSP_MAGNETO_GetXYZ+0x2c>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d004      	beq.n	80063f0 <BSP_MAGNETO_GetXYZ+0x24>
    {   
      MagnetoDrv->GetXYZ(pDataXYZ);
 80063e6:	4b04      	ldr	r3, [pc, #16]	; (80063f8 <BSP_MAGNETO_GetXYZ+0x2c>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	4798      	blx	r3
    }
  }
}
 80063f0:	bf00      	nop
 80063f2:	3708      	adds	r7, #8
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}
 80063f8:	20001070 	.word	0x20001070

080063fc <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b082      	sub	sp, #8
 8006400:	af00      	add	r7, sp, #0
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 8006402:	4b0c      	ldr	r3, [pc, #48]	; (8006434 <BSP_PSENSOR_Init+0x38>)
 8006404:	685b      	ldr	r3, [r3, #4]
 8006406:	20ba      	movs	r0, #186	; 0xba
 8006408:	4798      	blx	r3
 800640a:	4603      	mov	r3, r0
 800640c:	2bb1      	cmp	r3, #177	; 0xb1
 800640e:	d002      	beq.n	8006416 <BSP_PSENSOR_Init+0x1a>
  {
    ret = PSENSOR_ERROR;
 8006410:	2301      	movs	r3, #1
 8006412:	607b      	str	r3, [r7, #4]
 8006414:	e009      	b.n	800642a <BSP_PSENSOR_Init+0x2e>
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 8006416:	4b08      	ldr	r3, [pc, #32]	; (8006438 <BSP_PSENSOR_Init+0x3c>)
 8006418:	4a06      	ldr	r2, [pc, #24]	; (8006434 <BSP_PSENSOR_Init+0x38>)
 800641a:	601a      	str	r2, [r3, #0]
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 800641c:	4b06      	ldr	r3, [pc, #24]	; (8006438 <BSP_PSENSOR_Init+0x3c>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	20ba      	movs	r0, #186	; 0xba
 8006424:	4798      	blx	r3
    ret = PSENSOR_OK;
 8006426:	2300      	movs	r3, #0
 8006428:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 800642a:	687b      	ldr	r3, [r7, #4]
}
 800642c:	4618      	mov	r0, r3
 800642e:	3708      	adds	r7, #8
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}
 8006434:	20000050 	.word	0x20000050
 8006438:	20001074 	.word	0x20001074

0800643c <BSP_PSENSOR_ReadPressure>:
/**
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
 800643c:	b580      	push	{r7, lr}
 800643e:	af00      	add	r7, sp, #0
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 8006440:	4b04      	ldr	r3, [pc, #16]	; (8006454 <BSP_PSENSOR_ReadPressure+0x18>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	20ba      	movs	r0, #186	; 0xba
 8006448:	4798      	blx	r3
 800644a:	eef0 7a40 	vmov.f32	s15, s0
}
 800644e:	eeb0 0a67 	vmov.f32	s0, s15
 8006452:	bd80      	pop	{r7, pc}
 8006454:	20001074 	.word	0x20001074

08006458 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8006458:	b580      	push	{r7, lr}
 800645a:	b082      	sub	sp, #8
 800645c:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 800645e:	2301      	movs	r3, #1
 8006460:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 8006462:	4b09      	ldr	r3, [pc, #36]	; (8006488 <BSP_TSENSOR_Init+0x30>)
 8006464:	4a09      	ldr	r2, [pc, #36]	; (800648c <BSP_TSENSOR_Init+0x34>)
 8006466:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8006468:	f7ff fe9a 	bl	80061a0 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 800646c:	4b06      	ldr	r3, [pc, #24]	; (8006488 <BSP_TSENSOR_Init+0x30>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	2100      	movs	r1, #0
 8006474:	20be      	movs	r0, #190	; 0xbe
 8006476:	4798      	blx	r3

  ret = TSENSOR_OK;
 8006478:	2300      	movs	r3, #0
 800647a:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 800647c:	79fb      	ldrb	r3, [r7, #7]
}
 800647e:	4618      	mov	r0, r3
 8006480:	3708      	adds	r7, #8
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}
 8006486:	bf00      	nop
 8006488:	20001078 	.word	0x20001078
 800648c:	2000000c 	.word	0x2000000c

08006490 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 8006490:	b580      	push	{r7, lr}
 8006492:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 8006494:	4b04      	ldr	r3, [pc, #16]	; (80064a8 <BSP_TSENSOR_ReadTemp+0x18>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	68db      	ldr	r3, [r3, #12]
 800649a:	20be      	movs	r0, #190	; 0xbe
 800649c:	4798      	blx	r3
 800649e:	eef0 7a40 	vmov.f32	s15, s0
}
 80064a2:	eeb0 0a67 	vmov.f32	s0, s15
 80064a6:	bd80      	pop	{r7, pc}
 80064a8:	20001078 	.word	0x20001078

080064ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b083      	sub	sp, #12
 80064b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80064b2:	4b0f      	ldr	r3, [pc, #60]	; (80064f0 <HAL_MspInit+0x44>)
 80064b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064b6:	4a0e      	ldr	r2, [pc, #56]	; (80064f0 <HAL_MspInit+0x44>)
 80064b8:	f043 0301 	orr.w	r3, r3, #1
 80064bc:	6613      	str	r3, [r2, #96]	; 0x60
 80064be:	4b0c      	ldr	r3, [pc, #48]	; (80064f0 <HAL_MspInit+0x44>)
 80064c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064c2:	f003 0301 	and.w	r3, r3, #1
 80064c6:	607b      	str	r3, [r7, #4]
 80064c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80064ca:	4b09      	ldr	r3, [pc, #36]	; (80064f0 <HAL_MspInit+0x44>)
 80064cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064ce:	4a08      	ldr	r2, [pc, #32]	; (80064f0 <HAL_MspInit+0x44>)
 80064d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064d4:	6593      	str	r3, [r2, #88]	; 0x58
 80064d6:	4b06      	ldr	r3, [pc, #24]	; (80064f0 <HAL_MspInit+0x44>)
 80064d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064de:	603b      	str	r3, [r7, #0]
 80064e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80064e2:	bf00      	nop
 80064e4:	370c      	adds	r7, #12
 80064e6:	46bd      	mov	sp, r7
 80064e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ec:	4770      	bx	lr
 80064ee:	bf00      	nop
 80064f0:	40021000 	.word	0x40021000

080064f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b08a      	sub	sp, #40	; 0x28
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80064fc:	f107 0314 	add.w	r3, r7, #20
 8006500:	2200      	movs	r2, #0
 8006502:	601a      	str	r2, [r3, #0]
 8006504:	605a      	str	r2, [r3, #4]
 8006506:	609a      	str	r2, [r3, #8]
 8006508:	60da      	str	r2, [r3, #12]
 800650a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a17      	ldr	r2, [pc, #92]	; (8006570 <HAL_I2C_MspInit+0x7c>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d128      	bne.n	8006568 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006516:	4b17      	ldr	r3, [pc, #92]	; (8006574 <HAL_I2C_MspInit+0x80>)
 8006518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800651a:	4a16      	ldr	r2, [pc, #88]	; (8006574 <HAL_I2C_MspInit+0x80>)
 800651c:	f043 0302 	orr.w	r3, r3, #2
 8006520:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006522:	4b14      	ldr	r3, [pc, #80]	; (8006574 <HAL_I2C_MspInit+0x80>)
 8006524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006526:	f003 0302 	and.w	r3, r3, #2
 800652a:	613b      	str	r3, [r7, #16]
 800652c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800652e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006532:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006534:	2312      	movs	r3, #18
 8006536:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006538:	2301      	movs	r3, #1
 800653a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800653c:	2303      	movs	r3, #3
 800653e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8006540:	2304      	movs	r3, #4
 8006542:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006544:	f107 0314 	add.w	r3, r7, #20
 8006548:	4619      	mov	r1, r3
 800654a:	480b      	ldr	r0, [pc, #44]	; (8006578 <HAL_I2C_MspInit+0x84>)
 800654c:	f7fa f92a 	bl	80007a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8006550:	4b08      	ldr	r3, [pc, #32]	; (8006574 <HAL_I2C_MspInit+0x80>)
 8006552:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006554:	4a07      	ldr	r2, [pc, #28]	; (8006574 <HAL_I2C_MspInit+0x80>)
 8006556:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800655a:	6593      	str	r3, [r2, #88]	; 0x58
 800655c:	4b05      	ldr	r3, [pc, #20]	; (8006574 <HAL_I2C_MspInit+0x80>)
 800655e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006560:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006564:	60fb      	str	r3, [r7, #12]
 8006566:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8006568:	bf00      	nop
 800656a:	3728      	adds	r7, #40	; 0x28
 800656c:	46bd      	mov	sp, r7
 800656e:	bd80      	pop	{r7, pc}
 8006570:	40005800 	.word	0x40005800
 8006574:	40021000 	.word	0x40021000
 8006578:	48000400 	.word	0x48000400

0800657c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b082      	sub	sp, #8
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a0b      	ldr	r2, [pc, #44]	; (80065b8 <HAL_I2C_MspDeInit+0x3c>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d10f      	bne.n	80065ae <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 800658e:	4b0b      	ldr	r3, [pc, #44]	; (80065bc <HAL_I2C_MspDeInit+0x40>)
 8006590:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006592:	4a0a      	ldr	r2, [pc, #40]	; (80065bc <HAL_I2C_MspDeInit+0x40>)
 8006594:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8006598:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 800659a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800659e:	4808      	ldr	r0, [pc, #32]	; (80065c0 <HAL_I2C_MspDeInit+0x44>)
 80065a0:	f7fa faa8 	bl	8000af4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 80065a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80065a8:	4805      	ldr	r0, [pc, #20]	; (80065c0 <HAL_I2C_MspDeInit+0x44>)
 80065aa:	f7fa faa3 	bl	8000af4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 80065ae:	bf00      	nop
 80065b0:	3708      	adds	r7, #8
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}
 80065b6:	bf00      	nop
 80065b8:	40005800 	.word	0x40005800
 80065bc:	40021000 	.word	0x40021000
 80065c0:	48000400 	.word	0x48000400

080065c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b08a      	sub	sp, #40	; 0x28
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80065cc:	f107 0314 	add.w	r3, r7, #20
 80065d0:	2200      	movs	r2, #0
 80065d2:	601a      	str	r2, [r3, #0]
 80065d4:	605a      	str	r2, [r3, #4]
 80065d6:	609a      	str	r2, [r3, #8]
 80065d8:	60da      	str	r2, [r3, #12]
 80065da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a17      	ldr	r2, [pc, #92]	; (8006640 <HAL_UART_MspInit+0x7c>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d127      	bne.n	8006636 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80065e6:	4b17      	ldr	r3, [pc, #92]	; (8006644 <HAL_UART_MspInit+0x80>)
 80065e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065ea:	4a16      	ldr	r2, [pc, #88]	; (8006644 <HAL_UART_MspInit+0x80>)
 80065ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80065f0:	6613      	str	r3, [r2, #96]	; 0x60
 80065f2:	4b14      	ldr	r3, [pc, #80]	; (8006644 <HAL_UART_MspInit+0x80>)
 80065f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065fa:	613b      	str	r3, [r7, #16]
 80065fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80065fe:	4b11      	ldr	r3, [pc, #68]	; (8006644 <HAL_UART_MspInit+0x80>)
 8006600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006602:	4a10      	ldr	r2, [pc, #64]	; (8006644 <HAL_UART_MspInit+0x80>)
 8006604:	f043 0302 	orr.w	r3, r3, #2
 8006608:	64d3      	str	r3, [r2, #76]	; 0x4c
 800660a:	4b0e      	ldr	r3, [pc, #56]	; (8006644 <HAL_UART_MspInit+0x80>)
 800660c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800660e:	f003 0302 	and.w	r3, r3, #2
 8006612:	60fb      	str	r3, [r7, #12]
 8006614:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006616:	23c0      	movs	r3, #192	; 0xc0
 8006618:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800661a:	2302      	movs	r3, #2
 800661c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800661e:	2300      	movs	r3, #0
 8006620:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006622:	2303      	movs	r3, #3
 8006624:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006626:	2307      	movs	r3, #7
 8006628:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800662a:	f107 0314 	add.w	r3, r7, #20
 800662e:	4619      	mov	r1, r3
 8006630:	4805      	ldr	r0, [pc, #20]	; (8006648 <HAL_UART_MspInit+0x84>)
 8006632:	f7fa f8b7 	bl	80007a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8006636:	bf00      	nop
 8006638:	3728      	adds	r7, #40	; 0x28
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}
 800663e:	bf00      	nop
 8006640:	40013800 	.word	0x40013800
 8006644:	40021000 	.word	0x40021000
 8006648:	48000400 	.word	0x48000400

0800664c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b08c      	sub	sp, #48	; 0x30
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8006654:	2300      	movs	r3, #0
 8006656:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8006658:	2300      	movs	r3, #0
 800665a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800665c:	2200      	movs	r2, #0
 800665e:	6879      	ldr	r1, [r7, #4]
 8006660:	2036      	movs	r0, #54	; 0x36
 8006662:	f7fa f875 	bl	8000750 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8006666:	2036      	movs	r0, #54	; 0x36
 8006668:	f7fa f88e 	bl	8000788 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800666c:	4b1e      	ldr	r3, [pc, #120]	; (80066e8 <HAL_InitTick+0x9c>)
 800666e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006670:	4a1d      	ldr	r2, [pc, #116]	; (80066e8 <HAL_InitTick+0x9c>)
 8006672:	f043 0310 	orr.w	r3, r3, #16
 8006676:	6593      	str	r3, [r2, #88]	; 0x58
 8006678:	4b1b      	ldr	r3, [pc, #108]	; (80066e8 <HAL_InitTick+0x9c>)
 800667a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800667c:	f003 0310 	and.w	r3, r3, #16
 8006680:	60fb      	str	r3, [r7, #12]
 8006682:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8006684:	f107 0210 	add.w	r2, r7, #16
 8006688:	f107 0314 	add.w	r3, r7, #20
 800668c:	4611      	mov	r1, r2
 800668e:	4618      	mov	r0, r3
 8006690:	f7fb ff06 	bl	80024a0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8006694:	f7fb fed8 	bl	8002448 <HAL_RCC_GetPCLK1Freq>
 8006698:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800669a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800669c:	4a13      	ldr	r2, [pc, #76]	; (80066ec <HAL_InitTick+0xa0>)
 800669e:	fba2 2303 	umull	r2, r3, r2, r3
 80066a2:	0c9b      	lsrs	r3, r3, #18
 80066a4:	3b01      	subs	r3, #1
 80066a6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80066a8:	4b11      	ldr	r3, [pc, #68]	; (80066f0 <HAL_InitTick+0xa4>)
 80066aa:	4a12      	ldr	r2, [pc, #72]	; (80066f4 <HAL_InitTick+0xa8>)
 80066ac:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 80066ae:	4b10      	ldr	r3, [pc, #64]	; (80066f0 <HAL_InitTick+0xa4>)
 80066b0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80066b4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80066b6:	4a0e      	ldr	r2, [pc, #56]	; (80066f0 <HAL_InitTick+0xa4>)
 80066b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ba:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80066bc:	4b0c      	ldr	r3, [pc, #48]	; (80066f0 <HAL_InitTick+0xa4>)
 80066be:	2200      	movs	r2, #0
 80066c0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80066c2:	4b0b      	ldr	r3, [pc, #44]	; (80066f0 <HAL_InitTick+0xa4>)
 80066c4:	2200      	movs	r2, #0
 80066c6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80066c8:	4809      	ldr	r0, [pc, #36]	; (80066f0 <HAL_InitTick+0xa4>)
 80066ca:	f7fc fc2b 	bl	8002f24 <HAL_TIM_Base_Init>
 80066ce:	4603      	mov	r3, r0
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d104      	bne.n	80066de <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80066d4:	4806      	ldr	r0, [pc, #24]	; (80066f0 <HAL_InitTick+0xa4>)
 80066d6:	f7fc fc87 	bl	8002fe8 <HAL_TIM_Base_Start_IT>
 80066da:	4603      	mov	r3, r0
 80066dc:	e000      	b.n	80066e0 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80066de:	2301      	movs	r3, #1
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3730      	adds	r7, #48	; 0x30
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}
 80066e8:	40021000 	.word	0x40021000
 80066ec:	431bde83 	.word	0x431bde83
 80066f0:	20001320 	.word	0x20001320
 80066f4:	40001000 	.word	0x40001000

080066f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80066f8:	b480      	push	{r7}
 80066fa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80066fc:	bf00      	nop
 80066fe:	46bd      	mov	sp, r7
 8006700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006704:	4770      	bx	lr

08006706 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006706:	b480      	push	{r7}
 8006708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800670a:	e7fe      	b.n	800670a <HardFault_Handler+0x4>

0800670c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800670c:	b480      	push	{r7}
 800670e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006710:	e7fe      	b.n	8006710 <MemManage_Handler+0x4>

08006712 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006712:	b480      	push	{r7}
 8006714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006716:	e7fe      	b.n	8006716 <BusFault_Handler+0x4>

08006718 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006718:	b480      	push	{r7}
 800671a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800671c:	e7fe      	b.n	800671c <UsageFault_Handler+0x4>

0800671e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800671e:	b480      	push	{r7}
 8006720:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006722:	bf00      	nop
 8006724:	46bd      	mov	sp, r7
 8006726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672a:	4770      	bx	lr

0800672c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8006730:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8006734:	f7fa fb02 	bl	8000d3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8006738:	bf00      	nop
 800673a:	bd80      	pop	{r7, pc}

0800673c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8006740:	4802      	ldr	r0, [pc, #8]	; (800674c <TIM6_DAC_IRQHandler+0x10>)
 8006742:	f7fc fcc1 	bl	80030c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8006746:	bf00      	nop
 8006748:	bd80      	pop	{r7, pc}
 800674a:	bf00      	nop
 800674c:	20001320 	.word	0x20001320

08006750 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b086      	sub	sp, #24
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006758:	4a14      	ldr	r2, [pc, #80]	; (80067ac <_sbrk+0x5c>)
 800675a:	4b15      	ldr	r3, [pc, #84]	; (80067b0 <_sbrk+0x60>)
 800675c:	1ad3      	subs	r3, r2, r3
 800675e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006764:	4b13      	ldr	r3, [pc, #76]	; (80067b4 <_sbrk+0x64>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d102      	bne.n	8006772 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800676c:	4b11      	ldr	r3, [pc, #68]	; (80067b4 <_sbrk+0x64>)
 800676e:	4a12      	ldr	r2, [pc, #72]	; (80067b8 <_sbrk+0x68>)
 8006770:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006772:	4b10      	ldr	r3, [pc, #64]	; (80067b4 <_sbrk+0x64>)
 8006774:	681a      	ldr	r2, [r3, #0]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	4413      	add	r3, r2
 800677a:	693a      	ldr	r2, [r7, #16]
 800677c:	429a      	cmp	r2, r3
 800677e:	d207      	bcs.n	8006790 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006780:	f000 f87c 	bl	800687c <__errno>
 8006784:	4602      	mov	r2, r0
 8006786:	230c      	movs	r3, #12
 8006788:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800678a:	f04f 33ff 	mov.w	r3, #4294967295
 800678e:	e009      	b.n	80067a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006790:	4b08      	ldr	r3, [pc, #32]	; (80067b4 <_sbrk+0x64>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006796:	4b07      	ldr	r3, [pc, #28]	; (80067b4 <_sbrk+0x64>)
 8006798:	681a      	ldr	r2, [r3, #0]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	4413      	add	r3, r2
 800679e:	4a05      	ldr	r2, [pc, #20]	; (80067b4 <_sbrk+0x64>)
 80067a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80067a2:	68fb      	ldr	r3, [r7, #12]
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	3718      	adds	r7, #24
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}
 80067ac:	20018000 	.word	0x20018000
 80067b0:	00000400 	.word	0x00000400
 80067b4:	2000107c 	.word	0x2000107c
 80067b8:	20001370 	.word	0x20001370

080067bc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80067bc:	b480      	push	{r7}
 80067be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80067c0:	4b17      	ldr	r3, [pc, #92]	; (8006820 <SystemInit+0x64>)
 80067c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067c6:	4a16      	ldr	r2, [pc, #88]	; (8006820 <SystemInit+0x64>)
 80067c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80067cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80067d0:	4b14      	ldr	r3, [pc, #80]	; (8006824 <SystemInit+0x68>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a13      	ldr	r2, [pc, #76]	; (8006824 <SystemInit+0x68>)
 80067d6:	f043 0301 	orr.w	r3, r3, #1
 80067da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80067dc:	4b11      	ldr	r3, [pc, #68]	; (8006824 <SystemInit+0x68>)
 80067de:	2200      	movs	r2, #0
 80067e0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80067e2:	4b10      	ldr	r3, [pc, #64]	; (8006824 <SystemInit+0x68>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a0f      	ldr	r2, [pc, #60]	; (8006824 <SystemInit+0x68>)
 80067e8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80067ec:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80067f0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80067f2:	4b0c      	ldr	r3, [pc, #48]	; (8006824 <SystemInit+0x68>)
 80067f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80067f8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80067fa:	4b0a      	ldr	r3, [pc, #40]	; (8006824 <SystemInit+0x68>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a09      	ldr	r2, [pc, #36]	; (8006824 <SystemInit+0x68>)
 8006800:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006804:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8006806:	4b07      	ldr	r3, [pc, #28]	; (8006824 <SystemInit+0x68>)
 8006808:	2200      	movs	r2, #0
 800680a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800680c:	4b04      	ldr	r3, [pc, #16]	; (8006820 <SystemInit+0x64>)
 800680e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006812:	609a      	str	r2, [r3, #8]
#endif
}
 8006814:	bf00      	nop
 8006816:	46bd      	mov	sp, r7
 8006818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681c:	4770      	bx	lr
 800681e:	bf00      	nop
 8006820:	e000ed00 	.word	0xe000ed00
 8006824:	40021000 	.word	0x40021000

08006828 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8006828:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006860 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800682c:	f7ff ffc6 	bl	80067bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8006830:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8006832:	e003      	b.n	800683c <LoopCopyDataInit>

08006834 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8006834:	4b0b      	ldr	r3, [pc, #44]	; (8006864 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8006836:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8006838:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800683a:	3104      	adds	r1, #4

0800683c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800683c:	480a      	ldr	r0, [pc, #40]	; (8006868 <LoopForever+0xa>)
	ldr	r3, =_edata
 800683e:	4b0b      	ldr	r3, [pc, #44]	; (800686c <LoopForever+0xe>)
	adds	r2, r0, r1
 8006840:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8006842:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8006844:	d3f6      	bcc.n	8006834 <CopyDataInit>
	ldr	r2, =_sbss
 8006846:	4a0a      	ldr	r2, [pc, #40]	; (8006870 <LoopForever+0x12>)
	b	LoopFillZerobss
 8006848:	e002      	b.n	8006850 <LoopFillZerobss>

0800684a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800684a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800684c:	f842 3b04 	str.w	r3, [r2], #4

08006850 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8006850:	4b08      	ldr	r3, [pc, #32]	; (8006874 <LoopForever+0x16>)
	cmp	r2, r3
 8006852:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8006854:	d3f9      	bcc.n	800684a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006856:	f000 f817 	bl	8006888 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800685a:	f7ff f8c5 	bl	80059e8 <main>

0800685e <LoopForever>:

LoopForever:
    b LoopForever
 800685e:	e7fe      	b.n	800685e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8006860:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8006864:	080072b0 	.word	0x080072b0
	ldr	r0, =_sdata
 8006868:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800686c:	200000f8 	.word	0x200000f8
	ldr	r2, =_sbss
 8006870:	200000f8 	.word	0x200000f8
	ldr	r3, = _ebss
 8006874:	20001370 	.word	0x20001370

08006878 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006878:	e7fe      	b.n	8006878 <ADC1_2_IRQHandler>
	...

0800687c <__errno>:
 800687c:	4b01      	ldr	r3, [pc, #4]	; (8006884 <__errno+0x8>)
 800687e:	6818      	ldr	r0, [r3, #0]
 8006880:	4770      	bx	lr
 8006882:	bf00      	nop
 8006884:	20000094 	.word	0x20000094

08006888 <__libc_init_array>:
 8006888:	b570      	push	{r4, r5, r6, lr}
 800688a:	4e0d      	ldr	r6, [pc, #52]	; (80068c0 <__libc_init_array+0x38>)
 800688c:	4c0d      	ldr	r4, [pc, #52]	; (80068c4 <__libc_init_array+0x3c>)
 800688e:	1ba4      	subs	r4, r4, r6
 8006890:	10a4      	asrs	r4, r4, #2
 8006892:	2500      	movs	r5, #0
 8006894:	42a5      	cmp	r5, r4
 8006896:	d109      	bne.n	80068ac <__libc_init_array+0x24>
 8006898:	4e0b      	ldr	r6, [pc, #44]	; (80068c8 <__libc_init_array+0x40>)
 800689a:	4c0c      	ldr	r4, [pc, #48]	; (80068cc <__libc_init_array+0x44>)
 800689c:	f000 fc28 	bl	80070f0 <_init>
 80068a0:	1ba4      	subs	r4, r4, r6
 80068a2:	10a4      	asrs	r4, r4, #2
 80068a4:	2500      	movs	r5, #0
 80068a6:	42a5      	cmp	r5, r4
 80068a8:	d105      	bne.n	80068b6 <__libc_init_array+0x2e>
 80068aa:	bd70      	pop	{r4, r5, r6, pc}
 80068ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80068b0:	4798      	blx	r3
 80068b2:	3501      	adds	r5, #1
 80068b4:	e7ee      	b.n	8006894 <__libc_init_array+0xc>
 80068b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80068ba:	4798      	blx	r3
 80068bc:	3501      	adds	r5, #1
 80068be:	e7f2      	b.n	80068a6 <__libc_init_array+0x1e>
 80068c0:	080072a8 	.word	0x080072a8
 80068c4:	080072a8 	.word	0x080072a8
 80068c8:	080072a8 	.word	0x080072a8
 80068cc:	080072ac 	.word	0x080072ac

080068d0 <memcpy>:
 80068d0:	b510      	push	{r4, lr}
 80068d2:	1e43      	subs	r3, r0, #1
 80068d4:	440a      	add	r2, r1
 80068d6:	4291      	cmp	r1, r2
 80068d8:	d100      	bne.n	80068dc <memcpy+0xc>
 80068da:	bd10      	pop	{r4, pc}
 80068dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80068e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80068e4:	e7f7      	b.n	80068d6 <memcpy+0x6>

080068e6 <memset>:
 80068e6:	4402      	add	r2, r0
 80068e8:	4603      	mov	r3, r0
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d100      	bne.n	80068f0 <memset+0xa>
 80068ee:	4770      	bx	lr
 80068f0:	f803 1b01 	strb.w	r1, [r3], #1
 80068f4:	e7f9      	b.n	80068ea <memset+0x4>
	...

080068f8 <siprintf>:
 80068f8:	b40e      	push	{r1, r2, r3}
 80068fa:	b500      	push	{lr}
 80068fc:	b09c      	sub	sp, #112	; 0x70
 80068fe:	ab1d      	add	r3, sp, #116	; 0x74
 8006900:	9002      	str	r0, [sp, #8]
 8006902:	9006      	str	r0, [sp, #24]
 8006904:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006908:	4809      	ldr	r0, [pc, #36]	; (8006930 <siprintf+0x38>)
 800690a:	9107      	str	r1, [sp, #28]
 800690c:	9104      	str	r1, [sp, #16]
 800690e:	4909      	ldr	r1, [pc, #36]	; (8006934 <siprintf+0x3c>)
 8006910:	f853 2b04 	ldr.w	r2, [r3], #4
 8006914:	9105      	str	r1, [sp, #20]
 8006916:	6800      	ldr	r0, [r0, #0]
 8006918:	9301      	str	r3, [sp, #4]
 800691a:	a902      	add	r1, sp, #8
 800691c:	f000 f866 	bl	80069ec <_svfiprintf_r>
 8006920:	9b02      	ldr	r3, [sp, #8]
 8006922:	2200      	movs	r2, #0
 8006924:	701a      	strb	r2, [r3, #0]
 8006926:	b01c      	add	sp, #112	; 0x70
 8006928:	f85d eb04 	ldr.w	lr, [sp], #4
 800692c:	b003      	add	sp, #12
 800692e:	4770      	bx	lr
 8006930:	20000094 	.word	0x20000094
 8006934:	ffff0208 	.word	0xffff0208

08006938 <__ssputs_r>:
 8006938:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800693c:	688e      	ldr	r6, [r1, #8]
 800693e:	429e      	cmp	r6, r3
 8006940:	4682      	mov	sl, r0
 8006942:	460c      	mov	r4, r1
 8006944:	4690      	mov	r8, r2
 8006946:	4699      	mov	r9, r3
 8006948:	d837      	bhi.n	80069ba <__ssputs_r+0x82>
 800694a:	898a      	ldrh	r2, [r1, #12]
 800694c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006950:	d031      	beq.n	80069b6 <__ssputs_r+0x7e>
 8006952:	6825      	ldr	r5, [r4, #0]
 8006954:	6909      	ldr	r1, [r1, #16]
 8006956:	1a6f      	subs	r7, r5, r1
 8006958:	6965      	ldr	r5, [r4, #20]
 800695a:	2302      	movs	r3, #2
 800695c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006960:	fb95 f5f3 	sdiv	r5, r5, r3
 8006964:	f109 0301 	add.w	r3, r9, #1
 8006968:	443b      	add	r3, r7
 800696a:	429d      	cmp	r5, r3
 800696c:	bf38      	it	cc
 800696e:	461d      	movcc	r5, r3
 8006970:	0553      	lsls	r3, r2, #21
 8006972:	d530      	bpl.n	80069d6 <__ssputs_r+0x9e>
 8006974:	4629      	mov	r1, r5
 8006976:	f000 fb21 	bl	8006fbc <_malloc_r>
 800697a:	4606      	mov	r6, r0
 800697c:	b950      	cbnz	r0, 8006994 <__ssputs_r+0x5c>
 800697e:	230c      	movs	r3, #12
 8006980:	f8ca 3000 	str.w	r3, [sl]
 8006984:	89a3      	ldrh	r3, [r4, #12]
 8006986:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800698a:	81a3      	strh	r3, [r4, #12]
 800698c:	f04f 30ff 	mov.w	r0, #4294967295
 8006990:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006994:	463a      	mov	r2, r7
 8006996:	6921      	ldr	r1, [r4, #16]
 8006998:	f7ff ff9a 	bl	80068d0 <memcpy>
 800699c:	89a3      	ldrh	r3, [r4, #12]
 800699e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80069a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069a6:	81a3      	strh	r3, [r4, #12]
 80069a8:	6126      	str	r6, [r4, #16]
 80069aa:	6165      	str	r5, [r4, #20]
 80069ac:	443e      	add	r6, r7
 80069ae:	1bed      	subs	r5, r5, r7
 80069b0:	6026      	str	r6, [r4, #0]
 80069b2:	60a5      	str	r5, [r4, #8]
 80069b4:	464e      	mov	r6, r9
 80069b6:	454e      	cmp	r6, r9
 80069b8:	d900      	bls.n	80069bc <__ssputs_r+0x84>
 80069ba:	464e      	mov	r6, r9
 80069bc:	4632      	mov	r2, r6
 80069be:	4641      	mov	r1, r8
 80069c0:	6820      	ldr	r0, [r4, #0]
 80069c2:	f000 fa93 	bl	8006eec <memmove>
 80069c6:	68a3      	ldr	r3, [r4, #8]
 80069c8:	1b9b      	subs	r3, r3, r6
 80069ca:	60a3      	str	r3, [r4, #8]
 80069cc:	6823      	ldr	r3, [r4, #0]
 80069ce:	441e      	add	r6, r3
 80069d0:	6026      	str	r6, [r4, #0]
 80069d2:	2000      	movs	r0, #0
 80069d4:	e7dc      	b.n	8006990 <__ssputs_r+0x58>
 80069d6:	462a      	mov	r2, r5
 80069d8:	f000 fb4a 	bl	8007070 <_realloc_r>
 80069dc:	4606      	mov	r6, r0
 80069de:	2800      	cmp	r0, #0
 80069e0:	d1e2      	bne.n	80069a8 <__ssputs_r+0x70>
 80069e2:	6921      	ldr	r1, [r4, #16]
 80069e4:	4650      	mov	r0, sl
 80069e6:	f000 fa9b 	bl	8006f20 <_free_r>
 80069ea:	e7c8      	b.n	800697e <__ssputs_r+0x46>

080069ec <_svfiprintf_r>:
 80069ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069f0:	461d      	mov	r5, r3
 80069f2:	898b      	ldrh	r3, [r1, #12]
 80069f4:	061f      	lsls	r7, r3, #24
 80069f6:	b09d      	sub	sp, #116	; 0x74
 80069f8:	4680      	mov	r8, r0
 80069fa:	460c      	mov	r4, r1
 80069fc:	4616      	mov	r6, r2
 80069fe:	d50f      	bpl.n	8006a20 <_svfiprintf_r+0x34>
 8006a00:	690b      	ldr	r3, [r1, #16]
 8006a02:	b96b      	cbnz	r3, 8006a20 <_svfiprintf_r+0x34>
 8006a04:	2140      	movs	r1, #64	; 0x40
 8006a06:	f000 fad9 	bl	8006fbc <_malloc_r>
 8006a0a:	6020      	str	r0, [r4, #0]
 8006a0c:	6120      	str	r0, [r4, #16]
 8006a0e:	b928      	cbnz	r0, 8006a1c <_svfiprintf_r+0x30>
 8006a10:	230c      	movs	r3, #12
 8006a12:	f8c8 3000 	str.w	r3, [r8]
 8006a16:	f04f 30ff 	mov.w	r0, #4294967295
 8006a1a:	e0c8      	b.n	8006bae <_svfiprintf_r+0x1c2>
 8006a1c:	2340      	movs	r3, #64	; 0x40
 8006a1e:	6163      	str	r3, [r4, #20]
 8006a20:	2300      	movs	r3, #0
 8006a22:	9309      	str	r3, [sp, #36]	; 0x24
 8006a24:	2320      	movs	r3, #32
 8006a26:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006a2a:	2330      	movs	r3, #48	; 0x30
 8006a2c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006a30:	9503      	str	r5, [sp, #12]
 8006a32:	f04f 0b01 	mov.w	fp, #1
 8006a36:	4637      	mov	r7, r6
 8006a38:	463d      	mov	r5, r7
 8006a3a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006a3e:	b10b      	cbz	r3, 8006a44 <_svfiprintf_r+0x58>
 8006a40:	2b25      	cmp	r3, #37	; 0x25
 8006a42:	d13e      	bne.n	8006ac2 <_svfiprintf_r+0xd6>
 8006a44:	ebb7 0a06 	subs.w	sl, r7, r6
 8006a48:	d00b      	beq.n	8006a62 <_svfiprintf_r+0x76>
 8006a4a:	4653      	mov	r3, sl
 8006a4c:	4632      	mov	r2, r6
 8006a4e:	4621      	mov	r1, r4
 8006a50:	4640      	mov	r0, r8
 8006a52:	f7ff ff71 	bl	8006938 <__ssputs_r>
 8006a56:	3001      	adds	r0, #1
 8006a58:	f000 80a4 	beq.w	8006ba4 <_svfiprintf_r+0x1b8>
 8006a5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a5e:	4453      	add	r3, sl
 8006a60:	9309      	str	r3, [sp, #36]	; 0x24
 8006a62:	783b      	ldrb	r3, [r7, #0]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	f000 809d 	beq.w	8006ba4 <_svfiprintf_r+0x1b8>
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8006a70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006a74:	9304      	str	r3, [sp, #16]
 8006a76:	9307      	str	r3, [sp, #28]
 8006a78:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006a7c:	931a      	str	r3, [sp, #104]	; 0x68
 8006a7e:	462f      	mov	r7, r5
 8006a80:	2205      	movs	r2, #5
 8006a82:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006a86:	4850      	ldr	r0, [pc, #320]	; (8006bc8 <_svfiprintf_r+0x1dc>)
 8006a88:	f7f9 fba2 	bl	80001d0 <memchr>
 8006a8c:	9b04      	ldr	r3, [sp, #16]
 8006a8e:	b9d0      	cbnz	r0, 8006ac6 <_svfiprintf_r+0xda>
 8006a90:	06d9      	lsls	r1, r3, #27
 8006a92:	bf44      	itt	mi
 8006a94:	2220      	movmi	r2, #32
 8006a96:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006a9a:	071a      	lsls	r2, r3, #28
 8006a9c:	bf44      	itt	mi
 8006a9e:	222b      	movmi	r2, #43	; 0x2b
 8006aa0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006aa4:	782a      	ldrb	r2, [r5, #0]
 8006aa6:	2a2a      	cmp	r2, #42	; 0x2a
 8006aa8:	d015      	beq.n	8006ad6 <_svfiprintf_r+0xea>
 8006aaa:	9a07      	ldr	r2, [sp, #28]
 8006aac:	462f      	mov	r7, r5
 8006aae:	2000      	movs	r0, #0
 8006ab0:	250a      	movs	r5, #10
 8006ab2:	4639      	mov	r1, r7
 8006ab4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ab8:	3b30      	subs	r3, #48	; 0x30
 8006aba:	2b09      	cmp	r3, #9
 8006abc:	d94d      	bls.n	8006b5a <_svfiprintf_r+0x16e>
 8006abe:	b1b8      	cbz	r0, 8006af0 <_svfiprintf_r+0x104>
 8006ac0:	e00f      	b.n	8006ae2 <_svfiprintf_r+0xf6>
 8006ac2:	462f      	mov	r7, r5
 8006ac4:	e7b8      	b.n	8006a38 <_svfiprintf_r+0x4c>
 8006ac6:	4a40      	ldr	r2, [pc, #256]	; (8006bc8 <_svfiprintf_r+0x1dc>)
 8006ac8:	1a80      	subs	r0, r0, r2
 8006aca:	fa0b f000 	lsl.w	r0, fp, r0
 8006ace:	4318      	orrs	r0, r3
 8006ad0:	9004      	str	r0, [sp, #16]
 8006ad2:	463d      	mov	r5, r7
 8006ad4:	e7d3      	b.n	8006a7e <_svfiprintf_r+0x92>
 8006ad6:	9a03      	ldr	r2, [sp, #12]
 8006ad8:	1d11      	adds	r1, r2, #4
 8006ada:	6812      	ldr	r2, [r2, #0]
 8006adc:	9103      	str	r1, [sp, #12]
 8006ade:	2a00      	cmp	r2, #0
 8006ae0:	db01      	blt.n	8006ae6 <_svfiprintf_r+0xfa>
 8006ae2:	9207      	str	r2, [sp, #28]
 8006ae4:	e004      	b.n	8006af0 <_svfiprintf_r+0x104>
 8006ae6:	4252      	negs	r2, r2
 8006ae8:	f043 0302 	orr.w	r3, r3, #2
 8006aec:	9207      	str	r2, [sp, #28]
 8006aee:	9304      	str	r3, [sp, #16]
 8006af0:	783b      	ldrb	r3, [r7, #0]
 8006af2:	2b2e      	cmp	r3, #46	; 0x2e
 8006af4:	d10c      	bne.n	8006b10 <_svfiprintf_r+0x124>
 8006af6:	787b      	ldrb	r3, [r7, #1]
 8006af8:	2b2a      	cmp	r3, #42	; 0x2a
 8006afa:	d133      	bne.n	8006b64 <_svfiprintf_r+0x178>
 8006afc:	9b03      	ldr	r3, [sp, #12]
 8006afe:	1d1a      	adds	r2, r3, #4
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	9203      	str	r2, [sp, #12]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	bfb8      	it	lt
 8006b08:	f04f 33ff 	movlt.w	r3, #4294967295
 8006b0c:	3702      	adds	r7, #2
 8006b0e:	9305      	str	r3, [sp, #20]
 8006b10:	4d2e      	ldr	r5, [pc, #184]	; (8006bcc <_svfiprintf_r+0x1e0>)
 8006b12:	7839      	ldrb	r1, [r7, #0]
 8006b14:	2203      	movs	r2, #3
 8006b16:	4628      	mov	r0, r5
 8006b18:	f7f9 fb5a 	bl	80001d0 <memchr>
 8006b1c:	b138      	cbz	r0, 8006b2e <_svfiprintf_r+0x142>
 8006b1e:	2340      	movs	r3, #64	; 0x40
 8006b20:	1b40      	subs	r0, r0, r5
 8006b22:	fa03 f000 	lsl.w	r0, r3, r0
 8006b26:	9b04      	ldr	r3, [sp, #16]
 8006b28:	4303      	orrs	r3, r0
 8006b2a:	3701      	adds	r7, #1
 8006b2c:	9304      	str	r3, [sp, #16]
 8006b2e:	7839      	ldrb	r1, [r7, #0]
 8006b30:	4827      	ldr	r0, [pc, #156]	; (8006bd0 <_svfiprintf_r+0x1e4>)
 8006b32:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006b36:	2206      	movs	r2, #6
 8006b38:	1c7e      	adds	r6, r7, #1
 8006b3a:	f7f9 fb49 	bl	80001d0 <memchr>
 8006b3e:	2800      	cmp	r0, #0
 8006b40:	d038      	beq.n	8006bb4 <_svfiprintf_r+0x1c8>
 8006b42:	4b24      	ldr	r3, [pc, #144]	; (8006bd4 <_svfiprintf_r+0x1e8>)
 8006b44:	bb13      	cbnz	r3, 8006b8c <_svfiprintf_r+0x1a0>
 8006b46:	9b03      	ldr	r3, [sp, #12]
 8006b48:	3307      	adds	r3, #7
 8006b4a:	f023 0307 	bic.w	r3, r3, #7
 8006b4e:	3308      	adds	r3, #8
 8006b50:	9303      	str	r3, [sp, #12]
 8006b52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b54:	444b      	add	r3, r9
 8006b56:	9309      	str	r3, [sp, #36]	; 0x24
 8006b58:	e76d      	b.n	8006a36 <_svfiprintf_r+0x4a>
 8006b5a:	fb05 3202 	mla	r2, r5, r2, r3
 8006b5e:	2001      	movs	r0, #1
 8006b60:	460f      	mov	r7, r1
 8006b62:	e7a6      	b.n	8006ab2 <_svfiprintf_r+0xc6>
 8006b64:	2300      	movs	r3, #0
 8006b66:	3701      	adds	r7, #1
 8006b68:	9305      	str	r3, [sp, #20]
 8006b6a:	4619      	mov	r1, r3
 8006b6c:	250a      	movs	r5, #10
 8006b6e:	4638      	mov	r0, r7
 8006b70:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b74:	3a30      	subs	r2, #48	; 0x30
 8006b76:	2a09      	cmp	r2, #9
 8006b78:	d903      	bls.n	8006b82 <_svfiprintf_r+0x196>
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d0c8      	beq.n	8006b10 <_svfiprintf_r+0x124>
 8006b7e:	9105      	str	r1, [sp, #20]
 8006b80:	e7c6      	b.n	8006b10 <_svfiprintf_r+0x124>
 8006b82:	fb05 2101 	mla	r1, r5, r1, r2
 8006b86:	2301      	movs	r3, #1
 8006b88:	4607      	mov	r7, r0
 8006b8a:	e7f0      	b.n	8006b6e <_svfiprintf_r+0x182>
 8006b8c:	ab03      	add	r3, sp, #12
 8006b8e:	9300      	str	r3, [sp, #0]
 8006b90:	4622      	mov	r2, r4
 8006b92:	4b11      	ldr	r3, [pc, #68]	; (8006bd8 <_svfiprintf_r+0x1ec>)
 8006b94:	a904      	add	r1, sp, #16
 8006b96:	4640      	mov	r0, r8
 8006b98:	f3af 8000 	nop.w
 8006b9c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006ba0:	4681      	mov	r9, r0
 8006ba2:	d1d6      	bne.n	8006b52 <_svfiprintf_r+0x166>
 8006ba4:	89a3      	ldrh	r3, [r4, #12]
 8006ba6:	065b      	lsls	r3, r3, #25
 8006ba8:	f53f af35 	bmi.w	8006a16 <_svfiprintf_r+0x2a>
 8006bac:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006bae:	b01d      	add	sp, #116	; 0x74
 8006bb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bb4:	ab03      	add	r3, sp, #12
 8006bb6:	9300      	str	r3, [sp, #0]
 8006bb8:	4622      	mov	r2, r4
 8006bba:	4b07      	ldr	r3, [pc, #28]	; (8006bd8 <_svfiprintf_r+0x1ec>)
 8006bbc:	a904      	add	r1, sp, #16
 8006bbe:	4640      	mov	r0, r8
 8006bc0:	f000 f882 	bl	8006cc8 <_printf_i>
 8006bc4:	e7ea      	b.n	8006b9c <_svfiprintf_r+0x1b0>
 8006bc6:	bf00      	nop
 8006bc8:	0800726c 	.word	0x0800726c
 8006bcc:	08007272 	.word	0x08007272
 8006bd0:	08007276 	.word	0x08007276
 8006bd4:	00000000 	.word	0x00000000
 8006bd8:	08006939 	.word	0x08006939

08006bdc <_printf_common>:
 8006bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006be0:	4691      	mov	r9, r2
 8006be2:	461f      	mov	r7, r3
 8006be4:	688a      	ldr	r2, [r1, #8]
 8006be6:	690b      	ldr	r3, [r1, #16]
 8006be8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006bec:	4293      	cmp	r3, r2
 8006bee:	bfb8      	it	lt
 8006bf0:	4613      	movlt	r3, r2
 8006bf2:	f8c9 3000 	str.w	r3, [r9]
 8006bf6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006bfa:	4606      	mov	r6, r0
 8006bfc:	460c      	mov	r4, r1
 8006bfe:	b112      	cbz	r2, 8006c06 <_printf_common+0x2a>
 8006c00:	3301      	adds	r3, #1
 8006c02:	f8c9 3000 	str.w	r3, [r9]
 8006c06:	6823      	ldr	r3, [r4, #0]
 8006c08:	0699      	lsls	r1, r3, #26
 8006c0a:	bf42      	ittt	mi
 8006c0c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006c10:	3302      	addmi	r3, #2
 8006c12:	f8c9 3000 	strmi.w	r3, [r9]
 8006c16:	6825      	ldr	r5, [r4, #0]
 8006c18:	f015 0506 	ands.w	r5, r5, #6
 8006c1c:	d107      	bne.n	8006c2e <_printf_common+0x52>
 8006c1e:	f104 0a19 	add.w	sl, r4, #25
 8006c22:	68e3      	ldr	r3, [r4, #12]
 8006c24:	f8d9 2000 	ldr.w	r2, [r9]
 8006c28:	1a9b      	subs	r3, r3, r2
 8006c2a:	42ab      	cmp	r3, r5
 8006c2c:	dc28      	bgt.n	8006c80 <_printf_common+0xa4>
 8006c2e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006c32:	6822      	ldr	r2, [r4, #0]
 8006c34:	3300      	adds	r3, #0
 8006c36:	bf18      	it	ne
 8006c38:	2301      	movne	r3, #1
 8006c3a:	0692      	lsls	r2, r2, #26
 8006c3c:	d42d      	bmi.n	8006c9a <_printf_common+0xbe>
 8006c3e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006c42:	4639      	mov	r1, r7
 8006c44:	4630      	mov	r0, r6
 8006c46:	47c0      	blx	r8
 8006c48:	3001      	adds	r0, #1
 8006c4a:	d020      	beq.n	8006c8e <_printf_common+0xb2>
 8006c4c:	6823      	ldr	r3, [r4, #0]
 8006c4e:	68e5      	ldr	r5, [r4, #12]
 8006c50:	f8d9 2000 	ldr.w	r2, [r9]
 8006c54:	f003 0306 	and.w	r3, r3, #6
 8006c58:	2b04      	cmp	r3, #4
 8006c5a:	bf08      	it	eq
 8006c5c:	1aad      	subeq	r5, r5, r2
 8006c5e:	68a3      	ldr	r3, [r4, #8]
 8006c60:	6922      	ldr	r2, [r4, #16]
 8006c62:	bf0c      	ite	eq
 8006c64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006c68:	2500      	movne	r5, #0
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	bfc4      	itt	gt
 8006c6e:	1a9b      	subgt	r3, r3, r2
 8006c70:	18ed      	addgt	r5, r5, r3
 8006c72:	f04f 0900 	mov.w	r9, #0
 8006c76:	341a      	adds	r4, #26
 8006c78:	454d      	cmp	r5, r9
 8006c7a:	d11a      	bne.n	8006cb2 <_printf_common+0xd6>
 8006c7c:	2000      	movs	r0, #0
 8006c7e:	e008      	b.n	8006c92 <_printf_common+0xb6>
 8006c80:	2301      	movs	r3, #1
 8006c82:	4652      	mov	r2, sl
 8006c84:	4639      	mov	r1, r7
 8006c86:	4630      	mov	r0, r6
 8006c88:	47c0      	blx	r8
 8006c8a:	3001      	adds	r0, #1
 8006c8c:	d103      	bne.n	8006c96 <_printf_common+0xba>
 8006c8e:	f04f 30ff 	mov.w	r0, #4294967295
 8006c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c96:	3501      	adds	r5, #1
 8006c98:	e7c3      	b.n	8006c22 <_printf_common+0x46>
 8006c9a:	18e1      	adds	r1, r4, r3
 8006c9c:	1c5a      	adds	r2, r3, #1
 8006c9e:	2030      	movs	r0, #48	; 0x30
 8006ca0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006ca4:	4422      	add	r2, r4
 8006ca6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006caa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006cae:	3302      	adds	r3, #2
 8006cb0:	e7c5      	b.n	8006c3e <_printf_common+0x62>
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	4622      	mov	r2, r4
 8006cb6:	4639      	mov	r1, r7
 8006cb8:	4630      	mov	r0, r6
 8006cba:	47c0      	blx	r8
 8006cbc:	3001      	adds	r0, #1
 8006cbe:	d0e6      	beq.n	8006c8e <_printf_common+0xb2>
 8006cc0:	f109 0901 	add.w	r9, r9, #1
 8006cc4:	e7d8      	b.n	8006c78 <_printf_common+0x9c>
	...

08006cc8 <_printf_i>:
 8006cc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006ccc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006cd0:	460c      	mov	r4, r1
 8006cd2:	7e09      	ldrb	r1, [r1, #24]
 8006cd4:	b085      	sub	sp, #20
 8006cd6:	296e      	cmp	r1, #110	; 0x6e
 8006cd8:	4617      	mov	r7, r2
 8006cda:	4606      	mov	r6, r0
 8006cdc:	4698      	mov	r8, r3
 8006cde:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006ce0:	f000 80b3 	beq.w	8006e4a <_printf_i+0x182>
 8006ce4:	d822      	bhi.n	8006d2c <_printf_i+0x64>
 8006ce6:	2963      	cmp	r1, #99	; 0x63
 8006ce8:	d036      	beq.n	8006d58 <_printf_i+0x90>
 8006cea:	d80a      	bhi.n	8006d02 <_printf_i+0x3a>
 8006cec:	2900      	cmp	r1, #0
 8006cee:	f000 80b9 	beq.w	8006e64 <_printf_i+0x19c>
 8006cf2:	2958      	cmp	r1, #88	; 0x58
 8006cf4:	f000 8083 	beq.w	8006dfe <_printf_i+0x136>
 8006cf8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006cfc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006d00:	e032      	b.n	8006d68 <_printf_i+0xa0>
 8006d02:	2964      	cmp	r1, #100	; 0x64
 8006d04:	d001      	beq.n	8006d0a <_printf_i+0x42>
 8006d06:	2969      	cmp	r1, #105	; 0x69
 8006d08:	d1f6      	bne.n	8006cf8 <_printf_i+0x30>
 8006d0a:	6820      	ldr	r0, [r4, #0]
 8006d0c:	6813      	ldr	r3, [r2, #0]
 8006d0e:	0605      	lsls	r5, r0, #24
 8006d10:	f103 0104 	add.w	r1, r3, #4
 8006d14:	d52a      	bpl.n	8006d6c <_printf_i+0xa4>
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	6011      	str	r1, [r2, #0]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	da03      	bge.n	8006d26 <_printf_i+0x5e>
 8006d1e:	222d      	movs	r2, #45	; 0x2d
 8006d20:	425b      	negs	r3, r3
 8006d22:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006d26:	486f      	ldr	r0, [pc, #444]	; (8006ee4 <_printf_i+0x21c>)
 8006d28:	220a      	movs	r2, #10
 8006d2a:	e039      	b.n	8006da0 <_printf_i+0xd8>
 8006d2c:	2973      	cmp	r1, #115	; 0x73
 8006d2e:	f000 809d 	beq.w	8006e6c <_printf_i+0x1a4>
 8006d32:	d808      	bhi.n	8006d46 <_printf_i+0x7e>
 8006d34:	296f      	cmp	r1, #111	; 0x6f
 8006d36:	d020      	beq.n	8006d7a <_printf_i+0xb2>
 8006d38:	2970      	cmp	r1, #112	; 0x70
 8006d3a:	d1dd      	bne.n	8006cf8 <_printf_i+0x30>
 8006d3c:	6823      	ldr	r3, [r4, #0]
 8006d3e:	f043 0320 	orr.w	r3, r3, #32
 8006d42:	6023      	str	r3, [r4, #0]
 8006d44:	e003      	b.n	8006d4e <_printf_i+0x86>
 8006d46:	2975      	cmp	r1, #117	; 0x75
 8006d48:	d017      	beq.n	8006d7a <_printf_i+0xb2>
 8006d4a:	2978      	cmp	r1, #120	; 0x78
 8006d4c:	d1d4      	bne.n	8006cf8 <_printf_i+0x30>
 8006d4e:	2378      	movs	r3, #120	; 0x78
 8006d50:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006d54:	4864      	ldr	r0, [pc, #400]	; (8006ee8 <_printf_i+0x220>)
 8006d56:	e055      	b.n	8006e04 <_printf_i+0x13c>
 8006d58:	6813      	ldr	r3, [r2, #0]
 8006d5a:	1d19      	adds	r1, r3, #4
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	6011      	str	r1, [r2, #0]
 8006d60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006d64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006d68:	2301      	movs	r3, #1
 8006d6a:	e08c      	b.n	8006e86 <_printf_i+0x1be>
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	6011      	str	r1, [r2, #0]
 8006d70:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006d74:	bf18      	it	ne
 8006d76:	b21b      	sxthne	r3, r3
 8006d78:	e7cf      	b.n	8006d1a <_printf_i+0x52>
 8006d7a:	6813      	ldr	r3, [r2, #0]
 8006d7c:	6825      	ldr	r5, [r4, #0]
 8006d7e:	1d18      	adds	r0, r3, #4
 8006d80:	6010      	str	r0, [r2, #0]
 8006d82:	0628      	lsls	r0, r5, #24
 8006d84:	d501      	bpl.n	8006d8a <_printf_i+0xc2>
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	e002      	b.n	8006d90 <_printf_i+0xc8>
 8006d8a:	0668      	lsls	r0, r5, #25
 8006d8c:	d5fb      	bpl.n	8006d86 <_printf_i+0xbe>
 8006d8e:	881b      	ldrh	r3, [r3, #0]
 8006d90:	4854      	ldr	r0, [pc, #336]	; (8006ee4 <_printf_i+0x21c>)
 8006d92:	296f      	cmp	r1, #111	; 0x6f
 8006d94:	bf14      	ite	ne
 8006d96:	220a      	movne	r2, #10
 8006d98:	2208      	moveq	r2, #8
 8006d9a:	2100      	movs	r1, #0
 8006d9c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006da0:	6865      	ldr	r5, [r4, #4]
 8006da2:	60a5      	str	r5, [r4, #8]
 8006da4:	2d00      	cmp	r5, #0
 8006da6:	f2c0 8095 	blt.w	8006ed4 <_printf_i+0x20c>
 8006daa:	6821      	ldr	r1, [r4, #0]
 8006dac:	f021 0104 	bic.w	r1, r1, #4
 8006db0:	6021      	str	r1, [r4, #0]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d13d      	bne.n	8006e32 <_printf_i+0x16a>
 8006db6:	2d00      	cmp	r5, #0
 8006db8:	f040 808e 	bne.w	8006ed8 <_printf_i+0x210>
 8006dbc:	4665      	mov	r5, ip
 8006dbe:	2a08      	cmp	r2, #8
 8006dc0:	d10b      	bne.n	8006dda <_printf_i+0x112>
 8006dc2:	6823      	ldr	r3, [r4, #0]
 8006dc4:	07db      	lsls	r3, r3, #31
 8006dc6:	d508      	bpl.n	8006dda <_printf_i+0x112>
 8006dc8:	6923      	ldr	r3, [r4, #16]
 8006dca:	6862      	ldr	r2, [r4, #4]
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	bfde      	ittt	le
 8006dd0:	2330      	movle	r3, #48	; 0x30
 8006dd2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006dd6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006dda:	ebac 0305 	sub.w	r3, ip, r5
 8006dde:	6123      	str	r3, [r4, #16]
 8006de0:	f8cd 8000 	str.w	r8, [sp]
 8006de4:	463b      	mov	r3, r7
 8006de6:	aa03      	add	r2, sp, #12
 8006de8:	4621      	mov	r1, r4
 8006dea:	4630      	mov	r0, r6
 8006dec:	f7ff fef6 	bl	8006bdc <_printf_common>
 8006df0:	3001      	adds	r0, #1
 8006df2:	d14d      	bne.n	8006e90 <_printf_i+0x1c8>
 8006df4:	f04f 30ff 	mov.w	r0, #4294967295
 8006df8:	b005      	add	sp, #20
 8006dfa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006dfe:	4839      	ldr	r0, [pc, #228]	; (8006ee4 <_printf_i+0x21c>)
 8006e00:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006e04:	6813      	ldr	r3, [r2, #0]
 8006e06:	6821      	ldr	r1, [r4, #0]
 8006e08:	1d1d      	adds	r5, r3, #4
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	6015      	str	r5, [r2, #0]
 8006e0e:	060a      	lsls	r2, r1, #24
 8006e10:	d50b      	bpl.n	8006e2a <_printf_i+0x162>
 8006e12:	07ca      	lsls	r2, r1, #31
 8006e14:	bf44      	itt	mi
 8006e16:	f041 0120 	orrmi.w	r1, r1, #32
 8006e1a:	6021      	strmi	r1, [r4, #0]
 8006e1c:	b91b      	cbnz	r3, 8006e26 <_printf_i+0x15e>
 8006e1e:	6822      	ldr	r2, [r4, #0]
 8006e20:	f022 0220 	bic.w	r2, r2, #32
 8006e24:	6022      	str	r2, [r4, #0]
 8006e26:	2210      	movs	r2, #16
 8006e28:	e7b7      	b.n	8006d9a <_printf_i+0xd2>
 8006e2a:	064d      	lsls	r5, r1, #25
 8006e2c:	bf48      	it	mi
 8006e2e:	b29b      	uxthmi	r3, r3
 8006e30:	e7ef      	b.n	8006e12 <_printf_i+0x14a>
 8006e32:	4665      	mov	r5, ip
 8006e34:	fbb3 f1f2 	udiv	r1, r3, r2
 8006e38:	fb02 3311 	mls	r3, r2, r1, r3
 8006e3c:	5cc3      	ldrb	r3, [r0, r3]
 8006e3e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006e42:	460b      	mov	r3, r1
 8006e44:	2900      	cmp	r1, #0
 8006e46:	d1f5      	bne.n	8006e34 <_printf_i+0x16c>
 8006e48:	e7b9      	b.n	8006dbe <_printf_i+0xf6>
 8006e4a:	6813      	ldr	r3, [r2, #0]
 8006e4c:	6825      	ldr	r5, [r4, #0]
 8006e4e:	6961      	ldr	r1, [r4, #20]
 8006e50:	1d18      	adds	r0, r3, #4
 8006e52:	6010      	str	r0, [r2, #0]
 8006e54:	0628      	lsls	r0, r5, #24
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	d501      	bpl.n	8006e5e <_printf_i+0x196>
 8006e5a:	6019      	str	r1, [r3, #0]
 8006e5c:	e002      	b.n	8006e64 <_printf_i+0x19c>
 8006e5e:	066a      	lsls	r2, r5, #25
 8006e60:	d5fb      	bpl.n	8006e5a <_printf_i+0x192>
 8006e62:	8019      	strh	r1, [r3, #0]
 8006e64:	2300      	movs	r3, #0
 8006e66:	6123      	str	r3, [r4, #16]
 8006e68:	4665      	mov	r5, ip
 8006e6a:	e7b9      	b.n	8006de0 <_printf_i+0x118>
 8006e6c:	6813      	ldr	r3, [r2, #0]
 8006e6e:	1d19      	adds	r1, r3, #4
 8006e70:	6011      	str	r1, [r2, #0]
 8006e72:	681d      	ldr	r5, [r3, #0]
 8006e74:	6862      	ldr	r2, [r4, #4]
 8006e76:	2100      	movs	r1, #0
 8006e78:	4628      	mov	r0, r5
 8006e7a:	f7f9 f9a9 	bl	80001d0 <memchr>
 8006e7e:	b108      	cbz	r0, 8006e84 <_printf_i+0x1bc>
 8006e80:	1b40      	subs	r0, r0, r5
 8006e82:	6060      	str	r0, [r4, #4]
 8006e84:	6863      	ldr	r3, [r4, #4]
 8006e86:	6123      	str	r3, [r4, #16]
 8006e88:	2300      	movs	r3, #0
 8006e8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e8e:	e7a7      	b.n	8006de0 <_printf_i+0x118>
 8006e90:	6923      	ldr	r3, [r4, #16]
 8006e92:	462a      	mov	r2, r5
 8006e94:	4639      	mov	r1, r7
 8006e96:	4630      	mov	r0, r6
 8006e98:	47c0      	blx	r8
 8006e9a:	3001      	adds	r0, #1
 8006e9c:	d0aa      	beq.n	8006df4 <_printf_i+0x12c>
 8006e9e:	6823      	ldr	r3, [r4, #0]
 8006ea0:	079b      	lsls	r3, r3, #30
 8006ea2:	d413      	bmi.n	8006ecc <_printf_i+0x204>
 8006ea4:	68e0      	ldr	r0, [r4, #12]
 8006ea6:	9b03      	ldr	r3, [sp, #12]
 8006ea8:	4298      	cmp	r0, r3
 8006eaa:	bfb8      	it	lt
 8006eac:	4618      	movlt	r0, r3
 8006eae:	e7a3      	b.n	8006df8 <_printf_i+0x130>
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	464a      	mov	r2, r9
 8006eb4:	4639      	mov	r1, r7
 8006eb6:	4630      	mov	r0, r6
 8006eb8:	47c0      	blx	r8
 8006eba:	3001      	adds	r0, #1
 8006ebc:	d09a      	beq.n	8006df4 <_printf_i+0x12c>
 8006ebe:	3501      	adds	r5, #1
 8006ec0:	68e3      	ldr	r3, [r4, #12]
 8006ec2:	9a03      	ldr	r2, [sp, #12]
 8006ec4:	1a9b      	subs	r3, r3, r2
 8006ec6:	42ab      	cmp	r3, r5
 8006ec8:	dcf2      	bgt.n	8006eb0 <_printf_i+0x1e8>
 8006eca:	e7eb      	b.n	8006ea4 <_printf_i+0x1dc>
 8006ecc:	2500      	movs	r5, #0
 8006ece:	f104 0919 	add.w	r9, r4, #25
 8006ed2:	e7f5      	b.n	8006ec0 <_printf_i+0x1f8>
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d1ac      	bne.n	8006e32 <_printf_i+0x16a>
 8006ed8:	7803      	ldrb	r3, [r0, #0]
 8006eda:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006ede:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ee2:	e76c      	b.n	8006dbe <_printf_i+0xf6>
 8006ee4:	0800727d 	.word	0x0800727d
 8006ee8:	0800728e 	.word	0x0800728e

08006eec <memmove>:
 8006eec:	4288      	cmp	r0, r1
 8006eee:	b510      	push	{r4, lr}
 8006ef0:	eb01 0302 	add.w	r3, r1, r2
 8006ef4:	d807      	bhi.n	8006f06 <memmove+0x1a>
 8006ef6:	1e42      	subs	r2, r0, #1
 8006ef8:	4299      	cmp	r1, r3
 8006efa:	d00a      	beq.n	8006f12 <memmove+0x26>
 8006efc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f00:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006f04:	e7f8      	b.n	8006ef8 <memmove+0xc>
 8006f06:	4283      	cmp	r3, r0
 8006f08:	d9f5      	bls.n	8006ef6 <memmove+0xa>
 8006f0a:	1881      	adds	r1, r0, r2
 8006f0c:	1ad2      	subs	r2, r2, r3
 8006f0e:	42d3      	cmn	r3, r2
 8006f10:	d100      	bne.n	8006f14 <memmove+0x28>
 8006f12:	bd10      	pop	{r4, pc}
 8006f14:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006f18:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006f1c:	e7f7      	b.n	8006f0e <memmove+0x22>
	...

08006f20 <_free_r>:
 8006f20:	b538      	push	{r3, r4, r5, lr}
 8006f22:	4605      	mov	r5, r0
 8006f24:	2900      	cmp	r1, #0
 8006f26:	d045      	beq.n	8006fb4 <_free_r+0x94>
 8006f28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f2c:	1f0c      	subs	r4, r1, #4
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	bfb8      	it	lt
 8006f32:	18e4      	addlt	r4, r4, r3
 8006f34:	f000 f8d2 	bl	80070dc <__malloc_lock>
 8006f38:	4a1f      	ldr	r2, [pc, #124]	; (8006fb8 <_free_r+0x98>)
 8006f3a:	6813      	ldr	r3, [r2, #0]
 8006f3c:	4610      	mov	r0, r2
 8006f3e:	b933      	cbnz	r3, 8006f4e <_free_r+0x2e>
 8006f40:	6063      	str	r3, [r4, #4]
 8006f42:	6014      	str	r4, [r2, #0]
 8006f44:	4628      	mov	r0, r5
 8006f46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f4a:	f000 b8c8 	b.w	80070de <__malloc_unlock>
 8006f4e:	42a3      	cmp	r3, r4
 8006f50:	d90c      	bls.n	8006f6c <_free_r+0x4c>
 8006f52:	6821      	ldr	r1, [r4, #0]
 8006f54:	1862      	adds	r2, r4, r1
 8006f56:	4293      	cmp	r3, r2
 8006f58:	bf04      	itt	eq
 8006f5a:	681a      	ldreq	r2, [r3, #0]
 8006f5c:	685b      	ldreq	r3, [r3, #4]
 8006f5e:	6063      	str	r3, [r4, #4]
 8006f60:	bf04      	itt	eq
 8006f62:	1852      	addeq	r2, r2, r1
 8006f64:	6022      	streq	r2, [r4, #0]
 8006f66:	6004      	str	r4, [r0, #0]
 8006f68:	e7ec      	b.n	8006f44 <_free_r+0x24>
 8006f6a:	4613      	mov	r3, r2
 8006f6c:	685a      	ldr	r2, [r3, #4]
 8006f6e:	b10a      	cbz	r2, 8006f74 <_free_r+0x54>
 8006f70:	42a2      	cmp	r2, r4
 8006f72:	d9fa      	bls.n	8006f6a <_free_r+0x4a>
 8006f74:	6819      	ldr	r1, [r3, #0]
 8006f76:	1858      	adds	r0, r3, r1
 8006f78:	42a0      	cmp	r0, r4
 8006f7a:	d10b      	bne.n	8006f94 <_free_r+0x74>
 8006f7c:	6820      	ldr	r0, [r4, #0]
 8006f7e:	4401      	add	r1, r0
 8006f80:	1858      	adds	r0, r3, r1
 8006f82:	4282      	cmp	r2, r0
 8006f84:	6019      	str	r1, [r3, #0]
 8006f86:	d1dd      	bne.n	8006f44 <_free_r+0x24>
 8006f88:	6810      	ldr	r0, [r2, #0]
 8006f8a:	6852      	ldr	r2, [r2, #4]
 8006f8c:	605a      	str	r2, [r3, #4]
 8006f8e:	4401      	add	r1, r0
 8006f90:	6019      	str	r1, [r3, #0]
 8006f92:	e7d7      	b.n	8006f44 <_free_r+0x24>
 8006f94:	d902      	bls.n	8006f9c <_free_r+0x7c>
 8006f96:	230c      	movs	r3, #12
 8006f98:	602b      	str	r3, [r5, #0]
 8006f9a:	e7d3      	b.n	8006f44 <_free_r+0x24>
 8006f9c:	6820      	ldr	r0, [r4, #0]
 8006f9e:	1821      	adds	r1, r4, r0
 8006fa0:	428a      	cmp	r2, r1
 8006fa2:	bf04      	itt	eq
 8006fa4:	6811      	ldreq	r1, [r2, #0]
 8006fa6:	6852      	ldreq	r2, [r2, #4]
 8006fa8:	6062      	str	r2, [r4, #4]
 8006faa:	bf04      	itt	eq
 8006fac:	1809      	addeq	r1, r1, r0
 8006fae:	6021      	streq	r1, [r4, #0]
 8006fb0:	605c      	str	r4, [r3, #4]
 8006fb2:	e7c7      	b.n	8006f44 <_free_r+0x24>
 8006fb4:	bd38      	pop	{r3, r4, r5, pc}
 8006fb6:	bf00      	nop
 8006fb8:	20001080 	.word	0x20001080

08006fbc <_malloc_r>:
 8006fbc:	b570      	push	{r4, r5, r6, lr}
 8006fbe:	1ccd      	adds	r5, r1, #3
 8006fc0:	f025 0503 	bic.w	r5, r5, #3
 8006fc4:	3508      	adds	r5, #8
 8006fc6:	2d0c      	cmp	r5, #12
 8006fc8:	bf38      	it	cc
 8006fca:	250c      	movcc	r5, #12
 8006fcc:	2d00      	cmp	r5, #0
 8006fce:	4606      	mov	r6, r0
 8006fd0:	db01      	blt.n	8006fd6 <_malloc_r+0x1a>
 8006fd2:	42a9      	cmp	r1, r5
 8006fd4:	d903      	bls.n	8006fde <_malloc_r+0x22>
 8006fd6:	230c      	movs	r3, #12
 8006fd8:	6033      	str	r3, [r6, #0]
 8006fda:	2000      	movs	r0, #0
 8006fdc:	bd70      	pop	{r4, r5, r6, pc}
 8006fde:	f000 f87d 	bl	80070dc <__malloc_lock>
 8006fe2:	4a21      	ldr	r2, [pc, #132]	; (8007068 <_malloc_r+0xac>)
 8006fe4:	6814      	ldr	r4, [r2, #0]
 8006fe6:	4621      	mov	r1, r4
 8006fe8:	b991      	cbnz	r1, 8007010 <_malloc_r+0x54>
 8006fea:	4c20      	ldr	r4, [pc, #128]	; (800706c <_malloc_r+0xb0>)
 8006fec:	6823      	ldr	r3, [r4, #0]
 8006fee:	b91b      	cbnz	r3, 8006ff8 <_malloc_r+0x3c>
 8006ff0:	4630      	mov	r0, r6
 8006ff2:	f000 f863 	bl	80070bc <_sbrk_r>
 8006ff6:	6020      	str	r0, [r4, #0]
 8006ff8:	4629      	mov	r1, r5
 8006ffa:	4630      	mov	r0, r6
 8006ffc:	f000 f85e 	bl	80070bc <_sbrk_r>
 8007000:	1c43      	adds	r3, r0, #1
 8007002:	d124      	bne.n	800704e <_malloc_r+0x92>
 8007004:	230c      	movs	r3, #12
 8007006:	6033      	str	r3, [r6, #0]
 8007008:	4630      	mov	r0, r6
 800700a:	f000 f868 	bl	80070de <__malloc_unlock>
 800700e:	e7e4      	b.n	8006fda <_malloc_r+0x1e>
 8007010:	680b      	ldr	r3, [r1, #0]
 8007012:	1b5b      	subs	r3, r3, r5
 8007014:	d418      	bmi.n	8007048 <_malloc_r+0x8c>
 8007016:	2b0b      	cmp	r3, #11
 8007018:	d90f      	bls.n	800703a <_malloc_r+0x7e>
 800701a:	600b      	str	r3, [r1, #0]
 800701c:	50cd      	str	r5, [r1, r3]
 800701e:	18cc      	adds	r4, r1, r3
 8007020:	4630      	mov	r0, r6
 8007022:	f000 f85c 	bl	80070de <__malloc_unlock>
 8007026:	f104 000b 	add.w	r0, r4, #11
 800702a:	1d23      	adds	r3, r4, #4
 800702c:	f020 0007 	bic.w	r0, r0, #7
 8007030:	1ac3      	subs	r3, r0, r3
 8007032:	d0d3      	beq.n	8006fdc <_malloc_r+0x20>
 8007034:	425a      	negs	r2, r3
 8007036:	50e2      	str	r2, [r4, r3]
 8007038:	e7d0      	b.n	8006fdc <_malloc_r+0x20>
 800703a:	428c      	cmp	r4, r1
 800703c:	684b      	ldr	r3, [r1, #4]
 800703e:	bf16      	itet	ne
 8007040:	6063      	strne	r3, [r4, #4]
 8007042:	6013      	streq	r3, [r2, #0]
 8007044:	460c      	movne	r4, r1
 8007046:	e7eb      	b.n	8007020 <_malloc_r+0x64>
 8007048:	460c      	mov	r4, r1
 800704a:	6849      	ldr	r1, [r1, #4]
 800704c:	e7cc      	b.n	8006fe8 <_malloc_r+0x2c>
 800704e:	1cc4      	adds	r4, r0, #3
 8007050:	f024 0403 	bic.w	r4, r4, #3
 8007054:	42a0      	cmp	r0, r4
 8007056:	d005      	beq.n	8007064 <_malloc_r+0xa8>
 8007058:	1a21      	subs	r1, r4, r0
 800705a:	4630      	mov	r0, r6
 800705c:	f000 f82e 	bl	80070bc <_sbrk_r>
 8007060:	3001      	adds	r0, #1
 8007062:	d0cf      	beq.n	8007004 <_malloc_r+0x48>
 8007064:	6025      	str	r5, [r4, #0]
 8007066:	e7db      	b.n	8007020 <_malloc_r+0x64>
 8007068:	20001080 	.word	0x20001080
 800706c:	20001084 	.word	0x20001084

08007070 <_realloc_r>:
 8007070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007072:	4607      	mov	r7, r0
 8007074:	4614      	mov	r4, r2
 8007076:	460e      	mov	r6, r1
 8007078:	b921      	cbnz	r1, 8007084 <_realloc_r+0x14>
 800707a:	4611      	mov	r1, r2
 800707c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007080:	f7ff bf9c 	b.w	8006fbc <_malloc_r>
 8007084:	b922      	cbnz	r2, 8007090 <_realloc_r+0x20>
 8007086:	f7ff ff4b 	bl	8006f20 <_free_r>
 800708a:	4625      	mov	r5, r4
 800708c:	4628      	mov	r0, r5
 800708e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007090:	f000 f826 	bl	80070e0 <_malloc_usable_size_r>
 8007094:	42a0      	cmp	r0, r4
 8007096:	d20f      	bcs.n	80070b8 <_realloc_r+0x48>
 8007098:	4621      	mov	r1, r4
 800709a:	4638      	mov	r0, r7
 800709c:	f7ff ff8e 	bl	8006fbc <_malloc_r>
 80070a0:	4605      	mov	r5, r0
 80070a2:	2800      	cmp	r0, #0
 80070a4:	d0f2      	beq.n	800708c <_realloc_r+0x1c>
 80070a6:	4631      	mov	r1, r6
 80070a8:	4622      	mov	r2, r4
 80070aa:	f7ff fc11 	bl	80068d0 <memcpy>
 80070ae:	4631      	mov	r1, r6
 80070b0:	4638      	mov	r0, r7
 80070b2:	f7ff ff35 	bl	8006f20 <_free_r>
 80070b6:	e7e9      	b.n	800708c <_realloc_r+0x1c>
 80070b8:	4635      	mov	r5, r6
 80070ba:	e7e7      	b.n	800708c <_realloc_r+0x1c>

080070bc <_sbrk_r>:
 80070bc:	b538      	push	{r3, r4, r5, lr}
 80070be:	4c06      	ldr	r4, [pc, #24]	; (80070d8 <_sbrk_r+0x1c>)
 80070c0:	2300      	movs	r3, #0
 80070c2:	4605      	mov	r5, r0
 80070c4:	4608      	mov	r0, r1
 80070c6:	6023      	str	r3, [r4, #0]
 80070c8:	f7ff fb42 	bl	8006750 <_sbrk>
 80070cc:	1c43      	adds	r3, r0, #1
 80070ce:	d102      	bne.n	80070d6 <_sbrk_r+0x1a>
 80070d0:	6823      	ldr	r3, [r4, #0]
 80070d2:	b103      	cbz	r3, 80070d6 <_sbrk_r+0x1a>
 80070d4:	602b      	str	r3, [r5, #0]
 80070d6:	bd38      	pop	{r3, r4, r5, pc}
 80070d8:	2000136c 	.word	0x2000136c

080070dc <__malloc_lock>:
 80070dc:	4770      	bx	lr

080070de <__malloc_unlock>:
 80070de:	4770      	bx	lr

080070e0 <_malloc_usable_size_r>:
 80070e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80070e4:	1f18      	subs	r0, r3, #4
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	bfbc      	itt	lt
 80070ea:	580b      	ldrlt	r3, [r1, r0]
 80070ec:	18c0      	addlt	r0, r0, r3
 80070ee:	4770      	bx	lr

080070f0 <_init>:
 80070f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070f2:	bf00      	nop
 80070f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070f6:	bc08      	pop	{r3}
 80070f8:	469e      	mov	lr, r3
 80070fa:	4770      	bx	lr

080070fc <_fini>:
 80070fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070fe:	bf00      	nop
 8007100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007102:	bc08      	pop	{r3}
 8007104:	469e      	mov	lr, r3
 8007106:	4770      	bx	lr
